/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:21:06 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create tableincompatible subject or connectionrequestinfo in getconnection!", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = "create materialized view%u+^=>yp";
      SQLUtil.isQuery("create materialized view%u+^=>yp");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2207420692767053
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[1] = stringArray0[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[0], true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      stringArray0[2] = "/<N#|q";
      stringArray0[3] = "timestampdi";
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isQuery("timestampdi");
      SQLUtil.fkSpec(dBForeignKeyConstraint1, nameSpec0);
      SQLUtil.innerJoin("_5t/t|+t9&{UA]VC*", stringArray0, "page", "qpKq.xLe7^*", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(stringArray0[0], defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("qpKq.xLe7^*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'qpKq.xLe7^*' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.544002828349642
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SQLUtil.isProcedureCall(":OV3");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">^w,)Bg}0%?v|hIJ";
      stringArray0[1] = ">^w,)Bg}0%?v|hIJ";
      SQLUtil.isDDL("Incompatible subject or ConnectionRequestInfo in getConnection!");
      String[] stringArray1 = new String[4];
      stringArray1[0] = ":OV3";
      stringArray1[3] = ":OV3";
      SQLUtil.normalize(":OV3", false);
      SQLUtil.innerJoin("U}", stringArray1, ">^w,)Bg}0%?v|hIJ", ":OV3", stringArray1);
      SQLUtil.substituteMarkers("Incompatible subject or ConnectionRequestInfo in getConnection!", "YLZ5e~O7skC&", (Object) null);
      SQLUtil.mutatesDataOrStructure("Incompatible subject or ConnectionRequestInfo in getConnection!");
      SQLUtil.removeComments(">^w,)Bg}0%?v|hIJ");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.407114655321993
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = null;
      SQLUtil.leftJoin((String) null, stringArray0, (String) null, "%+O,)\">Z7C@9d51>", stringArray0);
      SQLUtil.innerJoin((String) null, stringArray0, stringArray0[6], "log data", stringArray0);
      SQLUtil.innerJoin(" = ", stringArray0, stringArray0[5], "%+O,)\">Z7C@9d51>", stringArray0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("*=->\"e/(sj@ol|", compositeDBObject0);
      tableContainer0.getTable("log data");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("3X_");
      File file0 = FileUtil.canonicalFile((File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "3X_");
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6654093745944736
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SQLUtil.removeComments("create materialized viewreplacebytes");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.tools.SimpleResultSet$SimpleArray");
      SQLUtil.isProcedureCall(":OV3");
      SQLUtil.isDDL("p>BQ.?g Z,%Ba'f[,H{");
      char char0 = 's';
      Character character0 = new Character('s');
      SQLUtil.renderValue(character0);
      SQLUtil.mutatesDataOrStructure(":OV3");
      SQLUtil.isDDL("org.apache.derby.iapi.types.DateTimeParser");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'s'";
      stringArray0[1] = "org.h2.tools.SimpleResultSet$SimpleArray";
      stringArray0[2] = "'s'";
      stringArray0[3] = "xlA}*;Ibys:b";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "truncate|{|`@*6c2[", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "'s'");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("xlA}*;Ibys:b", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(';');
      stringBuilder2.append(0.0F);
      int int0 = 855;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(855, (-1865));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 855
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.892065631737691
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.isProcedureCall(":OV3");
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ">^w,)Bg}0%?v|hIJ";
      stringArray0[1] = ">^w,)Bg}0%?v|hIJ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(">^w,)Bg}0%?v|hIJ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.isDDL("Incompatible subject or ConnectionRequestInfo in getConnection!");
      String[] stringArray1 = new String[4];
      stringArray1[1] = "";
      stringArray1[3] = ":OV3";
      SQLUtil.normalize(":OV3", false);
      SQLUtil.innerJoin("U}", stringArray1, ">^w,)Bg}0%?v|hIJ", ":OV3", stringArray1);
      SQLUtil.substituteMarkers("Incompatible subject or ConnectionRequestInfo in getConnection!", "YLZ5e~O7skC&", (Object) null);
      SQLUtil.mutatesDataOrStructure("Incompatible subject or ConnectionRequestInfo in getConnection!");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8341980932688027
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SQLUtil.isProcedureCall("8>zYb");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "8>zYb";
      SQLUtil.innerJoin("drop materialized view", stringArray0, "8>zYb", "##UnWindowingColumn", stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "drop materialized view";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray1[1] = "##UnWindowingColumn";
      stringArray1[2] = "##UnWindowingColumn";
      stringArray1[4] = "'bn(:xjWz";
      stringArray1[5] = "org.databene.jdbacl.SQLUtil";
      String string0 = "drop table";
      SQLUtil.join("{q)qt%I", "ME7KI1.)YA7H", stringArray0, "CURRENT TIMSTAMP", "drop table", stringArray1);
      SQLUtil.isDML("x<C@Kb@(o?>P(Hq=F\"");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4046938975427805
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.isProcedureCall("8>zYb");
      String string0 = "PERM&ISSION";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PERM&ISSION";
      SQLUtil.innerJoin("ZM6T!L", stringArray0, "ZM6T!L", "alter materialized view", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "ZM6T!L", true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      stringBuilder1.append(true);
      StringBuilder stringBuilder2 = stringBuilder0.reverse();
      StringBuilder stringBuilder3 = stringBuilder1.append(41);
      stringBuilder3.append((float) 41);
      stringBuilder2.append((String) null);
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'v';
      charArray0[2] = 'd';
      StringBuilder stringBuilder4 = stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder4.insert(41, (Object) dBPrimaryKeyConstraint0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 41
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9714549503478573
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[1] = stringArray0[0];
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesStructure("PERM&ISSION");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure(stringArray0[1]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "^AHDl45E";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TableContainer tableContainer0 = new TableContainer("alter materialized viewincompatible subject or connectionrequestinfo in getconnection!");
      tableContainer0.getTable("alter materialized viewincompatible subject or connectionrequestinfo in getconnection!");
      int int0 = (-1);
      DBDataType dBDataType0 = DBDataType.getInstance((-1), "^AHDl45E");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^AHDl45E", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder("^AHDl45E ^AHDL45E(0,0) NULL");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt((-1));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5848032047689276
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("M.Qxs?,dhkldnA4lX");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "alter sessionperm&ission");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("1YP#a(");
      defaultDBTable0.getCheckConstraints();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("alter sessionperm&ission", false);
      SQLUtil.mutatesStructure("alter sessionperm & ission");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("alter sessionperm & ission");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("^AHDl45E");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";");
      defaultDBTable0.getCheckConstraints();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "hL\"uu]i|";
      defaultDBTable0.getForeignKeyConstraints();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("org.apache.derby.impl.sql.execute.RowChangerImpl");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&2>{|:'X&u+", defaultDBTable1, 45, "drop indexkrop indet:3yz|vgeq<p3+pi>[");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "org.apache.derby.impl.sql.execute.RowChangerImpl");
      defaultDBColumn0.setName((String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.derby.impl.sql.execute.RowChangerImpl");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable1, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean boolean0 = SQLUtil.mutatesStructure("kD/\"*^`KdyWa");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = "\\uIfNJ+z^@O_Bl&";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("l'Jh>wZ");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) string0;
      objectArray0[1] = (Object) nameSpec0;
      boolean boolean1 = true;
      Boolean.logicalOr(true, true);
      mockPrintWriter0.print(299L);
      Boolean.logicalOr(true, true);
      objectArray0[2] = (Object) boolean0;
      objectArray0[3] = (Object) "LJ!#*H(";
      objectArray0[4] = (Object) boolean0;
      objectArray0[5] = (Object) mockPrintWriter0;
      objectArray0[6] = (Object) "Du";
      mockPrintWriter0.format("kD/\"*^`KdyWa", objectArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.216029034732888
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%W/g$L+oi.";
      stringArray0[1] = "4c%W/g$L+oi.";
      stringArray0[2] = "4c%W/g$L+oi.";
      stringArray0[1] = " REFERENCES ";
      String string0 = SQLUtil.join("4c%W/g$L+oi.", " REFERENCES ", stringArray0, " REFERENCES ", "4c%W/g$L+oi.", stringArray0);
      assertEquals("4c%W/g$L+oi. join  REFERENCES  as 4c%W/g$L+oi. on  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES . REFERENCES  = 4c%W/g$L+oi.. REFERENCES  and  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .null = 4c%W/g$L+oi..null", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("4c%W/g$L+oi. = '4c%W/g$L+oi.' AND  REFERENCES  = ' REFERENCES ' AND 4c%W/g$L+oi. = '4c%W/g$L+oi.' AND null = null", string1);
      
      VersionNumber.valueOf("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("42X43");
      defaultDBTable0.getPrimaryKeyConstraint();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string2 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (4c%W/g$L+oi.,  REFERENCES , 4c%W/g$L+oi., )", string2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4823602750500249
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SQLUtil.isProcedureCall("8>zYb");
      String[] stringArray0 = new String[2];
      String string0 = "LJ!#*H(";
      SQLUtil.mutatesStructure("LJ!#*H(");
      String string1 = "\\uIfNJ+z^@O_Bl&";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(string1);
      mockPrintWriter0.format("8>zYb", (Object[]) stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("execute<n#|q", true);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("defaultInfo");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8>zYb", dBSchema0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("defaultInfo", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6567324865575537
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.isProcedureCall(":OV3");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDDL(":OV3");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ":OV3";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = ":OV3";
      SQLUtil.innerJoin(":OV3", stringArray0, "", ":OV3", stringArray0);
      SQLUtil.substituteMarkers("", "YLZ5eS~7s)C=", (Object) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "[+t(B.Y]dPSP?.P !X", true, stringArray0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '' has no foreign key with the columns (:OV3, , , :OV3)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join(" RcI3", ", statistics start/stop selectivity is : ", (String[]) null, ", statistics start/stop selectivity is : ", "J[", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5030779091625366
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      String string0 = "selectmn!";
      stringArray0[0] = "selectmn!";
      stringArray0[1] = "selectmn!";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("selectmn!", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      String string1 = "/<N#|q";
      stringArray0[2] = "/<N#|q";
      stringArray0[3] = "timestampdi";
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBSchema dBSchema0 = new DBSchema("selectmn!");
      dBSchema0.getTable("selectmn!");
      DBDataType dBDataType0 = null;
      Integer integer0 = null;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isQuery("timestampdi");
      SQLUtil.fkSpec(dBForeignKeyConstraint1, nameSpec0);
      SQLUtil.typeAndName(dBForeignKeyConstraint1);
      String string2 = "page";
      SQLUtil.innerJoin("_5t/t|+t9&{UA]VC*", stringArray0, "page", "qpKq.xLe7^*", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("selectmn!", defaultDBTable0, (DBDataType) null);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("qpKq.xLe7^*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'qpKq.xLe7^*' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6834439306980458
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SQLUtil.isDML("8>zyb");
      SQLUtil.isProcedureCall("<");
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "oASbK";
      stringArray0[1] = "create unique indexdrop index:3yz|vge6<p3+pi>[";
      stringArray0[2] = "oASbK";
      stringArray0[3] = "oASbK";
      stringArray0[5] = "create unique indexdrop index:3yz|vge6<p3+pi>[";
      stringArray0[6] = "create unique indexdrop index:3yz|vge6<p3+pi>[";
      stringArray0[7] = "y";
      stringArray0[8] = "8>zyb";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "oASbK", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("8>zyb", false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("create unique indexdrop index:3yz|vge6<p3+pi>[", defaultDBTable0, (-1600), "8>zyb");
      SQLUtil.renderColumn(defaultDBColumn0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "<";
      stringArray1[1] = "create unique indexdrop index:3yz|vge6<p3+pi>[ 8>ZYB NULL";
      stringArray1[2] = "oASbK";
      stringArray1[3] = "oASbK";
      stringArray1[4] = "y";
      stringArray1[5] = "oASbK";
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      String[] stringArray2 = new String[3];
      stringArray2[0] = "< = 'oASbK' AND create unique indexdrop index:3yz|vge6<p3+pi>[ 8>ZYB NULL = 'create unique indexdrop index:3yz|vge6<p3+pi>[' AND oASbK = 'oASbK' AND oASbK = 'oASbK' AND y = null AND oASbK = 'create unique indexdrop index:3yz|vge6<p3+pi>['";
      stringArray2[1] = "create unique indexdrop index:3yz|vge6<p3+pi>[";
      stringArray2[2] = "8>zyb";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("oASbK", stringArray1, "oASbK", "create unique indexdrop index:3yz|vge6<p3+pi>[", stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8212565066006587
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SQLUtil.isProcedureCall("8>zYb");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PERM&ISSION";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("MBlFlxbo54L9", defaultDBTable0, 4, "PERM&ISSION");
      String string0 = "incompatible subject o";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("(j&'dyytG `9 %Q", stringArray0, "incompatible subject o", "EY`KB:^$7k'+", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.131535668581036
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.isDML("PAGE");
      SQLUtil.isProcedureCall("PAGE");
      String string0 = ";";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(";");
      String string1 = "FHGG@XKt46RdU$5G)HZ";
      String[] stringArray0 = new String[8];
      stringArray0[1] = "PAGE";
      SQLUtil.isDDL("PAGE");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers(stringArray0[0], ">VI@e|3&4M[0!{nX^2L", "PfP _Z!PI;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.8194833693061807
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "M.Qxs?,dhkldnA4lX";
      DBSchema dBSchema0 = new DBSchema("M.Qxs?,dhkldnA4lX");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("defaultInfo", dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "incomp";
      stringArray0[1] = "defaultInfo";
      stringArray0[2] = "M.Qxs?,dhkldnA4lX";
      stringArray0[3] = "M.Qxs?,dhkldnA4lX";
      stringArray0[4] = "defaultInfo";
      stringArray0[5] = "defaultInfo";
      defaultDBTable0.equals("defaultInfo");
      stringArray0[6] = "M.Qxs?,dhkldnA4lX";
      stringArray0[8] = "M.Qxs?,dhkldnA4lX";
      SQLUtil.renderColumnListWithTableName("M.Qxs?,dhkldnA4lX", stringArray0);
      defaultDBTable0.setName("jH");
      SQLUtil.normalize("X:rsHiH*U\u0004", true);
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'jH' has no foreign key with the columns (incomp, defaultInfo, M.Qxs?,dhkldnA4lX, M.Qxs?,dhkldnA4lX, defaultInfo, defaultInfo, M.Qxs?,dhkldnA4lX, , M.Qxs?,dhkldnA4lX)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&qf%yXCHUE%A/3NFk6");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&qf%yXCHUE%A/3NFk6", defaultDBTable0, (-140), "oK2rZ4|=C)aZ6`y,");
      defaultDBColumn0.setNullable(true);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&qf%yXCHUE%A/3NFk6";
      stringArray0[1] = "_M89</Ch";
      stringArray0[2] = "&qf%yXCHUE%A/3NFk6";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5653948371180277
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "M.Qxs?,dhkldnA4lX";
      SQLUtil.isDML("M.Qxs?,dhkldnA4lX");
      DBSchema dBSchema0 = new DBSchema("M.Qxs?,dhkldnA4lX");
      String[] stringArray0 = new String[9];
      String string1 = "incomp";
      stringArray0[0] = "incomp";
      stringArray0[1] = "M.Qxs?,dhkldnA4lX";
      stringArray0[3] = "M.Qxs?,dhkldnA4lX";
      String string2 = null;
      String[] stringArray1 = new String[1];
      stringArray1[0] = null;
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(stringArray0[2], stringArray0, (String) null, "incomp", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "_M89</Ch";
      String string1 = "&qf%yXCHUE%A/3NFk6";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&qf%yXCHUE%A/3NFk6");
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.7932765402874764
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CLOBTRUNCATE";
      stringArray0[1] = "CLOBTRUNCATE";
      stringArray0[2] = " AND ";
      stringArray0[3] = " AND ";
      stringArray0[4] = "wZBd<Wu7l";
      SQLUtil.join(" AND ", "CLOBTRUNCATE", stringArray0, "CLOBTRUNCATE", " AND ", stringArray0);
      SQLUtil.innerJoin("Vg&0Yo]Zr?A]c", stringArray0, " AND ", "wZBd<Wu7l", stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "create unique index";
      stringArray1[1] = "create unique index";
      stringArray1[2] = " AND  as wZBd<Wu7l on Vg&0Yo]Zr?A]c.CLOBTRUNCATE = wZBd<Wu7l.CLOBTRUNCATE and Vg&0Yo]Zr?A]c.CLOBTRUNCATE = wZBd<Wu7l.CLOBTRUNCATE and Vg&0Yo]Zr?A]c. AND  = wZBd<Wu7l. AND  and Vg&0Yo]Zr?A]c. AND  = wZBd<Wu7l. AND  and Vg&0Yo]Zr?A]c.wZBd<Wu7l = wZBd<Wu7l.wZBd<Wu7l";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "create unique index", stringArray0, "wZBd<Wu7l", "execpage", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLUtil.isProcedureCall("8>zYb");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PERM&ISSION";
      stringArray0[1] = "yJ(P`f+}/e~\"iY\"{ -G";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("PERM&ISSION", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4405191370110013
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.removeComments("creae materialized viewreplacebytes");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("creae materialized viewreplacebytes");
      SQLUtil.isProcedureCall(":OV3");
      SQLUtil sQLUtil0 = new SQLUtil();
      NameSpec nameSpec0 = NameSpec.NEVER;
      File file0 = FileUtil.canonicalFile("yTi^Fx$");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Locale locale0 = Locale.PRC;
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) nameSpec0;
      objectArray0[2] = (Object) sQLUtil0;
      objectArray0[3] = (Object) "creae materialized viewreplacebytes";
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "DATE", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.isDDL("Incompatible subject or ConnectionRequestInfo in getConnection!");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ":OV3";
      stringArray0[1] = "creae materialized viewreplacebytes";
      stringArray0[2] = "creae materialized viewreplacebytes";
      stringArray0[3] = ":OV3";
      SQLUtil.innerJoin(":OV3", stringArray0, "creae materialized viewreplacebytes", ":OV3", stringArray0);
      String string0 = "%u+^=>YP";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%u+^=>YP", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      int int0 = 41;
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      // Undeclared exception!
      try { 
        stringBuilder2.delete((-819539312), 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -819539312
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7118955349743286
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SQLUtil.removeComments("create materialized viewreplacebytes");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewreplacebytes");
      SQLUtil.isProcedureCall(":OV3");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDDL("Incompatible subject or ConnectionRequestInfo in getConnection!");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ":OV3";
      stringArray0[1] = "create materialized viewreplacebytes";
      stringArray0[2] = "create materialized viewreplacebytes";
      stringArray0[3] = ":OV3";
      SQLUtil.innerJoin(":OV3", stringArray0, "create materialized viewreplacebytes", ":OV3", stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%u+^=>YP", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append(false);
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append((-2718.8F));
      StringBuilder stringBuilder4 = stringBuilder3.append("create materialized viewreplacebytes");
      char[] charArray0 = new char[0];
      StringBuilder stringBuilder5 = stringBuilder4.append(charArray0);
      stringBuilder5.insert(41, (Object) null);
      assertEquals("eslaf-2718.8create materialized viewreplanullcebytes", stringBuilder1.toString());
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.581215534014135
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("8>zYb");
      String[] stringArray0 = new String[2];
      Boolean boolean1 = SQLUtil.mutatesStructure("LJ!#*H(");
      assertTrue(boolean1.equals((Object)boolean0));
      
      SQLUtil.renderColumnListWithTableName("5Xm^;lr*[&", stringArray0);
      boolean boolean2 = SQLUtil.isProcedureCall("execute<n#|q");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(426, "5Xm^;lr*[&");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("exec", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.getNotNullConstraint();
      SQLUtil.renderValue((Object) null);
      String string0 = SQLUtil.renderColumnListWithTableName("A!) :y,tHH", stringArray0);
      assertEquals("A!) :y,tHH.null, A!) :y,tHH.null", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("null = null AND null = null", string1);
      
      boolean boolean3 = SQLUtil.isDML("drop indexincompatible subject or connectionrequestinfo in getconnection!");
      assertFalse(boolean3 == boolean2);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, )", string2);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.576869397469737
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SYSCS_UTIL", compositeDBObject0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("constraint");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "java.lang.Object@7bed4cae", false, stringArray0);
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "SYSCS_UTIL");
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "java.lang.Object@7bed4cae");
      StringBuilder stringBuilder2 = new StringBuilder("incompatible subject o");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      SQLUtil.removeComments("u|Be|\"`2M[, S");
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.943580976823868
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.removeComments("create materialized viewreplacebytes");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized viewreplacebytes");
      boolean boolean0 = SQLUtil.isProcedureCall("create materialized viewreplacebytes");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDDL("Incompatible subject or ConnectionRequestInfo in getConnection!");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create materialized viewreplacebytes";
      stringArray0[1] = "create materialized viewreplacebytes";
      stringArray0[2] = "create materialized viewreplacebytes";
      stringArray0[3] = "create materialized viewreplacebytes";
      String string0 = SQLUtil.innerJoin("create materialized viewreplacebytes", stringArray0, "create materialized viewreplacebytes", "create materialized viewreplacebytes", stringArray0);
      assertEquals("create materialized viewreplacebytes as create materialized viewreplacebytes on create materialized viewreplacebytes.create materialized viewreplacebytes = create materialized viewreplacebytes.create materialized viewreplacebytes and create materialized viewreplacebytes.create materialized viewreplacebytes = create materialized viewreplacebytes.create materialized viewreplacebytes and create materialized viewreplacebytes.create materialized viewreplacebytes = create materialized viewreplacebytes.create materialized viewreplacebytes and create materialized viewreplacebytes.create materialized viewreplacebytes = create materialized viewreplacebytes.create materialized viewreplacebytes", string0);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "%u+^=>YP", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("create materialized viewreplacebytes");
      StringBuilder stringBuilder2 = stringBuilder0.append(false);
      StringBuilder stringBuilder3 = stringBuilder2.reverse();
      StringBuilder stringBuilder4 = stringBuilder3.append((-2718.8F));
      StringBuilder stringBuilder5 = stringBuilder4.append("create materialized viewreplacebytes");
      char[] charArray0 = new char[0];
      stringBuilder3.chars();
      StringBuilder stringBuilder6 = stringBuilder5.append(charArray0);
      stringBuilder6.insert(41, (Object) stringBuilder4);
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("select");
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      String string1 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT %u+^=>YP ", string1);
      
      Character character0 = new Character('');
      String string2 = SQLUtil.substituteMarkers("renameinkompatible subject or conne\tionrequestqnfo in getconnection!", "create materialized viewreplacebytes", character0);
      assertEquals("renameinkompatible subject or conne\tionrequestqnfo in getconnection!", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9244668248137942
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("8>zYb");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PERM&ISSION";
      stringArray0[1] = "yJ(P`f+}/e~\"iY\"{ -G";
      String string0 = SQLUtil.normalize("yJ(P`f+}/e~\"iY\"{ -G", false);
      assertEquals("yJ (P ` f + } / e ~ \"iY\" { - G", string0);
      
      Boolean boolean1 = SQLUtil.mutatesStructure("PERM&ISSION");
      assertTrue(boolean1.equals((Object)boolean0));
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yJ(P`f+}/e~\"iY\"{ -G");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "1", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("executeperm&ission", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("yJ (P ` f + } / e ~ \"iY\" { - G", false, dBTable0, stringArray0, dBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"yJ (P ` f + } / e ~ \"iY\" { - G\" FOREIGN KEY (PERM&ISSION, yJ(P`f+}/e~\"iY\"{ -G, , , , , , ) REFERENCES yJ(P`f+}/e~\"iY\"{ -G(PERM&ISSION, yJ(P`f+}/e~\"iY\"{ -G, , , , , , )", string1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.430204734868433
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      boolean boolean0 = SQLUtil.isProcedureCall(":OV3");
      boolean boolean1 = SQLUtil.isDML("");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = SQLUtil.renderValue("");
      assertEquals("''", string0);
      
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("truncate|{|`@*6c2[");
      assertFalse(boolean2.equals((Object)boolean0));
      assertNotNull(boolean2);
      
      Boolean boolean3 = SQLUtil.mutatesStructure("/~(T[Y0D+~78@BXOw");
      assertTrue(boolean3.equals((Object)boolean1));
      
      Boolean.valueOf("/~(T[Y0D+~78@BXOw");
      boolean boolean4 = SQLUtil.isQuery("Xlv?IsxiMwJ0");
      assertFalse(boolean4);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6023483680059514
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SQLUtil.removeComments("create materialized viewreplacebytes");
      boolean boolean0 = SQLUtil.isProcedureCall("C7*%O&$_@wD)}BH ");
      Boolean boolean1 = new Boolean(false);
      String string0 = SQLUtil.normalize("yJ(P`f+}/e~\"iY\"{ -G", false);
      assertEquals("yJ (P ` f + } / e ~ \"iY\" { - G", string0);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("create table");
      assertFalse(boolean2.equals((Object)boolean0));
      
      Boolean boolean3 = SQLUtil.mutatesDataOrStructure("create materialized viewreplacebytes");
      assertNotNull(boolean3);
      assertTrue(boolean3);
      
      boolean boolean4 = SQLUtil.isDDL("CT6cw]oM");
      assertFalse(boolean4);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0499251260871434
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "selectmn!";
      stringArray0[1] = "selectmn!";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("selectmn!", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT selectmn! FOREIGN KEY (selectmn!, selectmn!, , ) REFERENCES null(selectmn!, selectmn!, , )", string0);
      
      defaultDBTable0.isIdentical(dBForeignKeyConstraint0);
      stringArray0[2] = "/<N#|q";
      stringArray0[3] = "timestampdi";
      defaultDBTable0.getForeignKeyConstraint(stringArray0);
      DBSchema dBSchema0 = new DBSchema("selectmn!");
      dBSchema0.getTable("selectmn!");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "org.databene.jdbacl.SQLUtil";
      stringArray1[1] = "/<N#|q";
      stringArray1[2] = "selectmn!";
      stringArray1[3] = "CONSTRAINT selectmn! FOREIGN KEY (selectmn!, selectmn!, , ) REFERENCES null(selectmn!, selectmn!, , )";
      stringArray1[4] = "";
      stringArray1[5] = "/<N#|q";
      stringArray1[6] = "/<N#|q";
      stringArray1[7] = null;
      stringArray1[8] = "org.databene.jdbacl.SQLUtil";
      String string1 = SQLUtil.join((String) null, "`fQ/", stringArray0, "timestampdi", "selectmn!", stringArray1);
      assertEquals("timestampdi as selectmn! on `fQ/.selectmn! = selectmn!.org.databene.jdbacl.SQLUtil and `fQ/.selectmn! = selectmn!./<N#|q and `fQ/./<N#|q = selectmn!.selectmn! and `fQ/.timestampdi = selectmn!.CONSTRAINT selectmn! FOREIGN KEY (selectmn!, selectmn!, , ) REFERENCES null(selectmn!, selectmn!, , )", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "5Wgw2@18lWLtG%~C?s";
      stringArray0[1] = "5Wgw2@18lWLtG%~C?s";
      stringArray0[2] = "5Wgw2@18lWLtG%~C?s";
      stringArray0[3] = "5Wgw2@18lWLtG%~C?s";
      stringArray0[4] = "5Wgw2@18lWLtG%~C?s";
      stringArray0[5] = "5Wgw2@18lWLtG%~C?s";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("5Wgw2@18lWLtG%~C?s", (String[]) null, "5Wgw2@18lWLtG%~C?s", "5Wgw2@18lWLtG%~C?s", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = new Boolean("renamecreate unique index8>zyb");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{L#*)YADYC$z#Q9*";
      stringArray0[1] = "]r`^gA.LKWC\"G";
      stringArray0[2] = "renamecreate unique index8>zyb";
      stringArray0[3] = "";
      stringArray0[4] = "renamecreate unique index8>zyb";
      stringArray0[5] = "renamecreate unique index8>zyb";
      stringArray0[6] = "renamecreate unique index8>zyb";
      stringArray0[7] = "";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "renamecreate unique index8>zyb";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "renamecreate unique index8>zyb";
      objectArray0[3] = (Object) "{L#*)YADYC$z#Q9*";
      objectArray0[4] = (Object) sQLUtil0;
      objectArray0[5] = (Object) "renamecreate unique index8>zyb";
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("(kQd");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.3771854084932635
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%+W/g$L+oi.";
      stringArray0[1] = "4c%+W/g$L+oi.";
      stringArray0[2] = "4c%+W/g$L+oi.";
      stringArray0[3] = " REFERENCES ";
      String string0 = SQLUtil.join("4c%+W/g$L+oi.", " REFERENCES ", stringArray0, "4c%+W/g$L+oi.", "4c%+W/g$L+oi.", stringArray0);
      assertEquals("4c%+W/g$L+oi. join 4c%+W/g$L+oi. as 4c%+W/g$L+oi. on  REFERENCES .4c%+W/g$L+oi. = 4c%+W/g$L+oi..4c%+W/g$L+oi. and  REFERENCES .4c%+W/g$L+oi. = 4c%+W/g$L+oi..4c%+W/g$L+oi. and  REFERENCES .4c%+W/g$L+oi. = 4c%+W/g$L+oi..4c%+W/g$L+oi. and  REFERENCES . REFERENCES  = 4c%+W/g$L+oi.. REFERENCES ", string0);
      
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("4c%+W/g$L+oi. = '4c%+W/g$L+oi.' AND 4c%+W/g$L+oi. = '4c%+W/g$L+oi.' AND 4c%+W/g$L+oi. = '4c%+W/g$L+oi.' AND  REFERENCES  = ' REFERENCES '", string1);
      
      DBSchema dBSchema0 = new DBSchema(")jR.|#9");
      String string2 = SQLUtil.normalize("4c%+W/g$L+oi.", true);
      assertEquals("4c % + W / g $ L + oi.", string2);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9313637081915067
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLUtil.isProcedureCall("8>zYb");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("0J_?[z8u.Tj_=wK@", false);
      String string0 = "l\\7~n&@10Qyi%-)*O";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("l\u0007~n&@10Qyi%-)*O", (DBSchema) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getColumn("COMMIT PREPARED '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'COMMIT PREPARED '' not found in table 'l\u0007~n&@10Qyi%-)*O'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7724394836300639
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "selectmn!";
      stringArray0[1] = "selectmn!";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("selectmn!", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      Boolean boolean0 = new Boolean(true);
      SQLUtil.normalize("CONSTRAINT selectmn! FOREIGN KEY (selectmn!, selectmn!, , ) REFERENCES null(selectmn!, selectmn!, , )", true);
      SQLUtil.mutatesStructure("create unique index");
      // Undeclared exception!
      try { 
        dBForeignKeyConstraint0.columnReferencedBy("rename", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // foreign key 'selectmn!' does not have a column 'rename'
         //
         verifyException("org.databene.jdbacl.model.DBForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0995860941566522
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      SQLUtil.addOptionalCondition("", stringBuilder1);
      String string0 = "]<J>@LXm==W'3?qN2";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]<J>@LXm==W'3?qN2";
      SQLUtil.renderColumnListWithTableName(",", stringArray0);
      SQLUtil.normalize("]<J>@LXm==W'3?qN2", true);
      boolean boolean0 = true;
      VersionNumber versionNumber0 = VersionNumber.valueOf("null");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase(">5e", "] < J > @ LXm = = W '3?qN2'", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getTable("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.812523309532779
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "incompatible subject or ";
      stringArray0[1] = "PAGE";
      String string0 = SQLUtil.join("incompatible subject or ", "PAGE", stringArray0, "incompatible subject or ", "PAGE", stringArray0);
      assertEquals("incompatible subject or  join incompatible subject or  as PAGE on PAGE.incompatible subject or  = PAGE.incompatible subject or  and PAGE.PAGE = PAGE.PAGE", string0);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("~lZG9[}lMi2fZu+=", true, "43X64.U", "execute");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ~lZG9[}lMi2fZu+= ", stringBuilder0.toString());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SQLUtil.renderValue("(kQd");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(kQd");
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("JR@mmz!{9eo ", "create unique index8>zyb", versionNumber0);
      DBSchema dBSchema0 = new DBSchema("'(kQd'");
      DBPackage dBPackage0 = new DBPackage("`UOLo+dONG&", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("5CJq0(</,Jx*a0 !", defaultDBTable0, 624, "C.3_=*e3Glw+0");
      assertNull(defaultDBColumn0.getDoc());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory";
      SQLUtil.isDDL("org.apache.derby.impl.sql.catalog.SYSKEYSRowFactory");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("drop index:3yz|vge6<p3+pi>[", (String[]) null, "insert8>zyb", "create unique index8>zyb", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4295203737091735
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("RETURNS_RESULT SMALLINT");
      SQLUtil.isDML("selectyj(p`f+}/e~\"iy\"{ -g");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress(",x2goq", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLUtil sQLUtil0 = new SQLUtil();
      Integer integer0 = new Integer(545);
      SQLUtil.substituteMarkers(":OV3", "selectyj(p`f+}/e~\"iy\"{ -g", integer0);
      SQLUtil.isDDL("*)`*[4");
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.isDDL(":OV3");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getCheckConstraints();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "8>zYb";
      stringArray0[1] = "&SZ#MX]uJ";
      stringArray0[2] = "8>zYb";
      stringArray0[3] = "CLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&SZ#MX]uJ", true, stringArray0);
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CLOB", false, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("YfA4WGDy1NQy", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex1.getTable();
      defaultDBTable0.getForeignKeyConstraints();
      dBUniqueIndex1.setOwner(dBTable0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("YfA4WGDy1NQy", dBTable0, 45, "perm&ission");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("YfA4WGDy1NQy PERM&ISSION NULL", string0);
      
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("PERM&ISSION", string1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("java.lang.Object@131d361f", defaultDBTable0, 624, "5CJq0(</,Jx*a0 !");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: 5CJq0(</,Jx*a0 !
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[12];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      TableContainer tableContainer0 = new TableContainer("", defaultDBTable0);
      tableContainer0.getSchema();
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.94962142049769
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.mutatesStructure("(");
      SQLUtil sQLUtil0 = new SQLUtil();
      boolean boolean0 = SQLUtil.isDDL("drop index");
      Boolean boolean1 = SQLUtil.mutatesStructure("DN=pvMs");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      Boolean boolean0 = new Boolean("renamecreate unique index8>zyb");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "renamecreate unique index8>zyb";
      char[] charArray0 = new char[4];
      charArray0[0] = 'z';
      charArray0[1] = 'd';
      charArray0[2] = '\"';
      charArray0[3] = 'N';
      Boolean boolean1 = SQLUtil.mutatesStructure("renamecreate unique index8>zyb");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("Got socket");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("Got socket");
      assertFalse(boolean1);
      
      SQLUtil sQLUtil0 = new SQLUtil();
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("drop index:3yz|vge6<p3+pi>[", compositeDBObject0);
      tableContainer0.getSchema();
      DBSequence dBSequence0 = new DBSequence(" ADD ", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals(" ADD ", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8678667772658506
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("8>zYb");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "PERM&ISSION";
      Boolean boolean1 = new Boolean(false);
      stringArray0[1] = "yJ(P`f+}/e~\"iY\"{ -G";
      String string0 = SQLUtil.normalize("yJ(P`f+}/e~\"iY\"{ -G", false);
      assertEquals("yJ (P ` f + } / e ~ \"iY\" { - G", string0);
      
      SQLUtil.mutatesStructure("PERM&ISSION");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("yJ(P`f+}/e~\"iY\"{ -G");
      assertNull(boolean2);
      
      boolean boolean3 = SQLUtil.isQuery("Xlv?IsxiMwJ0");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1759944609396094
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLUtil.mutatesStructure("8>zYb");
      SQLUtil.isProcedureCall("renamekd/\"*^`kdywa");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isDDL("");
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      jdbcClob jdbcClob0 = new jdbcClob("(kQd");
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      String[] stringArray0 = new String[6];
      reader0.read();
      stringArray0[0] = " L~x&qMTq.BsS::QO{";
      stringArray0[1] = "Ho58ia";
      stringArray0[3] = "(kQd";
      stringArray0[3] = "(kQd";
      stringArray0[4] = null;
      stringArray0[5] = "(kQd";
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("-W=", true, "-W=", "8>zYb");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&qf%yXCHUE%A/3NFk6");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&qf%yXCHUE%A/3NFk6", defaultDBTable0, (-140), "oK2rZ4|=C)aZ6`y,");
      defaultDBColumn0.setNullable(true);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setSize((Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&qf%yXCHUE%A/3NFk6";
      stringArray0[1] = "_M89</Ch";
      stringArray0[2] = "&qf%yXCHUE%A/3NFk6";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      Vector<Object> vector0 = new Vector<Object>(127);
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("&qf%yXCHUE%A/3NFk6", "/QZ^3+N", versionNumber0);
      DBSchema dBSchema0 = new DBSchema((String) null);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.544943664690598
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("8>zYb");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "PERM&ISSION";
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure(".k;\"T+IK9");
      assertNull(boolean1);
      
      SQLUtil.isQuery("80000029-00d0-fd77-3ed8-000a0a0b1900");
      String string0 = SQLUtil.substituteMarkers("80000029-00d0-fd77-3ed8-000a0a0b1900", "PERM&ISSION", "8>zYb");
      assertEquals("80000029-00d0-fd77-3ed8-000a0a0b1900", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "PAGE";
      String string1 = null;
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("PAGE", false, "", "Bk$uu");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLUtil.isDDL("PAGE");
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil sQLUtil1 = new SQLUtil();
      boolean boolean0 = SQLUtil.isDDL("TIMESTAMPDIFF");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("SYSCS_UTIL", compositeDBObject0);
      tableContainer0.getSchema();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.renderColumnNames((String[]) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.025154310075002
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&qf%yXCHUE%A/3NFk6");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("&qf%yXCHUE%A/3NFk6", defaultDBTable0, (-140), "oK2rZ4|=C)aZ6`y,");
      defaultDBColumn0.setNullable(true);
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      defaultDBColumn0.setSize((Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "&qf%yXCHUE%A/3NFk6";
      stringArray0[1] = "_M89</Ch";
      stringArray0[2] = "&qf%yXCHUE%A/3NFk6";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "&qf%yXCHUE%A/3NFk6", true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT &qf%yXCHUE%A/3NFk6 PRIMARY KEY (&qf%yXCHUE%A/3NFk6, _M89</Ch, &qf%yXCHUE%A/3NFk6)", string0);
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT &qf%yXCHUE%A/3NFk6 PRIMARY KEY (&qf%yXCHUE%A/3NFk6, _M89</Ch, &qf%yXCHUE%A/3NFk6)", string1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SQLUtil.removeComments("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[1] = "";
      stringArray0[4] = "";
      stringArray0[7] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "7", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = new DBPrimaryKeyConstraint(defaultDBTable0, "updateString(", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", dBTable0, 329, "create materialized view");
      assertEquals("column", defaultDBColumn0.getObjectType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      boolean boolean0 = true;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "U!q:xye'#l@J%(=", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("<", true, dBUniqueConstraint0);
      dBUniqueIndex0.setOwner(defaultDBTable0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(dBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.join("rename:ov3", " REFERENCES ", stringArray0, "drop materialized view", (String) null, stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("/**/");
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "", versionNumber0);
      DBSchema dBSchema0 = new DBSchema("8>zYb");
      assertNull(dBSchema0.getDoc());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "drop index";
      stringArray0[1] = "drop index";
      stringArray0[2] = "drop index";
      stringArray0[3] = "drop index";
      SQLUtil.innerJoin("drop index", stringArray0, "drop index", "drop index", stringArray0);
      String string0 = "]xWbloWDE;Erkb";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("drop index", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      stringBuilder0.codePoints();
      stringBuilder0.appendCodePoint(1006);
      stringBuilder0.appendCodePoint(543);
      stringBuilder0.append(1357.6297132);
      SQLUtil.addRequiredCondition("truncate", stringBuilder0);
      assertEquals("\u03EE\u021F1357.6297132 and truncate", stringBuilder0.toString());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "80000000-00d3-e222-a373-000a0a0b1900";
      stringArray0[1] = "80000000-00d3-e222-a373-000a0a0b1900";
      stringArray0[2] = "80000000-00d3-e222-a373-000a0a0b1900";
      stringArray0[3] = "80000000-00d3-e222-a373-000a0a0b1900";
      stringArray0[4] = "80000000-00d3-e222-a373-000a0a0b1900";
      stringArray0[5] = "80000000-00d3-e222-a373-000a0a0b1900";
      stringArray0[6] = "80000000-00d3-e222-a373-000a0a0b1900";
      stringArray0[7] = "80000000-00d3-e222-a373-000a0a0b1900";
      String string0 = SQLUtil.leftJoin("80000000-00d3-e222-a373-000a0a0b1900", stringArray0, "=u#\"tDq$JNa~T^iq", "0:3}qJhit-a (Jv?", stringArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
