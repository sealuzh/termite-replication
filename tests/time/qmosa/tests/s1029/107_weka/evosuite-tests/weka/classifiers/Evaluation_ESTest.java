/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:28:20 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.Reader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Properties;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.REPTree;
import weka.clusterers.FilteredClusterer;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".bsi", instances0, protectedProperties0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2984646548607914
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.weightedAreaUnderROC();
      Attribute attribute0 = new Attribute("classifiersTipText", instances0, protectedProperties0);
      CostMatrix costMatrix0 = new CostMatrix(4);
      Evaluation evaluation2 = new Evaluation(instances0);
      char[] charArray0 = new char[3];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      evaluation0.num2ShortID(3, charArray0, 5);
      evaluation1.kappa();
      Instance instance0 = null;
      try { 
        evaluation2.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9314987162389943
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MatlabLoader matlabLoader1 = new MatlabLoader();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(4);
      evaluation0.recall(100);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.areaUnderROC((-120));
      evaluation2.trueNegativeRate(0);
      Evaluation evaluation3 = new Evaluation(instances0);
      assertEquals(0.0, evaluation3.SFPriorEntropy(), 0.01);
      
      evaluation3.m_ComplexityStatisticsAvailable = false;
      Object object0 = new Object();
      MatlabLoader matlabLoader2 = new MatlabLoader();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      evaluation4.falseNegativeRate(8);
      evaluation1.areaUnderROC(116);
      evaluation2.weightedTruePositiveRate();
      evaluation0.toSummaryString(false);
      evaluation3.SFMeanSchemeEntropy();
      assertEquals(0.0, evaluation3.unclassified(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8381321377776465
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.falseNegativeRate(106);
      double double1 = evaluation0.recall(100);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation1.m_MinTarget;
      double double3 = evaluation0.trueNegativeRate((-120));
      assertEquals(double3, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      double double4 = evaluation0.falseNegativeRate(100);
      assertEquals(0.0, double4, 0.01);
      
      evaluation0.areaUnderROC((-1855));
      String string0 = evaluation1.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double5 = evaluation0.SFMeanSchemeEntropy();
      assertNotEquals(double5, double0, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.859517515876184
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2191.1367918498);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2191.1367918498));
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedFMeasure();
      evaluation0.rootRelativeSquaredError();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Instance instance0 = null;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(1861.30547);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1861
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (-2193.522562268989);
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = 2949.5621699753274;
      doubleArray0[8] = (double) 6;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 6, (-2.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9080871953156593
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      lWL0.listOptions();
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)1;
      double double0 = evaluation0.falseNegativeRate((byte)1);
      double double1 = evaluation0.recall(2);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.areaUnderROC((byte) (-120));
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.trueNegativeRate((byte) (-120));
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation3 = new Evaluation(instances1);
      double double2 = evaluation3.KBRelativeInformation();
      assertEquals(0.0, double2, 0.01);
      assertEquals(Double.NaN, evaluation3.weightedTrueNegativeRate(), 0.01);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      evaluation1.weightedTrueNegativeRate();
      double double3 = evaluation2.kappa();
      assertEquals(1.0, double3, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.205091089269522
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[18];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LWL lWL1 = new LWL();
      lWL1.getClassifier();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte)10;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1;
      doubleArray0[2] = (double) (byte)10;
      doubleArray0[4] = (double) (byte)10;
      doubleArray0[5] = (double) (byte)1;
      evaluation0.toClassDetailsString("]5)|ytyx");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      evaluation0.setNumericPriorsFromBuffer();
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.evaluateModelOnce((Classifier) naiveBayesMultinomial0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0976990859074904
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2191.1367918498);
      evaluation0.m_Correct = (-2191.1367918498);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2191.1367918498));
      LWL lWL0 = new LWL();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.KBRelativeInformation();
      evaluation0.weightedFMeasure();
      Random.setNextRandom(0);
      evaluation0.rootRelativeSquaredError();
      evaluation0.trueNegativeRate(2);
      Instances instances1 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      instances1.remove((Object) textDirectoryLoader0);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation1.weightedFalseNegativeRate();
      evaluation1.numFalsePositives(2);
      evaluation0.pctCorrect();
      System.setCurrentTimeMillis(4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4897135129004204
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2191.1367918498);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2191.1367918498));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBRelativeInformation();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("setOptions", instances0, protectedProperties1);
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation2 = new Evaluation(instances0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '4';
      charArray0[2] = 'd';
      charArray0[3] = '2';
      charArray0[4] = 'M';
      charArray0[5] = '4';
      charArray0[6] = 'd';
      charArray0[7] = '4';
      charArray0[8] = '2';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-1439), charArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -8
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3448446247581223
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      lWL0.listOptions();
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)1;
      evaluation0.falseNegativeRate((byte)1);
      evaluation0.recall(2465);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      int[] intArray0 = new int[1];
      Version.VERSION = "#pvaAgDxda~uy7C";
      Instance instance0 = BallNode.calcCentroidPivot(113, (-4282), intArray0, instances0);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) lWL0, instance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8467103628435937
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.m_ComplexityStatisticsAvailable = true;
      MockRandom mockRandom0 = new MockRandom();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      MatlabLoader matlabLoader2 = new MatlabLoader();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      file0.setReadable(false);
      MockFile mockFile0 = new MockFile(file0, "vakkLlQBriq_nt&F,");
      matlabLoader2.setSource((File) mockFile0);
      evaluation0.weightedPrecision();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.KBMeanInformation();
      ArffLoader arffLoader0 = new ArffLoader();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      MockFile mockFile1 = new MockFile(".arff.gz", ".arff.gz");
      evaluation0.correct();
      arffLoader0.setSource((File) mockFile1);
      evaluation0.toSummaryString();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4578498912420974
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      lWL0.listOptions();
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)1;
      evaluation0.falseNegativeRate((byte)1);
      evaluation0.recall(2465);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.areaUnderROC((byte) (-120));
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.trueNegativeRate((byte) (-120));
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation3 = new Evaluation(instances1);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Object object2 = new Object();
      Object object3 = new Object();
      try { 
        evaluation3.evaluateModel((Classifier) lWL0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7025887345777497
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MatlabLoader matlabLoader1 = new MatlabLoader();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(4);
      evaluation0.recall(100);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.areaUnderROC((-120));
      evaluation2.trueNegativeRate(0);
      Evaluation evaluation3 = new Evaluation(instances0);
      Object object0 = new Object();
      Object object1 = new Object();
      evaluation1.areaUnderPRC(4);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      REPTree rEPTree0 = new REPTree();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) evaluation2;
      objectArray0[1] = object0;
      objectArray0[2] = (Object) protectedProperties0;
      objectArray0[3] = (Object) properties0;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      try { 
        evaluation1.evaluateModel((Classifier) rEPTree0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.Evaluation cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4785259005904754
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MatlabLoader matlabLoader1 = new MatlabLoader();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(4);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(3);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.recall(3328);
      evaluation0.areaUnderROC(100);
      evaluation3.trueNegativeRate(3249);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("distributionForInstance", arrayList0, 20);
      Evaluation evaluation4 = null;
      try {
        evaluation4 = new Evaluation(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9943533007191454
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[18];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      LWL lWL1 = new LWL();
      lWL1.getClassifier();
      double[] doubleArray0 = new double[6];
      byteArray0[5] = (byte)10;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1;
      doubleArray0[2] = (double) (byte)10;
      doubleArray0[4] = (double) (byte)10;
      doubleArray0[5] = (double) (byte)1;
      evaluation0.toClassDetailsString("]5)|yt+x");
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(4);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]5)|yt+x";
      stringArray0[1] = "@data";
      textDirectoryLoader0.setOptions(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-454.4136625092), doubleArray0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MatlabLoader matlabLoader1 = new MatlabLoader();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.weightedFalseNegativeRate();
      evaluation0.numFalsePositives((-1902));
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'd';
      charArray0[2] = '4';
      charArray0[3] = 'c';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(11, charArray0, (-1381));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8109710120534392
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v@a6");
      MatlabLoader matlabLoader1 = new MatlabLoader();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      double double0 = evaluation0.m_SumClassPredicted;
      double double1 = evaluation0.m_SumKBInfo;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".gz";
      stringArray0[1] = "v@a6";
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SMO sMO0 = new SMO();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No instances supplied.";
      stringArray0[1] = "No instances supplied.";
      stringArray0[2] = "6*tRLc8v!+HGP)";
      stringArray0[3] = "(f-dxq9)nW`Jmxyb";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.falseNegativeRate(2495);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(true);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v@a6");
      MatlabLoader matlabLoader1 = new MatlabLoader();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      double double0 = evaluation0.m_SumClassPredicted;
      evaluation0.weightedFalseNegativeRate();
      evaluation0.numFalsePositives((-1902));
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) filteredClassifier0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5855274061277456
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      lWL0.listOptions();
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)1;
      evaluation0.falseNegativeRate((byte)1);
      evaluation0.recall(1);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.areaUnderROC((byte)10);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.trueNegativeRate(2);
      Evaluation evaluation3 = new Evaluation(instances0);
      Object object0 = new Object();
      Object object1 = new Object();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation1.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(f-dxq9)nW`Jmxyb";
      stringArray0[1] = "setCostMatrix";
      stringArray0[2] = "#xGB}hX~:~a";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6064604090893377
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)1;
      lWL0.getClassifier();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate((-2143));
      double double0 = evaluation0.recall(2);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.m_NumClasses = (-2143);
      evaluation2.areaUnderROC(5);
      double double1 = evaluation1.trueNegativeRate((-1967));
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      MatlabLoader matlabLoader1 = new MatlabLoader();
      double double2 = evaluation3.falseNegativeRate(116);
      assertEquals(double2, double1, 0.01);
      
      evaluation0.areaUnderROC((byte) (-64));
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7260705604728712
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2191.1367918498);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2191.1367918498));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("setOptions", instances0, protectedProperties0);
      CostMatrix costMatrix0 = new CostMatrix(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        instances0.variance(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.594865038223946
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      lWL0.listOptions();
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)1;
      evaluation0.falseNegativeRate((byte)1);
      evaluation0.recall(1);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.areaUnderROC((byte)10);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.trueNegativeRate(2);
      Evaluation evaluation3 = new Evaluation(instances0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = evaluation1.evaluateModel((Classifier) lWL0, instances0, objectArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2731738319283363
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      lWL1.listOptions();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-120);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.addNumericTrainClass(856.7, 856.7);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4ab9Qg!w9/0");
      MatlabLoader matlabLoader1 = new MatlabLoader();
      double double0 = evaluation0.falseNegativeRate((-1357));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.areaUnderROC((byte) (-124));
      double double1 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.595730839089747
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)1;
      Classifier classifier0 = lWL0.getClassifier();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.falseNegativeRate((-2143));
      double double1 = evaluation0.recall(2);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.areaUnderROC(5);
      double double2 = evaluation1.trueNegativeRate((-1967));
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      Object object0 = new Object();
      objectArray0[1] = object0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      Object object2 = new Object();
      objectArray0[3] = object2;
      Object object3 = new Object();
      objectArray0[4] = object3;
      evaluation3.evaluateModel(classifier0, instances0, objectArray0);
      assertEquals(0.0, evaluation3.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.trueNegativeRate(5);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFSchemeEntropy();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      int int0 = 26;
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-1911637066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.588483799328041
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      MatlabLoader matlabLoader1 = new MatlabLoader();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(4);
      double double0 = evaluation0.recall(100);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.areaUnderROC((-120));
      double double1 = evaluation2.trueNegativeRate(0);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      Object object0 = new Object();
      MatlabLoader matlabLoader2 = new MatlabLoader();
      Evaluation evaluation4 = new Evaluation(instances0, (CostMatrix) null);
      double double2 = evaluation4.falseNegativeRate(8);
      assertEquals(double2, double1, 0.01);
      
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      double double3 = evaluation1.meanPriorAbsoluteError();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1756260027254717
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      lWL0.getClassifier();
      evaluation0.addNumericTrainClass((-2191.1367918498), (-2725.8));
      MatlabLoader matlabLoader0 = new MatlabLoader();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (byte)1;
      doubleArray0[3] = (double) (byte)10;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "    Instances inst = getInputFormat();\n");
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (byte) (-117);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 3;
      MatlabLoader matlabLoader1 = new MatlabLoader();
      double double0 = evaluation0.falseNegativeRate((byte) (-124));
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)10;
      byteArray0[9] = (byte)10;
      lWL0.listOptions();
      byteArray0[2] = (byte) (-120);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation0.addNumericTrainClass(3, 1000.0);
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v@a6");
      MatlabLoader matlabLoader1 = new MatlabLoader();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3866.14099665);
      doubleArray0[1] = (double) (byte)1;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.001, doubleArray0);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8393579695774942
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      evaluation0.useNoPriors();
      lWL0.getClassifier();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-10.0);
      DenseInstance denseInstance0 = new DenseInstance((-4947.6046749191355), doubleArray0);
      MatlabLoader matlabLoader1 = new MatlabLoader();
      evaluation0.falseNegativeRate(5);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      evaluation0.weightedAreaUnderPRC();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "removePreBui,tClassifier");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = null;
      try {
        protectedProperties3 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.889948397138547
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte) (-117);
      byteArray0[3] = (byte) (-124);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[4] = (byte)1;
      lWL0.getClassifier();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate((-2143));
      evaluation0.recall(2);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.areaUnderROC(5);
      evaluation1.trueNegativeRate((-1967));
      evaluation0.KBRelativeInformation();
      evaluation0.unclassified();
      Random.setNextRandom((byte) (-124));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.96499144667373
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints();
      evaluation0.toMatrixString("@relation");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(1);
      Attribute attribute0 = new Attribute((String) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("@attribute", linkedList0, 1);
      Instances instances1 = null;
      try {
        instances1 = new Instances((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1094277057578132
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SMO sMO0 = new SMO();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 7.0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-2191.1367918498);
      doubleArray0[6] = (double) 0;
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 0.693147181);
      LWL lWL0 = new LWL();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setNumericPriorsFromBuffer();
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      evaluation1.meanPriorAbsoluteError();
      assertEquals(Double.NaN, evaluation1.rootMeanPriorSquaredError(), 0.01);
      
      evaluation0.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "====================\n\n";
      stringArray0[1] = "====================\n\n";
      try { 
        Evaluation.evaluateModel((Classifier) adaBoostM1_0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdaBoostM1:
         // 
         // -P <num>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -Q
         // \tUse resampling for boosting.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (-2193.522562268989);
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 6;
      doubleArray0[6] = (double) 6;
      doubleArray0[7] = 2949.5621699753274;
      doubleArray0[8] = (double) 6;
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SMO sMO0 = new SMO();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "No instances supplied.";
      stringArray0[1] = "No instances supplied.";
      stringArray0[2] = "6*tRLc8v!+HGP)";
      stringArray0[3] = "(f-dxq9)nW`Jmxyb";
      stringArray0[4] = "#xGB}hX~:~a";
      stringArray0[5] = "<br/>\n";
      stringArray0[6] = "No instances supplied.";
      stringArray0[7] = "setCostMatrix";
      stringArray0[8] = "====================\n\n";
      try { 
        Evaluation.evaluateModel((Classifier) sMO0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SMO:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \tTurning them off assumes that data is purely numeric, doesn't
         // \tcontain any missing values, and has a nominal class. Turning them
         // \toff also means that no header information will be stored if the
         // \tmachine is linear. Finally, it also assumes that no instance has
         // \ta weight equal to 0.
         // \t(default: checks on)
         // -C <double>
         // \tThe complexity constant C. (default 1)
         // -N
         // \tWhether to 0=normalize/1=standardize/2=neither. (default 0=normalize)
         // -L <double>
         // \tThe tolerance parameter. (default 1.0e-3)
         // -P <double>
         // \tThe epsilon for round-off error. (default 1.0e-12)
         // -M
         // \tFit logistic models to SVM outputs. 
         // -V <double>
         // \tThe number of folds for the internal
         // \tcross-validation. (default -1, use training data)
         // -W <double>
         // \tThe random number seed. (default 1)
         // -K <classname and parameters>
         // \tThe Kernel to use.
         // \t(default: weka.classifiers.functions.supportVector.PolyKernel)
         // 
         // Options specific to kernel weka.classifiers.functions.supportVector.PolyKernel:
         // 
         // -D
         // \tEnables debugging output (if available) to be printed.
         // \t(default: off)
         // -no-checks
         // \tTurns off all checks - use with caution!
         // \t(default: checks on)
         // -C <num>
         // \tThe size of the cache (a prime number), 0 for full cache and 
         // \t-1 to turn it off.
         // \t(default: 250007)
         // -E <num>
         // \tThe Exponent to use.
         // \t(default: 1.0)
         // -L
         // \tUse lower-order terms.
         // \t(default: no)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SMO sMO0 = new SMO();
      String[] stringArray0 = new String[9];
      stringArray0[1] = stringArray0[0];
      stringArray0[2] = "6*tRLc8v!+HGP)";
      stringArray0[0] = stringArray0[0];
      stringArray0[1] = "#xGB}hX~:~a";
      stringArray0[5] = "<br/>\n";
      stringArray0[6] = stringArray0[0];
      stringArray0[8] = "====================\n\n";
      try { 
        Evaluation.evaluateModel((Classifier) sMO0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "c:0[H_Bh _t");
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter1.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4940355237092673
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-<c4;8*");
      MockRandom mockRandom0 = new MockRandom();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      MatlabLoader matlabLoader2 = new MatlabLoader();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, "getMeasure");
      matlabLoader2.setSource((File) mockFile0);
      double double0 = evaluation0.weightedPrecision();
      lWL0.getClassifier();
      MatlabLoader matlabLoader3 = new MatlabLoader();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.weightedPrecision();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.trueNegativeRate(79);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.weightedFalseNegativeRate();
      double double4 = evaluation1.avgCost();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7397203493336866
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getOptions();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      MockRandom mockRandom0 = new MockRandom();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, ".gz");
      matlabLoader0.setSource((File) mockFile0);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.KBMeanInformation();
      evaluation0.KBRelativeInformation();
      double double3 = evaluation0.weightedFMeasure();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PlainText plainText0 = new PlainText();
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "Class complexity | scheme          ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.576869397469737
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = new DecisionStump();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      MockRandom mockRandom0 = new MockRandom();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      MatlabLoader matlabLoader2 = new MatlabLoader();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      MockFile mockFile0 = new MockFile(file0, "getMeasure");
      matlabLoader2.setSource((File) mockFile0);
      evaluation0.weightedPrecision();
      lWL0.getClassifier();
      MatlabLoader matlabLoader3 = new MatlabLoader();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.weightedPrecision();
      evaluation0.weightedTrueNegativeRate();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(Double.NaN, (Instance) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "costMatrixTipText");
      evaluation0.priorEntropy();
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'text' '@@class@@' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Instances instances0 = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "$53rB");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Evaluation.handleCostOption((String) null, 2617);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte byte0 = (byte) (-64);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".arff";
      try { 
        evaluation1.crossValidateModel("@relation", instances0, 37, stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "Class complexity | scheme          ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = null;
      try { 
        Evaluation.evaluateModel("c:0[H_Bh _t", (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name c:0[H_Bh _t.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "costMatrixTipText";
      stringArray0[1] = "Failed to instantiate class for classification output: ";
      stringArray0[2] = "d%Wgzwb|0jcn**a&H|";
      stringArray0[3] = "Alpha condition holds.";
      stringArray0[4] = "   * Returns the revision string.\n";
      stringArray0[5] = "graphType";
      stringArray0[6] = "DECIMAL";
      stringArray0[7] = "setDistanceWeighting";
      Evaluation.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LWL lWL0 = new LWL();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-91);
      byteArray0[2] = (byte) (-110);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      lWL0.getClassifier();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        Evaluation.handleCostOption("vDYe1,v/P|QLz~G", 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier((Classifier) null);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)67;
      byteArray0[5] = (byte)102;
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (-99.0);
      doubleArray0[2] = (-99.0);
      DenseInstance denseInstance0 = new DenseInstance((-99.0), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
