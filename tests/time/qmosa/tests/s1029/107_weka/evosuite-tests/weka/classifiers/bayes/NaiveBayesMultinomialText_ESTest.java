/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:53:33 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, (String) null);
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      
      MockFile.createTempFile("8x9 l~6R4", (String) null, (File) null);
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.598927346991346
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      IteratedLovinsStemmer.main(stringArray0);
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumClasses(34);
      Instances instances0 = testInstances1.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText1.setOptions(testInstances1.DEFAULT_WORDS);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.toString();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      double double0 = naiveBayesMultinomialText1.getMinWordFrequency();
      assertEquals(3.0, double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = "xA";
      String[] stringArray0 = null;
      naiveBayesMultinomialText0.setUseStopList(true);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("l'U64[-\"?8Nh{OM$:", "l'U64[-\"?8Nh{OM$:");
      File file0 = MockFile.createTempFile("l'U64[-\"?8Nh{OM$:", "l'U64[-\"?8Nh{OM$:", (File) mockFile0);
      naiveBayesMultinomialText0.setStopwords(file0);
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      try { 
        AbstractClassifier.makeCopies(naiveBayesMultinomialText0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "h%.x,!RpM*]PU";
      stringArray0[1] = "";
      stringArray0[2] = "lnorm";
      stringArray0[3] = "hn^l^SnzmR[~)m";
      stringArray0[4] = "Applies several filters successively. In case all supplied filters are StreamableFilters, it will act as a streamable one, too.";
      stringArray0[5] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String string0 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      naiveBayesMultinomialText0.getStopwords();
      String string1 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3180040146971423
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      AbstractClassifier.makeCopy(serializedClassifier0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText1.normTipText();
      assertEquals("The norm of the instances after normalization.", string0);
      
      naiveBayesMultinomialText1.getTokenizer();
      String[] stringArray1 = naiveBayesMultinomialText1.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      
      boolean boolean0 = naiveBayesMultinomialText1.getUseWordFrequencies();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText1.getStemmer();
      BayesNet bayesNet0 = new BayesNet();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-368.3528), intArray0, 2151);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(2151);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.LNormTipText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      Instance instance0 = null;
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2458473814062927
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String[] stringArray0 = Locale.getISOCountries();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string0 = naiveBayesMultinomialText0.getRevision();
      assertEquals("9122", string0);
      
      naiveBayesMultinomialText0.getTokenizer();
      String[] stringArray1 = naiveBayesMultinomialText1.getOptions();
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals(12, stringArray1.length);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.739533718548687
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.m_lnorm = (double) 34;
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 34);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.getOptions();
      assertEquals(34.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.316890517520653
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "h%.x,!RpM*]PU";
      stringArray0[1] = "";
      stringArray0[2] = "lnorm";
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      MockFile mockFile0 = new MockFile("");
      mockFile0.delete();
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, double0, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      naiveBayesMultinomialText0.periodicPruningTipText();
      BallNode ballNode0 = new BallNode(10000);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.tokenizerTipText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Instances instances0 = testInstances0.generate();
      try { 
        BallNode.calcPivot(ballNode0, ballNode0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.316978362243726
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-986);
      intArray0[1] = (-4417);
      intArray0[2] = 478;
      intArray0[3] = (-1);
      intArray0[4] = (-4110);
      intArray0[5] = 68;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-2333));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      stringArray0[1] = "37..-?j`I[OnYs";
      double[] doubleArray0 = new double[9];
      // Undeclared exception!
      try { 
        alphabeticTokenizer0.hasMoreElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.tokenizers.AlphabeticTokenizer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      String[] stringArray0 = new String[2];
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setLNorm((-1658.95014735229));
      naiveBayesMultinomialText1.toString();
      try { 
        naiveBayesMultinomialText1.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1086.6194351075);
      doubleArray0[1] = 1800.6360029214698;
      doubleArray0[2] = 2.0;
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) nullStemmer0;
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      nullStemmer0.stem("-tokenizer <spec>");
      doubleArray0[3] = 1858.3652667679;
      doubleArray0[4] = (-306.5644);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1805.6325094579818);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      doubleArray0[7] = 1964.67;
      nullStemmer0.stem("<Aj$)<l(tQU[EU");
      doubleArray0[8] = 0.001;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8226867707962464
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "QVF}F: }";
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      
      naiveBayesMultinomialText0.getNormalizeDocLength();
      String string1 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string1);
      
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(12, stringArray1.length);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2563110875601007
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      File file0 = MockFile.createTempFile("qWM38PsL%h3Y9GYR", "", (File) null);
      naiveBayesMultinomialText0.setStopwords(file0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4399053258946846
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_probOfClass = null;
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText.main(stringArray0);
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.631353359565896
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)96;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[1] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[2] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[3] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[4] = "NaiveBayesMultinomialText: No model built yet.\n";
      stringArray0[5] = "NaiveBayesMultinomialText: No model built yet.\n";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      int int0 = (-12);
      Instance instance0 = null;
      int int1 = 16;
      int int2 = 456;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      naiveBayesMultinomialText0.getStemmer();
      FileSystemHandling.appendStringToFile(evoSuiteFile1, (String) null);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.822061379926953
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[8];
      stringArray0[1] = "QVF}F: }";
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string1);
      
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(12, stringArray1.length);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.getLNorm();
      double[] doubleArray0 = new double[6];
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      doubleArray0[0] = (-1868.2483);
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (-1868.2483);
      doubleArray0[3] = (-1868.2483);
      doubleArray0[4] = 2.0;
      doubleArray0[5] = (-1.0);
      DenseInstance denseInstance0 = new DenseInstance((-1868.2483), doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      // Undeclared exception!
      try { 
        denseInstance0.equalHeadersMsg(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7228120764467145
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      naiveBayesMultinomialText0.setUseStopList(false);
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      stringArray0[0] = "1D";
      stringArray0[1] = "";
      stringArray0[2] = "\u0003m\"`(\"";
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 220);
      stringArray0[3] = "ST!_&Ld8yEkOSUi4I68";
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setNorm(220);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-3895.5);
      doubleArray0[1] = (double) 220;
      doubleArray0[2] = (double) 220;
      doubleArray0[3] = (-3895.5);
      doubleArray0[4] = (double) 220;
      doubleArray0[5] = (double) 220;
      doubleArray0[6] = (-3895.5);
      doubleArray0[7] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      try { 
        naiveBayesMultinomialText1.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!&NqtA");
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      Random.setNextRandom((-893));
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.m_stemmer = stemmer0;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((SparseInstance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "", (File) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7158981485493727
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      TestInstances testInstances0 = new TestInstances();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.toString();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)56;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-97);
      byteArray0[7] = (byte)124;
      byteArray0[8] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.246682803294346
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1473.1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1473.1, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*ml|xGQQ(j;";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = multilayerPerceptron0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance2);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText1.getLowercaseTokens();
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency((-396.0));
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.stemmerTipText();
      KDTree kDTree0 = new KDTree();
      int[] intArray0 = null;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(false);
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(boolean0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.178070411110149
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = (NaiveBayesMultinomialText)AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      SMO sMO0 = new SMO();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      AbstractClassifier.makeCopies(filteredClassifier0, 62);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setNorm(0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1859.69), doubleArray0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.classifyInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normTipText();
      String[] stringArray1 = TestInstances.DEFAULT_WORDS;
      assertEquals(9, stringArray1.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2698986887396755
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      String string0 = "";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      Classifier classifier0 = AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.reset();
      try { 
        AbstractClassifier.makeCopies(classifier0, (-479));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) alphabeticTokenizer0;
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText0.m_periodicP = 0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      alphabeticTokenizer0.tokenize("");
      stringArray0[1] = "m'ih&. EKEq~";
      stringArray0[2] = "WX";
      stringArray0[3] = "";
      Tokenizer.runTokenizer(alphabeticTokenizer0, stringArray0);
      stringArray0[4] = "San Mateo";
      stringArray0[5] = "Cm]hMNn5C3t";
      stringArray0[6] = "-1";
      stringArray0[7] = "weka.classifiers.trees.RandomTree";
      alphabeticTokenizer0.setOptions(stringArray0);
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.setNorm(2.0);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6298718780844146
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.listOptions();
      MockFile mockFile0 = new MockFile("l'U64[-\"?8Nh{OM$:", "l'U64[-\"?8Nh{OM$:");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "l'U64[-\"?8Nh{OM$:";
      stringArray0[1] = "l'U64[-\"?8Nh{OM$:";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      BallNode ballNode0 = new BallNode(123, (-12), (-916), (Instance) null, (-968.934));
      BallNode ballNode1 = null;
      Discretize discretize0 = new Discretize();
      naiveBayesMultinomialText0.tokenizerTipText();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "u";
      stringArray0[2] = "hx$Q)M'Bro4,";
      stringArray0[3] = "-lnorm";
      stringArray0[4] = "y4h1ly0<";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      String string0 = naiveBayesMultinomialText0.globalInfo();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }
}
