/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 13:55:58 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(13, 8);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.getStdDevPrec();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.743535678836661
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 54;
      int int1 = 26;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(54, 26);
      resultMatrixCSV0.m_SignificanceWidth = 1468;
      resultMatrixCSV0.m_PrintColNames = false;
      resultMatrixCSV0.getRemoveFilterName();
      resultMatrixCSV0.getDefaultStdDevWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixLatex0.m_HeaderKeys = vector0;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7368034742050398
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.getAverage(0);
      resultMatrixHTML0.getVisibleColCount();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText0.significanceWidthTipText();
      resultMatrixPlainText0.getDefaultRowNameWidth();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9083826809913753
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(7, 7);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getDisplayRow(7);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.488650860378037
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      resultMatrixHTML0.setCountWidth(97);
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[3];
      intArray1[0] = 97;
      intArray1[1] = 26;
      resultMatrixHTML0.TIE_STRING = resultMatrixHTML0.TIE_STRING;
      intArray0[0] = intArray1;
      resultMatrixHTML0.setRanking(intArray0);
      resultMatrixHTML0.meanWidthTipText();
      resultMatrixHTML0.getSignificanceCount(0, 26);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      resultMatrixHTML0.meanPrecTipText();
      resultMatrixHTML0.setStdDevWidth((-516));
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(3, 26);
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.m_ColOrder = intArray1;
      resultMatrixPlainText0.toStringMatrix();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toArray();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getRowName((-516));
      resultMatrixLatex0.clearHeader();
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      resultMatrixSignificance0.setColOrder(intArray2);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.clear();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.873986707618567
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[3];
      resultMatrixHTML0.RIGHT_PARENTHESES = "\tThe number of decimals after the decimal point for the mean.\n\t(default: ";
      intArray0[0] = intArray1;
      resultMatrixHTML0.setRanking(intArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      resultMatrixPlainText0.setRemoveFilterName(true);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4705525998460014
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[2] = "";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "*8Ea7t{lb";
      stringArray0[5] = "";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateColNames(false);
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth((-2792));
      resultMatrixCSV0.getRemoveFilterName();
      resultMatrixCSV0.isSignificance(1349);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setShowStdDev(false);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(0);
      resultMatrixGnuPlot0.setColHidden((-1437), false);
      resultMatrixSignificance0.showAverageTipText();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.980920409722227
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColHidden(0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(2324);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.523216253855294
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getAverage((-991));
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.setMeanPrec(733);
      resultMatrixHTML1.getVisibleColCount();
      resultMatrixHTML1.getColNameWidth();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.071080362736029
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(2, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 25;
      intArray3[5] = 1;
      intArray0[2] = intArray3;
      resultMatrixHTML0.m_ShowStdDev = true;
      int[] intArray4 = new int[3];
      intArray4[0] = 1;
      intArray4[1] = 2;
      intArray4[2] = 4361;
      intArray0[3] = intArray4;
      resultMatrixHTML0.getAverage(4361);
      resultMatrixHTML0.getVisibleColCount();
      resultMatrixHTML0.getDefaultMeanWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((-1), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.952853440631588
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 2;
      doubleArray0[3] = doubleArray4;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getVisibleColCount();
      resultMatrixHTML0.isMean((-2));
      resultMatrixHTML0.toStringRanking();
      resultMatrixLatex0.getDefaultStdDevPrec();
      resultMatrixHTML0.countWidthTipText();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4489632263071504
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 1);
      resultMatrixHTML0.getRowName((-1029));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = " ";
      stringArray0[2] = ")";
      stringArray0[3] = ")";
      stringArray0[4] = "$circ$";
      stringArray0[5] = "(";
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixHTML0.enumerateColNamesTipText();
      resultMatrixLatex0.getVisibleRowCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3195848992120185
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(2, 25);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      String[] stringArray0 = new String[0];
      resultMatrixCSV0.setOptions(stringArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 2710);
      ResultMatrixCSV resultMatrixCSV2 = null;
      try {
        resultMatrixCSV2 = new ResultMatrixCSV(4, (-1171));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2193033702504072
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(2, 25);
      assertEquals(0, resultMatrixHTML0.getRowCount());
      
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1435, 2);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
      resultMatrixCSV0.globalInfo();
      resultMatrixGnuPlot0.setSignificanceWidth(0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV();
      resultMatrixCSV2.setOptions((String[]) null);
      int int0 = 813;
      ResultMatrixCSV resultMatrixCSV3 = new ResultMatrixCSV(0, 813);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.516329201889268
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      resultMatrixSignificance0.TIE_STRING = "v";
      stringArray0[3] = "v";
      stringArray0[6] = "*";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getAverage((-2266));
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.setMeanPrec(1);
      resultMatrixHTML1.getVisibleColCount();
      assertFalse(resultMatrixHTML1.getShowAverage());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7184804374555256
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray0 = new int[3][3];
      int[] intArray1 = new int[3];
      resultMatrixHTML0.clearSummary();
      resultMatrixHTML0.RIGHT_PARENTHESES = "";
      intArray0[0] = intArray1;
      resultMatrixHTML0.setRanking(intArray0);
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML0.getDefaultShowStdDev());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4475881307310505
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(2, 25);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixHTML0.getRowName(2355);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*";
      stringArray0[1] = "v";
      stringArray0[2] = "(";
      stringArray0[4] = "(";
      stringArray0[5] = ")";
      stringArray0[6] = " ";
      stringArray0[7] = "\tThe width of the standard deviation (0 = optimal).\n\t(default: ";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixHTML0.enumerateColNamesTipText();
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.9834644014718337
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int int0 = resultMatrixHTML0.getSignificanceCount(2, 0);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.52751915084157
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      // Undeclared exception!
      resultMatrixCSV0.assign(resultMatrixHTML0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6587365478344003
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec((-220));
      resultMatrixGnuPlot0.significanceWidthTipText();
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      resultMatrixGnuPlot0.m_RowNames = stringArray0;
      resultMatrixGnuPlot0.setColHidden(876, false);
      resultMatrixGnuPlot0.setPrintRowNames(false);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "v";
      stringArray1[1] = "The width of the significance indicator (0 = optimal).";
      stringArray1[2] = "The width of the significance indicator (0 = optimal).";
      resultMatrixGnuPlot0.m_RankingLosses = null;
      resultMatrixGnuPlot0.setOptions(stringArray1);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(32, 1);
      resultMatrixGnuPlot0.assign(resultMatrixGnuPlot1);
      resultMatrixGnuPlot0.toArray();
      resultMatrixGnuPlot0.padString("v", 876);
      resultMatrixGnuPlot0.setPrintColNames(false);
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      
      ResultMatrixHTML.main(stringArray1);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.printColNamesTipText();
      resultMatrixLatex0.setEnumerateRowNames(true);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixLatex0.getDefaultSignificanceWidth();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.464709309239237
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = true;
      String string0 = resultMatrixCSV0.toString();
      assertEquals("Dataset,[1]\n'[1] row0',''\n'[v/ /*]',''\n", string0);
      
      resultMatrixCSV0.isStdDev(95);
      resultMatrixCSV0.getDefaultPrintRowNames();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "Dataset,[1]\n'[1] row0',''\n'[v/ /*]',''\n";
      stringArray0[4] = "]";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixCSV0.getCount(990);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.toStringKey();
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3773267854704683
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_StdDevPrec = 7;
      resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      resultMatrixSignificance0.m_MeanWidth = (-1069);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 1);
      resultMatrixSignificance1.isSignificance((-2161));
      resultMatrixSignificance1.setRowName(97, "v");
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(413, 680);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5033624284893827
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(2, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1435, 2);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
      resultMatrixCSV0.globalInfo();
      resultMatrixGnuPlot0.setSignificanceWidth(0);
      resultMatrixCSV0.getRowName(2);
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = "(";
      stringArray0[4] = "YRk75_yT<=8n";
      stringArray0[5] = "*";
      stringArray0[6] = null;
      stringArray0[7] = ")";
      stringArray0[8] = "v";
      resultMatrixGnuPlot0.removeFilterName(")");
      ResultMatrixLatex.main(stringArray0);
      resultMatrixGnuPlot0.stdDevPrecTipText();
      resultMatrixGnuPlot0.setStdDev(2, (-425), 0);
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(1435, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevWidth((-2381));
      resultMatrixSignificance0.headerKeys();
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.433326015182181
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(0);
      double double0 = resultMatrixHTML0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      resultMatrixHTML0.getVisibleColCount();
      boolean boolean0 = resultMatrixHTML0.isMean(0);
      assertFalse(boolean0);
      
      resultMatrixHTML0.toStringRanking();
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9673881112917146
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int int0 = resultMatrixHTML0.getSignificanceCount(2, 25);
      assertEquals(0, int0);
      
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[10];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[3] = 0;
      intArray3[4] = 25;
      intArray3[5] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 1;
      intArray4[1] = 2;
      String string0 = resultMatrixHTML0.getRowName(0);
      assertNull(string0);
      
      intArray4[2] = 4361;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[1] = 0;
      intArray0[4] = intArray5;
      resultMatrixHTML0.m_NonSigWins = intArray0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setColOrder(intArray2);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.clear();
      int int1 = resultMatrixSignificance0.getDisplayRow(2211);
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals((-1), int1);
      
      resultMatrixHTML0.getDefaultEnumerateColNames();
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultCountWidth());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.999993205997038
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(2, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1435, 2);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
      resultMatrixCSV0.globalInfo();
      resultMatrixGnuPlot0.setSignificanceWidth(0);
      resultMatrixCSV0.getRowName(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setRowName(7, "");
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(7, 2);
      resultMatrixSignificance0.isSignificance(3432);
      resultMatrixSignificance1.setRowName(2, (String) null);
      ResultMatrixSignificance resultMatrixSignificance2 = null;
      try {
        resultMatrixSignificance2 = new ResultMatrixSignificance((-1604), 3417);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.679706038839934
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSize((-1106), (-1106));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.405764794763148
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth((-6));
      double double0 = resultMatrixHTML0.getAverage(1);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(1, int0);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.46546525512292
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_StdDevWidth = 0;
      resultMatrixPlainText0.getOptions();
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.setMeanWidth((-1177));
      resultMatrixPlainText0.globalInfo();
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.514035761043349
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      resultMatrixSignificance0.TIE_STRING = "v";
      stringArray0[3] = "v";
      stringArray0[6] = "*";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(84, 3);
      resultMatrixSignificance0.isSignificance(2);
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(1, 1016);
      resultMatrixSignificance2.setRowName(84, "v");
      resultMatrixSignificance1.getRowHidden((-2967));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(3, 2249);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.397283362635559
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getOptions();
      resultMatrixHTML0.setMeanWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      resultMatrixCSV0.padString("EvpH#|*tm%VL@j]KmZ0", 2, false);
      resultMatrixCSV0.setSignificanceWidth(315);
      assertEquals(315, resultMatrixCSV0.getSignificanceWidth());
      
      resultMatrixHTML0.removeFilterNameTipText();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.824364840923503
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec((-220));
      resultMatrixGnuPlot0.significanceWidthTipText();
      int int0 = 876;
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      String[] stringArray0 = new String[3];
      int[][] intArray0 = new int[9][4];
      int[] intArray1 = new int[3];
      intArray1[0] = (-220);
      intArray1[1] = 1;
      intArray1[2] = 876;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 876;
      intArray2[3] = 2;
      intArray2[4] = 0;
      intArray2[5] = 0;
      intArray2[6] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 0;
      intArray3[1] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = (-220);
      intArray4[1] = (-220);
      intArray4[2] = (-220);
      intArray4[3] = 1;
      intArray4[4] = 1;
      intArray4[5] = 1;
      intArray4[6] = (-220);
      intArray4[7] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = (-220);
      intArray5[1] = 2691;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[2];
      intArray6[0] = 0;
      intArray6[1] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[0];
      intArray0[6] = intArray7;
      int[] intArray8 = new int[3];
      intArray8[0] = (-220);
      intArray8[1] = 1;
      intArray8[2] = 2;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[3];
      intArray9[0] = 1;
      intArray9[1] = 0;
      intArray9[2] = 1;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8261317598534674
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 20);
      resultMatrixSignificance0.LEFT_PARENTHESES = "`IFQi<162";
      int[][] intArray0 = new int[8][4];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[9];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray2[2] = 20;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = 4361;
      intArray2[6] = (-1764);
      intArray2[7] = 1;
      intArray2[8] = 20;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 1;
      intArray3[1] = 541;
      intArray3[2] = (-2835);
      intArray3[3] = 2;
      intArray3[4] = (-1764);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = (-2835);
      intArray4[1] = 279;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = (-2835);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      intArray7[0] = 223;
      intArray7[1] = 20;
      intArray7[2] = (-2835);
      intArray7[3] = 4361;
      intArray7[4] = 279;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      intArray8[0] = 0;
      intArray8[1] = 0;
      intArray0[7] = intArray8;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      resultMatrixSignificance0.setCountWidth(20);
      resultMatrixSignificance0.trimString("`IFQi<162", 7);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3483497788551713
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "v";
      stringArray0[3] = " ";
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(55, 87);
      resultMatrixPlainText0.getRowName(731);
      // Undeclared exception!
      resultMatrixLatex0.toArray();
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.9274829883654556
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth(0);
      resultMatrixCSV0.getRemoveFilterName();
      resultMatrixCSV0.isSignificance((-2381));
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance1.setShowStdDev(false);
      assertTrue(resultMatrixCSV0.getShowAverage());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(2, 3);
      int[] intArray0 = new int[1];
      resultMatrixCSV1.removeFilterName("*");
      intArray0[0] = 1;
      resultMatrixCSV1.setRowOrder(intArray0);
      resultMatrixCSV1.getDefaultEnumerateRowNames();
      assertEquals(3, resultMatrixCSV1.getRowCount());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2584111430051856
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setMean((-1313), 0, 1);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance1.setStdDev(2, 867, (-3006.405));
      resultMatrixSignificance0.setSignificance((-1313), 11, 1);
      resultMatrixSignificance1.setShowStdDev(false);
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertEquals(25, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance1.getColNameWidth());
      assertEquals(1, resultMatrixSignificance1.getColCount());
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getCountWidth());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9612219067237464
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      resultMatrixSignificance0.getColHidden(56);
      int[] intArray0 = new int[9];
      intArray0[0] = 56;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 757;
      intArray0[4] = 757;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 0;
      intArray0[8] = 757;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getColName(1);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertNull(string0);
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7458535301741085
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "v";
      stringArray0[3] = " ";
      stringArray0[5] = "v";
      stringArray0[6] = "*";
      int int0 = 92;
      int int1 = (-1735);
      resultMatrixSignificance0.getSignificanceCount(92, (-1735));
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-28), 25);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader("Dataset");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.365252521709927
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColHidden(40);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(1, 0);
      assertEquals(1, resultMatrixPlainText1.getVisibleColCount());
      
      String string0 = resultMatrixPlainText1.toStringMatrix();
      assertEquals("Dataset (1) col0\n----------------\n----------------\n(v/ /*)        |\n", string0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 0);
      resultMatrixPlainText1.getRowName(757);
      resultMatrixLatex0.toArray();
      String string1 = resultMatrixSignificance0.getRowName(0);
      assertNotNull(string1);
      assertEquals("row0", string1);
      
      resultMatrixLatex0.clearHeader();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.getDefaultShowStdDev();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      
      int int0 = resultMatrixLatex0.getRowCount();
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.196170046769773
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = true;
      resultMatrixCSV0.toString();
      resultMatrixCSV0.isStdDev(95);
      resultMatrixCSV0.getDefaultPrintRowNames();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "Dataset,[1]\n'[1] row0',''\n'[v/ /*]',''\n";
      stringArray0[4] = "]";
      stringArray0[5] = "]";
      stringArray0[6] = "v";
      resultMatrixCSV0.padString("j2TqXG8&%Cikf", (-189), true);
      resultMatrixCSV0.setSignificanceWidth(91);
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 0);
      resultMatrixHTML0.removeFilterNameTipText();
      String string0 = resultMatrixHTML0.padString("Dataset", 0, false);
      assertEquals("Dataset", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.4729202385055697
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = new String[0];
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setEnumerateColNames(true);
      resultMatrixCSV1.setShowAverage(false);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth(0);
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixCSV1.getRemoveFilterName();
      resultMatrixCSV1.isSignificance(695);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV1);
      resultMatrixSignificance0.setShowStdDev(false);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(1, 1349);
      int[] intArray0 = new int[6];
      intArray0[0] = 9;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 695;
      intArray0[5] = 1;
      resultMatrixCSV2.setRowOrder(intArray0);
      assertEquals(25, resultMatrixCSV2.getRowNameWidth());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 1;
      intArray0[0] = intArray1;
      resultMatrixCSV0.m_Significance = intArray0;
      int int0 = resultMatrixCSV0.getMeanPrec();
      assertEquals(2, int0);
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.5647945330384725
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      resultMatrixHTML0.setCountWidth(97);
      int[] intArray0 = new int[3];
      intArray0[0] = 97;
      intArray0[1] = 26;
      resultMatrixHTML0.TIE_STRING = resultMatrixHTML0.TIE_STRING;
      resultMatrixHTML0.meanWidthTipText();
      resultMatrixHTML0.getSignificanceCount(0, 26);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      resultMatrixHTML0.meanPrecTipText();
      resultMatrixHTML0.setStdDevWidth(97);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(3, 26);
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.toStringMatrix();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toArray();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getRowName(0);
      resultMatrixLatex0.clearHeader();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixHTML resultMatrixHTML1 = null;
      try {
        resultMatrixHTML1 = new ResultMatrixHTML((-2826), 5);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9154793492940043
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_EnumerateColNames = true;
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.meanPrecTipText();
      resultMatrixHTML0.setStdDevWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowNameWidth(2180);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setRowOrder((int[]) null);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.484867809365547
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[2] = "";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "*8Ea7t{lb";
      stringArray0[5] = "";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateColNames(false);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setMean(1649, 0, 0);
      resultMatrixCSV0.setSignificanceWidth(1619);
      assertFalse(resultMatrixCSV0.getEnumerateColNames());
      
      resultMatrixSignificance0.setStdDev(1619, 0, 0);
      resultMatrixSignificance0.setSignificance(1, (-1544), 64);
      resultMatrixSignificance0.listOptions();
      resultMatrixSignificance0.meanPrecTipText();
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1403685488429787
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = true;
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      
      String string0 = resultMatrixCSV0.toString();
      assertEquals("Dataset,[1]\n'[1] row0',''\n'[v/ /*]',''\n", string0);
      
      resultMatrixCSV0.isStdDev(95);
      resultMatrixCSV0.getDefaultPrintRowNames();
      Vector<String> vector0 = new Vector<String>();
      resultMatrixCSV0.m_HeaderValues = vector0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "Dataset,[1]\n'[1] row0',''\n'[v/ /*]',''\n";
      stringArray0[4] = "]";
      stringArray0[5] = "]";
      stringArray0[6] = "v";
      stringArray0[7] = "Dataset,[1]\n'[1] row0',''\n'[v/ /*]',''\n";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1038, 0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1038, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.992400521059247
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColHidden((-2647));
      resultMatrixSignificance0.setColOrder((int[]) null);
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName((-2647));
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.980920409722227
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(true);
      boolean boolean0 = resultMatrixSignificance0.getColHidden(56);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      resultMatrixSignificance0.setColOrder(intArray0);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.getColName(1);
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertNull(string0);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.5687932458990055
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_PrintRowNames = true;
      String[] stringArray0 = resultMatrixPlainText0.getOptions();
      resultMatrixPlainText0.setMeanWidth(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String string0 = resultMatrixHTML0.getRowName((-1459));
      assertNull(string0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      
      ResultMatrixLatex.main(stringArray0);
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      
      resultMatrixHTML0.enumerateColNamesTipText();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.8663737609574396
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      resultMatrixSignificance0.m_RowHidden = booleanArray0;
      resultMatrixSignificance0.setMean(5, 1351, (-3447.69212736));
      resultMatrixSignificance0.setStdDev(5, 5, 5);
      resultMatrixSignificance0.setSignificance(1351, 1351, 64);
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.477505639392204
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[2] = "";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "*8Ea7t{lb";
      stringArray0[5] = "";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateColNames(false);
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth((-2792));
      resultMatrixCSV0.getRemoveFilterName();
      boolean boolean0 = resultMatrixCSV0.isSignificance(1349);
      assertTrue(boolean0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setShowStdDev(false);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2;
      double[][] doubleArray0 = new double[4][5];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (-1.0);
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (-1.0);
      doubleArray2[5] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 1349;
      doubleArray4[1] = (double) (-2792);
      doubleArray0[3] = doubleArray4;
      resultMatrixSignificance0.m_StdDev = doubleArray0;
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      
      intArray0[2] = 2;
      intArray0[3] = 0;
      resultMatrixCSV1.m_RowOrder = intArray0;
      int[] intArray1 = new int[0];
      resultMatrixCSV1.setRowOrder(intArray1);
      assertEquals(2, resultMatrixCSV1.getDefaultMeanPrec());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.634045384387876
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[2] = "";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "*8Ea7t{lb";
      stringArray0[5] = "";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setOptions(stringArray0);
      resultMatrixGnuPlot0.toArray();
      resultMatrixGnuPlot0.padString("*8Ea7t{lb", 0);
      resultMatrixGnuPlot0.setPrintColNames(false);
      ResultMatrixHTML.main(stringArray0);
      resultMatrixGnuPlot0.setOptions(stringArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.printColNamesTipText();
      resultMatrixLatex1.setEnumerateRowNames(false);
      resultMatrixGnuPlot0.getColName(102);
      assertEquals(0, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixLatex0.getDefaultEnumerateColNames();
      int int0 = resultMatrixLatex1.getRowCount();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.1428811305724262
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.isSignificance(1);
      resultMatrixSignificance0.setRowName(0, " ");
      boolean boolean0 = resultMatrixSignificance0.getRowHidden(0);
      assertFalse(boolean0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(3457, 1);
      resultMatrixSignificance0.toStringSummary();
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      
      resultMatrixHTML0.colNameWidthTipText();
      assertEquals(3457, resultMatrixHTML0.getColCount());
      
      resultMatrixLatex0.setPrintColNames(false);
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.473618043818531
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getSummaryTitle(0);
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColHidden(40);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "38|q)IAV|m,EE";
      stringArray0[1] = "=,0E.I0dSnWbu(I%";
      ResultMatrixLatex.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.7536902639491236
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_StdDevPrec = 7;
      String[] stringArray0 = resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      resultMatrixSignificance0.getSummaryTitle((-1611));
      resultMatrixSignificance0.m_MeanWidth = (-1069);
      intArray0[1] = (-2161);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 7;
      intArray0[5] = 0;
      intArray0[6] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setOptions(stringArray0);
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV(12, (-2161));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9834644014718337
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(3, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 3;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 3;
      intArray3[2] = 0;
      intArray3[3] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.9612219067237464
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 25;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.m_HeaderValues = vector0;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      resultMatrixSignificance0.m_ColHidden = booleanArray0;
      int int1 = (-628);
      resultMatrixSignificance0.isSignificance((-628));
      resultMatrixSignificance0.setRowName(0, ":8@}'yhpeU'.B ");
      resultMatrixSignificance0.getRowHidden(25);
      int int2 = 3457;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(3457, 2);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.448543940192738
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_PrintRowNames = true;
      String[] stringArray0 = resultMatrixPlainText0.getOptions();
      assertEquals(19, stringArray0.length);
      
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.m_EnumerateColNames = true;
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixPlainText0.RIGHT_PARENTHESES = "# contains the data for the plot\n";
      resultMatrixPlainText0.globalInfo();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1# conta\n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*# contains the data for the |\n", string0);
      
      int[] intArray0 = new int[0];
      resultMatrixPlainText0.toStringRanking();
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.548089743518898
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 3);
      String[] stringArray0 = resultMatrixSignificance1.getOptions();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance();
      resultMatrixSignificance2.setEnumerateColNames(false);
      resultMatrixSignificance0.setEnumerateRowNames(true);
      resultMatrixSignificance0.getColHidden(286);
      assertTrue(resultMatrixSignificance0.getEnumerateRowNames());
      
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.8466796372141983
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_EnumerateColNames = false;
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.setMean((-3467), 1351, 0.0);
      assertTrue(resultMatrixSignificance0.getEnumerateRowNames());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7995589165321353
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[][] intArray0 = new int[4][7];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 254;
      intArray3[1] = 1;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[6];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 375;
      intArray4[3] = 6;
      intArray4[4] = 2;
      intArray4[5] = 1;
      intArray0[3] = intArray4;
      resultMatrixCSV0.m_Wins = intArray0;
      assertFalse(resultMatrixCSV0.getShowAverage());
      
      resultMatrixCSV0.m_ShowAverage = true;
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixCSV0.doubleToString(2460.492, 25);
      resultMatrixCSV0.setColHidden(3, true);
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.941189147059528
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.doubleToString((-238.4), 97);
      assertEquals("-238.4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
      
      resultMatrixGnuPlot0.enumerateRowNamesTipText();
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      String string1 = resultMatrixSignificance0.toStringKey();
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals("Key:\n(1) col0\n", string1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.8592321198097737
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(3, 25);
      assertEquals(0, resultMatrixHTML0.getColCount());
      
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 3;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 3;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 25;
      intArray3[5] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 3;
      intArray4[1] = 2;
      intArray4[2] = 4361;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray0[4] = intArray5;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 4);
      String string0 = resultMatrixGnuPlot0.getColName(90);
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertNull(string0);
      assertEquals(4, resultMatrixGnuPlot0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.0489066851631894
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColHidden(56);
      int[] intArray0 = new int[1];
      resultMatrixSignificance0.setMeanPrec(56);
      resultMatrixSignificance0.getRowName(415);
      assertEquals(56, resultMatrixSignificance0.getMeanPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(1);
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.0008303170414576
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getRevision();
      resultMatrixSignificance0.getColHidden(56);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      resultMatrixPlainText0.getColName(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader("v");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.358274310266394
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec((-220));
      resultMatrixGnuPlot0.significanceWidthTipText();
      int int0 = 876;
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      resultMatrixGnuPlot0.m_RowNames = stringArray0;
      boolean boolean0 = false;
      resultMatrixGnuPlot0.setColHidden(876, false);
      resultMatrixGnuPlot0.setPrintRowNames(false);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "v";
      stringArray1[1] = "The width of the significance indicator (0 = optimal).";
      stringArray1[2] = "The width of the significance indicator (0 = optimal).";
      resultMatrixGnuPlot0.m_RankingLosses = null;
      resultMatrixGnuPlot0.setOptions(stringArray1);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9066635494413338
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(2, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[3] = 0;
      intArray3[4] = 25;
      intArray3[5] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 1;
      intArray4[1] = 2;
      resultMatrixHTML0.getRowName(0);
      intArray4[2] = 4361;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[1] = 0;
      intArray0[4] = intArray5;
      resultMatrixHTML0.m_NonSigWins = intArray0;
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.9401437834560737
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 738.0;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 1;
      doubleArray4[6] = (double) 2;
      doubleArray4[7] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 2;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (double) 2;
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = 738.0;
      doubleArray7[3] = 10.0;
      doubleArray7[4] = (double) 1;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = (double) 0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (double) 2;
      doubleArray9[2] = 738.0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 10.0;
      doubleArray9[5] = 10.0;
      doubleArray0[8] = doubleArray9;
      resultMatrixLatex0.m_Mean = doubleArray0;
      resultMatrixLatex0.isAverage(4001);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9963067983056155
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDisplayRow((-2447));
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixHTML0.getDefaultColNameWidth();
      resultMatrixLatex0.setMeanWidth(26);
      assertEquals(26, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8526379562735795
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_SignificanceWidth = 0;
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      resultMatrixHTML0.m_MeanPrec = 2449;
      resultMatrixHTML0.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clear();
      resultMatrixHTML0.listOptions();
      int int0 = resultMatrixSignificance0.getDisplayRow(39);
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.0271671474095863
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_EnumerateColNames = true;
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      int[] intArray0 = new int[0];
      resultMatrixSignificance1.setColOrder(intArray0);
      resultMatrixSignificance1.getSignificanceCount(2, 1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance1);
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth(2);
      resultMatrixCSV0.getRemoveFilterName();
      resultMatrixCSV0.isSignificance(37);
      resultMatrixSignificance1.setShowStdDev(false);
      resultMatrixCSV0.setRowOrder(intArray0);
      assertEquals(2, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.425295235847823
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = "$circ$";
      stringArray0[2] = "$circ$";
      resultMatrixCSV0.setOptions(stringArray0);
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 0);
      resultMatrixLatex0.toArray();
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(425, 5);
      resultMatrixCSV1.clear();
      assertEquals(0, resultMatrixCSV1.getVisibleRowCount());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5026691522126177
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "*";
      stringArray0[1] = " ";
      stringArray0[2] = "v";
      stringArray0[3] = " ";
      stringArray0[5] = "v";
      stringArray0[6] = "*";
      stringArray0[8] = "+6 dg/A*3t3wv@s.";
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      try { 
        resultMatrixCSV0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.8004698251768687
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColOrder();
      resultMatrixGnuPlot0.getColCount();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.getColSize((String[][]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.5434382830547317
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "*8Ea7t{lb";
      stringArray0[5] = "";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixPlainText0.setMeanWidth(1427);
      try { 
        resultMatrixPlainText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.8850829812280656
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(2, 0);
      int[][] intArray0 = new int[3][9];
      int[] intArray1 = new int[3];
      intArray1[0] = 97;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 1;
      intArray2[2] = 97;
      intArray2[3] = 2;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 764;
      intArray2[7] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 2;
      intArray3[1] = 2;
      intArray0[2] = intArray3;
      // Undeclared exception!
      try { 
        resultMatrixHTML1.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.7886260379670382
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.setStdDevPrec(2);
      resultMatrixGnuPlot0.m_ShowStdDev = true;
      resultMatrixGnuPlot0.clearRanking();
      resultMatrixGnuPlot0.getDefaultShowStdDev();
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = null;
      try {
        resultMatrixGnuPlot1 = new ResultMatrixGnuPlot((-705), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.807918783334228
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      int int0 = 1351;
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")";
      resultMatrixSignificance0.m_ColNames = stringArray0;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      resultMatrixSignificance0.m_RowHidden = booleanArray0;
      resultMatrixSignificance0.setMean(5, 1351, 1);
      resultMatrixSignificance0.setStdDev(5, 5, 5);
      // Undeclared exception!
      resultMatrixSignificance0.setSize(1351, 1351);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.712409197814089
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(31, 31);
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixCSV0.m_EnumerateColNames = true;
      resultMatrixCSV0.m_HeaderKeys = vector0;
      Integer integer0 = new Integer(1);
      vector0.add(integer0);
      resultMatrixCSV0.setSize(0, 31);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.9512516113626925
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[0] = false;
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      resultMatrixLatex0.clearHeader();
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.isSignificance(1);
      resultMatrixSignificance0.setRowName(0, " ");
      boolean boolean0 = resultMatrixSignificance0.getRowHidden(0);
      assertFalse(boolean0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(125);
      resultMatrixGnuPlot0.toStringRanking();
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8850435947538506
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.setMeanPrec((-20));
      resultMatrixHTML0.m_ColNameWidth = (-20);
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.TIE_STRING = "";
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixHTML0.m_MeanPrec = 0;
      resultMatrixHTML0.LEFT_PARENTHESES = "!_";
      resultMatrixHTML0.addHeader((String) null, "setColOrder: length does not match (");
      resultMatrixHTML0.getColName(0);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.483938835232735
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.stdDevPrecTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixSignificance0.m_HeaderKeys = null;
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixSignificance0.getRevision();
      resultMatrixPlainText0.addHeader("The number of decimals after the decimal point for the standard deviation.", " ");
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.m_EnumerateColNames = true;
      resultMatrixPlainText0.globalInfo();
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixLatex0.toArray();
      resultMatrixSignificance0.RIGHT_PARENTHESES = "v";
      resultMatrixSignificance0.getRowName(95);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.setMean(0, 2, (-1307.5999512037722));
      resultMatrixLatex0.setSignificance(2189, 0, 97);
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.0118066152426777
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      resultMatrixLatex0.m_PrintRowNames = false;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.isSignificance(1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixSignificance0.setStdDevWidth(11);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.padString((String) null, 25, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.9154793492940043
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 584);
      resultMatrixGnuPlot0.TIE_STRING = "The width of the significance indicator (0 = optimal).";
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.setStdDevWidth(2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 584;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 584;
      doubleArray0[5] = (double) 584;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 2;
      resultMatrixLatex0.addHeader("z@v=P`b~6iy$`", "The width of the significance indicator (0 = optimal).");
      resultMatrixLatex0.m_Counts = doubleArray0;
      resultMatrixGnuPlot0.setSignificanceWidth((-1));
      resultMatrixGnuPlot0.assign(resultMatrixLatex0);
      resultMatrixLatex0.getDefaultMeanPrec();
      resultMatrixGnuPlot0.getRevision();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.addHeader("v", "*");
      resultMatrixHTML0.getDisplayName();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearHeader();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9923530635052846
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(2, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[3] = 0;
      intArray3[4] = 25;
      intArray3[5] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 1;
      intArray4[1] = 2;
      String string0 = resultMatrixHTML0.getRowName(0);
      assertNull(string0);
      
      intArray4[2] = 4361;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[1] = 0;
      intArray0[4] = intArray5;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      boolean boolean0 = resultMatrixCSV0.isSignificance(571);
      assertTrue(boolean0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setShowStdDev(true);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 23);
      resultMatrixCSV1.setRowOrder(intArray3);
      assertEquals(23, resultMatrixCSV1.getVisibleRowCount());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.521623535242924
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_EnumerateRowNames = false;
      resultMatrixSignificance0.setColNameWidth(3008);
      resultMatrixSignificance0.setRowNameWidth((-3022));
      resultMatrixSignificance0.setSignificanceWidth(43);
      resultMatrixSignificance0.m_CountWidth = 3008;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "(";
      stringArray0[1] = "71'`8/[{y%Qw~q|E";
      stringArray0[2] = ")";
      stringArray0[3] = "*";
      stringArray0[4] = "";
      stringArray0[5] = ")";
      stringArray0[6] = ")";
      stringArray0[7] = "*";
      resultMatrixSignificance0.setOptions(stringArray0);
      resultMatrixSignificance0.TIE_STRING = "5tAOaJbYkK~v-VK";
      resultMatrixSignificance0.getRemoveFilterName();
      resultMatrixSignificance0.toString();
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      boolean boolean0 = resultMatrixPlainText0.getRemoveFilterName();
      assertEquals(1, resultMatrixPlainText0.getColCount());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
      assertFalse(boolean0);
      assertTrue(resultMatrixPlainText0.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText0.getDefaultEnumerateColNames());
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertFalse(resultMatrixPlainText0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8079187833342285
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int int0 = resultMatrixHTML0.getSignificanceCount(2, 25);
      assertEquals(0, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getRowCount());
      assertEquals(0, int0);
      
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowOrder(intArray2);
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.535550828572874
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 3);
      resultMatrixSignificance0.m_StdDevPrec = 3;
      String[] stringArray0 = resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      double[][] doubleArray0 = new double[7][2];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 2;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = Double.NaN;
      doubleArray3[1] = (double) 2;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (-1824.42174592);
      doubleArray3[6] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 3;
      doubleArray4[3] = (double) 3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[0];
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[7];
      doubleArray6[0] = Double.NaN;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = (-3339.3561330366456);
      doubleArray6[3] = 0.0;
      doubleArray6[4] = Double.NaN;
      doubleArray6[5] = (double) 0;
      doubleArray6[6] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = Double.NaN;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = (double) 0;
      doubleArray7[3] = (double) 3;
      doubleArray7[4] = (double) 3;
      doubleArray0[6] = doubleArray7;
      resultMatrixSignificance0.m_StdDev = doubleArray0;
      resultMatrixSignificance0.setEnumerateRowNames(true);
      resultMatrixSignificance0.m_MeanWidth = (-1075);
      resultMatrixSignificance0.getColHidden(1978);
      ResultMatrixLatex.main(stringArray0);
      assertEquals((-1075), resultMatrixSignificance0.getMeanWidth());
      assertEquals(3, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4921672958611385
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 3);
      resultMatrixSignificance0.m_StdDevPrec = 3;
      resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      resultMatrixSignificance0.m_MeanWidth = (-1075);
      intArray0[1] = (-2168);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_StdDevWidth = 0;
      resultMatrixSignificance0.getSignificanceCount(3, 2484);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth(1);
      resultMatrixCSV0.getRemoveFilterName();
      resultMatrixCSV0.isSignificance(0);
      resultMatrixSignificance0.setShowStdDev(false);
      int[] intArray1 = new int[1];
      intArray1[0] = (-1075);
      resultMatrixCSV0.setRowOrder(intArray1);
      resultMatrixSignificance0.setMeanPrec(89);
      resultMatrixCSV0.assign(resultMatrixSignificance0);
      assertEquals((-1075), resultMatrixSignificance0.getMeanWidth());
      assertEquals((-1075), resultMatrixCSV0.getMeanWidth());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8578613523789516
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColHidden(56);
      int[] intArray0 = new int[1];
      resultMatrixSignificance0.setColOrder(intArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      int[] intArray1 = new int[0];
      resultMatrixCSV0.setRowOrder(intArray1);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.4635864941667336
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_StdDevPrec = 7;
      resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      int[] intArray0 = new int[7];
      resultMatrixSignificance0.getRowName((-1069));
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(7, resultMatrixSignificance0.getStdDevPrec());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName(90);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.52751915084157
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixHTML0.globalInfo();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setShowStdDev(true);
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_SignificanceWidth = 0;
      resultMatrixHTML0.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      resultMatrixHTML0.isStdDev(0);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(1, resultMatrixHTML0.getColCount());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_SignificanceWidth = 0;
      resultMatrixHTML0.m_MeanPrec = 2449;
      resultMatrixHTML0.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      resultMatrixHTML0.isStdDev(0);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.4005799331940456
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-406.95585);
      doubleArray0[5] = (double) 1;
      resultMatrixHTML0.m_Counts = doubleArray0;
      resultMatrixHTML0.setMeanWidth(0);
      double double0 = resultMatrixHTML0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      
      int int1 = resultMatrixHTML0.getRowNameWidth();
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, int1);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDisplayName();
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.4391175858873746
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultCountWidth();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 5;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1322;
      intArray0[6] = 5;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      stringArray0[2] = "*";
      stringArray0[3] = "";
      stringArray0[4] = "h$t[|j:};kukcgs";
      stringArray0[5] = ")";
      stringArray0[6] = "v";
      stringArray0[7] = " ";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.631612186595399
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-2526.488443591);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 792.2631423633;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 792.2631423633;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      resultMatrixLatex0.m_StdDev = doubleArray0;
      booleanArray0[2] = false;
      resultMatrixLatex0.m_ColHidden = booleanArray0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }
}
