/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:45:20 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.626034392004327
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toString();
      resultMatrixGnuPlot0.getColHidden((-2458));
      resultMatrixGnuPlot0.printRowNamesTipText();
      int int0 = 1313;
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-2458), 1313);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.968954350289912
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1318);
      Vector<Integer> vector0 = new Vector<Integer>(1318, 0);
      vector0.add(integer0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setSize(0, 1318);
      assertEquals(0, resultMatrixCSV0.getColCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.addHeader("ZQnsQd<do", "q.Q3");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV1);
      resultMatrixGnuPlot0.setSignificanceWidth(1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "]";
      stringArray0[1] = " ";
      stringArray0[2] = "*";
      stringArray0[3] = "v";
      ResultMatrixLatex.main(stringArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      resultMatrixGnuPlot0.setColOrder(intArray0);
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixCSV1.globalInfo();
      assertFalse(resultMatrixCSV0.getPrintColNames());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.299218505544076
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getRevision();
      resultMatrixHTML0.setStdDevWidth((-516));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      resultMatrixCSV0.setRowOrder(intArray0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2844938065620792
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      int int0 = resultMatrixHTML0.getSignificanceCount(0, 25);
      assertEquals(0, int0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, 26);
      String string0 = resultMatrixGnuPlot0.getRowName((-4431));
      assertNull(string0);
      
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixHTML0.setRemoveFilterName(false);
      resultMatrixGnuPlot0.toStringRanking();
      String string1 = resultMatrixGnuPlot0.getSummaryTitle(1);
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals("b", string1);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3835905053363384
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_MeanPrec = 2449;
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.setStdDevWidth(2449);
      String[] stringArray0 = new String[8];
      stringArray0[1] = "(";
      stringArray0[3] = "\tWhether to enumerate the row names (prefixing them with \n\t'(x)', with 'x' being the index).\n\t(default: no)";
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.setMeanPrec(4290);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixPlainText0.m_ShowAverage = true;
      resultMatrixLatex0.getRemoveFilterName();
      resultMatrixPlainText0.setCount(0, 0);
      assertEquals(2449, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2449, resultMatrixPlainText0.getStdDevWidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.9284929040864727
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.stdDevPrecTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixSignificance0.getRevision();
      resultMatrixPlainText0.addHeader("The number of decimals after the decimal point for the standard deviation.", " ");
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.m_EnumerateColNames = true;
      resultMatrixPlainText0.globalInfo();
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixLatex0.toArray();
      resultMatrixLatex0.RIGHT_PARENTHESES = "v";
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      resultMatrixGnuPlot0.getRowName(0);
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.toStringRanking();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.0127726211715204
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 3);
      resultMatrixSignificance0.m_StdDevPrec = 3;
      resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getColHidden(3);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.padString("", 0, false);
      resultMatrixLatex0.getDefaultMeanPrec();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.addHeader("vc", " ");
      resultMatrixHTML0.getDisplayName();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixLatex0.setColNameWidth(3);
      resultMatrixSignificance1.doubleToString(3, 1);
      resultMatrixSignificance0.clearHeader();
      // Undeclared exception!
      try { 
        resultMatrixSignificance1.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.424780285662753
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevPrec(0);
      resultMatrixSignificance0.m_EnumerateColNames = true;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = (-1075);
      intArray0[5] = 0;
      intArray0[6] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.getSignificanceCount(2484, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV1.setEnumerateColNames(true);
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV1.setRowNameWidth(0);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(1, 1);
      resultMatrixCSV2.getRemoveFilterName();
      ResultMatrixCSV resultMatrixCSV3 = null;
      try {
        resultMatrixCSV3 = new ResultMatrixCSV(1, (-1075));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.267915825043519
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(45, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixCSV0.setSignificance(0, 0, 516);
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex((-1523), 112);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.517359043051274
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.setMeanPrec((-20));
      resultMatrixHTML0.m_ColNameWidth = (-20);
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.TIE_STRING = "";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixCSV0.setSignificance(0, 28, 2);
      int int0 = 1285;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1152, 1);
      resultMatrixLatex0.toStringKey();
      ResultMatrixLatex resultMatrixLatex1 = null;
      try {
        resultMatrixLatex1 = new ResultMatrixLatex((-851), (-851));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.7996982623478712
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.toString();
      resultMatrixLatex0.clearRanking();
      resultMatrixLatex0.setSize(0, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2, 2177);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1976818297047043
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 63);
      int[][] intArray0 = new int[18][3];
      int[] intArray1 = new int[3];
      intArray1[1] = 26;
      intArray1[2] = 63;
      resultMatrixHTML0.TIE_STRING = "\tThe number of decimals after the decimal point for the mean.\n\t(default: ";
      intArray0[0] = intArray1;
      resultMatrixHTML0.setRanking(intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      resultMatrixSignificance0.m_PrintRowNames = true;
      resultMatrixSignificance0.setMean(587, 1201, 1351);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      
      resultMatrixHTML0.getRowHidden((-124));
      assertFalse(resultMatrixHTML0.getDefaultRemoveFilterName());
      assertEquals(26, resultMatrixHTML0.getColCount());
      assertEquals(63, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.5396636035754026
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 584);
      resultMatrixGnuPlot0.TIE_STRING = "The width of the significance indicator (0 = optimal).";
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.setStdDevWidth(2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 584;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 584;
      doubleArray0[5] = (double) 584;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 2;
      resultMatrixLatex0.addHeader("z@v=P`b~6iy$`", "The width of the significance indicator (0 = optimal).");
      resultMatrixLatex0.m_Counts = doubleArray0;
      resultMatrixGnuPlot0.setSignificanceWidth((-1));
      resultMatrixGnuPlot0.assign(resultMatrixLatex0);
      resultMatrixLatex0.getDefaultMeanPrec();
      resultMatrixGnuPlot0.getRevision();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.addHeader("v", "*");
      resultMatrixHTML0.getDisplayName();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixLatex0.setColNameWidth(1124);
      resultMatrixSignificance0.doubleToString((-549.660331), 1206);
      resultMatrixSignificance0.clearHeader();
      resultMatrixHTML0.getShowAverage();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4574937871226195
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[2] = "";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "";
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.addHeader("$circ$", "]");
      resultMatrixHTML0.getColName(6);
      resultMatrixHTML0.toStringHeader();
      resultMatrixHTML0.getRowName(6);
      resultMatrixHTML0.getCount((-913));
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowNameWidth(2);
      resultMatrixLatex0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((-1651), 26);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.096683820962742
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.setMeanPrec((-20));
      resultMatrixHTML0.m_ColNameWidth = (-20);
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.TIE_STRING = "";
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      resultMatrixHTML0.setColOrder(intArray0);
      assertEquals((-20), resultMatrixHTML0.getColNameWidth());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "*";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText0.removeFilterName("");
      resultMatrixPlainText0.getDefaultMeanWidth();
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.269331972256162
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(0, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      
      resultMatrixSignificance0.m_StdDevPrec = (-124);
      resultMatrixSignificance0.setMean(1, 1351, 0.0);
      resultMatrixHTML0.getRowHidden(0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2913789160859594
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      resultMatrixSignificance0.setMean(5, 1351, (-3447.69212736));
      boolean boolean0 = resultMatrixSignificance0.isRowName((-2642));
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(boolean0);
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(5, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.9525101139617687
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(31, 31);
      Vector<Integer> vector0 = new Vector<Integer>();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "*";
      stringArray0[2] = "]";
      stringArray0[3] = "v";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      try { 
        resultMatrixPlainText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.193906838032792
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultCountWidth();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 5;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1322;
      intArray0[6] = 5;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      stringArray0[2] = "*";
      stringArray0[3] = "";
      stringArray0[4] = "h$t[|j:};kukcgs";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1322, 1);
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.setMean(1322, 0, 2);
      int int0 = resultMatrixGnuPlot0.getRowCount();
      assertEquals(1, int0);
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2708023855863284
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      double double0 = resultMatrixHTML0.getAverage(2);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(1, int0);
      
      resultMatrixHTML0.globalInfo();
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.982697673429852
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec((-220));
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 5);
      resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      int[] intArray0 = new int[8];
      intArray0[0] = 5;
      intArray0[1] = 1;
      intArray0[2] = (-2168);
      intArray0[3] = 2;
      intArray0[4] = (-1075);
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 1;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixGnuPlot0.getSummaryTitle((-220));
      resultMatrixSignificance0.getSignificanceCount((-220), (-2168));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth(29);
      resultMatrixCSV0.getRemoveFilterName();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 1);
      resultMatrixCSV1.isSignificance(17);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance1.setShowStdDev(true);
      assertEquals(29, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixCSV1.setRowOrder(intArray0);
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.084081633058164
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "n{v^y>7yh%#v&ec.,1";
      stringArray0[2] = "";
      stringArray0[3] = "a$Lr6l#Y!B7 ";
      stringArray0[4] = "";
      stringArray0[5] = "%2,vQ&ytX;Ou(";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText0.getSummaryTitle(1172);
      resultMatrixPlainText0.removeFilterName("");
      resultMatrixPlainText0.setRowNameWidth(97);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clear();
      resultMatrixPlainText0.getMeanPrec();
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.0219285440002865
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 3);
      resultMatrixGnuPlot0.significanceWidthTipText();
      int int0 = 876;
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      boolean boolean0 = false;
      resultMatrixGnuPlot0.setColHidden(0, false);
      resultMatrixGnuPlot0.setPrintRowNames(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      stringArray0[2] = ")";
      stringArray0[3] = "v";
      stringArray0[4] = "*";
      resultMatrixGnuPlot0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.9595378394378704
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.stdDevPrecTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixSignificance0.m_HeaderKeys = null;
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixSignificance0.getRevision();
      resultMatrixPlainText0.addHeader("The number of decimals after the decimal point for the standard deviation.", " ");
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.m_EnumerateColNames = true;
      resultMatrixPlainText0.globalInfo();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixLatex0.toArray();
      resultMatrixSignificance0.RIGHT_PARENTHESES = "v";
      resultMatrixSignificance0.getRowName(95);
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.setMean(0, 2, (-1307.5999512037722));
      assertEquals(2, resultMatrixSignificance1.getDefaultMeanPrec());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.5610469916099867
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.setMeanPrec((-20));
      resultMatrixHTML0.m_ColNameWidth = (-20);
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.TIE_STRING = "";
      int[] intArray0 = new int[25];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      resultMatrixHTML0.setColOrder(intArray0);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      resultMatrixHTML0.m_MeanPrec = 3;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3, 0);
      resultMatrixSignificance0.setMean(0, 0, (-1265.99));
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2398319751329576
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2873.95);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (-2873.95);
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-2873.95);
      doubleArray3[1] = (-2873.95);
      doubleArray3[2] = (-2873.95);
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 3388.23;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.setMean((-2321), (-1916), (-1364.27811));
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals(50, resultMatrixSignificance0.getRowNameWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.getRowHidden(0);
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2405770989550042
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.m_HeaderValues = vector0;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      resultMatrixSignificance0.m_ColHidden = booleanArray0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance1.setMean((-1325), 263, 0.30782779145166245);
      assertEquals(0, resultMatrixSignificance1.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance1.getMeanWidth());
      assertEquals(2, resultMatrixSignificance1.getStdDevPrec());
      assertEquals(2, resultMatrixSignificance1.getMeanPrec());
      assertEquals(0, resultMatrixSignificance1.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance1.getSignificanceWidth());
      assertTrue(resultMatrixSignificance1.getPrintRowNames());
      assertFalse(resultMatrixSignificance1.getEnumerateRowNames());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(263, 1);
      resultMatrixHTML0.getRowHidden(39);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.030116497350727
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringRanking();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixGnuPlot0.setStdDevWidth(60);
      resultMatrixGnuPlot0.getRevision();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixPlainText0.getDisplayName();
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(181, 1);
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[1];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 60;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 60;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = 1638.28;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) 60;
      doubleArray3[5] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (-1597.0);
      doubleArray4[1] = 1638.28;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 181;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (double) 2;
      doubleArray4[6] = (double) 60;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 1.0;
      doubleArray0[4] = doubleArray5;
      resultMatrixCSV0.m_Mean = doubleArray0;
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.733570164179559
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 3);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.significanceWidthTipText();
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColHidden(1528);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "v";
      stringArray0[1] = "=,0E.I0dSnWbu(I%";
      stringArray0[2] = "v";
      stringArray0[3] = "*";
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3417458267763758
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      String string0 = resultMatrixSignificance0.doubleToString(598.0, 5);
      assertEquals("598.00000", string0);
      
      resultMatrixSignificance0.LEFT_PARENTHESES = "598.00000";
      resultMatrixSignificance0.setMean(5, 1351, (-3447.69212736));
      resultMatrixSignificance0.printRowNamesTipText();
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(5, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.4374297485632876
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      String string0 = resultMatrixGnuPlot0.doubleToString((-238.4), 97);
      assertEquals("-238.4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", string0);
      
      resultMatrixGnuPlot0.enumerateRowNamesTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      String string1 = resultMatrixSignificance0.toStringKey();
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals("Key:\n(1) col0\n", string1);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.379161241812674
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.setMeanPrec((-20));
      resultMatrixHTML0.m_ColNameWidth = (-20);
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.TIE_STRING = "";
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixHTML0.m_MeanPrec = 0;
      resultMatrixHTML0.LEFT_PARENTHESES = "!_";
      resultMatrixHTML0.addHeader((String) null, "setColOrder: length does not match (");
      resultMatrixHTML0.getColName(0);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.124365809783805
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (-2526.488443591);
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 792.2631423633;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 792.2631423633;
      doubleArray6[1] = 0.0;
      doubleArray0[5] = doubleArray6;
      resultMatrixLatex0.m_StdDev = doubleArray0;
      booleanArray0[2] = false;
      resultMatrixLatex0.m_ColHidden = booleanArray0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getHeader("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.144073801240875
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-2873.95);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (-2873.95);
      doubleArray2[2] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[9];
      doubleArray3[0] = (-2873.95);
      doubleArray3[2] = (-2873.95);
      doubleArray3[3] = (double) 0;
      doubleArray3[4] = 3388.23;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = (double) 1;
      doubleArray3[8] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (-751.081763);
      doubleArray4[1] = 3388.23;
      doubleArray4[2] = (-1.0);
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (-2873.95);
      doubleArray4[5] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = 3388.23;
      doubleArray5[1] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (-2873.95);
      doubleArray6[2] = 3388.23;
      doubleArray6[3] = (-2873.95);
      doubleArray6[4] = (-2873.95);
      doubleArray6[5] = (-751.081763);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (-546.9843872);
      doubleArray7[1] = (double) 0;
      doubleArray0[6] = doubleArray7;
      String string0 = resultMatrixGnuPlot0.getRowName(0);
      assertEquals("row0", string0);
      assertNotNull(string0);
      
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      
      resultMatrixGnuPlot0.toStringRanking();
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.439422644690552
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(3, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 3;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 3;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 25;
      intArray3[5] = 1;
      resultMatrixHTML0.removeFilterName("`LB!:U=t)MoRvXKx");
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 3;
      intArray4[1] = 2;
      intArray4[2] = 4361;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray0[4] = intArray5;
      resultMatrixHTML0.m_NonSigWins = intArray0;
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4331015299349468
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 2;
      doubleArray2[4] = (double) 1;
      doubleArray2[5] = (double) 1;
      doubleArray2[6] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 738.0;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 1;
      doubleArray4[6] = (double) 2;
      doubleArray4[7] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = (double) 2;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[0];
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[5];
      doubleArray7[0] = (double) 2;
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = 738.0;
      doubleArray7[3] = 10.0;
      doubleArray7[4] = (double) 1;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (double) 0;
      doubleArray8[1] = (double) 0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[6];
      doubleArray9[0] = 0.0;
      doubleArray9[1] = (double) 2;
      doubleArray9[2] = 738.0;
      doubleArray9[3] = 0.0;
      doubleArray9[4] = 10.0;
      doubleArray9[5] = 10.0;
      doubleArray0[8] = doubleArray9;
      resultMatrixLatex0.m_Mean = doubleArray0;
      resultMatrixLatex0.isAverage(4001);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.2372065649126105
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int int0 = resultMatrixHTML0.getDisplayRow((-2447));
      assertEquals((-1), int0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      String string0 = resultMatrixLatex0.toStringKey();
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.854274310266394
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec((-220));
      resultMatrixGnuPlot0.significanceWidthTipText();
      int int0 = 876;
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      resultMatrixGnuPlot0.m_RowNames = stringArray0;
      boolean boolean0 = false;
      resultMatrixGnuPlot0.setColHidden(876, false);
      resultMatrixGnuPlot0.setPrintRowNames(false);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "v";
      stringArray1[1] = "The width of the significance indicator (0 = optimal).";
      stringArray1[2] = "The width of the significance indicator (0 = optimal).";
      resultMatrixGnuPlot0.m_RankingLosses = null;
      resultMatrixGnuPlot0.setOptions(stringArray1);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.8917351908803264
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.setMeanPrec((-20));
      resultMatrixHTML0.m_ColNameWidth = (-20);
      resultMatrixHTML0.m_PrintRowNames = true;
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.TIE_STRING = "";
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setMeanWidth((-207));
      resultMatrixPlainText0.globalInfo();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 1);
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixLatex0.m_HeaderKeys = vector0;
      resultMatrixLatex0.toArray();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getRowName(0);
      resultMatrixLatex0.clearHeader();
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.clear();
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.9527580077001168
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.stdDevPrecTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixSignificance0.getRevision();
      assertEquals(1, resultMatrixLatex0.getColCount());
      
      resultMatrixPlainText0.addHeader("The number of decimals after the decimal point for the standard deviation.", " ");
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.m_EnumerateColNames = true;
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixLatex0.toArray();
      resultMatrixSignificance0.RIGHT_PARENTHESES = "v";
      resultMatrixSignificance0.getRowName(95);
      resultMatrixLatex0.clearHeader();
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.clear();
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.975226849458559
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 584);
      resultMatrixGnuPlot0.TIE_STRING = "The width of the significance indicator (0 = optimal).";
      resultMatrixGnuPlot0.setEnumerateRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.setStdDevWidth(2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 584;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 584;
      doubleArray0[5] = (double) 584;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 2;
      resultMatrixLatex0.addHeader("z@v=P`b~6iy$`", "The width of the significance indicator (0 = optimal).");
      resultMatrixLatex0.m_Counts = doubleArray0;
      resultMatrixGnuPlot0.setSignificanceWidth((-1));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "The width of the significance indicator (0 = optimal).";
      stringArray0[3] = "The width of the significance indicator (0 = optimal).";
      stringArray0[4] = "v";
      stringArray0[5] = "z@v=P`b~6iy$`";
      ResultMatrixLatex.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1462557799044175
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 0;
      resultMatrixCSV0.m_RankingDiff = intArray0;
      String string0 = resultMatrixCSV0.padString("$circ$", 1, true);
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getRowNameWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals("$", string0);
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.492663304169674
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 25;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.m_HeaderValues = vector0;
      booleanArray0[4] = false;
      resultMatrixSignificance0.padString("-*f/<j-OdXSh'se", 1286, true);
      booleanArray0[5] = false;
      resultMatrixSignificance0.m_ColHidden = booleanArray0;
      resultMatrixSignificance0.isSignificance((-628));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":8@}'yhpeU'.B ");
      vector0.removeIf(predicate0);
      resultMatrixSignificance0.setRowName(0, ":8@}'yhpeU'.B ");
      String string0 = "\tThe width of the counts (0 = optimal).\n\t(default: ";
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText(0, (-944));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.002041479784136
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setStdDevPrec(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setColHidden((-1), true);
      resultMatrixGnuPlot0.setPrintRowNames(true);
      String[] stringArray0 = new String[0];
      resultMatrixGnuPlot0.setOptions(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.toArray();
      resultMatrixGnuPlot0.padString(" ", (-551));
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(44, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.151796958930968
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      resultMatrixLatex0.stdDevPrecTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixSignificance0.getRevision();
      resultMatrixPlainText0.addHeader("The number of decimals after the decimal point for the standard deviation.", " ");
      resultMatrixPlainText0.setMeanWidth(0);
      resultMatrixPlainText0.m_EnumerateColNames = true;
      resultMatrixPlainText0.globalInfo();
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixLatex0.toArray();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setOptions((String[]) null);
      resultMatrixPlainText0.removeFilterName("Variance: ");
      assertFalse(resultMatrixPlainText0.getPrintColNames());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4257378821381383
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2;
      intArray0[4] = 3;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 1;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      resultMatrixGnuPlot0.m_ColNameWidth = 0;
      booleanArray0[4] = false;
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.m_ColHidden = booleanArray0;
      resultMatrixGnuPlot0.setMeanWidth(1865);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixGnuPlot0.getColOrder();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      assertEquals(1865, resultMatrixGnuPlot0.getMeanWidth());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.22701448677876
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 26;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 97);
      int[][] intArray0 = new int[1][3];
      int[] intArray1 = new int[3];
      intArray1[0] = 97;
      intArray1[1] = 26;
      intArray1[2] = 97;
      resultMatrixHTML0.TIE_STRING = "\tThe number of decimals after the decimal point for the mean.\n\t(default: ";
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.478504950785029
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(26, 63);
      int[][] intArray0 = new int[18][3];
      int[] intArray1 = new int[3];
      intArray1[1] = 63;
      intArray1[1] = 26;
      intArray1[2] = 63;
      resultMatrixHTML0.TIE_STRING = "\tThe number of decimals after the decimal point for the mean.\n\t(default: ";
      intArray0[0] = intArray1;
      resultMatrixHTML0.setRanking(intArray0);
      resultMatrixHTML0.meanWidthTipText();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixHTML0.m_EnumerateRowNames = true;
      resultMatrixHTML0.meanPrecTipText();
      assertEquals(26, resultMatrixHTML0.getColCount());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(26, 63);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setMean(253, 240, 1);
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(0, 218);
      resultMatrixHTML2.getRowHidden(13);
      assertEquals(0, resultMatrixHTML2.getStdDevWidth());
      assertEquals(218, resultMatrixHTML2.getRowCount());
      assertEquals(2, resultMatrixHTML2.getDefaultMeanPrec());
      assertFalse(resultMatrixHTML2.getDefaultShowStdDev());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.232923716234279
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultShowStdDev();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 0);
      resultMatrixHTML0.toStringRanking();
      assertFalse(resultMatrixHTML0.getDefaultShowAverage());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertTrue(resultMatrixHTML0.getDefaultPrintRowNames());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2845658749149194
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setEnumerateColNames(false);
      resultMatrixPlainText0.clearHeader();
      resultMatrixPlainText0.getDisplayName();
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.416802778766062
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec((-220));
      resultMatrixGnuPlot0.significanceWidthTipText();
      resultMatrixGnuPlot0.setEnumerateRowNames(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      resultMatrixGnuPlot0.m_RowNames = stringArray0;
      resultMatrixGnuPlot0.setColHidden(876, false);
      resultMatrixGnuPlot0.setPrintRowNames(false);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "v";
      stringArray1[1] = "The width of the significance indicator (0 = optimal).";
      stringArray1[2] = "The width of the significance indicator (0 = optimal).";
      resultMatrixGnuPlot0.m_RankingLosses = null;
      resultMatrixGnuPlot0.getRowName(50);
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringRanking();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.962880275952584
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 3);
      resultMatrixSignificance0.m_StdDevPrec = 3;
      resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      resultMatrixSignificance0.m_MeanWidth = (-1075);
      intArray0[1] = (-2168);
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.m_StdDevWidth = 0;
      resultMatrixSignificance0.getSignificanceCount(3, 2484);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth(1);
      resultMatrixCSV0.getRemoveFilterName();
      resultMatrixCSV0.isSignificance(0);
      resultMatrixSignificance0.setShowStdDev(false);
      int[] intArray1 = new int[1];
      intArray1[0] = (-1075);
      resultMatrixCSV0.setRowOrder(intArray1);
      assertEquals((-1075), resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2988275969608405
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_SignificanceWidth = 0;
      resultMatrixHTML0.m_MeanPrec = 2449;
      resultMatrixHTML0.getRevision();
      int int0 = (-516);
      resultMatrixHTML0.setStdDevWidth(2449);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowNameWidth((-516));
      int[] intArray0 = new int[0];
      resultMatrixCSV0.setRowOrder(intArray0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2544892040296496
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getSignificanceCount(3, 25);
      int[][] intArray0 = new int[5][6];
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 3;
      intArray2[2] = 0;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[6];
      intArray3[0] = 2;
      intArray3[1] = 3;
      intArray3[2] = 0;
      intArray3[3] = 0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setMean(890, 1346, 1351);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      
      resultMatrixHTML0.getRowHidden((-3679));
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.342092393843478
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(5, 5);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.setColOrder((int[]) null);
      resultMatrixHTML0.addHeader("!_", ")");
      resultMatrixHTML0.getColName(5);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(5, 0);
      // Undeclared exception!
      try { 
        resultMatrixHTML1.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.991754976523204
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 3);
      resultMatrixSignificance0.m_StdDevPrec = 3;
      resultMatrixSignificance0.getOptions();
      resultMatrixSignificance0.setEnumerateColNames(true);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      resultMatrixSignificance0.m_MeanWidth = (-1075);
      intArray0[1] = (-2168);
      intArray0[2] = 2;
      intArray0[3] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixSignificance0.doubleToString(3, 1357);
      resultMatrixSignificance0.getSignificanceCount(2, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setEnumerateColNames(true);
      resultMatrixCSV0.setShowAverage(true);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setRowNameWidth((-1075));
      resultMatrixCSV0.getRemoveFilterName();
      resultMatrixCSV0.isSignificance((-2168));
      resultMatrixCSV0.m_RankingLosses = intArray0;
      resultMatrixSignificance0.setShowStdDev(true);
      resultMatrixCSV0.setRowOrder(intArray0);
      resultMatrixCSV0.getDefaultColNameWidth();
      assertEquals((-1075), resultMatrixSignificance0.getMeanWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.0213463113353973
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      resultMatrixHTML0.globalInfo();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setShowStdDev(true);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2842228217416776
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_SignificanceWidth = 0;
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      
      resultMatrixHTML0.m_MeanPrec = 2449;
      resultMatrixHTML0.getRevision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      resultMatrixHTML0.isStdDev(0);
      assertEquals(1, resultMatrixHTML0.getColCount());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.895907035997784
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixHTML0.setMeanWidth(0);
      double double0 = resultMatrixHTML0.getAverage(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = resultMatrixHTML0.getVisibleColCount();
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(1, int0);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2282744338409093
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDisplayName();
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.939050552773016
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultCountWidth();
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 5;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 1322;
      intArray0[6] = 5;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = " ";
      stringArray0[2] = "*";
      stringArray0[3] = "";
      stringArray0[4] = "h$t[|j:};kukcgs";
      stringArray0[5] = ")";
      stringArray0[6] = "v";
      stringArray0[7] = " ";
      ResultMatrixGnuPlot.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.48677446136606
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 2);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.isSignificance(974);
      Integer integer0 = new Integer(1);
      resultMatrixSignificance0.setRowName(1, "{*;?R}9/e_u3@[8");
      Integer integer1 = new Integer((-775));
      vector0.add((Object) integer1);
      resultMatrixSignificance0.getRowHidden((-775));
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML(3889, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.010521705922174
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(25, 0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.m_HeaderValues = vector0;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      resultMatrixSignificance0.m_ColHidden = booleanArray0;
      resultMatrixSignificance0.isSignificance((-628));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "v";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2364195679099574
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setMean(5, 0, 0);
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=4.010248159576114
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.m_MeanPrec = 2449;
      resultMatrixHTML0.getRevision();
      resultMatrixHTML0.setStdDevWidth(2449);
      int[] intArray0 = new int[0];
      String[] stringArray0 = new String[8];
      stringArray0[1] = "(";
      stringArray0[3] = "\tWhether to enumerate the row names (prefixing them with \n\t'(x)', with 'x' being the index).\n\t(default: no)";
      stringArray0[4] = "8034";
      stringArray0[6] = "v";
      stringArray0[7] = "";
      ResultMatrixHTML.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }
}
