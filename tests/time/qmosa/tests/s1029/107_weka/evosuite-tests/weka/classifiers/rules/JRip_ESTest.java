/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:32:38 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.net.estimate.BayesNetEstimator;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1668388922527644
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      jRip0.setUsePruning(false);
      stringArray0[1] = "inproceedings";
      stringArray0[2] = ".props";
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.setConsequent((-2682.68));
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.size();
      jRip_RipperRule0.hasAntds();
      jRip0.optimizationsTipText();
      jRip0.getCheckErrorRate();
      assertFalse(jRip0.getUsePruning());
      
      jRip0.setOptions(stringArray0);
      jRip0.getMinNo();
      jRip0.getTechnicalInformation();
      Attribute attribute0 = new Attribute("inproceedings", "4G", (-1596));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 3;
      DenseInstance denseInstance0 = new DenseInstance(0.5, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.284895754901243
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      jRip0.getCheckErrorRate();
      jRip0.seedTipText();
      jRip0.getTechnicalInformation();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1663.2);
      doubleArray0[1] = (-1663.2);
      doubleArray0[2] = (-1663.2);
      doubleArray0[3] = (-1663.2);
      doubleArray0[4] = (-1663.2);
      doubleArray0[5] = 652.38;
      SparseInstance sparseInstance0 = new SparseInstance((-1663.2), doubleArray0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2K[");
      JRip jRip0 = new JRip();
      jRip0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JRIP: No model built yet.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.setFolds((-2930));
      jRip0.getTechnicalInformation();
      jRip0.enumerateMeasures();
      jRip0.getFolds();
      jRip0.seedTipText();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-17));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.getRevision();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 1);
      double double0 = 452.302361296;
      jRip_NominalAntd0.splitData(instances0, 452.302361296, 1.0);
      // Undeclared exception!
      try { 
        instances0.trainCV(3, 3, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNet0.setEstimator(bayesNetEstimator0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jRip0.getUsePruning();
      Predicate.isEqual((Object) null);
      jRip0.toString();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9366147725931564
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNet0.setEstimator(bayesNetEstimator0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      bayesNet0.setEstimator(bayesNetEstimator0);
      BayesNet bayesNet1 = new BayesNet();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getAccu();
      try { 
        jRip0.rulesetForOneClass(1.4502560509629152, (Instances) null, (-257.4332133), 1128.25981503366);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4922963932744846
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-2218));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-2218);
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(69);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      BallNode ballNode0 = new BallNode(31);
      JRip.main((String[]) null);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Set<String> set0 = protectedProperties0.stringPropertyNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("One rule added: has positive? ", list0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      jRip0.minNoTipText();
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "integer";
      stringArray0[1] = "@end";
      stringArray0[2] = "relational";
      stringArray0[3] = "real";
      stringArray0[4] = "One rule added: has positive? ";
      stringArray0[5] = "numeric";
      stringArray0[6] = "@end";
      jRip0.setOptions(stringArray0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      jRip0.getTechnicalInformation();
      jRip0.enumerateMeasures();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[4];
      jRip0.getOptions();
      Instances.test(stringArray0);
      RuleStats ruleStats0 = new RuleStats();
      jRip0.optimizationsTipText();
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.284895754901243
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(0.693147181);
      Attribute attribute0 = new Attribute("\noldDL: ");
      Attribute attribute1 = attribute0.copy("\noldDL: ");
      jRip_RipperRule0.toString(attribute0);
      assertEquals(0.693147181, jRip_RipperRule0.getConsequent(), 0.01);
      
      attribute0.copy("O]C ");
      attribute1.copy();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-569.1309558999053), (int[]) null, 4);
      jRip_NumericAntd0.getAttrValue();
      jRip0.getOptions();
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip jRip1 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 552;
      intArray0[1] = (int) (byte) (-89);
      intArray0[2] = 50;
      intArray0[3] = 50;
      intArray0[4] = 552;
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", (-1838));
      Attribute attribute1 = attribute0.copy((String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      String string1 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string1);
      
      String string2 = jRip_NumericAntd0.toString();
      assertEquals("null <= NaN", string2);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute1);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1393);
      binarySparseInstance0.dataset();
      Attribute attribute0 = new Attribute(".bsi", (List<String>) null, 6);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1393, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-O", arrayList0, 100000);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute(".arff", instances0, protectedProperties0);
      attribute0.setWeight(1316.7919760167);
      jRip0.setMinNo(1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "integer";
      stringArray0[2] = "@attribute";
      stringArray0[3] = "real";
      stringArray0[4] = "real";
      stringArray0[5] = "numeric";
      stringArray0[6] = ".arff";
      stringArray0[7] = "relational";
      JRip.main(stringArray0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Locale.getISOLanguages();
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      BayesNet bayesNet1 = new BayesNet();
      bayesNet1.setEstimator(bayesNetEstimator0);
      CoverTree coverTree0 = new CoverTree();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-99);
      doubleArray0[1] = (double) (-99);
      doubleArray0[2] = (double) (-99);
      doubleArray0[3] = (double) (-99);
      doubleArray0[5] = (double) (-99);
      doubleArray0[6] = (double) (-99);
      doubleArray0[7] = (-2797.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2797.0), doubleArray0);
      int int0 = jRip1.getFolds();
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(3, int0);
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte)67;
      byteArray0[3] = (byte) (-52);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, int0);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      String string0 = jRip0.checkErrorRateTipText();
      assertFalse(jRip0.getDebug());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassOrder classOrder0 = new ClassOrder();
      JRip jRip0 = new JRip();
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
      
      boolean boolean0 = jRip0.getDebug();
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4196189862824298
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      jRip0.setUsePruning(false);
      jRip0.getTechnicalInformation();
      jRip0.enumerateMeasures();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      Evaluation evaluation0 = decisionTable1.m_evaluation;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = decisionTable1.m_theInstances;
      jRip0.toString();
      try { 
        jRip0.rulesetForOneClass((-1325.148381367), (Instances) null, (-1778.218), 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4196189862824298
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jRip0.setUsePruning(false);
      jRip0.getTechnicalInformation();
      jRip0.enumerateMeasures();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable0 = new DecisionTable();
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = decisionTable0.m_theInstances;
      decisionTable0.m_displayRules = false;
      jRip0.toString();
      try { 
        jRip0.rulesetForOneClass(4, (Instances) null, 1.0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[2] = (byte) (-102);
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-98);
      byteArray0[5] = (byte) (-89);
      JRip jRip0 = new JRip();
      jRip0.setFolds((byte)13);
      jRip0.minNoTipText();
      jRip0.foldsTipText();
      jRip0.foldsTipText();
      assertEquals(13, jRip0.getFolds());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7ThJw&o");
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNetEstimator0.setAlpha(1.0E-75);
      bayesNet0.setEstimator(bayesNetEstimator0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka.core.tokenizers.Tokenizer");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-123);
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AbstractClassifier.makeCopy(bayesNet0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("r>CCYAL?Rq2^:.qUc7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // r>CCYAL?Rq2^:.qUc7 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 490.3809392454;
      doubleArray0[1] = 490.3809392454;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 490.3809392454;
      doubleArray0[4] = 490.3809392454;
      doubleArray0[5] = 490.3809392454;
      doubleArray0[6] = 490.3809392454;
      doubleArray0[7] = 490.3809392454;
      SparseInstance sparseInstance0 = new SparseInstance(490.3809392454, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip1 = new JRip();
      jRip1.setCheckErrorRate(true);
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)71;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.getRevision();
      jRip0.getSeed();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("8118");
      attribute0.enumerateValues();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      jRip1.setDebug(true);
      assertTrue(jRip1.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-1010L));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~Ze?9";
      String string0 = "lF|o+Nq<fg";
      stringArray0[0] = "lF|o+Nq<fg";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("");
      Attribute attribute1 = attribute0.copy("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 1);
      double double0 = 452.302361296;
      jRip_NominalAntd0.splitData(instances0, 452.302361296, 1.0);
      // Undeclared exception!
      try { 
        instances0.trainCV(3, 3, (Random) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      jRip0.setSeed(86L);
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "pJ?LBt}";
      try { 
        AbstractClassifier.forName("pJ?LBt}", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: pJ?LBt}
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.accuRate = Double.NaN;
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd0.getAccuRate();
      int[] intArray0 = new int[4];
      int int0 = 992;
      intArray0[0] = 992;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(0, 0, intArray0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1919211688441456
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.setMinNo(0.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = ";HvFV0F$Emkhn:$hV";
      stringArray0[2] = "";
      stringArray0[3] = "-S";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.getRevision();
      jRip0.setSeed(2731L);
      jRip0.setOptimizations(0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      Attribute attribute0 = new Attribute("8118", (-315));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccuRate();
      jRip_NominalAntd0.getMaxInfoGain();
      jRip_RipperRule0.getRevision();
      jRip_NominalAntd0.toString();
      assertEquals(2731L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip1.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[1];
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      jRip1.globalInfo();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-890), intArray0, 31);
      try { 
        jRip1.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip_RipperRule0.hasAntds();
      AbstractClassifier.makeCopy(decisionTable0);
      CoverTree coverTree0 = new CoverTree();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 5.0;
      doubleArray0[2] = (double) 5;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-697));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      predicate0.negate();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) bayesNetEstimator0);
      predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate1.or(predicate2);
      linkedList1.removeIf(predicate2);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("MN6JbFz", list0, (-1));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a#", arrayList0, 2);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jRip0.getOptions();
      jRip0.setMinNo(1906.4760098286);
      jRip0.optimizationsTipText();
      jRip0.setDebug(true);
      ClassOrder classOrder0 = new ClassOrder();
      assertTrue(classOrder0.isNewBatch());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      linkedList1.removeIf(predicate2);
      Attribute attribute0 = new Attribute((String) null, 70);
      Attribute attribute1 = attribute0.copy((String) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      String string0 = jRip0.optimizationsTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals("The number of optimization runs.", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.925455344560406
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "bov";
      stringArray0[1] = "r&8";
      stringArray0[2] = ":ZqU{% aZ*x7@6Yxw";
      stringArray0[3] = "2";
      stringArray0[4] = "7kKg]&[y";
      stringArray0[5] = "ishness";
      stringArray0[6] = "";
      stringArray0[7] = "SG#A1YneKIT6du";
      stringArray0[8] = "-O";
      JRip.main(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray1 = jRip0.getOptions();
      JRip jRip1 = new JRip();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      LogitBoost logitBoost0 = new LogitBoost();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      CoverTree coverTree0 = new CoverTree();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.0;
      doubleArray0[1] = 1862.6444;
      doubleArray0[2] = (-1215.2332105903017);
      doubleArray0[3] = (-1215.2332105903017);
      doubleArray0[4] = 5.0;
      doubleArray0[5] = (-1215.2332105903017);
      doubleArray0[6] = 5.0;
      jRip0.setOptions(stringArray1);
      assertEquals(11, stringArray1.length);
      
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      JRip jRip0 = new JRip();
      BayesNetEstimator bayesNetEstimator0 = new BayesNetEstimator();
      bayesNet0.setEstimator(bayesNetEstimator0);
      jRip0.listOptions();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(64.57321);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      StringReader stringReader0 = new StringReader("j3 AC7L");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 1);
      char[] charArray0 = new char[2];
      charArray0[0] = '=';
      charArray0[1] = '2';
      bufferedReader1.read(charArray0);
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader0);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader2);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[AC7L], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 8;
      Attribute attribute0 = new Attribute("#>Z", "#>Z", 8);
      attribute0.indexOfValue("#>Z");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      double double0 = (-204.157);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 3, (-204.157));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("#>Z", "#>Z", 8);
      attribute0.indexOfValue("#>Z");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      decisionTable0.setUseIBk(false);
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.resetOptions();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances1 = decisionTable2.m_theInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.setUseIBk(false);
      decisionTable0.resetOptions();
      Instances instances0 = decisionTable0.m_theInstances;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      jRip0.setFolds(3);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.usePruningTipText();
      jRip0.enumerateMeasures();
      String[] stringArray0 = new String[4];
      Instances.test(stringArray0);
      RuleStats ruleStats0 = new RuleStats();
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      try { 
        bottomUpConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BottomUpConstructor", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.setConsequent(0.693147181);
      assertEquals(0.693147181, jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip jRip1 = new JRip();
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      jRip0.enumerateMeasures();
      jRip_RipperRule0.setConsequent((-1.0));
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        principalComponents0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.061093750171824
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-O", arrayList0, 100000);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Object object0 = jRip_RipperRule0.copy();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.or(predicate1);
      Object object1 = jRip_RipperRule0.copy();
      Predicate<String> predicate3 = Predicate.isEqual(object1);
      linkedList0.removeIf(predicate3);
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass(100000, instances0, 1.4502560509629152, 58.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      decisionTable1.setUseIBk(false);
      DecisionTable decisionTable2 = new DecisionTable();
      decisionTable2.resetOptions();
      Instances instances0 = decisionTable0.m_theInstances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".bsi", arrayList0, 1);
      jRip_RipperRule0.prune(instances1, false);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list1, locale_FilteringMode0);
      jRip0.setFolds((-418));
      assertEquals((-418), jRip0.getFolds());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2732409507095364
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("#>Z", "#>Z", 8);
      attribute0.indexOfValue("#>Z");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      attribute0.formatDate(3);
      jRip_NumericAntd0.att = attribute0;
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      attribute0.setWeight(2);
      jRip_NumericAntd0.cover = (double) 2;
      Attribute attribute1 = (Attribute)attribute0.copy();
      jRip_NumericAntd0.copy();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, intArray0, 2155);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd2 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd2.getAttr();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.setOptimizations((-9));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      Reader reader0 = null;
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-2218));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) (-2218);
      doubleArray0[3] = 0.0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(69);
      jRip_RipperRule0.covers(denseInstance0);
      BallNode ballNode0 = new BallNode(31);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1), intArray0, (-2218));
      SparseInstance sparseInstance0 = new SparseInstance(1834);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) sparseInstance0);
      AbstractClassifier.makeCopy(jRip0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("*", "*");
      Locale.getISOLanguages();
      jRip_RipperRule0.size();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertFalse(jRip0.getDebug());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(" => *=", string0);
  }
}
