/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:24:27 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5318693112075703
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-132));
      advancedSettings0.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings1.setPerformancePreferencesConnectionTime((-132));
      advancedSettings1.setClientSocketSendBufferSize(2328);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.toXML("");
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass(";");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5727839993038435
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("z*E{;osHDE");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setByteBufferSize((-2427));
      advancedSettings0.setClientSocketTrafficClass("</qsobject-pool-maker>\n");
      advancedSettings0.setClientSocketReceiveBufferSize((-444));
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setClientSocketTrafficClass("</qsobject-pool-maker>\n");
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("u~f,f5");
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(10, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-593));
      advancedSettings0.setPerformancePreferencesLatency((-593));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize(2237);
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</performance-preferences-connection-time>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </performance-preferences-connection-time>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6237750563233666
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setQSObjectPoolMaker("P>Vxz");
      advancedSettings0.setPerformancePreferencesConnectionTime(3231);
      advancedSettings0.toXML("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(621);
      advancedSettings0.toXML("\t<socket-linger>");
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientIdentifier("P>Vxz");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getMaxThreadsForNioWrite();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8299341714698483
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-2324));
      advancedSettings0.setPerformancePreferencesLatency(21);
      advancedSettings0.getByteBufferSize();
      String string0 = "WJvxw)EHS&c\"";
      int int0 = (-3026);
      advancedSettings0.setPerformancePreferencesConnectionTime((-3026));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("WJvxw)EHS&c\"");
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("WJvxw)EHS&c\"");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // WJvxw)EHS&c\"
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.288309175310641
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-593));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(259);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setSocketLinger(259);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(259);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings1.setMaxThreadsForNioWrite(259);
      advancedSettings0.getCharset();
      advancedSettings1.setBacklog(259);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger(259);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("B");
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7438642509800055
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.getCharset();
      advancedSettings0.setMaxThreadsForNioWrite(108);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setMaxThreadsForNioWrite(469);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setBacklog(1461);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(469);
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesLatency(469);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals("ISO-8859-1", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-632));
      advancedSettings0.setBacklog(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals((-632), advancedSettings0.getClientSocketSendBufferSize());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getByteBufferSize();
      int int0 = advancedSettings1.getPerformancePreferencesConnectionTime();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.382771637453294
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-593));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.toXML("c2!r+p");
      assertEquals((-593), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4824105594844403
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-587));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize(259);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getCharset();
      advancedSettings0.toXML("ISO-8859-1");
      assertEquals(259, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.376731215935275
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(228);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientIdentifier("\t<charset>");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("y^PpUo~[8C0");
      assertEquals("\t<charset>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(4776);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(4776);
      assertEquals(4776, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency((-2425));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setUseDirectByteBuffer(true);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(3711);
      advancedSettings0.setPerformancePreferencesConnectionTime(3711);
      assertEquals(3711, advancedSettings0.getPerformancePreferencesLatency());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesBandwidth();
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.getClientIdentifier();
      advancedSettings1.setClientIdentifier((String) null);
      assertEquals(10, advancedSettings1.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.126862207664039
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency(1273);
      advancedSettings0.setQSObjectPoolMaker("0");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth(1273);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency(98);
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7758379903008876
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-737));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setByteBufferSize((-1688));
      advancedSettings0.setByteBufferSize((-737));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientIdentifier("fMkRK'k");
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketReceiveBufferSize(1705);
      advancedSettings0.setBacklog(1615);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesBandwidth(1705);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize((-1688));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      assertEquals((-737), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.600324065139852
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize(1041);
      advancedSettings0.setClientSocketSendBufferSize(1041);
      advancedSettings0.setMaxThreadsForNioWrite(383);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesConnectionTime((-375));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML("@xI|>E1@LmEySy4EJ");
      advancedSettings0.setClientSocketSendBufferSize((-184));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("#&Xi");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-375), advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.727821711286632
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(2560);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getBacklog();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("</qsobject-pool-maker>\n");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize((-9));
      advancedSettings0.setSocketLinger((-544));
      advancedSettings0.setClientSocketTrafficClass("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("a+");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // a+
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize(151);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(151, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("%NI!{80@G6");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals("%NI!{80@G6", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.526944711480895
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("z*E{;osHDE");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setByteBufferSize((-2427));
      advancedSettings0.setClientSocketTrafficClass("</qsobject-pool-maker>\n");
      advancedSettings0.setClientSocketReceiveBufferSize((-444));
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setClientSocketTrafficClass("</qsobject-pool-maker>\n");
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("u~f,f5");
      assertEquals((-444), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.553040715797101
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(2);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-148));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketSendBufferSize(4);
      advancedSettings0.setCharset("");
      advancedSettings0.toXML("</client-socket-tcp-no-delay>\n");
      advancedSettings0.getDebugNonBlockingMode();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("]W");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]W
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), int0);
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertFalse(boolean0);
      
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6119602223259983
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-324));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketSendBufferSize((-3741));
      advancedSettings0.setCharset("");
      advancedSettings0.toXML("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3035514829319883
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("\t<qsobject-pool-maker>");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency((-860));
      advancedSettings0.setPerformancePreferencesBandwidth(921);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketSendBufferSize(3711);
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("\t<qsobject-pool-maker>");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setClientSocketTrafficClass("\t<client-socket-send-buffer-size>");
      assertEquals("ISO-8859-1", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7353390710828336
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setClientSocketTrafficClass("nN|duXFxN_WFm0");
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-560));
      advancedSettings0.setSocketLinger((-560));
      advancedSettings0.setClientIdentifier("</qsobject-pool-maker>\n");
      advancedSettings0.setBacklog(364);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals("</qsobject-pool-maker>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("?(-");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.382204422478819
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-593));
      advancedSettings0.setPerformancePreferencesBandwidth((-593));
      advancedSettings0.toXML((String) null);
      assertEquals((-593), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.501516696960544
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("Bbc`?M2");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(24);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(24, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.939792811164566
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog(858);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketReceiveBufferSize(151);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize(858);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(151, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(858, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setBacklog((-42));
      advancedSettings0.setClientSocketReceiveBufferSize((-1990));
      advancedSettings0.setByteBufferSize((-42));
      advancedSettings0.setClientSocketTrafficClass("</qsobject-pool-maker>\n");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(2250);
      advancedSettings0.setCharset("");
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(2250, advancedSettings0.getClientSocketReceiveBufferSize());
      assertFalse(boolean0);
  }
}
