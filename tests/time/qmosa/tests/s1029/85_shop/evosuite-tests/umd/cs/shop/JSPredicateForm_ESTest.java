/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 13:51:01 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) "{Kg");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer2);
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      Object object3 = new Object();
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'B';
      charArray0[2] = 'N';
      charArray0[3] = '{';
      charArray0[4] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.get();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) "O>g");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer2);
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      StringReader stringReader0 = new StringReader("-|z#W|pG,\"R.)");
      StringReader stringReader1 = new StringReader("yj");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("yj");
      StringReader stringReader3 = new StringReader("PC;9$7o");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.close();
      System.setCurrentTimeMillis(683L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.close();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "O>g");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      jSTerm0.sort(comparator0);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "3>g";
      jSTerm0.add((Object) "3>g");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.setSize(1471);
      // Undeclared exception!
      try { 
        jSPredicateForm1.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3>g");
      StringReader stringReader1 = new StringReader("3>g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-2));
      streamTokenizer0.ordinaryChars((-2), 1222);
      Integer integer0 = new Integer(1222);
      jSTerm0.remove((Object) integer0);
      stringReader0.reset();
      jSTerm0.toStr();
      streamTokenizer0.slashSlashComments(false);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.ttype = (-774);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader1.close();
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3>g");
      StringReader stringReader1 = new StringReader("3>g");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) (-2);
      stringReader0.skip((-2));
      streamTokenizer0.ordinaryChars((-2), (-2));
      jSTerm0.remove((Object) (-2));
      stringReader0.reset();
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "O>g");
      UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.iterator();
      jSTerm0.iterator();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm1.add((Object) jSPredicateForm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add(object2);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      assertEquals(2, jSPredicateForm1.size());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "O>g");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object0 = new Object();
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("O>g");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "O>g");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("7.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      Object object1 = new Object();
      jSTerm0.add((Object) "O>g");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2206072645530173
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3>g");
      StringReader stringReader1 = new StringReader("3>g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-2));
      streamTokenizer0.ordinaryChars((-2), (-2));
      jSTerm0.remove((Object) (-2));
      stringReader0.reset();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = ';';
      charArray0[2] = '^';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader1.read(charBuffer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      boolean boolean0 = jSTerm1.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.559581156259877
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "3>g");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.setSize(1471);
      StringReader stringReader0 = new StringReader("3>g");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSSubstitution0.addElement(jSPredicateForm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSPredicateForm1.equals(jSPredicateForm0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.assignFailure();
      // Undeclared exception!
      try { 
        jSSubstitution0.remove(613);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 613
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "O>g";
      jSTerm0.add((Object) "O>g");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElement("O>g");
      jSTerm0.add((Object) null);
      jSSubstitution0.add(object0);
      int int0 = (-220);
      jSSubstitution0.ensureCapacity((-220));
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      function2.andThen((Function<? super String, ? extends String>) unaryOperator1);
      function1.andThen((Function<? super String, ?>) function2);
      unaryOperator0.andThen((Function<? super JSTerm, ? extends String>) function1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm3.matches(jSPredicateForm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3>g");
      StringReader stringReader1 = new StringReader("3>g");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (-1.0);
      stringReader0.skip((-2));
      streamTokenizer0.ordinaryChars((-2), (-2));
      jSTerm0.remove((Object) (-2));
      stringReader0.reset();
      jSTerm0.clonePF();
      JSJshopVars.semicolon = (-2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.wordChars((-2975), (-2));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader1.close();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "RlC/;$1}j79f~_");
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.add((Object) "RlC/;$1}j79f~_");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.toStr();
      jSPredicateForm0.toStr();
      StringReader stringReader0 = new StringReader("E");
      stringReader0.reset();
      jSPredicateForm0.equals((JSPredicateForm) null);
      stringReader0.mark(1747);
      jSPredicateForm0.print();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.toStr();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.addElement(jSTerm0);
      streamTokenizer0.slashStarComments(false);
      StringReader stringReader1 = new StringReader("X]OWHfXetcV=v|");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3>g");
      StringReader stringReader1 = new StringReader("3>g");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (-1.0);
      stringReader0.skip((-2));
      streamTokenizer0.ordinaryChars((-2), (-2));
      jSTerm0.remove((Object) (-2));
      stringReader0.reset();
      jSTerm0.clonePF();
      JSJshopVars.semicolon = (-2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.wordChars((-2975), (-2));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      stringReader1.close();
      try { 
        stringReader1.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "O>g";
      jSTerm0.add((Object) "O>g");
      StringReader stringReader0 = new StringReader("XIg?4S~mKC@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      Object object0 = new Object();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "O>g";
      jSTerm0.add((Object) "O>g");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElement("O>g");
      jSSubstitution0.add(object0);
      int int0 = (-119983654);
      jSSubstitution0.ensureCapacity((-119983654));
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      function2.andThen((Function<? super String, ? extends String>) unaryOperator1);
      function1.andThen((Function<? super String, ?>) function2);
      unaryOperator0.andThen((Function<? super JSTerm, ? extends String>) function1);
      jSTerm0.print();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSSubstitution0.listIterator((-119983654));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -119983654
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.876273584430276
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm0.print();
      jSPredicateForm3.print();
      jSPredicateForm0.print();
      jSPredicateForm1.standarizerPredicateForm();
      jSTerm0.clonePF();
      jSPredicateForm2.print();
      JSPredicateForm jSPredicateForm4 = null;
      try {
        jSPredicateForm4 = new JSPredicateForm("'3?qn2a[vb534 `");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      jSTerm0.add(object1);
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "O>g");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object0 = new Object();
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader("O>g");
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<Integer> consumer2 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer2);
      System.setCurrentTimeMillis((-2696L));
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      jSTerm0.iterator();
      jSTerm0.iterator();
      jSTerm0.add((Object) "(");
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      jSTerm0.add(object2);
      jSTerm0.add((Object) "(");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      jSTerm0.add((Object) "(");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.ensureCapacity((-499));
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9110590493297028
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "3>g");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.setSize(1471);
      StringReader stringReader0 = new StringReader("3>g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSPredicateForm0.equals(jSPredicateForm1);
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      jSPredicateForm3.print();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      jSPredicateForm2.clonePF();
      jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
      jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm3.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm1.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "O>g");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) unaryOperator0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      jSPredicateForm0.toStr();
      String string0 = "~OTi\\|[,n h'ul:/o";
      StringReader stringReader0 = new StringReader("~OTi|[,n h'ul:/o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      jSTerm0.clonePF();
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      String string1 = "3.0";
      StringReader stringReader2 = new StringReader("'3?qn2a[vb534 `");
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.050705726455745
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "3>g");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      StringReader stringReader0 = new StringReader("3>g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals("(3>g)", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm3 = jSTerm1.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm1);
      jSPredicateForm1.equals(jSPredicateForm2);
      jSPredicateForm0.retainAll(jSPredicateForm1);
      JSPredicateForm jSPredicateForm4 = jSTerm1.clonePF();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.clonePF();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm5.removeAll(jSPredicateForm1);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm5.clonePF();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm2.equals(jSPredicateForm1);
      jSPredicateForm5.equals(jSPredicateForm0);
      assertNotSame(jSPredicateForm5, jSPredicateForm7);
      
      System.setCurrentTimeMillis((-39L));
      JSSubstitution jSSubstitution0 = jSPredicateForm8.matches(jSPredicateForm6);
      assertTrue(jSSubstitution0.fail());
      
      System.setCurrentTimeMillis(1L);
      boolean boolean1 = jSTerm1.equals(jSPredicateForm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "I>z";
      jSTerm0.add((Object) "I>z");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9556998911125343
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "I>z";
      jSTerm0.add((Object) "I>z");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution5.listIterator((-317986229));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -317986229
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.050705726455745
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "3>g");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      StringReader stringReader0 = new StringReader("3>g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm3 = jSTerm1.standarizerPredicateForm();
      jSPredicateForm0.equals(jSPredicateForm1);
      jSPredicateForm1.equals(jSPredicateForm2);
      StringBuffer stringBuffer0 = jSPredicateForm3.toStr();
      assertEquals("(3.0)", stringBuffer0.toString());
      
      jSPredicateForm0.retainAll(jSPredicateForm1);
      JSPredicateForm jSPredicateForm4 = jSTerm1.clonePF();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.clonePF();
      jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm3.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm2.equals(jSPredicateForm1);
      jSPredicateForm5.equals(jSPredicateForm0);
      assertNotSame(jSPredicateForm4, jSPredicateForm5);
      
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = jSPredicateForm7.matches(jSPredicateForm6);
      assertTrue(jSSubstitution0.fail());
      
      System.setCurrentTimeMillis(1L);
      boolean boolean1 = jSTerm1.equals(jSPredicateForm1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(2147483645);
      jSTerm0.add((Object) integer0);
      jSTerm0.add((Object) "O>g");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object0 = new Object();
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      Object object1 = new Object();
      jSTerm0.remove(object1);
      Object object2 = new Object();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "I>z";
      jSTerm0.add((Object) "I>z");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution0.add(object0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Object object1 = new Object();
      StringReader stringReader0 = new StringReader("5mL\"x%@e7");
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) "{Kg");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Consumer<String> consumer2 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer2);
      Object object1 = new Object();
      StringReader stringReader0 = new StringReader("{Kg");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.reset();
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = '\'';
      charArray0[2] = '.';
      charArray0[3] = 'V';
      charArray0[4] = '';
      charArray0[5] = '6';
      charArray0[6] = ':';
      charArray0[7] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      stringReader1.read(charBuffer0);
      jSPredicateForm0.equals((JSPredicateForm) null);
      streamTokenizer1.sval = "";
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3>g");
      StringReader stringReader1 = new StringReader("3>g");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nval = (double) (-2);
      stringReader0.skip((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSSubstitution0.addElement(jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Integer integer0 = new Integer(1146);
      jSSubstitution1.add((Object) integer0);
      StringReader stringReader2 = new StringReader("3>g");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader3 = new StringReader("oO+t38 b!fkf");
      StringReader stringReader4 = new StringReader("expecting");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(false);
      Integer integer1 = new Integer((-4));
      stringReader4.read();
      // Undeclared exception!
      try { 
        stringReader0.read((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.percent = 2;
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("3.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.reset();
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = '\'';
      charArray0[2] = '.';
      charArray0[3] = 'V';
      charArray0[4] = '';
      stringReader0.reset();
      charArray0[5] = '6';
      charArray0[6] = ':';
      charArray0[7] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      stringReader1.read(charBuffer0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) "(");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.ensureCapacity(2135);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) "(");
      jSSubstitution1.forEach(consumer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      stringReader0.reset();
      char[] charArray0 = new char[8];
      charArray0[1] = '\'';
      charArray0[2] = '.';
      charArray0[3] = 'V';
      charArray0[4] = '';
      charArray0[5] = '6';
      charArray0[6] = ':';
      charArray0[7] = 'N';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.codePoints();
      stringReader0.read(charBuffer0);
      charBuffer0.get();
      charBuffer0.position(1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      jSTerm0.iterator();
      jSTerm0.iterator();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.add((Object) "(");
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      jSTerm0.add(object3);
      jSTerm0.add((Object) "(");
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
