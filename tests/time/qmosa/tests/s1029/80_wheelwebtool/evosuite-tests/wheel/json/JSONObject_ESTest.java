/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:57:24 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiConsumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.538555061257332
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Long@0000000001";
      stringArray0[1] = "java.lang.Long@0000000001";
      stringArray0[2] = "java.lang.Long@0000000001";
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Long@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000001", 0.0);
      Integer.getInteger((String) null, (Integer) null);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("", jSONArray0);
      jSONObject1.getInt("java.lang.Long@0000000001");
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0442042596310586
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject0.remove("0lL*U%qT56  Q~G$%");
      int int0 = (-1222);
      JSONObject jSONObject2 = jSONObject1.put("\r", (-1222));
      JSONObject.quote("\r");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\r";
      stringArray0[1] = "0lL*U%qT56  Q~G$%";
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject2, stringArray0);
      HashMap<Object, Long> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Object, Long>((-1222), 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1222
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{M");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 2 of {M
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.333769119610496
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      int int0 = 65;
      JSONObject jSONObject1 = jSONObject0.put("Nm6-k*'-FH", 65);
      JSONObject jSONObject2 = jSONObject0.put("(>$&AB7<D*k", (Object) "(>$&AB7<D*k");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject3 = jSONObject1.put("Nm6-k*'-FH", (-1447.11026710926));
      jSONObject3.optDouble("Substring bounds error", (-842.356535134));
      String string1 = "{";
      Integer.getInteger("{");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject2.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.25850206621748
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.names();
      JSONObject jSONObject1 = jSONObject0.put("has", (Map) null);
      jSONObject0.optString(",r1^tTkun\"Zhbj", ",r1^tTkun\"Zhbj");
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      JSONObject.doubleToString(2299.5);
      jSONObject0.optDouble("Bad value from toJSONString: ");
      JSONObject jSONObject2 = jSONObject0.append("] is not a Boolean.", ",r1^tTkun\"Zhbj");
      JSONObject.valueToString(float0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      jSONObject0.toString(564);
      jSONObject2.toString();
      JSONObject.quote("{\"java.lang.String@0000000007\":wheel.json.JSONArray@0000000006,\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}");
      jSONObject0.optLong("{\"java.lang.String@0000000007\":wheel.json.JSONArray@0000000006,\"java.lang.String@0000000004\":wheel.json.JSONObject@0000000003}");
      jSONObject1.optBoolean("%!a%2OWb?w%", true);
      try { 
        jSONObject2.getInt("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7521394566794255
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-15));
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject3 = jSONObject1.put("", (double) '2');
      jSONObject2.optDouble("\"\"", (-2636.9957114));
      Integer.getInteger("isformat");
      Byte byte0 = new Byte((byte)39);
      JSONObject.getNames((Object) byte0);
      JSONObject jSONObject4 = jSONObject2.accumulate("5$yzzY'~hs-~>", (Object) null);
      jSONObject3.optDouble("5$yzzY'~hs-~>");
      jSONObject3.put("is", (-15));
      jSONObject0.isNull("");
      long long0 = jSONObject4.optLong("to", 339L);
      assertEquals(2, jSONObject2.length());
      assertEquals(339L, long0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.334706709972169
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      String string1 = "0lL*U%qT56  Q~G$%";
      jSONObject0.remove("0lL*U%qT56  Q~G$%");
      String string2 = "\\r";
      jSONObject1.optLong("] not found.", (long) (-1222));
      JSONObject jSONObject2 = jSONObject1.put("\r", (-1222));
      jSONObject2.put("\r", (-36.40698353206389));
      String string3 = ";z3R9D-4b@/";
      try { 
        jSONObject2.get(";z3R9D-4b@/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";z3R9D-4b@/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.600762403391332
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("!3_xJ}|", (Object) null);
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      jSONObject0.put("!3_xJ}|", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject0.optString("!3_xJ}|", "!3_xJ}|");
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      String string0 = "not";
      String string1 = null;
      try { 
        Long.valueOf("not");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"not\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3957094260849363
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("", (-1447.11026710926));
      BiConsumer<JSONObject, Object> biConsumer0 = (BiConsumer<JSONObject, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5327537967645344
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "{}";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      String string1 = "0lL*U%qT56  Q~G$%";
      jSONObject0.remove("0lL*U%qT56  Q~G$%");
      jSONObject1.put("\r", (-1222));
      Integer integer0 = new Integer((-1222));
      int int0 = (-2734);
      JSONObject.valueToString(integer0, 160, (-2734));
      byte byte0 = (byte) (-59);
      Byte byte1 = new Byte((byte) (-59));
      JSONObject jSONObject2 = new JSONObject(byte1);
      String string2 = "P2!D{d#~Qf";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject2.put("P2!D{d#~Qf", (Collection) linkedList0);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7335524715098125
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Boolean boolean0 = new Boolean("JSONArray initial value should be a string or collection or array.");
      Boolean.getBoolean("dEJI.',!UK\"O");
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      Integer integer0 = new Integer((-628));
      JSONObject.getNames(jSONObject1);
      jSONObject0.optLong("");
      jSONObject1.optInt("$#fgxY/X94");
      Integer.getInteger("null", 55);
      Byte byte0 = new Byte((byte) (-101));
      JSONObject.valueToString((Object) null, 115, (byte) (-59));
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Object, Double> hashMap2 = new HashMap<Object, Double>();
      jSONObject1.opt("gettoJSONArray");
      try { 
        jSONObject0.getString("isquote");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isquote\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7966633924018436
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      jSONObject1.remove("\r");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(121, false);
      jSONArray0.toString((-1556), (-1556));
      jSONObject0.toJSONArray(jSONArray0);
      Boolean.getBoolean("");
      JSONObject.getNames((Object) "\r");
      String string0 = "\\r";
      jSONObject0.optInt("\r");
      jSONObject1.optJSONArray("JSONArray initial value should be a string or collection or array.");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray1.put(0, (double) 0);
      JSONArray jSONArray2 = null;
      try {
        jSONArray2 = new JSONArray("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.568413258053965
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      String string0 = "";
      BiConsumer<JSONObject, Object> biConsumer0 = (BiConsumer<JSONObject, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.optString("", "");
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("/rI}>!sD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of /rI}>!sD
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2080074215749153
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optInt("0.0", 125);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject2 = jSONObject1.accumulate(".|iYm8", boolean0);
      jSONObject2.optInt("4v^+yQ^'fhW", (-1));
      double double0 = new Integer(125);
      assertEquals(125, double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3448504812128013
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float(0.0);
      Object object0 = new Object();
      Integer integer0 = new Integer((-1177));
      hashMap0.put(integer0, integer0);
      Integer integer1 = new Integer((-1177));
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.valueToString(jSONArray0, (-1177), 84);
      JSONObject.getNames((Object) integer0);
      jSONObject0.optInt("isremove", 1199);
      jSONObject0.optDouble("[]", 0.0);
      jSONObject0.optInt("A JSONArray text must start with '['", 84);
      try { 
        jSONObject0.getLong("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(23);
      JSONObject.valueToString((Object) null);
      Float float0 = new Float((-117.291921347));
      Float.sum((-1074.4828F), 0.0F);
      Byte byte0 = new Byte((byte)27);
      JSONObject.valueToString(byte0, 2, 23);
      Short short0 = new Short((short)3037);
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.535170786755404
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('2');
      jSONArray0.write(stringWriter2);
      Writer writer0 = jSONArray0.write(stringWriter2);
      jSONObject2.write(writer0);
      JSONObject jSONObject3 = jSONObject1.put("", 0.0);
      jSONObject2.optDouble("\"\"", (-2636.9957114));
      int int0 = jSONObject3.optInt("java.lang.Float@00000000010", 0);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = Integer.valueOf(92);
      JSONObject.getNames((Object) integer0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("", (double) 92);
      jSONObject0.optDouble("", (-2636.9957114));
      Integer.getInteger("\"\"");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray("/t YzW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of /t YzW
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3628722294375422
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Float float0 = new Float(3638.2160814911513);
      JSONObject.numberToString(float0);
      Byte.compare((byte)0, (byte)0);
      String string0 = "";
      double double0 = (-1447.11026710926);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5160905974533305
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      jSONObject0.remove("0lL*U%qT56  Q~G$%");
      JSONObject jSONObject2 = jSONObject1.put("\r", (-1222));
      JSONObject jSONObject3 = jSONObject2.put("\r", (-36.40698353206389));
      JSONObject jSONObject4 = new JSONObject((Object) "\r");
      jSONObject4.optDouble("\"\"", 0.0);
      int int0 = jSONObject3.optInt("]npsxl.B`q", 629);
      assertEquals(1, jSONObject1.length());
      assertEquals(629, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9195135881033645
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      short short0 = (short)2;
      Short short1 = new Short((short)2);
      JSONObject.valueToString(short1, 2065, (-1271));
      JSONObject.quote("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("\"\"", stringArray0);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>(2065, (short)2);
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.names();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6647408318818946
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("isfloatToRawIntBits", 0);
      Byte byte0 = new Byte((byte)103);
      JSONObject jSONObject2 = jSONObject0.put("isfloatToRawIntBits", (Object) byte0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "isfloatToRawIntBits");
      stringWriter1.append('w');
      stringWriter0.append('2');
      jSONArray0.write(stringWriter0);
      jSONArray0.write(stringWriter1);
      jSONObject2.write(stringWriter1);
      jSONObject0.put("isfloatToRawIntBits", 0.0);
      double double0 = jSONObject1.optDouble("0<=9_/}rJx4K8k", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = jSONObject1.optInt("java.lang.Float@0000000005.", 629);
      assertEquals(629, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.544265369500044
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      Integer integer0 = new Integer(23);
      jSONObject1.accumulate("u],!Hwb2AOXd", integer0);
      JSONObject.valueToString(jSONObject0);
      Float float0 = new Float((-117.291921347));
      StringWriter stringWriter0 = new StringWriter(23);
      Writer writer0 = jSONObject0.write(stringWriter0);
      jSONObject0.write(writer0);
      Float.sum((-1074.4828F), 0.0F);
      try { 
        jSONObject0.getBoolean("6r|ei,[bQ0_FH-'CI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6r|ei,[bQ0_FH-'CI\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1366251663188067
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      jSONObject0.put("", (-1447.11026710926));
      BiConsumer<JSONObject, Object> biConsumer0 = (BiConsumer<JSONObject, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optString("", "");
      String string1 = "/rI}>!sD";
      Boolean boolean0 = new Boolean(false);
      jSONObject0.putOpt("gethashCode", "/rI}>!sD");
      try { 
        jSONObject0.getJSONObject("/rI}>!sD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/rI}>!sD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0072980676262357
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(101);
      hashMap0.put(jSONObject0, integer0);
      Float float0 = new Float(0.0);
      Float.sum((-3008.9895F), (-1074.4828F));
      JSONObject.valueToString(hashMap0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.672527775964043
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (-15));
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject3 = jSONObject1.put("", (double) '2');
      jSONObject2.optDouble("\"\"", (-2636.9957114));
      Integer.getInteger("isformat");
      JSONObject jSONObject4 = jSONObject2.accumulate("5$yzzY'~hs-~>", (Object) null);
      jSONObject3.optDouble("5$yzzY'~hs-~>");
      jSONObject3.put("is", (-15));
      jSONObject0.isNull("");
      try { 
        jSONObject4.put((String) null, 204);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3545145733900754
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer((-2179));
      JSONObject jSONObject0 = new JSONObject(integer0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Qje";
      stringArray0[1] = "Qje";
      stringArray0[2] = "Qje";
      stringArray0[3] = "Qje";
      stringArray0[4] = "Qje";
      stringArray0[5] = "Qje";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("Qje", (-2179));
      double double0 = jSONObject0.optDouble(".", 1.0);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = jSONObject1.optInt(".", (-1440));
      assertEquals(1, jSONObject0.length());
      assertEquals((-1440), int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.498430969271499
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      JSONObject jSONObject1 = new JSONObject(iterator0);
      jSONObject1.optString("xP3zF", "gG6.5W.1(<");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      jSONObject1.put("r/E@txq", (Map) hashMap0);
      assertEquals(2, jSONObject1.length());
      
      Boolean boolean0 = new Boolean(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean.valueOf("/rI}>!sD");
      Boolean.compare(true, true);
      jSONObject0.optDouble("xP3zF", (double) 0.0F);
      JSONObject.doubleToString(Double.NaN);
      boolean boolean1 = jSONObject0.isNull("xP3zF");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5912057650610185
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Short short0 = new Short((short)2);
      JSONObject.valueToString(short0, 2065, (-1271));
      JSONObject.quote("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject("\"\"", stringArray0);
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>(2065, (short)2);
      jSONObject0.put("", (Map) hashMap0);
      jSONObject0.names();
      try { 
        jSONObject0.getDouble("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      BiConsumer<JSONObject, Object> biConsumer0 = (BiConsumer<JSONObject, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      String string0 = JSONObject.quote("[");
      assertEquals("\"[\"", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String string0 = "4v^+yQ^'fhW";
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      try { 
        jSONObject0.put(",", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7612118325115627
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("Qje", (-1447.11026710926));
      BiConsumer<Object, JSONObject> biConsumer0 = (BiConsumer<Object, JSONObject>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      Object object0 = new Object();
      String string0 = "not";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("not", (Collection) linkedList0);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("Qje");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Qje
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "u],!Hwb2AOXd\\";
      boolean boolean0 = false;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2504867873056735
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      int int0 = 23;
      Integer integer0 = new Integer(23);
      jSONObject1.accumulate("u],!Hwb2AOXd", integer0);
      JSONObject.valueToString(jSONObject0);
      Float float0 = new Float((-117.291921347));
      Float.sum((-1074.4828F), 0.0F);
      try { 
        jSONObject1.getInt("h&oK2VDaL{&K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"h&oK2VDaL{&K\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = null;
      JSONObject.quote((String) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "\"\"";
      stringArray0[2] = null;
      JSONObject jSONObject0 = new JSONObject("\"\"", stringArray0);
      int int0 = (-1714);
      jSONObject0.toString((-1714), (-984));
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.get(stringArray0[2]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.434375596540632
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("hnLi:$(", "hnLi:$(");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", (Map) hashMap0);
      jSONObject1.has("wheel.json.JSONObject$1");
      Long long0 = new Long((-1065L));
      Long long1 = Long.getLong((String) null, long0);
      JSONObject jSONObject2 = jSONObject1.putOpt("wheel.json.JSONObject$1", long1);
      try { 
        jSONObject2.getJSONObject("hnLi:$(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hnLi:$(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0390217445940966
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("Expected '");
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4v^+yQ^'fhW";
      stringArray0[1] = "4v^+yQ^'fhW";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("4v^+yQ^'fhW", 125);
      double double1 = jSONObject0.optDouble("2{RD_{G_%q", (-529.9729876406295));
      assertEquals((-529.9729876406295), double1, 0.01);
      
      int int0 = jSONObject0.optInt("4v^+yQ^'fhW", 125);
      assertEquals(125, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.52941739081742
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      JSONObject jSONObject1 = new JSONObject(iterator0);
      jSONObject1.optString("xP3zF", "gG6.5W.1(<");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject2 = jSONObject1.put("] is not a number.", (Map) hashMap0);
      jSONObject2.toString();
      try { 
        jSONObject2.getJSONObject("R8AM_--ge|v]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"R8AM_--ge|v]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      BiConsumer<JSONObject, Object> biConsumer0 = (BiConsumer<JSONObject, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      String string0 = JSONObject.quote("G\"[");
      assertEquals("\"G\\\"[\"", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.067308326038203
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("0.0", 125);
      jSONObject1.optDouble("", 1307.76709874372);
      jSONObject1.optInt("5itXy94\"n$?ZJ;", 125);
      try { 
        jSONObject0.getDouble("DKNx`nF<U+x>lTN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DKNx`nF<U+x>lTN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.576408258700284
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      String string0 = "\\r";
      jSONObject1.remove("\r");
      Boolean boolean0 = new Boolean("");
      Boolean.getBoolean("get");
      try { 
        jSONObject1.append("", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3422739185888215
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject.doubleToString(3683.9773470706905);
      Byte byte0 = new Byte((byte)67);
      Byte.compare((byte)67, (byte)67);
      Byte.compare((byte) (-1), (byte)47);
      JSONObject.numberToString(byte0);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 703, 60);
      jSONObject0.optString("e<", "");
      jSONObject0.putOpt("", hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Integer.getInteger("", (-1376));
      Integer.remainderUnsigned(2172, 46);
      String string0 = JSONObject.doubleToString(46);
      assertEquals("46", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4604628373755775
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", true);
      Integer.remainderUnsigned(87, 752);
      Integer.max(93, 752);
      Integer integer0 = Integer.getInteger("A2-k'k'ot|6", 55);
      JSONObject.valueToString(integer0, 752, 93);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject1.opt("java.lang.Integer@0000000004");
      try { 
        jSONObject1.getString("Sdbgq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Sdbgq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", true);
      jSONObject0.names();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9806885803575556
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optInt("0.0", 125);
      JSONObject jSONObject2 = jSONObject1.put("JxM=m/Te+'taW?", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject3 = jSONObject1.put("{}", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject4 = new JSONObject(jSONArray0);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put("{}", boolean0);
      jSONObject3.toString(125, (-1332));
      JSONObject.getNames(jSONObject2);
      jSONObject2.keys();
      Byte byte0 = new Byte((byte)19);
      JSONObject.valueToString(byte0, 125, 91);
      jSONObject1.accumulate("", "4v^+yQ^'fhW");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.080056919694302
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-1447.11026710926));
      jSONObject1.optDouble("ER3 6F.TH`", (-2939.6595));
      jSONObject0.optDouble("ER3 6F.TH`", (-2939.6595));
      int int0 = jSONObject1.optInt("ER3 6F.TH`", 5);
      assertEquals(1, jSONObject0.length());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = "wheel.json.JSONException";
      Long.sum(1012L, 2310L);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0225776962191264
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4v^+yQ^'fhW";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[3] = "";
      stringArray0[4] = "?)oF)t4RMSNegRgle";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("", 1604);
      JSONObject jSONObject2 = jSONObject1.put("{u[n^&i00_7VS:z", (long) 125);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject3 = jSONObject1.put("{}", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject4 = new JSONObject(jSONObject2);
      jSONObject2.toString(125, 1604);
      JSONObject.getNames(jSONObject3);
      jSONObject2.keys();
      jSONObject3.putOpt("?)oF)t4RMSNegRgle", "{u[n^&i00_7VS:z");
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.675665588754136
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      Float float0 = new Float(1.0);
      hashMap0.put(float0, "4Wj'C");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      Byte byte0 = new Byte((byte)75);
      jSONObject0.append("", byte0);
      jSONObject0.optBoolean("");
      String string0 = "(X";
      double double0 = 1.0;
      String string1 = "[]";
      jSONObject0.toString((int) (byte)75);
      String string2 = "/;3',TyJsCsJY{`lWJ7";
      hashMap0.replace((Object) jSONObject0, "/;3',TyJsCsJY{`lWJ7", "`f`HUJ}");
      boolean boolean0 = false;
      String string3 = "";
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.939087057968806
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      String string1 = "";
      jSONObject1.remove("\r");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.getNames(jSONObject0);
      int int0 = 0;
      JSONObject.valueToString(linkedList0, 47, 0);
      String string2 = "&|5m]E+y85uUhB";
      JSONObject jSONObject2 = jSONObject1.accumulate("&|5m]E+y85uUhB", jSONObject0);
      String string3 = "Ld8yEkOSUi4I68";
      jSONObject2.optDouble("[]");
      try { 
        jSONObject2.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.384670436617894
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4v^+yQ^'fhW";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optInt("0.0", 125);
      Float float0 = new Float((float) 125);
      JSONObject.valueToString(float0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-944));
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 0 of 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5948467597167824
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('2');
      jSONArray0.write(stringWriter2);
      Writer writer0 = jSONArray0.write(stringWriter2);
      jSONObject2.write(writer0);
      JSONObject jSONObject3 = jSONObject1.put("", 0.0);
      jSONObject2.optDouble("\"\"", (-2636.9957114));
      jSONObject1.optInt("java.lang.Float@00000000010", 629);
      try { 
        jSONObject3.getJSONArray("java.lang.Float@00000000010");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Float@00000000010\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5890169989100573
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject1.put("JxM=m/Te+'taW?", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      jSONObject1.put("{}", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject3 = new JSONObject(jSONArray0);
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put("{}", boolean0);
      jSONObject2.opt("IoId");
      Short short0 = new Short((short) (-1072));
      JSONObject jSONObject4 = jSONObject2.append("0.0", "4v^+yQ^'fhW");
      jSONObject2.isNull("4v^+yQ^'fhW");
      jSONObject2.keys();
      try { 
        jSONObject4.getLong("4v^+yQ^'fhW");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4v^+yQ^'fhW\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0517544434841524
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("0.0", 125);
      double double1 = jSONObject1.optDouble(stringArray0[5], 1307.76709874372);
      assertEquals(1307.76709874372, double1, 0.01);
      
      int int0 = jSONObject1.optInt("5itXy94\"n$?ZJ;", 125);
      assertEquals(125, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.823711572176522
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "iY\"{ -Gm\"n`,8I/TYu";
      stringArray0[1] = "wqpI/BVe;ApfNKm";
      stringArray0[2] = "6_EfZ+&EAFbI's|],";
      stringArray0[3] = "Unterminated string";
      stringArray0[4] = "XzE:$B=JxNf28x";
      stringArray0[5] = "pBu7SC${#M!$HQrC(y";
      stringArray0[6] = "";
      stringArray0[7] = "%H].";
      stringArray0[8] = "/bT|'6p_1rpnV/,Y";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("JSONArray initial value should be a string or collection or array.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray initial value should be a string or collection or array.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.4440275434754133
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.optInt("0.0", 125);
      jSONObject1.put("JxM=m/Te+'taW?", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = jSONObject1.put("{}", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      Boolean boolean0 = new Boolean(false);
      hashMap0.put("Null pointer", boolean0);
      jSONObject2.putOpt("m&", "4v^+yQ^'fhW");
      jSONObject2.optInt("", 125);
      jSONObject2.optDouble("{}", Double.NaN);
      jSONObject0.optInt("gettoUpperCase", 128);
      try { 
        jSONObject2.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5758105668439413
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("gG6.5W.1(<", "] is not a number.");
      String string0 = "o*i{1kZxOdxXr";
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      jSONObject0.put("o*i{1kZxOdxXr", (Map) hashMap0);
      jSONObject0.has("] is not a number.");
      jSONObject0.putOpt((String) null, iterator0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8990549254940556
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(1);
      JSONObject.valueToString(integer0, 1, (-1101));
      String string0 = "";
      jSONObject0.isNull("");
      jSONObject0.optInt("", 87);
      jSONObject0.names();
      long long0 = 0L;
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.3609510106329856
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject0.names();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      jSONObject0.put("!3_xJ}|", (Map) hashMap1);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.264942020744622
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = ".";
      JSONObject jSONObject0 = new JSONObject((Object) ".");
      jSONObject0.optLong("Expected '");
      jSONObject0.optBoolean(".", true);
      try { 
        jSONObject0.get(" of ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\" of \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0916137899460026
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gettoLowerCase";
      stringArray0[1] = "A JSONObject text must end with '}'";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.put("issplit", 0.0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.8709911476270595
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('2');
      Writer writer0 = jSONArray0.write(stringWriter2);
      jSONObject2.write(writer0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.toString(504, 0);
      Byte byte0 = new Byte((byte)62);
      Byte.compare((byte)0, (byte)62);
      Byte.compare((byte)62, (byte) (-42));
      Byte.compare((byte) (-42), (byte)62);
      Byte.toUnsignedInt((byte)0);
      JSONObject.valueToString(byte0);
      JSONObject.valueToString("java.lang.Byte@0000000005");
      jSONObject1.optInt("+S<QVF}F:", 104);
      String string1 = "Unterminated string";
      try { 
        jSONObject0.getJSONObject("Unterminated string");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unterminated string\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.7888245865725922
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      JSONObject jSONObject1 = jSONObject0.put("", false);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject0.names();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      jSONObject1.put("getequals", (Map) hashMap1);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.623095484006417
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      jSONObject0.remove("\r");
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("get");
      JSONObject jSONObject1 = jSONObject0.append("", boolean0);
      JSONObject.getNames((Object) "\r");
      String string0 = ": ";
      jSONObject1.optLong(": ");
      String string1 = "\\r";
      jSONObject0.optInt("\r");
      String string2 = "\\t";
      try { 
        jSONObject0.get("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = JSONObject.getNames((Object) jSONArray0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.3110528031649245
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (-15));
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject3 = jSONObject1.put("", (double) '2');
      double double0 = (-2636.9957114);
      jSONObject2.optDouble("\"\"", (-2636.9957114));
      jSONObject1.optInt("", 1937);
      try { 
        jSONObject3.getJSONObject("5$yzzY'~hs-~>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5$yzzY'~hs-~>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Double double0 = new Double(1542.6381942459668);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bad value from toJSONString: ";
      stringArray0[1] = "__),";
      stringArray0[2] = "6&_Y^";
      stringArray0[3] = "rVrxsEaM\";owe";
      Double.sum((-1231.94373847), (-2861.21195672));
      stringArray0[4] = "yZ";
      stringArray0[5] = "2**uzct/";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      try { 
        jSONObject0.getString(".RC7e7d9Yy@");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".RC7e7d9Yy@\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.toString();
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.5110707129656102
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      JSONObject jSONObject1 = new JSONObject(iterator0);
      jSONObject1.optString("xP3zF", "gG6.5W.1(<");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      jSONObject1.put("r/E@txq", (Map) hashMap0);
      Boolean boolean0 = new Boolean(true);
      String string0 = "UCvQBWfZ_T&z}J}#";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Boolean boolean1 = Boolean.valueOf("/rI}>!sD");
      Boolean.compare(true, true);
      JSONObject.valueToString(boolean1, 125, (-3160));
      jSONObject1.put("java.lang.Long@0000000010", (Collection) linkedList0);
      jSONObject1.putOpt("UCvQBWfZ_T&z}J}#", "gG6.5W.1(<");
      try { 
        jSONObject1.getJSONObject("/rI}>!sD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/rI}>!sD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.numberToString(long0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Long@0000000001";
      stringArray0[1] = "java.lang.Long@0000000001";
      stringArray0[2] = "java.lang.Long@0000000001";
      stringArray0[3] = "wheel.json.JSONArray";
      stringArray0[4] = "wheel.json.JSONException";
      stringArray0[5] = "java.lang.Long@0000000001";
      stringArray0[6] = "java.lang.Long@0000000001";
      Long.sum(954L, 0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.opt("wheel.json.JSONArray");
      jSONObject0.optJSONArray("wheel.json.JSONArray");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.putOpt("java.lang.Long@0000000001", jSONArray0);
      jSONObject0.optString("6U5$%XQU/S1u_Y");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.516871167721847
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", false);
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject0.names();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      jSONObject1.put("", (Map) hashMap1);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(2846.35F);
      jSONObject1.append("getnext", float0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5726694994129984
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "s\u0002");
      jSONObject0.put("Zl\b0!U$O\"1", false);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.10236554436372
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("0.0", 125);
      jSONObject1.optDouble("", 1307.76709874372);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.699473252273398
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.put("", "");
      Byte byte0 = new Byte((byte)75);
      jSONObject0.append("", byte0);
      jSONObject0.optBoolean("");
      String string0 = "(X";
      double double0 = 1.0;
      String string1 = "[]";
      jSONObject0.toString((int) (byte)75);
      String string2 = "/;3',TyJsCsJY{`lWJ7";
      hashMap0.replace((Object) jSONObject0, "/;3',TyJsCsJY{`lWJ7", "`f`HUJ}");
      boolean boolean0 = false;
      String string3 = "";
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      double double0 = Double.min(1.0, 1271.7);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(double0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.6239343795441985
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject3 = jSONObject1.put("", (double) 0);
      jSONObject2.optDouble("\"\"", (-2636.9957114));
      int int0 = jSONObject3.optInt((String) null, 227);
      assertEquals(1, jSONObject0.length());
      assertEquals(227, int0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.84544457246881
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      String string0 = "PftC;:BNHXz#:V6D";
      Integer integer0 = new Integer((-1519));
      Integer.compareUnsigned((-1519), 950);
      JSONObject jSONObject1 = jSONObject0.putOpt("PftC;:BNHXz#:V6D", integer0);
      jSONObject1.optBoolean("Expected a ':' after a key");
      jSONObject0.getInt("PftC;:BNHXz#:V6D");
      Byte byte0 = new Byte((byte)27);
      JSONObject.valueToString(jSONObject0, 950, 64);
      Short short0 = new Short((short)9);
      String string1 = "w[";
      Short short1 = new Short((short)8448);
      jSONObject0.accumulate("S')N*$VzL-;:~oqH=", short1);
      try { 
        jSONObject1.getDouble("#.jwo[d4g/f(y*:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#.jwo[d4g/f(y*:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("", (-1561.0947));
      try { 
        jSONObject2.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.725357360887445
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      int int0 = (-1519);
      Integer integer0 = new Integer((-1519));
      Integer.compareUnsigned((-1519), 950);
      JSONObject jSONObject1 = jSONObject0.putOpt("PftC;:BNHXz#:V6D", integer0);
      jSONObject1.optBoolean("Expected a ':' after a key");
      String string0 = "i)1JaN?4lVSaI)";
      JSONObject jSONObject2 = jSONObject0.put("i)1JaN?4lVSaI)", 0.0);
      Integer integer1 = Integer.getInteger("isfloatToRawIntBits", integer0);
      jSONObject2.accumulate("Expected a ':' after a key", integer1);
      jSONObject0.getInt("PftC;:BNHXz#:V6D");
      jSONObject1.getDouble("PftC;:BNHXz#:V6D");
      jSONObject1.optDouble("Expected a ':' after a key");
      double double0 = new Integer(950);
      Float float0 = Float.valueOf((float) (-1519));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.9429543435482035
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      String string0 = "6r|ei,[bQ0_FH-'CI";
      try { 
        jSONObject1.getLong("u],!Hwb2AOXd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u],!Hwb2AOXd\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.185013427263064
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", (-1447.11026710926));
      jSONObject0.append("6ctY\n-mo<8c~U6", "ER3 6F.TH`");
      jSONObject1.optDouble("ER3 6F.TH`", 1.0);
      int int0 = jSONObject0.optInt("Q;0Nu~LFKC", 629);
      assertEquals(2, jSONObject0.length());
      assertEquals(629, int0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.885150328612323
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Qje", (-1447.11026710926));
      BiConsumer<Object, JSONObject> biConsumer0 = (BiConsumer<Object, JSONObject>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
