/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:56:42 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.util.LinkedList;
import java.util.List;
import java.util.ResourceBundle;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.SchemaMeta;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.310859529752433
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Config.getInstance();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 24, 24);
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRuleName();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 24, 1);
      foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      foreignKeyConstraint1.getDeleteRuleAlias();
      Config config0 = new Config();
      config0.setRankDirBugEnabled(true);
      Config config1 = new Config();
      config0.getFontSize();
      foreignKeyConstraint1.getDeleteRuleDescription();
      Connection connection0 = null;
      String string0 = "#!5gw1(g(w(<Tk8";
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("5|j_r ", "", "UTF-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"5|j_r \" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0188624449286268
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Config.getInstance();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Failed to retrieve check constraints: ", 1, 1);
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean0);
      
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string0);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Failed to retrieve check constraints: ", 1, 1);
      Config config0 = new Config();
      Integer integer0 = new Integer(1);
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string1);
      
      foreignKeyConstraint0.getParentColumns();
      assertEquals(1, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3103913931272193
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Config.getInstance();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)2;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)40;
      byteArray0[5] = (byte) (-69);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "PSBS", 20, (byte)2);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Null on delete", string0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PSBS");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "PSBS");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C<t7");
      String string1 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string1);
      
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean0);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("N", string2);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      foreignKeyConstraint0.getChildTable();
      boolean boolean1 = foreignKeyConstraint0.isNullOnDelete();
      assertEquals(20, foreignKeyConstraint0.getUpdateRule());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 1229, 0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Config config0 = Config.getInstance();
      Config config1 = Config.getInstance();
      config1.isSingleSignOn();
      config0.setUser("");
      config0.getCatalog();
      config0.isPromptForPasswordEnabled();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      config0.setConnectionProperties("Restrict delete:\n Parent cannot be deleted if children exist");
      config0.getFontSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Restrict delete:\n Parent cannot be deleted if children exist");
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string0);
      assertEquals(1229, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7975084293448083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Config config0 = Config.getInstance();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setComments("N");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "N", (byte)0, (byte)0);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Restrict delete:\n Parent cannot be deleted if children exist";
      stringArray0[1] = "N";
      stringArray0[2] = "N";
      stringArray0[3] = "Cascade on delete";
      stringArray0[4] = "N";
      Config config1 = new Config(stringArray0);
      config0.getCatalog();
      config0.setConnectionProperties("N");
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertTrue(boolean0);
      
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.214896527609556
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", (byte)3, (byte)3);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string1);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "R", 0, 208);
      boolean boolean0 = foreignKeyConstraint1.isRestrictDelete();
      foreignKeyConstraint0.getChildColumns();
      String string2 = foreignKeyConstraint1.getDeleteRuleName();
      assertEquals("", string2);
      
      int int0 = foreignKeyConstraint1.getUpdateRule();
      assertEquals(0, int0);
      
      System.setCurrentTimeMillis(0);
      boolean boolean1 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(foreignKeyConstraint0.isRestrictDelete());
      assertTrue(boolean1 == boolean0);
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0188624449286268
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Config.getInstance();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 4, (byte) (-69));
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      foreignKeyConstraint0.getDeleteRuleName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Null on delete");
      foreignKeyConstraint0.getDeleteRuleDescription();
      boolean boolean1 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals((-69), foreignKeyConstraint0.getDeleteRule());
      assertTrue(boolean1 == boolean0);
      assertEquals(4, foreignKeyConstraint0.getUpdateRule());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8686986645046977
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-1355), 20);
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRuleName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      foreignKeyConstraint0.getDeleteRuleDescription();
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertEquals((-1355), foreignKeyConstraint0.getUpdateRule());
      assertEquals(20, foreignKeyConstraint0.getDeleteRule());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9927033858572365
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", (byte)3, (byte)3);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string1);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "qgGt:'Nqz,SpI`.`h3", (-18), (-987));
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint1.getDeleteRuleName();
      assertEquals((-18), foreignKeyConstraint1.getUpdateRule());
      assertEquals((-987), foreignKeyConstraint1.getDeleteRule());
      assertFalse(foreignKeyConstraint1.isRestrictDelete());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "CATALOG");
      String string2 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string2);
      
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setComments("");
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn0, tableColumn1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.308909911645738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "V", 2277, (-1));
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      boolean boolean0 = foreignKeyConstraint0.isImplied();
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1));
      boolean boolean1 = foreignKeyConstraint0.isReal();
      Integer integer1 = new Integer((-1));
      boolean boolean2 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean2 == boolean1);
      
      foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals(2277, foreignKeyConstraint0.getUpdateRule());
      assertEquals((-1), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3504302827410943
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "~", (-1597), (-2180));
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRuleName();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "Null on delete:\n Foreign key to parent set to NULL when parent deleted", (-2180), (-2180));
      foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      foreignKeyConstraint1.getDeleteRuleAlias();
      Config config0 = Config.getInstance();
      config0.setRankDirBugEnabled(false);
      Config config1 = new Config();
      config1.getFontSize();
      foreignKeyConstraint1.getDeleteRuleDescription();
      Connection connection0 = null;
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("", "", "Null on delete:\n Foreign key to parent set to NULL when parent deleted");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Meta directory \"\" must contain a file named \"Null on delete:
         //  Foreign key to parent set to NULL when parent deleted.meta.xml\"
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.214896527609556
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", (byte)3, (byte)3);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string1);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "R", (-17), 208);
      boolean boolean0 = foreignKeyConstraint1.isRestrictDelete();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint1.getDeleteRuleName();
      int int0 = foreignKeyConstraint1.getUpdateRule();
      assertEquals((-17), int0);
      assertEquals(208, foreignKeyConstraint1.getDeleteRule());
      
      System.setCurrentTimeMillis((-17));
      boolean boolean1 = foreignKeyConstraint0.isNullOnDelete();
      assertTrue(foreignKeyConstraint0.isRestrictDelete());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-1), 1701);
      Config config0 = new Config();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UTF-8";
      stringArray0[1] = "UTF-8";
      Config config1 = new Config(stringArray0);
      config0.getCatalog();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config2.getCatalog();
      config1.setServer((String) null);
      Config config4 = new Config(stringArray0);
      foreignKeyConstraint0.isCascadeOnDelete();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      config4.getPassword();
      config3.setHost("5M^4]ty,fq.cp`oN");
      config0.isPromptForPasswordEnabled();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TableColumn tableColumn0 = null;
      try {
        tableColumn0 = new TableColumn((Table) null, (TableColumnMeta) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      LinkedList<TableColumn> linkedList2 = new LinkedList<TableColumn>();
      linkedList2.add((TableColumn) null);
      linkedList2.stream();
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) linkedList2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0185666947917342
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1701, (-1));
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, (String) null, (-1), 801);
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRuleName();
      ForeignKeyConstraint foreignKeyConstraint2 = new ForeignKeyConstraint((Table) null, (String) null, 1701, 801);
      // Undeclared exception!
      try { 
        foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.210919589764425
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Config.getInstance();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 131, (-2180));
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRuleName();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "UTF-8", 1, (-2180));
      // Undeclared exception!
      try { 
        foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5982538439717047
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Table table0 = null;
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 1696, 1);
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      Config.getInstance();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta((String) null, "Restrict delete", "Restrict delete");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.147514311455309
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "v", 1701, (-1));
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getChildColumns();
      Config.getInstance();
      foreignKeyConstraint0.getName();
      FileSystemHandling.shouldAllThrowIOExceptions();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleDescription();
      List<String> list0 = ResourceBundle.Control.FORMAT_PROPERTIES;
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("' to ", "v", "v");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"' to \" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7975084293448083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict delete:\n Parent cannot be deleted if children exist", (-2958), (-2958));
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "i8]]W);x692g!z0";
      stringArray0[1] = "";
      Config config0 = new Config(stringArray0);
      config0.setConnectionProperties("i8]]W);x692g!z0");
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      assertFalse(boolean0);
      
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals((-2958), foreignKeyConstraint0.getUpdateRule());
      assertEquals((-2958), int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.788458655589152
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1701, (-1));
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      Config.getInstance();
      foreignKeyConstraint0.getName();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      tableColumn0.setComments("INDICATOR");
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      assertNull(tableColumn1.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "b", 69, 69);
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      foreignKeyConstraint0.getParentColumns();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "b");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 1718, 1718);
      foreignKeyConstraint0.getDeleteRuleAlias();
      Config.getInstance();
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      foreignKeyConstraint0.getName();
      int int0 = foreignKeyConstraint0.getUpdateRule();
      int int1 = foreignKeyConstraint0.getDeleteRule();
      assertTrue(int1 == int0);
      assertEquals(1718, int1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3504302827410943
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "*=MIv4kevfl$T4BSQz", (-2180), (-959));
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean0);
      
      foreignKeyConstraint0.getDeleteRuleName();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", (-2180), 801);
      int int0 = foreignKeyConstraint1.compareTo(foreignKeyConstraint0);
      assertEquals((-18), int0);
      
      foreignKeyConstraint0.getDeleteRuleAlias();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "*=MIv4kevfl$T4BSQz";
      Config config0 = new Config(stringArray0);
      config0.setRankDirBugEnabled(false);
      Config config1 = new Config();
      config0.getFontSize();
      foreignKeyConstraint1.getDeleteRuleDescription();
      assertEquals((-2180), foreignKeyConstraint1.getUpdateRule());
      assertEquals(801, foreignKeyConstraint1.getDeleteRule());
      assertFalse(foreignKeyConstraint1.isRestrictDelete());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1975999907376385
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Config config0 = new Config();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "UTF-8", 131, (-2180));
      foreignKeyConstraint0.isRestrictDelete();
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      foreignKeyConstraint0.getDeleteRuleAlias();
      config0.setRankDirBugEnabled(false);
      Config config1 = new Config();
      config1.getFontSize();
      foreignKeyConstraint0.getDeleteRuleDescription();
      Connection connection0 = null;
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      String string0 = "";
      String string1 = "5|j_r ";
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("UTF-8", "#!5gw1(g(w(<Tk8", "UTF-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"UTF-8\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-1), 1701);
      Config config0 = new Config();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UTF-8";
      stringArray0[1] = "UTF-8";
      Config config1 = new Config(stringArray0);
      config0.getCatalog();
      List<String> list0 = ResourceBundle.Control.FORMAT_DEFAULT;
      Config config2 = Config.getInstance();
      Config config3 = Config.getInstance();
      config2.getCatalog();
      config1.setServer((String) null);
      Config config4 = new Config(stringArray0);
      config2.isHighQuality();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      config4.getPassword();
      config3.setHost("5M^4]ty,fq.cp`oN");
      config0.isPromptForPasswordEnabled();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Config.getInstance();
      Config config5 = Config.getInstance();
      config5.setConnectionProperties("-noschema");
      config1.getDbSpecificOptions();
      Config config6 = new Config();
      config4.getFontSize();
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8837093036731862
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-806), 3322);
      foreignKeyConstraint0.getDeleteRuleName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Restrict delete:\n Parent cannot be deleted if children exist";
      stringArray0[3] = "";
      stringArray0[4] = "Qi8]]W)5;x692gz0";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "Qi8]]W)5;x692gz0";
      Config config0 = new Config(stringArray0);
      Config config1 = new Config(stringArray0);
      config0.getPort();
      config1.getCatalog();
      config0.getColumnDetails();
      Config config2 = Config.getInstance();
      Config.getInstance();
      config1.getCatalog();
      config1.isPromptForPasswordEnabled();
      config2.setConnectionProperties("%z9s<~]");
      Config config3 = new Config();
      config1.getFontSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      foreignKeyConstraint0.getDeleteRuleDescription();
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals((-806), foreignKeyConstraint0.getUpdateRule());
      assertEquals(3322, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "SLSTATE", 2491, (byte)3);
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.getChildTable();
      assertEquals("R", foreignKeyConstraint0.getDeleteRuleAlias());
      assertEquals(2491, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      linkedList0.add((TableColumn) null);
      linkedList0.stream();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 1, 1);
      List<TableColumn> list0 = foreignKeyConstraint0.getChildColumns();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      assertEquals(1, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Restrict delete", foreignKeyConstraint0.getDeleteRuleName());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Config config0 = Config.getInstance();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      tableColumn0.removeChild(tableColumn1);
      tableColumn0.setComments("");
      Config.getLoadedFromJar();
      tableColumn0.setShortType("dZO");
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      config0.getFontSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn1, tableColumn1, 11, 692);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
