/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:20:30 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-7), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)13;
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)95;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)95;
      byte byte0 = (byte) (-46);
      byteArray0[7] = (byte) (-46);
      defaultNucleotideCodec0.toString(byteArray0);
      int int0 = (-1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGappedOffsetFor((byte[]) null, (byte) (-46));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4193753019768693
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.decode(byteArray0, (byte)5);
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, 6225918);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.iterator(byteArray1);
      int int0 = (-1709044471);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1173L, (long) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.437973641118805
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 66);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 2125114026);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 45);
      byte[] byteArray1 = null;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGapOffsets(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.isGap((byte[]) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4054987634430756
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[11];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-103);
      byteArray0[3] = (byte)69;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Range.of(1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-4866L), 4L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-866));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3899999820598725
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      linkedList0.add(nucleotide0);
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      linkedList0.add(nucleotide1);
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.isGap(byteArray1, (byte)0);
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[6] = (byte)5;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      String string0 = defaultNucleotideCodec0.toString(byteArray2);
      assertEquals(5, byteArray2.length);
      assertEquals("-", string0);
      
      byte[] byteArray3 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray0, 0);
      assertFalse(boolean0);
      
      byte[] byteArray4 = defaultNucleotideCodec1.encode(0, iterator0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray4);
      
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.add(nucleotide1);
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (byte)0);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray3);
      assertFalse(list0.contains(int0));
      assertEquals(1, list0.size());
      
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray3, (-298));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-96)}, byteArray3);
      assertEquals(2, int1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-97);
      Range range0 = Range.of((long) (byte) (-15), (long) (byte) (-15));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2627601504579813
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      linkedList0.add(nucleotide0);
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      linkedList0.add(nucleotide1);
      byteArray0[5] = (byte)0;
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("", string0);
      
      byteArray0[6] = (byte)5;
      Nucleotide nucleotide2 = Nucleotide.Purine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      String string1 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("R", string1);
      
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      assertEquals(5, byteArray1.length);
      
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray0, 0);
      assertFalse(boolean0);
      
      byte[] byteArray3 = defaultNucleotideCodec1.encode(0, iterator0);
      assertEquals(4, byteArray3.length);
      
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      nucleotide2.getBasesFor();
      String string2 = defaultNucleotideCodec0.toString(byteArray2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-96)}, byteArray2);
      assertEquals("M-", string2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)12;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 5);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)51;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2216376512277787
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte[] byteArray1 = new byte[8];
      defaultNucleotideCodec0.isGap(byteArray0, (byte)95);
      byteArray1[4] = (byte)95;
      byteArray1[6] = (byte)95;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray1[7] = (byte) (-46);
      Nucleotide nucleotide0 = Nucleotide.Keto;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.toString(byteArray1);
      byteArray0[1] = (byte)95;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray2, (-1));
      defaultNucleotideCodec0.toString(byteArray2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 2L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 2 corresponds to encodedIndex 5  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 2678;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)123;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3563898891608095
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)14;
      byteArray0[7] = (byte) (-37);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 13);
      Range range0 = Range.of(0L);
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec2.isGap(byteArray1, (byte)0);
      int int0 = 68;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-20);
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte)69;
      byteArray0[4] = (byte)23;
      byteArray0[6] = (byte)69;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9481072480504316
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.decode(byteArray0, (byte)0);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec1.decode(byteArray0, (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 1988L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1988 corresponds to encodedIndex 998  encodedglyph length is 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2997866973744943
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)95;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte) (-46);
      Nucleotide nucleotide0 = Nucleotide.Keto;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-1));
      Nucleotide nucleotide1 = Nucleotide.Purine;
      Nucleotide nucleotide2 = Nucleotide.Cytosine;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.decodedLengthOf(byteArray2);
      defaultNucleotideCodec2.toString(byteArray1);
      defaultNucleotideCodec2.decodedLengthOf(byteArray1);
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      byte[] byteArray3 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.isGap(byteArray3, 1717986918);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec2.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(14, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.43570606742266
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-29));
      byteArray0[0] = (byte) (-29);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)90;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1210));
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)9);
      byteArray0[3] = (byte)69;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)109;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)82;
      defaultNucleotideCodec0.isGap(byteArray0, 472);
      byte[] byteArray1 = new byte[1];
      int int0 = 1059;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, 1059);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)23;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-89);
      byte byte0 = (byte)3;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 10);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8918711764128284
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1024);
      byte byte0 = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1644167378);
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, 5016);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.toString(byteArray0);
      byte[] byteArray1 = null;
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec6.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9447978161695705
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte) (-33);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGapOffsets(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.encode(1952257861, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "INSTANCE";
      DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[3];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.363250371441397
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      linkedList0.add(nucleotide0);
      byteArray0[2] = (byte)0;
      linkedList0.iterator();
      byteArray0[4] = (byte)0;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      linkedList0.add(nucleotide1);
      byteArray0[5] = (byte)0;
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("", string0);
      
      byteArray0[6] = (byte)5;
      Nucleotide nucleotide2 = Nucleotide.Purine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      String string1 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("R", string1);
      
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-96)}, byteArray2);
      
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray0, 0);
      assertFalse(boolean0);
      
      defaultNucleotideCodec1.encode(0, iterator0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.add(nucleotide2);
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList1);
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      byte[] byteArray3 = new byte[9];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte)0;
      byteArray3[3] = (byte)7;
      byteArray3[4] = (byte)0;
      byteArray3[5] = (byte)0;
      byteArray3[6] = (byte)105;
      byteArray3[7] = (byte)5;
      byteArray3[8] = (byte)5;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray3);
      assertEquals(2L, long0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      byte byte0 = (byte)23;
      byteArray0[1] = (byte)23;
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)55;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte)23;
      byteArray2[1] = (byte)40;
      byteArray2[2] = (byte)23;
      byteArray2[3] = (byte)0;
      Range.parseRange("a~U@0,8d3IN");
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
      Range range0 = Range.of((-1L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -1 .. -1 ]/0B is out of range of sequence which is only [ 0 .. 0 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte) (-110);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)82;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)0;
      Range range0 = Range.of(1157627973L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 1157627973 .. 1157627973 ]/0B is out of range of sequence which is only [ 0 .. 663941201 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2293495789482387
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)101;
      byteArray0[6] = (byte)101;
      byteArray0[1] = (byte) (-46);
      Nucleotide nucleotide0 = Nucleotide.Keto;
      defaultNucleotideCodec0.encode(nucleotide0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3078656782573574
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      linkedList0.add(nucleotide0);
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)0;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      linkedList0.add(nucleotide1);
      byteArray0[5] = (byte)0;
      defaultNucleotideCodec0.toString(byteArray0);
      byteArray0[6] = (byte)5;
      Nucleotide nucleotide2 = Nucleotide.Purine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.toString(byteArray1);
      defaultNucleotideCodec0.decodedLengthOf(byteArray1);
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec1.isGap(byteArray0, 0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((int) (byte)5, iterator0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.090752872955738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)95;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, 730);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedOffsetFor((byte[]) null, (byte)95);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.060362201498235
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-117);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2023));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, (-2023));
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-2023));
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 1644167378);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, (-2160));
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.decode(byteArray0, 921L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 921 corresponds to encodedIndex 464  encodedglyph length is 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "INSTANCE";
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)0;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      byteArray0[0] = (byte)0;
      long long0 = 925L;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 925L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 925 corresponds to encodedIndex 466  encodedglyph length is 3
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byte byte0 = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byte byte1 = (byte)90;
      byteArray0[2] = (byte)90;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.4212064844137973
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte)88;
      byteArray0[3] = (byte) (-45);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)56;
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5830423502280264
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.ofLength((byte)0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0, range0);
      byte[] byteArray1 = defaultNucleotideCodec1.encode((int) (byte)0, iterator0);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, (byte)0);
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, 327678);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray1, (-499));
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, (-3483));
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = defaultNucleotideCodec4.decode(byteArray0, 0L);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      
      defaultNucleotideCodec5.decodedLengthOf(byteArray0);
      int int1 = defaultNucleotideCodec5.getGappedOffsetFor(byteArray0, (-499));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9119661911697396
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of((long) (byte)0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0, range0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((int) (byte)69, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte byte0 = (byte)69;
      byte byte1 = (byte)23;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)23;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)23;
      byteArray0[7] = (byte)69;
      byteArray0[8] = (byte)23;
      Range range0 = Range.of((long) (byte)23);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6205643331111412
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-65);
      byte byte0 = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1073741824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6510794496696652
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      byte byte0 = (byte)0;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)56);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.listIterator();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList1.listIterator();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((-943), (Iterator<Nucleotide>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      ListIterator<Nucleotide> listIterator0 = linkedList0.listIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(7, (Iterator<Nucleotide>) listIterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.0881908159886837
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byte[] byteArray1 = new byte[8];
      defaultNucleotideCodec0.isGap(byteArray0, (byte)95);
      byteArray1[4] = (byte)95;
      byteArray1[6] = (byte)95;
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)95;
      byteArray0[1] = (byte)95;
      int int0 = (-2358);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.isGap(byteArray0, (-2358));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)6;
      byteArray0[3] = (byte)10;
      byteArray0[2] = (byte)1;
      byte byte0 = (byte)51;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)0;
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      Range range0 = Range.of((long) (byte)0, (long) (byte)0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null, range0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)95;
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte)95;
      byteArray0[6] = (byte)95;
      byte byte1 = (byte) (-46);
      byteArray0[7] = (byte) (-46);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-46);
      byteArray1[1] = (byte) (-46);
      byteArray1[2] = (byte) (-46);
      byteArray1[3] = (byte) (-46);
      byteArray1[4] = (byte)95;
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.toString(byteArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.493819695397966
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = new byte[8];
      defaultNucleotideCodec0.isGap(byteArray0, (byte)95);
      byteArray1[4] = (byte)95;
      byteArray1[6] = (byte)95;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byteArray1[7] = (byte) (-46);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      String string0 = defaultNucleotideCodec0.toString(byteArray1);
      assertEquals("", string0);
      
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-65);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray2, (byte) (-65));
      defaultNucleotideCodec0.iterator(byteArray2);
      Nucleotide nucleotide2 = Nucleotide.NotGuanine;
      Set<Nucleotide> set1 = nucleotide2.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec1.getNumberOfGaps(byteArray1);
      assertTrue(int1 == int0);
      
      byte[] byteArray3 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray3);
      assertEquals(6, byteArray3.length);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[2] = (byte) (-105);
      byteArray0[4] = (byte)67;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-1625L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1625
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.060817126056579
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1024);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1644167378);
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1024);
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-4911));
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-357));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 1162189079);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decode(byteArray0, 921L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 921 corresponds to encodedIndex 464  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.417715857393759
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)15;
      byte byte0 = (byte)27;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)0;
      byte byte1 = (byte) (-14);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)33;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)69;
      byteArray0[6] = (byte)48;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-92);
      byteArray0[6] = (byte)12;
      byteArray0[7] = (byte)125;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.5213722930031675
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)42;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
