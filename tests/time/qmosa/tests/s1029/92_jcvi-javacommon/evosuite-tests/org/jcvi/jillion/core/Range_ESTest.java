/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:49:12 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.602566880268591
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.ofLength(2452L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(7293L, 7293L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-2137L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2735L, 32767L);
      long long0 = range1.getLength();
      assertEquals(1L, long0);
      
      Object object0 = new Object();
      Range range3 = Range.of(258L, 258L);
      boolean boolean0 = range2.equals(range3);
      assertFalse(range3.isEmpty());
      assertFalse(boolean0);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5090060094429605
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.ofLength(203L);
      long long0 = (-2147483648L);
      Range.of((-2147483648L));
      long long1 = (-1007L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1007L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.746870494780864
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 203L;
      Range range0 = Range.ofLength(203L);
      Range.of((-2147483648L));
      Range range1 = Range.of(203L);
      Range range2 = range0.intersection(range1);
      range0.spliterator();
      Object object0 = new Object();
      range2.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("z0.tmEl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.z0.tmEl
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.242112047462494
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -3752 .. -3753 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -3752 .. -3753 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5998358771612544
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(0L, 5417L);
      long long0 = 3769L;
      Range range1 = Range.ofLength(3769L);
      range1.startsBefore(range0);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        range1.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.8051234843906507
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      range0.split(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      range0.getEnd();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.shift(32767L);
      long long0 = 1L;
      Range.of((-2147483648L), (-53L));
      Range range1 = Range.of((-1231L), 2147483664L);
      // Undeclared exception!
      try { 
        range1.split((-712L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.83072971782363
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(432L);
      range0.split(1936L);
      Long long0 = new Long(255L);
      range0.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-22643L));
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(9223372032559808513L);
      range_Builder1.build();
      Range.Builder range_Builder3 = range_Builder2.expandBegin((-22646L));
      range_Builder3.build();
      Range range1 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.050452978383629
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.of(0L, 5417L);
      Range range0 = Range.ofLength(3769L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.copy();
      range0.getEnd();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.shift(9223372036854775648L);
      Range.of(3768L, 3768L);
      List<Range> list0 = range0.split(3768L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(3768L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.093223879519855
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.of(32767L, 32767L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = (-2853L);
      long long1 = 203L;
      Range range1 = Range.of(203L);
      range1.startsBefore(range0);
      Range range2 = Range.of((-2097L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = range0.intersection(range2);
      range0.intersects(range1);
      Range range4 = Range.of(203L, 203L);
      range4.complement(range3);
      long long2 = (-128L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2097L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.895038212485052
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1785L, 1785L);
      range1.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(1785L);
      range_Builder0.expandEnd(1043L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.getBegin();
      Range range2 = range1.asRange();
      Range range3 = Range.of(1L);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        range3.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6657971912408214
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.copy();
      range1.getEnd();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      long long0 = 32767L;
      range_Builder2.shift(32767L);
      Range.of(494L);
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.02967655453182
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of(0L, 5417L);
      Range range1 = Range.ofLength(3769L);
      boolean boolean0 = range1.startsBefore(range0);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 3769 ]/SB", string0);
      
      boolean boolean1 = range2.intersects(range1);
      assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.of(127L);
      Range range4 = Range.of((-1669L), 3769L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(3769L);
      range_Builder0.contractEnd((-1L));
      range_Builder0.shift((-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range5 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      range0.endsBefore(range3);
      Range range6 = Range.parseRange("[ 0 .. 3769 ]/SB", range_CoordinateSystem1);
      assertSame(range6, range5);
      
      String string1 = range2.toString();
      assertEquals("[ 0 .. 3768 ]/0B", string1);
      
      range_CoordinateSystem0.toString();
      Long long0 = new Long(3769L);
      range4.isSubRangeOf(range2);
      Range range7 = Range.of((-220L));
      assertNotSame(range7, range6);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.890190072819715
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3153L);
      Range range1 = Range.of(3153L, 3153L);
      Range range2 = Range.ofLength(9223372036854772363L);
      range0.startsBefore(range2);
      Range range3 = range0.intersection(range1);
      range0.toString(range_CoordinateSystem0);
      range0.startsBefore(range1);
      Range.of(127L);
      Range range4 = Range.of(0L, 740L);
      range1.toString(range_CoordinateSystem0);
      range4.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8615850676888113
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = Range.of((-2853L));
      Range range3 = Range.of((-2097L));
      range3.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem0);
      range2.isSubRangeOf(range0);
      range3.complement(range0);
      range3.getBegin();
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-2853L), (-413L));
      range3.intersects(range2);
      range1.isSubRangeOf(range2);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("[ 0 .. -1 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ 0 .. -1 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder(65533L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2147483646L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.9173109367106265
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Comparators.values();
      Range.ofLength(0L);
      long long0 = 404L;
      Range.ofLength(404L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-210L), 9223372036854775555L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(9223372036854775555L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      Object object0 = new Object();
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775554 ]/0B", range_CoordinateSystem1);
      range1.equals("[ 0 .. 9223372036854775554 ]/0B");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 9223372036854775554 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 9223372036854775554 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.001963195581777
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3153L);
      Range range1 = Range.of(3153L, 3153L);
      Range range2 = Range.ofLength(9223372036854772363L);
      range0.startsBefore(range2);
      Range range3 = range0.intersection(range1);
      range0.toString(range_CoordinateSystem0);
      range0.startsBefore(range1);
      Range range4 = Range.of(127L);
      Range range5 = Range.parseRange("[ 0 .. 3153 ]/SB", range_CoordinateSystem0);
      range1.toString(range_CoordinateSystem0);
      range5.isSubRangeOf(range3);
      range2.complement(range4);
      range2.getBegin();
      range1.toString();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 2725L, 3153L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7886187422079036
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 1785L;
      Range range1 = Range.of(range_CoordinateSystem0, 1785L, 1785L);
      range1.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.isEmpty();
      Range.Builder range_Builder0 = new Range.Builder(1785L);
      range_Builder0.expandEnd(1043L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.equals(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.parseRange("cuX:y I1t57", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cuX:y I1t57 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.901572236537224
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-1047L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1047L), (-1047L));
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range0.startsBefore(range1);
      range0.getEnd(range_CoordinateSystem0);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.865097147612635
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range0.getEnd();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.of(2147483647L);
      range1.complementFrom(linkedList0);
      long long0 = 0L;
      Range range2 = Range.of(4575L, 2147483647L);
      range1.spliterator();
      range2.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse inputstream can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.87671247368547
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of((-20L));
      Range range1 = Range.ofLength(2452L);
      range1.spliterator();
      List<Range> list0 = range0.complement(range1);
      range0.equals(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*,s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*,s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9124256860779276
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(65535L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.copy();
      range_Builder2.expandBegin(0L);
      Range range1 = range_Builder1.build();
      List<Range> list0 = range0.split(9223372036854775807L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range2 = range_Builder1.build();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6811889625158196
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Comparators.values();
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L), (-1070L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1901L), 2147483647L);
      range0.isSubRangeOf(range1);
      Range.of(range_CoordinateSystem0, 0L, (-1L));
      long long1 = (-1214L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1214L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.663250384404173
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      range0.split(2147483664L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_CoordinateSystem0.getAbbreviatedName();
      Range.of(1733L, 1733L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.371044194569278
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = 2147483664L;
      Range range0 = Range.of(2147483664L);
      range0.split(2147483664L);
      Long long1 = new Long(0L);
      range0.equals(long1);
      Range.Builder range_Builder0 = new Range.Builder();
      long long2 = 9223372032559808513L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372032559808513L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8538749231860687
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      range0.endsBefore(range0);
      boolean boolean0 = range2.intersects(range2);
      assertTrue(boolean0);
      
      List<Range> list0 = range2.complement(range1);
      assertEquals(0, list0.size());
      
      Long long0 = new Long(1L);
      range1.isSubRangeOf(range0);
      range1.startsBefore(range0);
      range1.startsBefore(range0);
      range1.iterator();
      assertSame(range1, range2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5467181517148267
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(32767L, 32767L);
      Long long1 = new Long(32767L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(32767L);
      Range range1 = range_Builder1.build();
      range1.intersects(range0);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6521600129254983
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractBegin(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.copy();
      range_Builder1.expandBegin(0L);
      Range range1 = Range.of(65535L);
      range1.intersects(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        linkedList0.add(1061, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1061, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.609831820321208
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = Range.of(3364L);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(255L);
      Range range2 = Range.of(1891L, 1891L);
      range2.intersects(range1);
      // Undeclared exception!
      try { 
        linkedList0.add((-810), range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -810, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 661L;
      Range.Builder range_Builder0 = new Range.Builder(661L, 661L);
      long long1 = (-14L);
      range_Builder0.expandEnd((-14L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.864271158553267
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.of(0L);
      Range range0 = Range.of(0L);
      Range.ofLength(0L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 1316L);
      // Undeclared exception!
      try { 
        range1.split((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5092204879797624
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range range1 = Range.of(2076L);
      Range range2 = Range.of(808L);
      range2.endsBefore(range0);
      Range.ofLength(343L);
      range2.getLength();
      range2.startsBefore(range1);
      range0.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.of(176L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6702752128080207
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(65535L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.copy();
      range_Builder2.expandBegin(0L);
      Range range1 = range_Builder1.build();
      range0.split(9223372036854775807L);
      Long long0 = new Long(2147483664L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.729408990379414
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.copy();
      range_Builder0.copy();
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775806L);
      range2.isSubRangeOf(range1);
      range2.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-1371L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6044576417924405
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of((-20L));
      Range range1 = Range.of((-20L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(3769L);
      range3.intersects(range2);
      Range range4 = Range.of(2147483647L);
      range1.startsBefore(range4);
      Range range5 = Range.ofLength(3769L);
      // Undeclared exception!
      try { 
        range5.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.512813619141764
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(65535L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.expandBegin(0L);
      range_Builder1.build();
      range0.split(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.195721102241834
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-210L), 9223372036854775555L);
      Range range2 = Range.ofLength(9223372036854775555L);
      Range range3 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem3);
      range0.getBegin();
      Range range4 = range3.asRange();
      Range range5 = Range.of(0L);
      List<Range> list0 = range5.complement(range3);
      range3.complementFrom(list0);
      range2.asRange();
      range4.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractEnd(0L);
      range_Builder1.shift(0L);
      range4.getEnd(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9937964663772045
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L, 127L);
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(1733L);
      Range range2 = Range.ofLength(1733L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1733L, 1874L);
      List<Range> list0 = range1.split(127L);
      range1.complementFrom(list0);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.033429485003522
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractBegin(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(255L, 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem0);
      range1.isSubRangeOf(range0);
      range1.complement(range0);
      range1.getBegin();
      range0.toString();
      Range range2 = Range.of(range_CoordinateSystem0, (-1762L), 367L);
      range2.intersects(range0);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("kQK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse kQK into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.571656456365215
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = 394739L;
      Range range0 = Range.of(2L, 394739L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2L, 9223372036854773797L);
      long long1 = (-409L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 394739L, (-409L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5353048754909193
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.contractBegin(9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.getLength();
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.startsBefore(range1);
      range1.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.6278916517396316
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range2.intersects(range1);
      assertTrue(boolean0);
      
      range2.startsBefore(range1);
      List<Range> list0 = range1.split(1L);
      assertEquals(1, list0.size());
      
      Long long0 = new Long(1L);
      boolean boolean1 = range2.isSubRangeOf(range1);
      assertSame(range2, range1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7933063662127906
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(1L);
      assertFalse(range3.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range4 = range_Builder0.build();
      List<Range> list0 = range0.split(1130L);
      List<Range> list1 = range4.complementFrom(list0);
      assertTrue(list1.isEmpty());
      assertSame(range2, range1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.expandEnd(1304L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.513791531974777
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      long long0 = (-1049L);
      Range range0 = Range.of((-1049L));
      long long1 = (-560L);
      Range range1 = Range.of((-560L));
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      long long2 = 232L;
      long long3 = 383L;
      // Undeclared exception!
      try { 
        Range.of(65535L, 383L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3492343098426636
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-3752L);
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -3753 .. -3753 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -3753 .. -3753 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.870702501948297
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Comparators.values();
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-210L);
      Range.of(range_CoordinateSystem0, (-210L), 9223372036854775555L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(9223372036854775555L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      Object object0 = new Object();
      Range range1 = Range.parseRange("[ 0 .. 9223372036854775554 ]/0B", range_CoordinateSystem1);
      Range.parseRange("[ 0 .. 9223372036854775554 ]/0B");
      range1.equals("[ 0 .. 9223372036854775554 ]/0B");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 9223372036854775554 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 9223372036854775554 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.705489803247537
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of((-2L));
      Range range1 = Range.of((-2L));
      Range range2 = range0.intersection(range1);
      range2.startsBefore(range0);
      List<Range> list0 = range2.complement(range1);
      assertEquals(0, list0.size());
      
      long long0 = range1.getEnd();
      assertEquals((-2L), long0);
      
      boolean boolean0 = range0.isEmpty();
      assertSame(range0, range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=4.053250246478059
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3153L);
      Range range1 = Range.of(3153L, 3153L);
      Range range2 = Range.ofLength(3153L);
      range0.startsBefore(range2);
      Range range3 = range0.intersection(range1);
      range0.startsBefore(range1);
      Range range4 = Range.of(127L);
      Range range5 = Range.of(0L, 740L);
      range1.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range5.isSubRangeOf(range3);
      range2.complement(range4);
      range2.getBegin();
      range1.toString();
      Range range6 = Range.of(range_CoordinateSystem0, 2725L, 3153L);
      range5.intersects(range3);
      range2.isSubRangeOf(range6);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.239768376730582
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-210L), 9223372036854775555L);
      Range range2 = Range.ofLength(9223372036854775555L);
      Range range3 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem3);
      range0.getBegin();
      Range range4 = Range.of(0L, 0L);
      Range range5 = Range.of(0L);
      List<Range> list0 = range5.complement(range3);
      range3.complementFrom(list0);
      range2.asRange();
      range4.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractEnd(0L);
      range_Builder1.shift(0L);
      range4.getEnd(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.105535921029544
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-210L), 9223372036854775555L);
      Range range2 = Range.ofLength(9223372036854775555L);
      Range range3 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem2);
      range0.getBegin();
      range3.asRange();
      Range range4 = Range.of(0L);
      List<Range> list0 = range4.complement(range3);
      range3.complementFrom(list0);
      // Undeclared exception!
      try { 
        range3.split((-176L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8633245080145073
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      Range.of((-2853L));
      Range range1 = Range.of((-2097L));
      Range range2 = range1.intersection(range0);
      range0.intersects(range2);
      Range range3 = Range.of((-2853L), (-2853L));
      range3.complement(range1);
      range_Builder0.shift((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-2853L), (-2097L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("WEH(?`7Xw8lx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.WEH(?`7Xw8lx
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=4.005082889151822
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.of(0L, 5417L);
      Range range1 = Range.ofLength(3769L);
      range1.startsBefore(range0);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem0);
      boolean boolean0 = range2.intersects(range1);
      Range range3 = Range.of(127L);
      Range range4 = Range.of((-1669L), 3769L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(3769L);
      range_Builder0.shift((-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range5 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      boolean boolean1 = range0.endsBefore(range3);
      assertFalse(boolean1);
      
      Range range6 = Range.parseRange("[ 0 .. 3769 ]/SB", range_CoordinateSystem1);
      assertNotSame(range6, range5);
      
      String string0 = range2.toString();
      assertEquals("[ 0 .. 3768 ]/0B", string0);
      
      range_CoordinateSystem0.toString();
      Long long0 = new Long(3769L);
      boolean boolean2 = range4.isSubRangeOf(range2);
      assertFalse(boolean2 == boolean0);
      assertSame(range2, range1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.842352458917058
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-2853L));
      Range range2 = Range.of((-2097L));
      Range range3 = range2.intersection(range0);
      range0.intersects(range3);
      assertTrue(range3.isEmpty());
      
      Range range4 = Range.of((-2853L), (-2853L));
      List<Range> list0 = range4.complement(range2);
      assertTrue(list0.contains(range1));
      assertSame(range4, range1);
      
      Long long0 = new Long((-2105L));
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6773189623467477
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 2027L;
      Range range0 = Range.ofLength(2027L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-4866L), 4294967295L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.549827200329012
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(65523L);
      range_Builder0.contractBegin((-1L));
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.expandBegin((-1L));
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-128L), 9223372036854775806L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.505531130766156
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-9223372036854775808L), (-1070L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1901L), 2147483647L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.1571974386719113
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.ofLength(32766L);
      Integer integer0 = new Integer(16);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 32765 ]/0B", string0);
      
      range0.equals(integer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      long long0 = range0.getLength();
      assertEquals(32766L, long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.406843574312277
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(32767L, 32767L);
      range0.asRange();
      long long1 = (-2066L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2066L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.4390852526792477
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.ofLength(5321L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=4.050530116394964
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-495L));
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder1.expandBegin(31463L);
      Range range1 = range_Builder3.build();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.770983635408659
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Long long0 = new Long(32767L);
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Integer integer0 = new Integer((-2146090985));
      Integer integer1 = new Integer((-2146197728));
      range0.equals(integer1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      long long1 = range0.getLength();
      assertEquals(1L, long1);
      
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.6389859581294166
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.of(1205L, 1205L);
      Range range1 = Range.of((-32768L), 1205L);
      Range range2 = range0.intersection(range1);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.6749250598499557
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(1177L);
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder3.expandBegin(9223372036854775807L);
      range_Builder0.build();
      Range.Builder range_Builder4 = new Range.Builder(2452L, 2452L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range range1 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range1.split((-2993L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 667L, 1485L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1485L, 667L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 4224L, 4224L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 690L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.8971147522035974
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.of((-2853L));
      Range range2 = Range.of((-2097L));
      Range range3 = range2.intersection(range1);
      boolean boolean0 = range1.intersects(range3);
      Range range4 = Range.of((-2853L), (-2853L));
      range4.complement(range2);
      range_Builder0.shift((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2853L), (-2097L));
      range2.getLength();
      Object object0 = new Object();
      boolean boolean1 = range0.equals(object0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.7562835603964353
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      range2.intersects(range1);
      range2.startsBefore(range1);
      range0.startsBefore(range1);
      range1.complement(range2);
      range0.getEnd();
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.6618638824884173
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      range0.getEnd();
      range0.getLength();
      String string0 = "";
      Range range1 = Range.of(0L, 0L);
      range0.getLength();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.6928375649807488
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = Range.of((-2853L));
      Range range3 = Range.of((-2097L));
      Range range4 = range3.intersection(range1);
      boolean boolean0 = range1.intersects(range4);
      boolean boolean1 = range1.startsBefore(range2);
      assertFalse(boolean1);
      
      List<Range> list0 = range1.complement(range4);
      assertTrue(list0.contains(range4));
      
      range0.getEnd();
      assertSame(range0, range1);
      
      boolean boolean2 = range2.isSubRangeOf(range3);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3040938155088355
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long long0 = 0L;
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long1 = 9223372036854773534L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372036854773534L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.411853734928079
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.of((-1070L), 347L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1200L, 471L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.9709207050255886
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.of(0L);
      Range range0 = Range.of(0L);
      Range range1 = Range.ofLength(0L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range2 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.expandBegin(0L);
      range_Builder0.build();
      List<Range> list0 = range1.split(1409L);
      List<Range> list1 = range2.complementFrom(list0);
      assertTrue(list1.contains(range1));
      assertTrue(range1.isEmpty());
      
      Range range3 = range_Builder1.build();
      assertSame(range3, range0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.700694442479075
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(2147483664L);
      range_Builder0.contractBegin(2147483664L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.expandBegin(2147483664L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775806L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.6758199884524982
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2993L), 1177L);
      Range range1 = Range.of((-32768L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.3669476126851947
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(32767L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.expandBegin(31463L);
      Range range0 = range_Builder2.build();
      assertTrue(range0.isEmpty());
  }
}
