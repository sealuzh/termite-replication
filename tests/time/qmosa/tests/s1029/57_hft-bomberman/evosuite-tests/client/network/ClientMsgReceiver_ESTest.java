/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:31:02 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.event.KeyEvent;
import java.net.Proxy;
import java.net.Socket;
import java.sql.BatchUpdateException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLInvalidAuthorizationSpecException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import messages.global.SessionListMsg;
import messages.round.BombExplodedMsg;
import messages.round.NewBombMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import server.ExplosionBounds;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SessionListMsg sessionListMsg0 = new SessionListMsg();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setTcpNoDelay(true);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(sessionListMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.SessionListMsg", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("dRROR", "");
      sQLNonTransientConnectionException0.spliterator();
      int[] intArray0 = new int[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("X0#=dk'[zi~*]w=E", sQLNonTransientConnectionException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("cG,", "X0#=dk'[zi~*]w=E");
      intArray0[3] = (-925);
      BatchUpdateException batchUpdateException0 = new BatchUpdateException();
      sQLNonTransientConnectionException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("ERR\"R", "dRROR");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException2.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException0.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException2.forEach(consumer2);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLNonTransientConnectionException2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("", "ERR\"R", (-925));
      sQLNonTransientConnectionException2.spliterator();
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException();
      sQLIntegrityConstraintViolationException0.spliterator();
      sQLNonTransientException0.spliterator();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("cG,", "a", (-925), sQLNonTransientConnectionException1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException4 = new SQLNonTransientConnectionException("H");
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLTransientConnectionException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ERROR", "");
      int[] intArray0 = new int[5];
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException((String) null, (Throwable) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = (SQLNonTransientConnectionException)sQLNonTransientConnectionException0.initCause(sQLTransactionRollbackException0);
      intArray0[3] = (-925);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ERROR");
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ERROR", "Tj", intArray0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("Tj");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException2.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      sQLNonTransientConnectionException2.forEach(consumer1);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "]", sQLNonTransientConnectionException2);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException("ERR\"R", "]", (-925));
      SQLInvalidAuthorizationSpecException sQLInvalidAuthorizationSpecException0 = new SQLInvalidAuthorizationSpecException("X0#=dk'[zi~*]w=E", "ERROR", (-925));
      sQLNonTransientException0.setNextException(sQLNonTransientConnectionException1);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("] using ", 370);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "", (-925), sQLNonTransientException0);
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Tj");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLNonTransientConnectionException sQLNonTransientConnectionException3 = new SQLNonTransientConnectionException("", ",G8W`,", 0);
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient.getInstance();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket1 = new MockSocket(proxy0);
      BomberClient.getInstance();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      Stack<Integer> stack0 = new Stack<Integer>();
      BombExplodedMsg bombExplodedMsg0 = new BombExplodedMsg(1196, stack0, stack0, stack0, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)109;
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ExplosionBounds explosionBounds0 = new ExplosionBounds(9, (byte)1, (-1283), 0);
      Stack<Integer> stack1 = new Stack<Integer>();
      BombExplodedMsg bombExplodedMsg1 = new BombExplodedMsg(0, stack0, stack1, stack1, true);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      stack1.push(integer0);
      BombExplodedMsg bombExplodedMsg2 = new BombExplodedMsg((-1283), stack0, (Vector<Integer>) null, stack1, true);
      bombExplodedMsg2.setExplosionBounds(explosionBounds0);
      clientMsgReceiver0.processMsg(bombExplodedMsg2);
      assertEquals(0, clientMsgReceiver0.countStackFrames());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = "ERROR";
      int int0 = 826;
      SessionListMsg sessionListMsg0 = new SessionListMsg();
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(sessionListMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-43);
      byteArray0[2] = (byte)96;
      byteArray0[3] = (byte) (-77);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+1Awd");
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      Point point0 = jViewport0.getViewPosition();
      KeyEvent keyEvent0 = new KeyEvent(jScrollPane0, (-709), 0, 0, (-709), 'P', 0);
      KeyStroke.getKeyStrokeForEvent(keyEvent0);
      jViewport0.getConditionForKeyStroke((KeyStroke) null);
      NewBombMsg newBombMsg0 = new NewBombMsg(point0, 0, 0, 0, true);
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver((Socket) null, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress("ERROR", 826);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("ERROR", "");
      int[] intArray0 = new int[5];
      intArray0[0] = 826;
      intArray0[1] = 826;
      intArray0[2] = 826;
      intArray0[3] = (-922);
      intArray0[4] = 826;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("ERROR", "j", intArray0, sQLNonTransientConnectionException0);
      sQLNonTransientConnectionException0.spliterator();
      sQLNonTransientConnectionException0.getSuppressed();
      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = new SQLNonTransientConnectionException("ERR\"R", "ERROR");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("", "", sQLNonTransientConnectionException1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException("j", "j", (-922));
      sQLSyntaxErrorException0.printStackTrace();
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException("", "#&zg-K1r\"G", (-922), sQLSyntaxErrorException0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException2 = new SQLNonTransientConnectionException("ERR\"R", ",G8W`,", 826);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("ERROR", "ERROR", sQLNonTransientConnectionException0);
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(sQLTransientConnectionException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLNonTransientConnectionException1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
