/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:20:15 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.controller.StructuredMenuItemHolder;
import freemind.main.FreeMindApplet;
import freemind.main.FreeMindMain;
import freemind.modes.filemode.FileMode;
import freemind.preferences.FreemindPropertyListener;
import java.awt.HeadlessException;
import java.awt.Window;
import java.awt.event.MouseWheelEvent;
import java.awt.event.WindowEvent;
import java.util.Collection;
import javax.swing.JMenuItem;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuDragMouseEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Object object0 = new Object();
      JMenuItem jMenuItem0 = new JMenuItem("aD?8?-*$cgiS\"I%1S");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      menuElementArray0[0] = (MenuElement) null;
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jMenuItem0;
      menuElementArray0[4] = (MenuElement) jMenuItem0;
      menuElementArray0[5] = (MenuElement) jMenuItem0;
      menuSelectionManager0.setSelectedPath(menuElementArray0);
      MenuElement[] menuElementArray1 = new MenuElement[0];
      MenuDragMouseEvent menuDragMouseEvent0 = new MenuDragMouseEvent(jMenuItem0, 1, 12, (-234), 12, 12, 1820, 1, 0, true, menuElementArray1, menuSelectionManager0);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      controller_DisposeOnClose0.componentResized(menuDragMouseEvent0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jMenuItem0, 6, 0, 0, 1, 12, 1992, true, (-1336), 0, 10037);
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(mouseWheelEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JMenuItem cannot be cast to java.awt.Window
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Object object0 = new Object();
      Controller.getCommonJColorChooser();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Object object0 = new Object();
      Controller.removePropertyChangeListener((FreemindPropertyListener) null);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FileMode fileMode0 = new FileMode();
      byte byte0 = (byte)0;
      float float0 = 1415.2F;
      fileMode0.getController();
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FreemindPropertyListener freemindPropertyListener0 = null;
      // Undeclared exception!
      try { 
        Controller.addPropertyChangeListenerAndPropagate((FreemindPropertyListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      System.setCurrentTimeMillis(1002L);
      Controller.Closer controller_Closer0 = new Controller.Closer();
      Window window0 = null;
      WindowEvent windowEvent0 = null;
      try {
        windowEvent0 = new WindowEvent((Window) null, (-1949), (Window) null, 125, 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Object object0 = new Object();
      JMenuItem jMenuItem0 = new JMenuItem("aD?8?-*$cgiS\"I%1S");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[6];
      StructuredMenuItemHolder structuredMenuItemHolder0 = new StructuredMenuItemHolder();
      structuredMenuItemHolder0.getMenuItem();
      menuElementArray0[0] = (MenuElement) null;
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      menuElementArray0[2] = (MenuElement) jMenuItem0;
      menuElementArray0[3] = (MenuElement) jMenuItem0;
      menuElementArray0[4] = (MenuElement) jMenuItem0;
      menuElementArray0[5] = (MenuElement) jMenuItem0;
      menuSelectionManager0.setSelectedPath(menuElementArray0);
      Collection collection0 = Controller.getPropertyChangeListeners();
      assertNotNull(collection0);
  }
}
