/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:39:11 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.extensions.ExportHook;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.filemode.FileController;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.mindmapmode.MindMapToolBar;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.SystemColor;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.ShortLookupTable;
import java.sql.Date;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Locale;
import java.util.Stack;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicTabbedPaneUI;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.230945648255616
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.init();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMaxDayCharacters(27);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      BasicTabbedPaneUI basicTabbedPaneUI0 = new BasicTabbedPaneUI();
      jDayChooser0.getBackground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setMonth(49);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 49, (-401L), (-554), 90, '3');
      jDayChooser0.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.340100042527279
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getLocale();
      AWTEventMulticaster.remove((KeyListener) jDayChooser0, (KeyListener) jDayChooser0);
      jDayChooser0.addKeyListener((KeyListener) null);
      Dimension dimension0 = jDayChooser0.getMinimumSize();
      assertEquals(203, dimension0.width);
      
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis(1024L);
      Date date0 = new Date(1024L);
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.initDecorations();
      jDayChooser0.getMinSelectableDate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMinSelectableDate();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.24107227422712
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setForeground(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JComponent.getDefaultLocale();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setSundayForeground(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.195172251686161
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setForeground(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JComponent.getDefaultLocale();
      jDayChooser_DecoratorButton0.isFocusable();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setSundayForeground(systemColor0);
      // Undeclared exception!
      try { 
        jDayChooser1.addListeners((-3920));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.241110938121883
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.init();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = false;
      jDayChooser0.updateUI();
      jDayChooser0.getMaxSelectableDate();
      boolean boolean1 = false;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth(28);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMap();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      int int0 = 312;
      jDayChooser0.setYear(312);
      int int1 = 16;
      long long0 = (-2147483648L);
      int int2 = 493;
      char char0 = 'l';
      MenuElement[] menuElementArray0 = new MenuElement[5];
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      MindMapMode mindMapMode0 = new MindMapMode();
      FileController fileController0 = null;
      try {
        fileController0 = new FileController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.205447973345968
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.initDecorations();
      jDayChooser0.getMaxDayCharacters();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "14";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2063582538261413
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setForeground(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JComponent.getDefaultLocale();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.setSundayForeground(systemColor0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.addListeners(3);
      jDayChooser1.setDecorationBordersVisible(false);
      short[][] shortArray0 = new short[7][8];
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short)255;
      shortArray1[1] = (short)160;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[0];
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[8];
      shortArray3[0] = (short)255;
      shortArray3[1] = (short)255;
      shortArray3[2] = (short)160;
      shortArray3[3] = (short)35;
      shortArray3[4] = (short)255;
      shortArray3[5] = (short)16;
      shortArray3[6] = (short)1647;
      shortArray3[7] = (short)255;
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[8];
      shortArray4[0] = (short)35;
      shortArray4[1] = (short)160;
      shortArray4[2] = (short)255;
      shortArray4[3] = (short)1647;
      shortArray4[4] = (short)1647;
      shortArray4[5] = (short)35;
      shortArray4[6] = (short)255;
      shortArray4[7] = (short)16;
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[5];
      short short0 = (short)125;
      shortArray5[0] = (short)125;
      shortArray5[1] = (short)8930;
      shortArray5[2] = (short)160;
      shortArray5[3] = (short)35;
      shortArray5[4] = (short)160;
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[7];
      shortArray6[0] = (short)23;
      shortArray6[1] = (short)255;
      shortArray6[2] = (short)35;
      shortArray6[3] = (short)16;
      shortArray6[4] = (short)125;
      shortArray6[5] = (short)1647;
      shortArray6[6] = (short)1647;
      shortArray0[5] = shortArray6;
      short[] shortArray7 = new short[1];
      shortArray7[0] = (short)35;
      shortArray0[6] = shortArray7;
      ShortLookupTable shortLookupTable0 = new ShortLookupTable(354, shortArray0);
      LookupOp lookupOp0 = new LookupOp(shortLookupTable0, (RenderingHints) null);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (short)255;
      floatArray0[1] = (float) (short)255;
      floatArray0[2] = (float) (short)16;
      floatArray0[3] = (-769.18787F);
      AffineTransform affineTransform0 = new AffineTransform(floatArray0);
      AffineTransformOp affineTransformOp0 = null;
      try {
        affineTransformOp0 = new AffineTransformOp(affineTransform0, (short)125);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown interpolation type: 125
         //
         verifyException("java.awt.image.AffineTransformOp", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setLocale(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2970), 1935, 1935, (-2970), 2921, 2921);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2970,MONTH=1935,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1935,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2970,HOUR_OF_DAY=-2970,MINUTE=2921,SECOND=2921,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1236915691512697
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(boolean0);
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.cyan;
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      MockDate mockDate0 = new MockDate((-1312), 0, 13, 13, 1250, (-935));
      jDayChooser0.setYear(1446);
      jDayChooser0.setDayBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1700300170400846
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color.getColor((String) null);
      jDayChooser0.setWeekdayForeground((Color) null);
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      stack0.sort((Comparator<? super Locale.LanguageRange>) null);
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.lookup(stack0, canvasGraphicsNode0);
      jDayChooser0.setLocale(locale0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-57), false);
      jDayChooser0.focusLost(focusEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("%l", 406L, 406L);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.getMindMapController();
      BrowseMode browseMode0 = new BrowseMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1677717028005
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setFocus();
      SystemColor systemColor0 = SystemColor.menu;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance(0.0, 0.0, 0.0, 0.0);
      AffineTransform affineTransform1 = new AffineTransform(195.0F, 0.0F, 0.0F, 2156.19F, 0.0F, 195.0F);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform1);
      RenderingHints renderingHints0 = graphicContext0.getRenderingHints();
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      int int0 = 178;
      float[] floatArray0 = new float[0];
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(178, 178, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 0 and should be 31684
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JButton[] jButtonArray0 = new JButton[6];
      jDayChooser0.getSelectedDay();
      jButtonArray0[0] = null;
      ClonePlugin clonePlugin0 = new ClonePlugin();
      clonePlugin0.getMindMapController();
      MindMapToolBar mindMapToolBar0 = null;
      try {
        mindMapToolBar0 = new MindMapToolBar((MindMapController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.MindMapToolBar", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAlignmentY(1230.3876F);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 1230.3876F;
      floatArray0[4] = 0.0F;
      Kernel kernel0 = new Kernel(0, 0, floatArray0);
      ConvolveOp convolveOp0 = new ConvolveOp(kernel0, (-2574), (RenderingHints) null);
      ExportHook exportHook0 = new ExportHook();
      // Undeclared exception!
      try { 
        exportHook0.createBufferedImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.ExportHook", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.contains((-3387), (-3387));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3387));
      jDayChooser0.resetKeyboardActions();
      focusEvent0.getOppositeComponent();
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource("day");
      jDayChooser0.getComponentListeners();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getHierarchyListeners();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 677, 677, 0, 0, '3', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 14, true);
      jDayChooser0.focusGained(focusEvent0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "QC9a";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isValidateRoot();
      int int0 = 1339;
      jDayChooser0.setMonth(1339);
      jDayChooser0.getMinSelectableDate();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      int int1 = 0;
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1326303323964093
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setEnabled(true);
      int int0 = (-4078);
      long long0 = (-1304L);
      int int1 = (-22);
      char char0 = 'e';
      MenuElement[] menuElementArray0 = new MenuElement[9];
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
