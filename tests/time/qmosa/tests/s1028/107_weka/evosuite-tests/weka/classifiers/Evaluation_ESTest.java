/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:00:34 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.ZeroR;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.TopDownConstructor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.574403851791769
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.toCumulativeMarginDistributionString();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 122;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 1.7976931348623157E308;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1.0);
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      evaluation0.numFalseNegatives((-197));
      String string0 = evaluation0.toClassDetailsString("   * @param args the commandline arguments\n");
      assertEquals("   * @param args the commandline arguments\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.falseNegativeRate(0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1726));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 14;
      Instances instances0 = new Instances("istic", arrayList0, 14);
      CostMatrix costMatrix0 = new CostMatrix(17);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.527717477396425
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      TimeZone.getAvailableIDs();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int int0 = (-197);
      evaluation0.numFalsePositives((-197));
      Double double0 = new Double(122);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2;
      BallNode.calcCentroidPivot(intArray0, instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9099904831314656
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".gz");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("}{,65x^HxS", false);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTruePositiveRate();
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      evaluation0.toSummaryString("i'+D", false);
      instances1.subList(0, 0);
      evaluation1.weightedTrueNegativeRate();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.173697651368085
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-4543));
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double1 = evaluation0.weightedFMeasure();
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = Evaluation.MIN_SF_PROB;
      evaluation0.numTrueNegatives(204);
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.equals(instances0);
      evaluation0.trueNegativeRate(26);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double3 = evaluation0.weightedAreaUnderROC();
      assertNotEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.946114453446184
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-4543));
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-2841.61928686038);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1719305889882956
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = testInstances0.clone();
      evaluation0.matthewsCorrelationCoefficient((-4534));
      evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      testInstances0.setClassType(13);
      evaluation0.numFalsePositives((-4534));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.meanAbsoluteError();
      evaluation0.getRevision();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.toString();
      try { 
        evaluation0.evaluateModel((Classifier) randomCommittee0, instances0, (Object[]) ((TestInstances) object0).DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7698186375688656
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.numFalsePositives((-197));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      double double1 = Evaluation.MIN_SF_PROB;
      double double2 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double2, 0.01);
      
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.equals(decisionTable0);
      String string0 = evaluation0.toSummaryString();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8568362474917346
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".gz");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("}{,65x^HxS", false);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(2547);
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.numFalsePositives(2547);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      double double1 = Evaluation.MIN_SF_PROB;
      evaluation1.numTrueNegatives((-2));
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      evaluation1.equals(jRip0);
      evaluation0.trueNegativeRate((-197));
      String string0 = evaluation1.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.71101223370541
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.numFalsePositives((-197));
      assertEquals(0.0, double1, 0.01);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      double double2 = Evaluation.MIN_SF_PROB;
      double double3 = evaluation0.numTrueNegatives(2);
      assertEquals(double3, double0, 0.01);
      
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.equals(decisionTable0);
      double double4 = evaluation0.trueNegativeRate(1);
      assertEquals(0.0, double4, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5876527951616035
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      TimeZone.getAvailableIDs();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-46);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)108;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int int0 = (-197);
      evaluation0.numFalsePositives((-197));
      double double0 = new Double(122);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 2;
      Instance instance0 = BallNode.calcCentroidPivot(intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnce((double) (-197), instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -197
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.toString();
      BayesNet bayesNet0 = new BayesNet();
      String string0 = "";
      Evaluation.handleCostOption((String) null, 62);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      randomSubSpace0.setSubSpaceSize(62);
      ArffLoader arffLoader0 = new ArffLoader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(mockFileInputStream0);
      converterUtils_DataSource0.nextElement((Instances) null);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "zt14";
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "zt14");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      testInstances0.getWords();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 2777;
      intArray0[2] = 2777;
      SparseInstance sparseInstance0 = new SparseInstance((-2841.61928686038), doubleArray0, intArray0, 2777);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.769040594979344
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[7];
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double1, 0.01);
      
      doubleArray0[0] = Double.NaN;
      doubleArray0[3] = 1.0E-12;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      testInstances0.toString();
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = Double.NaN;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      doubleArray0[6] = (double) (-1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0E-12;
      double double2 = evaluation0.weightedTruePositiveRate();
      double double3 = evaluation0.KBMeanInformation();
      assertEquals(double3, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}{,65x^HxS";
      stringArray0[1] = "@relation";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      evaluation0.numFalseNegatives(10000000);
      double double4 = evaluation0.falseNegativeRate(342);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-3089.891069));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0297220450093816
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumPriorSqrErr;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (double) (-1);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1173.612, doubleArray0);
      double double1 = evaluation0.numFalseNegatives((-1722));
      assertEquals(0.0, double1, 0.01);
      
      testInstances0.getWords();
      double double2 = evaluation0.falseNegativeRate((-1689));
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5876527951616035
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      testInstances0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2;
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setClassType(121);
      evaluation0.numFalsePositives((-1));
      evaluation0.SFMeanPriorEntropy();
      evaluation0.unclassified();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6732974127516114
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      testInstances0.generate("%:vcsEgc,9M_X4mYrA*");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.m_MinTarget;
      String string0 = evaluation1.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.numFalsePositives((-2));
      assertEquals(0.0, double1, 0.01);
      
      String string1 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      evaluation0.numFalseNegatives((-628));
      evaluation0.falseNegativeRate((-1499));
      String string2 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.944067463502836
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-4543));
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-2841.61928686038);
      doubleArray0[2] = (-2841.61928686038);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double1 = evaluation0.numFalsePositives(0);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.m_Incorrect;
      double double3 = Evaluation.MIN_SF_PROB;
      evaluation0.numTrueNegatives((-4543));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.448687306061411
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.numFalsePositives((-197));
      double double0 = Evaluation.MIN_SF_PROB;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-101);
      byteArray0[1] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double1 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double1, 0.01);
      
      DecisionTable decisionTable0 = new DecisionTable();
      double double2 = evaluation0.unweightedMacroFmeasure();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7653957624886254
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("}{,65x^HxS", false);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (double) (-1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0E-12;
      evaluation0.weightedTruePositiveRate();
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10.0, doubleArray0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-2.0));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.setDiscardPredictions(false);
      // Undeclared exception!
      try { 
        evaluation2.updateNumericScores((double[]) null, doubleArray1, (-2841.61928686038));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5876527951616035
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      testInstances0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double double0 = evaluation0.m_SumPriorSqrErr;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-878.3300637);
      doubleArray0[1] = 959.7778209;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 4426.4189067846;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2841.61928686038));
      evaluation0.setDiscardPredictions(true);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 865.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.634385092261813
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.getRevision();
      double double0 = evaluation0.m_ClassPriorsSum;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.6112290752733107;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[1] = 0.6112290752733107;
      doubleArray0[3] = 22.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.6112290752733107);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-843.35246397302));
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2.147483647E9);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.rootMeanPriorSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.areaUnderPRC(840);
      evaluation1.weightedFMeasure();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // LibSVMLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.574257015174666
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("}{,65x^HxS", false);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-1);
      doubleArray0[6] = (double) (-1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0E-12;
      doubleArray1[1] = 1.0E-12;
      doubleArray1[2] = 1.0E-12;
      doubleArray1[3] = (double) (-2);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0E-12;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 10.0);
      evaluation0.setDiscardPredictions(true);
      evaluation0.updateNumericScores(doubleArray1, doubleArray1, 1.0E-12);
      evaluation0.areaUnderPRC((-1));
      evaluation0.toSummaryString(false);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.454893501759156
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("}{,65x^HxS", true);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      ArffLoader arffLoader0 = new ArffLoader();
      Instances instances1 = testInstances0.generate("6zCl");
      ConverterUtils.DataSource.read((Loader) null);
      evaluation0.weightedAreaUnderPRC();
      MockRandom mockRandom0 = new MockRandom(494);
      // Undeclared exception!
      try { 
        instances1.trainCV((-2), 494, (Random) mockRandom0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be at least 2!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.7417120455736113
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getWords();
      int int0 = 2777;
      evaluation0.matthewsCorrelationCoefficient(2777);
      evaluation0.SFSchemeEntropy();
      evaluation0.numFalsePositives((-1));
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 2777;
      SparseInstance sparseInstance0 = new SparseInstance((-2841.61928686038), doubleArray0, intArray0, 2777);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.814900010616998
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      testInstances0.generate("%:vcsEgc,9M_X4mYrA*");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double double0 = evaluation0.m_MinTarget;
      evaluation1.toMatrixString();
      evaluation0.numFalsePositives((-2));
      evaluation1.toCumulativeMarginDistributionString();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = Double.NaN;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      evaluation0.numFalseNegatives((-628));
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 6;
      SparseInstance sparseInstance0 = new SparseInstance(10.0, doubleArray0, intArray0, 27);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.539888031717275
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      int int0 = (-197);
      evaluation0.numFalsePositives((-197));
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.numTrueNegatives(2);
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnce(4.9E-324, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setMinimizeExpectedCost(false);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      Instances instances0 = testInstances0.generate();
      puk0.setChecksTurnedOff(false);
      puk0.clean();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel("the number of elements cannot exceed the initially set maximum limit", (Instances) null, (-1), testInstances0.DEFAULT_WORDS, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: the number of elements cannot exceed the initially set maximum limit
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.778105682192334
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      Instances instances1 = testInstances0.generate("%:vcsEgc,9M_X4mYrA*");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double double1 = evaluation0.m_MinTarget;
      evaluation0.numFalsePositives((-2));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      double double2 = Evaluation.MIN_SF_PROB;
      evaluation0.numTrueNegatives(813);
      DecisionTable decisionTable0 = new DecisionTable();
      evaluation0.equals(instances1);
      double double3 = evaluation0.trueNegativeRate(5);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      String string0 = evaluation1.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5547850782841652
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      testInstances0.getOptions();
      evaluation0.getDiscardPredictions();
      int int0 = 1656;
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, (-1153.62544701728));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.053671751927196
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-4543));
      evaluation0.weightedFMeasure();
      double double0 = (-2841.61928686038);
      evaluation0.setDiscardPredictions(true);
      double double1 = (-583.62738445886);
      double[] doubleArray0 = new double[5];
      evaluation0.getRevision();
      doubleArray0[0] = 10.0;
      evaluation0.m_MarginCounts = doubleArray0;
      doubleArray0[1] = (-2841.61928686038);
      doubleArray0[2] = (-2841.61928686038);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.9252557534063883
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-4543));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-2868.00021334104);
      doubleArray0[2] = (-2868.00021334104);
      doubleArray0[3] = (-2868.00021334104);
      doubleArray0[4] = (-583.63);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-583.63), doubleArray0);
      evaluation0.numFalsePositives((-1));
      double double1 = evaluation0.pctCorrect();
      assertNotEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6432937573580655
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "  ?  ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(";3/IUqy2*");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      stringArray0[3] = ";3/IUqy2*";
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Evaluation.makeOptionString(attributeSelectedClassifier0, true);
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "Lm>4w+IFeQjh8  V");
      try { 
        Evaluation.handleCostOption(";3/IUqy2*", 102);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.148708536455997
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      testInstances0.generate("%:vcsEgc,9M_X4mYrA*");
      ArffLoader arffLoader0 = new ArffLoader();
      testInstances0.clone();
      double double1 = evaluation0.matthewsCorrelationCoefficient(498);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.weightedTruePositiveRate();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Capabilities capabilities0 = precomputedKernelMatrixKernel0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.setClassType(498);
      evaluation0.numFalseNegatives(497);
      evaluation0.errorRate();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.144287900815569
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Puk puk0 = new Puk();
      Capabilities capabilities0 = puk0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.getData();
      Instances instances0 = testInstances0.generate();
      puk0.clean();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      double double0 = evaluation0.numFalseNegatives(92);
      double double1 = evaluation0.falseNegativeRate(6);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.761483862156061
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(" ", true);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedTruePositiveRate();
      evaluation0.KBMeanInformation();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 10.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(regressionByDiscretization0, (Instance) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.660042407448129
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      String[] stringArray0 = TimeZone.getAvailableIDs();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0E-12;
      doubleArray0[1] = 1.0E-12;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 122;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, (-1));
      evaluation0.setDiscardPredictions(true);
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 1.0E-12);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      serializedClassifier1.getCurrentModel();
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, (-1768), (Random) null, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4037990408648118
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.toString();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ConfLevel = (-10.0);
      evaluation0.weightedTruePositiveRate();
      evaluation0.numFalsePositives((-2));
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(116);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 116
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.928332821953613
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-4543));
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-2841.61928686038);
      evaluation0.unweightedMicroFmeasure();
      double double0 = Evaluation.MIN_SF_PROB;
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        evaluation0.updateStatsForPredictor(10.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "  ?  ";
      stringArray0[1] = "`:ft+";
      stringArray0[2] = "";
      stringArray0[3] = ";3/IUqy2*";
      stringArray0[4] = "?eX]x!:eXKa";
      stringArray0[5] = "";
      Evaluation.main(stringArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setOptions(stringArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 22.0;
      doubleArray0[0] = doubleArray1;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.weightedRecall();
      // Undeclared exception!
      try { 
        instances0.subList(1578, 1578);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1578
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5547850782841652
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-2));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.m_NumTrainClassVals = (-2);
      evaluation0.useNoPriors();
      evaluation0.totalCost();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Environment environment0 = new Environment();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.setEnvironment(environment0);
      bayesNet0.enumerateMeasures();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Evaluation.getGlobalInfo(naiveBayesMultinomialText0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5093956015061414
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SMOreg sMOreg0 = new SMOreg();
      Capabilities capabilities0 = sMOreg0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.getWords();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient(1);
      evaluation0.SFSchemeEntropy();
      evaluation0.numFalsePositives(658);
      evaluation0.rootMeanPriorSquaredError();
      evaluation0.rootMeanPriorSquaredError();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = 30000;
      intArray0[2] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(1573.8163902, doubleArray0, intArray0, 1092);
      boolean boolean0 = true;
      double[] doubleArray1 = new double[0];
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4803602797731634
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numFalsePositives((-1));
      double double1 = evaluation0.m_Incorrect;
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.numTrueNegatives((-2));
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.600069868789063
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-2));
      // Undeclared exception!
      try { 
        evaluation0.recall(766);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 766
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.946114453446184
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-4543));
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-583.62738445886);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-583.62738445886), doubleArray0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1786.3921646357192));
      assertEquals(Double.NEGATIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.6086709452873342
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      testInstances0.setSeed(122);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      testInstances0.getOptions();
      evaluation0.toSummaryString("=== Cross-validation ===\n", false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.numFalsePositives((-197));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.numTrueNegatives(2);
      DecisionTable decisionTable0 = new DecisionTable();
      // Undeclared exception!
      try { 
        instances0.subList(496, (-666));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(496) > toIndex(-666)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3611679942418444
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFMeasure();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (-2841.61928686038);
      doubleArray0[2] = (-2841.61928686038);
      doubleArray0[3] = (-2841.61928686038);
      doubleArray0[4] = (-583.62738445886);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-583.62738445886), doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor((-2841.61928686038), binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.183579677889483
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.clone();
      double double0 = evaluation0.matthewsCorrelationCoefficient((-4534));
      double double1 = evaluation0.weightedFMeasure();
      evaluation0.weightedTruePositiveRate();
      testInstances0.setClassType(13);
      evaluation0.numFalsePositives((-4534));
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.meanAbsoluteError();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.getRevision();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      randomCommittee0.toString();
      double double4 = evaluation0.numFalseNegatives(756);
      assertEquals(double4, double0, 0.01);
      
      evaluation0.falseNegativeRate(13);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.handleCostOption("QWj(", 1298);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.setWeightThreshold(493);
      logitBoost0.listOptions();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "\tUse unsmoothed predictions");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = null;
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4234950611432038
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.toString();
      Evaluation.makeOptionString(randomSubSpace0, true);
      try { 
        Evaluation.handleCostOption("RandomSubSpace: No model built yet.", 450);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LogitBoost logitBoost0 = new LogitBoost();
      String[] stringArray0 = null;
      try { 
        Evaluation.evaluateModel((Classifier) logitBoost0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.LogitBoost:
         // 
         // -Q
         // \tUse resampling instead of reweighting for boosting.
         // -P <percent>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -F <num>
         // \tNumber of folds for internal cross-validation.
         // \t(default 0 -- no cross-validation)
         // -R <num>
         // \tNumber of runs for internal cross-validation.
         // \t(default 1)
         // -L <num>
         // \tThreshold on the improvement of the likelihood.
         // \t(default -Double.MAX_VALUE)
         // -H <num>
         // \tShrinkage parameter.
         // \t(default 1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.439720770839918
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      randomSubSpace0.toString();
      BayesNet bayesNet0 = new BayesNet();
      Evaluation.handleCostOption("", 95);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.3;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      randomSubSpace0.setSubSpaceSize(220.93498039);
      ArffLoader arffLoader0 = new ArffLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RandomSubSpace: No model built yet.");
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "measureTime";
      stringArray0[1] = "measureTime";
      stringArray0[2] = "measureTime";
      stringArray0[3] = "measureTime";
      stringArray0[4] = "measureTime";
      stringArray0[5] = "measureTime";
      stringArray0[6] = "measureTime";
      stringArray0[7] = "zK";
      try { 
        Evaluation.evaluateModel("measureTime", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name measureTime.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
