/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:37:57 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.Properties;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.M5Rules;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.getRelationalClassFormat();
      Instances instances0 = testInstances0.generate("");
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.find();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("\tMinimum word frequency. Words with less than this frequence are ignored.\n\tIf periodic pruning is turned on then this is also used to determine which\n\twords to remove from the dictionary (default = 3).", vector0, protectedProperties1);
      instances0.setClass(attribute0);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("The independent probability of a class\n");
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle numeric class!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3574036981168276
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.m_leplace = 12.0;
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.toString();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals("The LNorm to use for document length normalization.", string0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5811755351503334
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jOAB77}REe8");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getTokenizer();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText1.getCapabilities();
      naiveBayesMultinomialText1.getCapabilities();
      naiveBayesMultinomialText0.useStopListTipText();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText1.setStemmer(stemmer0);
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      
      String string1 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string1);
      
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(6);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("The LNorm to use for document length normalization.");
      naiveBayesMultinomialText1.buildClassifier(instances0);
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      
      String string2 = naiveBayesMultinomialText1.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string2);
      
      double[] doubleArray0 = naiveBayesMultinomialText1.distributionForInstance(binarySparseInstance1);
      assertArrayEquals(new double[] {0.3750000000000001, 0.16666666666666669, 0.29166666666666663, 0.16666666666666669}, doubleArray0, 0.01);
      
      String string3 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string3);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7216997293944343
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jOAB77}REe8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3925.9171931217);
      doubleArray0[3] = 1237.4859235793117;
      doubleArray0[4] = 896.0;
      doubleArray0[5] = (-4646.3991931025);
      doubleArray0[6] = 1804.7101947;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.toString();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      testInstances0.generate("6%S)Q3Il&");
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.259152902626257
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getTokenizer();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      Capabilities capabilities1 = naiveBayesMultinomialText1.getCapabilities();
      naiveBayesMultinomialText1.useStopListTipText();
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText1.stopwordsTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(6);
      TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("5+nyHM2hW'k");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      try { 
        naiveBayesMultinomialText1.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2461447349596675
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.reset();
      System.setCurrentTimeMillis((-1266L));
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8042513784552923
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = 259.58977355566907;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "-\"fQq#e%cVQj`2";
      stringArray0[3] = "Q^(N\"S&60owk3u:[";
      stringArray0[4] = "Q^(N\"S&60owk3u:[";
      stringArray0[5] = "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances";
      naiveBayesMultinomialText0.m_periodicP = 516;
      stringArray0[6] = "'e]fov=6'i}";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      SparseInstance sparseInstance0 = new SparseInstance(516);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      DenseInstance denseInstance0 = new DenseInstance(736);
      try { 
        naiveBayesMultinomialText0.updateClassifier(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3571740769916842
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jOAB77}REe8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jOAB77}REe8");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.toString();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      Capabilities capabilities0 = inputMappedClassifier1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.63374284582635
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.m_useStopList = true;
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setStopwords((File) null);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getStemmer();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8864499237464396
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      nGramTokenizer0.setNGramMaxSize(28);
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setPeriodicPruning((-1713));
      naiveBayesMultinomialText0.getNormalizeDocLength();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      SGDText sGDText0 = new SGDText();
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText1.setOptions(stringArray0);
      naiveBayesMultinomialText1.getUseStopList();
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals((-1713), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.915516477764594
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.LNormTipText();
      Kernel.makeCopy(precomputedKernelMatrixKernel0);
      int int0 = 75;
      naiveBayesMultinomialText0.getOptions();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2143));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2189964910046243
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray0.length);
      
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getCapabilities();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      
      String string0 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      
      SGDText sGDText0 = new SGDText();
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      String string2 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string2);
      
      SparseInstance sparseInstance0 = new SparseInstance(0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setLNorm((-534.35272));
      naiveBayesMultinomialText0.setMinWordFrequency(1032.5501247739);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setDebug(false);
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.setMinWordFrequency(1032.5501247739);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.m_wordsPerClass = null;
      CoverTree coverTree0 = new CoverTree();
      DenseInstance denseInstance0 = new DenseInstance(0);
      String[] stringArray0 = new String[9];
      Tokenizer.runTokenizer((Tokenizer) null, stringArray0);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      assertEquals(1032.5501247739, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[2] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[3] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      stopwords0.toString();
      stopwords0.getRevision();
      naiveBayesMultinomialText0.globalInfo();
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4372671904781935
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.getRelationalClassFormat();
      Instances instances0 = testInstances1.generate(".arff");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.LNormTipText();
      String string0 = naiveBayesMultinomialText0.globalInfo();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Instance instance0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.03370718989693
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.toString();
      Attribute attribute0 = new Attribute("");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      binarySparseInstance0.toString(attribute0, 2500);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "took";
      stringArray0[1] = "";
      stringArray0[2] = "date-class";
      stringArray0[3] = "-M";
      stringArray0[4] = "%0Xf(rxmO[T}";
      stringArray0[5] = "M";
      stringArray0[6] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6298718780844146
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9Ep1?|OU-m,");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[0];
      naiveBayesMultinomialText0.setOptions(stringArray0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(3.0, double0, 0.01);
      
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.normTipText();
      System.setCurrentTimeMillis(0L);
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3643764676852554
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getMinWordFrequency();
      boolean boolean0 = true;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.periodicPruningTipText();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      naiveBayesMultinomialText0.pruneDictionary();
      Attribute attribute0 = new Attribute("");
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.042570446918685
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.useStopListTipText();
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      sGDText0.getStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setStemmer((Stemmer) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.getRevision();
      naiveBayesMultinomialText0.stopwordsTipText();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText4.stemmerTipText();
      SparseInstance sparseInstance1 = new SparseInstance(1);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(9);
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText5.tokenizeInstance(sparseInstance2, false);
      assertFalse(naiveBayesMultinomialText5.getNormalizeDocLength());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      naiveBayesMultinomialText0.pruneDictionary();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5323204850794725
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "$Revision: 8181 $";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "DeI";
      stringArray0[6] = "$Revision: 8181 $";
      stringArray0[7] = "&d:Qm{h-";
      stringArray0[8] = "JW'f`'^[bXjfTb";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getTokenizer();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = 259.58977355566907;
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      
      String string1 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string1);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-715);
      intArray0[2] = 280;
      intArray0[3] = 374;
      intArray0[4] = 2237;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1515.8791227168267, intArray0, (-715));
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1660.323714185);
      doubleArray0[1] = (-1660.323714185);
      doubleArray0[2] = (-1660.323714185);
      doubleArray0[3] = (-1660.323714185);
      doubleArray0[4] = (-1660.323714185);
      doubleArray0[5] = (-1660.323714185);
      doubleArray0[6] = (-1660.323714185);
      doubleArray0[7] = (-1660.323714185);
      doubleArray0[8] = (-1660.323714185);
      int[] intArray0 = new int[8];
      intArray0[0] = (-2044);
      intArray0[1] = (-945);
      intArray0[2] = 1;
      intArray0[3] = 4;
      intArray0[4] = (-2749);
      intArray0[5] = 2040;
      intArray0[6] = 200;
      intArray0[7] = (-1984);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1660.323714185), doubleArray0, intArray0, 494);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.315091707502665
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jOAB77}REe8");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      naiveBayesMultinomialText0.setLNorm(0.0);
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.setTokenizer(tokenizer0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      SGDText sGDText1 = new SGDText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.periodicPruningTipText();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      naiveBayesMultinomialText0.pruneDictionary();
      Attribute attribute0 = new Attribute("");
      String[] stringArray0 = new String[5];
      naiveBayesMultinomialText0.setLNorm(0);
      stringArray0[0] = "";
      stringArray0[1] = "string";
      stringArray0[3] = "real";
      stringArray0[4] = "string";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0428162336583116
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.toString();
      Attribute attribute0 = new Attribute("");
      naiveBayesMultinomialText0.normTipText();
      RBFKernel rBFKernel0 = new RBFKernel();
      Kernel.makeCopy(rBFKernel0);
      naiveBayesMultinomialText0.getOptions();
      SparseInstance sparseInstance0 = new SparseInstance(2089);
      // Undeclared exception!
      try { 
        sparseInstance0.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      sGDText0.getStemmer();
      Stacking stacking0 = new Stacking();
      stacking0.globalInfo();
      stacking0.setNumExecutionSlots(1);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getTokenizer();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.884811922108438
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.periodicPruningTipText();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      naiveBayesMultinomialText0.pruneDictionary();
      Attribute attribute0 = new Attribute("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "string";
      stringArray0[2] = "";
      stringArray0[3] = "real";
      stringArray0[4] = "string";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.toString();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      testInstances0.generate("#nKo,wxY]w|#^F*rN");
      StringReader stringReader0 = new StringReader("integer");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 19);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[integer], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = "4cGvv\\)+ QoE}Qn?>]6";
      stringArray0[0] = "4cGvv)+ QoE}Qn?>]6";
      NaiveBayesMultinomialText.main(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1000.1070682797779;
      doubleArray0[1] = 1000.1070682797779;
      doubleArray0[2] = 1000.1070682797779;
      doubleArray0[3] = 1000.1070682797779;
      doubleArray0[4] = 1000.1070682797779;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1000.1070682797779, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setValue(1910, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.023537389978894
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "";
      stringArray0[1] = "";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.toString();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getRelationalClassFormat();
      Instances instances0 = testInstances0.generate("eD+:2");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = 1391.702728155771;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3275.682843489193;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      naiveBayesMultinomialText0.reset();
      doubleArray0[7] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      naiveBayesMultinomialText0.listOptions();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5188863306421347
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jAB77}Re8");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Qn+x_>` K");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Qn+x_>` K";
      stringArray0[1] = "jAB77}Re8";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Random.setNextRandom(0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      File file0 = MockFile.createTempFile("?eX]x!:eXKa", "A tutorial on support vector regression");
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.reset();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      precomputedKernelMatrixKernel0.listOptions();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, double0, 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm(3831.5574527);
      naiveBayesMultinomialText0.setUseStopList(false);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getCapabilities();
      BallNode ballNode0 = null;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }
}
