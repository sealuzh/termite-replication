/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:16:45 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.9539470648103356
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 0;
      resultMatrixCSV0.m_RankingWins = intArray0;
      int[] intArray1 = new int[3];
      Vector<String> vector0 = new Vector<String>();
      resultMatrixCSV0.m_HeaderKeys = vector0;
      intArray1[0] = 1;
      intArray1[1] = 1;
      intArray1[2] = 0;
      resultMatrixCSV0.m_RowOrder = intArray1;
      resultMatrixCSV0.significanceWidthTipText();
      resultMatrixCSV0.getSignificanceWidth();
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2845658749149194
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      stringArray0[2] = "(";
      stringArray0[3] = "v";
      stringArray0[4] = "*";
      stringArray0[5] = "*7<k";
      stringArray0[6] = ")";
      resultMatrixHTML0.m_ColNames = stringArray0;
      resultMatrixHTML0.addHeader("*7<k", "-mean-width");
      resultMatrixHTML0.LOSS_STRING = ",wxo";
      int[] intArray0 = new int[0];
      resultMatrixHTML0.m_RankingWins = intArray0;
      resultMatrixHTML0.getDefaultMeanWidth();
      resultMatrixHTML0.getStdDevPrec();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.64211171966764
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_Mean = null;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      resultMatrixGnuPlot0.setShowStdDev(true);
      resultMatrixGnuPlot0.setRemoveFilterName(false);
      intArray0[7] = 2;
      intArray0[8] = 2;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1554, 1);
      resultMatrixPlainText0.padString("", 0, true);
      resultMatrixPlainText0.getSignificance(2, 1173);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.LEFT_PARENTHESES = "[";
      resultMatrixCSV1.getDefaultPrintRowNames();
      resultMatrixCSV1.toStringKey();
      resultMatrixPlainText0.getVisibleColCount();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(97, 0);
      resultMatrixSignificance0.globalInfo();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5581657548742704
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(107, 0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.clearSummary();
      int[] intArray0 = new int[5];
      intArray0[2] = 1;
      intArray0[1] = 107;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.m_RankingWins = intArray0;
      resultMatrixLatex0.m_RankingDiff = null;
      resultMatrixLatex0.getDisplayName();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(99, 0);
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 0);
      resultMatrixCSV0.setMeanPrec(0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.getRowName(0);
      resultMatrixLatex0.globalInfo();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.toStringSummary();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.8228164173267194
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(97, 0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.clearSummary();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 97;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.m_RankingWins = intArray0;
      resultMatrixLatex0.m_RankingDiff = null;
      resultMatrixLatex0.getDisplayName();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(99, 0);
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanPrec(1);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.setColNameWidth(1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.423196856347561
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.getDefaultColNameWidth();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7703341779431705
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.clearRanking();
      resultMatrixHTML0.toArray();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.setEnumerateRowNames(false);
      resultMatrixCSV0.setMeanWidth((-564));
      resultMatrixCSV0.setRowHidden(0, false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixCSV0.getRevision();
      resultMatrixPlainText0.getRevision();
      resultMatrixPlainText0.padString("8034", 1, true);
      resultMatrixPlainText0.getSignificance(1, 0);
      resultMatrixCSV0.getDefaultPrintRowNames();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV1.toStringKey();
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8294951735463303
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[0];
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.setRemoveFilterName(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 2);
      resultMatrixHTML0.m_RowNameWidth = (-2153);
      resultMatrixHTML0.m_RowNameWidth = 1;
      resultMatrixHTML0.setShowAverage(true);
      resultMatrixHTML0.setOptions(stringArray0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.getRevision();
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText1.getRevision();
      resultMatrixPlainText0.padString("1C.ghM8$Lm$g]#!", 0, false);
      resultMatrixPlainText1.getSignificance((-1702), 2655);
      resultMatrixCSV0.getDefaultPrintRowNames();
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getRowName(0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.900827732633745
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(7, 0);
      resultMatrixGnuPlot0.setCountWidth(7);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot1);
      resultMatrixLatex0.toStringKey();
      resultMatrixGnuPlot0.setPrintRowNames(true);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.toStringMatrix();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.setStdDevPrec((-3491));
      resultMatrixHTML0.globalInfo();
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.trimString(" ", 1);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixLatex0.setSignificanceWidth(1);
      resultMatrixLatex0.setRowHidden(0, true);
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot2);
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixSignificance0.getDefaultShowStdDev();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.025984195290519
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 292);
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 1;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.getDisplayName();
      resultMatrixSignificance0.toArray();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(0, 1);
      resultMatrixSignificance1.getDefaultPrintRowNames();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(26, 2);
      resultMatrixLatex1.globalInfo();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.toStringSummary();
      resultMatrixHTML0.toArray();
      resultMatrixSignificance0.doubleToString(0, 0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.009181140370341
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      resultMatrixHTML0.m_ColNameWidth = (-2768);
      ResultMatrixHTML.main(stringArray0);
      resultMatrixHTML0.m_MeanPrec = (-1238);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixHTML0.assign(resultMatrixLatex0);
      resultMatrixHTML0.getRevision();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getRowName(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getSignificanceCount(0, 2);
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4222132679272725
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_Mean = null;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      resultMatrixGnuPlot0.setRemoveFilterName(false);
      intArray0[7] = 2;
      intArray0[8] = 2;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      resultMatrixGnuPlot0.setShowAverage(true);
      resultMatrixGnuPlot0.getColHidden(0);
      resultMatrixGnuPlot0.getDefaultPrintColNames();
      int[][] intArray1 = new int[7][5];
      intArray1[0] = intArray0;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      resultMatrixGnuPlot0.setSummary(intArray1, intArray1);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringRanking();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3155929110989417
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_Mean = null;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      resultMatrixGnuPlot0.setRemoveFilterName(true);
      intArray0[7] = 2;
      intArray0[8] = 2;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      resultMatrixGnuPlot0.setShowAverage(true);
      resultMatrixGnuPlot0.getColHidden((-13));
      resultMatrixGnuPlot0.getDefaultPrintColNames();
      int[][] intArray1 = new int[7][5];
      intArray1[0] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      resultMatrixGnuPlot0.setSummary(intArray1, intArray1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7689395573195643
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(97, 0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.clearSummary();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 97;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.m_RankingWins = intArray0;
      resultMatrixLatex0.m_RankingDiff = null;
      resultMatrixLatex0.getDisplayName();
      resultMatrixSignificance0.removeFilterName("");
      resultMatrixLatex0.getRowName(0);
      String[][] stringArray0 = resultMatrixSignificance0.toArray();
      assertEquals(2, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      
      String[] stringArray1 = new String[6];
      stringArray1[0] = "*";
      stringArray1[1] = "*";
      stringArray1[2] = "v";
      resultMatrixSignificance0.getDisplayName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixSignificance0.getDisplayName();
      resultMatrixSignificance0.headerKeys();
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4849745726656085
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(97, 7);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.clearSummary();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateRowNames(false);
      resultMatrixCSV0.setMeanWidth(271);
      resultMatrixCSV0.setRowHidden(1, false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      resultMatrixPlainText0.getRevision();
      resultMatrixPlainText0.padString("d7tN5-%@gEV{P$8", 1, false);
      resultMatrixPlainText0.getSignificance(1, 0);
      resultMatrixCSV0.getDefaultPrintRowNames();
      resultMatrixCSV0.toStringKey();
      assertEquals(271, resultMatrixCSV0.getMeanWidth());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5368506273897
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(97, 0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.clearSummary();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = 97;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 0;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.m_RankingWins = intArray0;
      resultMatrixLatex0.m_RankingDiff = null;
      resultMatrixLatex0.getDisplayName();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(99, 0);
      resultMatrixSignificance0.toStringRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanPrec(1);
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.getRowName(0);
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(40, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      
      int int0 = resultMatrixSignificance1.getSignificanceCount(10, 68);
      assertEquals(0, int0);
      
      resultMatrixSignificance1.getRowCount();
      resultMatrixSignificance1.getVisibleRowCount();
      assertEquals(99, resultMatrixSignificance1.getVisibleColCount());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.432134585551338
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.setCountWidth(0);
      resultMatrixGnuPlot0.m_ShowAverage = true;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      resultMatrixLatex0.toStringKey();
      resultMatrixGnuPlot0.setPrintRowNames(true);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.34072054977806
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2583);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setPrintColNames(true);
      resultMatrixSignificance0.isRowName(1);
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 1203;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 1;
      intArray1[5] = 1005;
      resultMatrixSignificance0.m_RemoveFilterName = true;
      intArray0[0] = intArray1;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      resultMatrixLatex0.toStringSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.209935156924078
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.m_StdDevPrec = 2;
      resultMatrixCSV1.getDefaultRowNameWidth();
      resultMatrixCSV0.doubleToString(Double.NaN, 1);
      String[][] stringArray0 = new String[0][7];
      int int0 = 0;
      // Undeclared exception!
      try { 
        resultMatrixCSV1.getColSize(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4637390468555833
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[7];
      intArray1[0] = 1;
      intArray1[1] = 0;
      resultMatrixHTML0.m_NonSigWins = intArray0;
      intArray1[2] = 0;
      intArray1[3] = 0;
      intArray1[4] = 2;
      intArray1[5] = 0;
      intArray1[6] = 3;
      intArray0[0] = intArray1;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2858851717794693
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_Mean = null;
      intArray0[3] = 2;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[][] intArray1 = new int[2][9];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.8921707270320387
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = "jOAB77}REe8";
      resultMatrixPlainText0.setPrintColNames(false);
      resultMatrixPlainText0.LOSS_STRING = "jOAB77}REe8";
      resultMatrixPlainText0.meanWidthTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      int[] intArray0 = new int[6];
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.toStringRanking();
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 0;
      resultMatrixSignificance0.setCountWidth(1);
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3298447706023366
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      double[][] doubleArray0 = new double[6][8];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (-3693.8974);
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 2;
      doubleArray2[5] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (double) 0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      doubleArray4[5] = (double) 1;
      doubleArray4[6] = (-3693.8974);
      doubleArray4[7] = (double) 1;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = (double) 2;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 2;
      doubleArray5[3] = (-3693.8974);
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 2;
      doubleArray5[6] = (double) 0;
      doubleArray5[7] = (-3693.8974);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (-3693.8974);
      doubleArray6[1] = (double) 1;
      doubleArray6[2] = (double) 2;
      doubleArray6[3] = (double) 1;
      doubleArray6[4] = (double) 1;
      doubleArray6[5] = (double) 2;
      doubleArray6[6] = (double) 1;
      doubleArray6[7] = (double) 2;
      doubleArray0[5] = doubleArray6;
      resultMatrixPlainText1.m_StdDev = doubleArray0;
      resultMatrixPlainText1.toStringRanking();
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixSignificance0.getDisplayName();
      String string0 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.495011369458482
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.toStringRanking();
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      
      boolean boolean0 = resultMatrixHTML0.isMean(1);
      assertTrue(boolean0);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultCountWidth();
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[2] = "v";
      stringArray0[3] = "-ranking data not set-";
      stringArray0[4] = " ";
      resultMatrixPlainText0.getSignificance(83, (-502));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV0.toStringKey();
      assertEquals("Key,\n[1],col0\n", string0);
      
      resultMatrixPlainText0.getVisibleColCount();
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6287369501856666
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1);
      assertEquals(1, resultMatrixHTML0.getRowCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.toStringRanking();
      boolean boolean0 = resultMatrixHTML0.isMean(1);
      assertTrue(boolean0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_ShowStdDev = false;
      resultMatrixCSV0.getRevision();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultCountWidth();
      String string0 = resultMatrixCSV0.padString("", 0);
      assertEquals("", string0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      String string1 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n[1] col0\n", string1);
      
      resultMatrixSignificance0.setColOrder((int[]) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "";
      stringArray0[2] = "v";
      stringArray0[3] = "-ranking data not set-";
      stringArray0[4] = " ";
      resultMatrixSignificance0.m_RowNames = stringArray0;
      resultMatrixSignificance0.globalInfo();
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      resultMatrixHTML0.getCount(3020);
      resultMatrixCSV0.meanPrecTipText();
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixCSV0.setSignificance(219, 0, 0);
      int int0 = resultMatrixHTML0.getDefaultStdDevPrec();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8571573189488024
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixHTML0.isMean(1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_ShowStdDev = false;
      resultMatrixHTML0.getRevision();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixCSV0.padString("", 0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.toString();
      int[] intArray0 = null;
      resultMatrixSignificance0.setColOrder((int[]) null);
      resultMatrixGnuPlot0.setShowAverage(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = null;
      try {
        resultMatrixGnuPlot1 = new ResultMatrixGnuPlot((-1976), 61);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4247205574262294
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateRowNames(true);
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixCSV0.setRowHidden(11, false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.getRevision();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.globalInfo();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getCount(0);
      resultMatrixCSV0.meanPrecTipText();
      resultMatrixPlainText0.printColNamesTipText();
      resultMatrixCSV0.setSignificance((-1), 835, 3020);
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
      
      int int0 = resultMatrixHTML0.getDefaultStdDevPrec();
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.452103285525742
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setEnumerateRowNames(true);
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixHTML0.clearRanking();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.listOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixHTML0.getStdDevWidth();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setEnumerateColNames(false);
      resultMatrixPlainText0.globalInfo();
      resultMatrixGnuPlot0.stdDevWidthTipText();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4356946415650227
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateRowNames(true);
      resultMatrixCSV0.setMeanWidth(0);
      resultMatrixCSV0.setRowHidden((-1), false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.getRevision();
      resultMatrixPlainText0.padString("9(", 1, false);
      resultMatrixPlainText0.getSignificance(1, 903);
      resultMatrixCSV0.getDefaultPrintRowNames();
      resultMatrixCSV0.toStringKey();
      assertTrue(resultMatrixCSV0.getEnumerateRowNames());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.6716101637910317
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[0];
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.setRemoveFilterName(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 2);
      resultMatrixHTML0.m_RowNameWidth = (-2153);
      resultMatrixHTML0.m_RowNameWidth = 1;
      resultMatrixHTML0.setShowAverage(true);
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.getRevision();
      resultMatrixPlainText0.getDefaultSignificanceWidth();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 2);
      resultMatrixCSV0.getDisplayName();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.toStringRanking();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 3);
      resultMatrixSignificance0.clear();
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      resultMatrixSignificance0.m_RankingWins = intArray0;
      resultMatrixSignificance0.LOSS_STRING = "[";
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringRanking();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.760265729322495
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toString();
      resultMatrixLatex0.addHeader("\begin{table}[thb]\ncaption{label{labelname}Table Caption}\n\footnotesize\n{centering \begin{tabular}{lr}\n\\\nhline\nDataset & (1)\\\nhline\nrow0 &    \\\nhline\nmulticolumn{2}{c}{$circ$, $\bullet$ statistically significant improvement or degradation}\\\nend{tabular} \footnotesize par}\nend{table}\n", "S&60owk3u:V[z9t{f5");
      resultMatrixLatex0.getRowName(1111);
      resultMatrixLatex0.m_PrintRowNames = true;
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixLatex0.setStdDevPrec(1111);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(4414, 1111);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.381853780471966
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toArray();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.325016622744741
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      resultMatrixGnuPlot0.setRemoveFilterName(false);
      intArray0[8] = 2;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      resultMatrixGnuPlot0.setShowAverage(true);
      resultMatrixGnuPlot0.getColHidden(0);
      resultMatrixGnuPlot0.getDefaultPrintColNames();
      int[][] intArray1 = new int[7][5];
      intArray1[0] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      resultMatrixGnuPlot0.setSummary(intArray1, intArray1);
      int int0 = resultMatrixGnuPlot0.getDefaultMeanPrec();
      assertTrue(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.025604524020503
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.clearRanking();
      resultMatrixHTML0.m_RemoveFilterName = false;
      resultMatrixHTML0.getSummaryTitle((-3341));
      resultMatrixHTML0.toArray();
      resultMatrixHTML0.setRemoveFilterName(false);
      resultMatrixHTML0.getDefaultMeanPrec();
      resultMatrixHTML0.setStdDevWidth(2);
      resultMatrixHTML0.trimString("", 2);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 1);
      resultMatrixGnuPlot0.setStdDevWidth(1);
      resultMatrixGnuPlot0.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")";
      stringArray0[1] = " ";
      stringArray0[2] = "#RuL";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2286443931453856
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setSize((-3034), (-3034));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0736883094188725
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(97, 7);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.clearSummary();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getCountWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((-2591), 1634);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6208829356123373
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getMeanPrec();
      resultMatrixCSV0.WIN_STRING = null;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(1);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixCSV0.LEFT_PARENTHESES = " ";
      resultMatrixGnuPlot0.setEnumerateColNames(false);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixCSV0.getCountWidth();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixCSV0.isAverage(2);
      resultMatrixCSV0.getDefaultRowNameWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 25;
      resultMatrixCSV0.setStdDevWidth(0);
      intArray0[4] = 0;
      intArray0[5] = 50;
      intArray0[6] = 2;
      intArray0[7] = 2;
      intArray0[8] = 2;
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixHTML0.getDisplayName();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2592, 3816);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.66288721346656
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      boolean[] booleanArray0 = new boolean[1];
      resultMatrixCSV0.m_RankingDiff = null;
      booleanArray0[0] = false;
      resultMatrixCSV0.m_ColHidden = booleanArray0;
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.addHeader("(", "");
      resultMatrixCSV0.clear();
      int int0 = resultMatrixCSV0.getDefaultStdDevWidth();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.removeFilterName("hline\nend{tabular} \footnotesize par}\nend{table}");
      resultMatrixPlainText0.getRevision();
      resultMatrixCSV0.setRowOrder((int[]) null);
      resultMatrixCSV0.isAverage(0);
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      String[][] stringArray0 = new String[3][3];
      String[] stringArray1 = new String[2];
      stringArray1[0] = ")/}^_K:3(H_";
      stringArray1[1] = "(";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[3];
      stringArray2[0] = "hline\nend{tabular} \footnotesize par}\nend{table}";
      stringArray2[1] = "v";
      stringArray2[2] = " ";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      stringArray3[0] = "(";
      stringArray3[1] = "hline\nend{tabular} \footnotesize par}\nend{table}";
      stringArray3[2] = "v";
      stringArray3[3] = "hline\nend{tabular} \footnotesize par}\nend{table}";
      stringArray3[4] = "Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).";
      stringArray3[5] = "[";
      stringArray3[6] = "hline\nend{tabular} \footnotesize par}\nend{table}";
      stringArray3[7] = " ";
      stringArray0[2] = stringArray3;
      int int1 = resultMatrixPlainText0.getColSize(stringArray0, 1551, false, false);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(int1 == int0);
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.473674032910633
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 1;
      resultMatrixGnuPlot0.m_Mean = null;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      resultMatrixGnuPlot0.setShowStdDev(true);
      resultMatrixGnuPlot0.setRemoveFilterName(false);
      intArray0[7] = 2;
      intArray0[8] = 2;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      resultMatrixGnuPlot0.setShowAverage(true);
      resultMatrixGnuPlot0.getColHidden(0);
      resultMatrixGnuPlot0.getDefaultPrintColNames();
      int[][] intArray1 = new int[7][5];
      intArray1[0] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[1] = resultMatrixGnuPlot0.m_RankingLosses;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = resultMatrixGnuPlot0.m_RankingLosses;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      resultMatrixGnuPlot0.setSummary(intArray1, intArray1);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      int int0 = resultMatrixGnuPlot0.getMeanPrec();
      assertTrue(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.594729978006169
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getMeanPrec();
      resultMatrixCSV0.WIN_STRING = null;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(1);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixCSV0.LEFT_PARENTHESES = " ";
      resultMatrixGnuPlot0.setEnumerateColNames(false);
      resultMatrixGnuPlot0.clearHeader();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateRowNames(true);
      resultMatrixCSV0.setMeanWidth(116);
      assertEquals(116, resultMatrixCSV0.getMeanWidth());
      
      resultMatrixCSV1.setRowHidden(116, false);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV1);
      resultMatrixPlainText0.getRevision();
      resultMatrixPlainText0.padString("*", (-2922), true);
      resultMatrixPlainText0.getSignificance(271, 0);
      resultMatrixCSV1.getDefaultPrintRowNames();
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV2.toStringKey();
      assertEquals("Key,\n[1],col0\n", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.284172524383892
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(5, 5);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixHTML0.m_HeaderKeys = vector0;
      resultMatrixPlainText0.m_EnumerateColNames = false;
      resultMatrixHTML0.isStdDev(2);
      Vector<Object> vector1 = new Vector<Object>();
      resultMatrixHTML0.m_HeaderKeys = vector1;
      resultMatrixHTML0.setMean(1, 0, 1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(5, 577);
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2090464751913745
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.clearSummary();
      int[][] intArray0 = new int[7][7];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = (-1289);
      intArray1[2] = 2;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 2;
      intArray4[1] = 2;
      intArray4[2] = 2;
      intArray4[3] = 2;
      intArray4[4] = (-1289);
      intArray4[5] = (-3187);
      intArray4[6] = 0;
      intArray4[7] = 2;
      intArray4[8] = 2;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = 1;
      intArray5[1] = 2;
      intArray5[2] = 0;
      intArray5[3] = 1;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      intArray6[0] = 2491;
      intArray6[1] = (-3187);
      intArray6[2] = (-3187);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      intArray7[0] = 0;
      intArray7[1] = 2491;
      intArray7[2] = 2;
      intArray7[3] = (-3187);
      intArray7[4] = 1;
      intArray7[5] = 2491;
      intArray7[6] = 2;
      intArray0[6] = intArray7;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.6249524480728708
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      
      resultMatrixGnuPlot0.toStringRanking();
      boolean boolean0 = resultMatrixHTML0.isMean((-760));
      assertFalse(boolean0);
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getRevision();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultCountWidth();
      String string0 = resultMatrixCSV0.padString("", 2);
      assertEquals("  ", string0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      String string1 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n[1] col0\n", string1);
      
      resultMatrixSignificance0.setColOrder((int[]) null);
      resultMatrixSignificance0.globalInfo();
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      
      resultMatrixHTML0.getCount(1);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.meanPrecTipText();
      String string2 = resultMatrixPlainText0.printColNamesTipText();
      assertEquals("Whether to output column names or just numbers representing them.", string2);
      
      resultMatrixCSV1.setSignificance(1, 48, 554);
      int int0 = resultMatrixHTML0.getDefaultStdDevPrec();
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.0502925845000135
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setEnumerateRowNames(false);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3792;
      resultMatrixSignificance0.setRowOrder(intArray0);
      resultMatrixSignificance0.setPrintRowNames(true);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.getDisplayName();
      resultMatrixSignificance0.removeFilterName("]");
      resultMatrixLatex0.getRowName(1828);
      String[][] stringArray0 = resultMatrixSignificance0.toArray();
      assertEquals(3, stringArray0.length);
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringSummary();
      String[] stringArray1 = new String[5];
      stringArray1[0] = ")";
      stringArray1[1] = "*";
      stringArray1[2] = " ";
      stringArray1[3] = "-summary data not set-";
      stringArray1[4] = null;
      ResultMatrixSignificance.main(stringArray1);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance1.getDefaultPrintRowNames();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance2.getSignificanceCount(2, 92);
      resultMatrixSignificance2.getRowCount();
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      
      String string0 = resultMatrixLatex0.meanWidthTipText();
      assertEquals("The width of the mean (0 = optimal).", string0);
      
      int[][] intArray1 = new int[3][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      resultMatrixLatex0.setSummary(intArray1, intArray1);
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.746105059836658
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setSignificanceWidth(289);
      resultMatrixHTML0.showStdDevTipText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*";
      stringArray0[1] = "(";
      stringArray0[2] = "*";
      stringArray0[3] = "(";
      stringArray0[4] = "(";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.assign(resultMatrixLatex0);
      resultMatrixHTML1.getRevision();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.setColNameWidth((-4482));
      assertEquals(289, resultMatrixHTML0.getSignificanceWidth());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6560575969475133
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "v";
      stringArray0[1] = ")";
      stringArray0[2] = "_4AQ.SuC;/,yS?#";
      stringArray0[3] = " ";
      stringArray0[4] = "(";
      stringArray0[5] = ")";
      stringArray0[6] = ")";
      resultMatrixPlainText0.m_RowNames = stringArray0;
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.trimString("-ranking data not set-", 1567);
      resultMatrixPlainText0.m_Wins = null;
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.setSignificanceWidth(2690);
      resultMatrixPlainText0.meanWidthTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(573, 1);
      resultMatrixSignificance0.m_ColNames = resultMatrixPlainText0.m_RowNames;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringRanking();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3885851993883698
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int int0 = (-1038);
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 50;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-1038);
      intArray0[7] = (-1038);
      intArray0[8] = (-1038);
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.removeFilterName("");
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.doubleToString(1473.77, (-1038));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3655904864405537
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.m_EnumerateColNames = true;
      Vector<Object> vector0 = new Vector<Object>();
      vector0.setSize(1);
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      vector0.retainAll(resultMatrixGnuPlot0.m_HeaderKeys);
      resultMatrixGnuPlot0.TIE_STRING = "";
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      vector0.add((Object) "v");
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.841594459503484
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      resultMatrixGnuPlot0.m_RowHidden = booleanArray0;
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.setEnumerateColNames(true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.setCountWidth(5);
      resultMatrixPlainText0.toStringMatrix();
      String[][] stringArray0 = new String[3][5];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "v";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      stringArray2[0] = " ";
      stringArray2[1] = " ";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[0];
      resultMatrixGnuPlot0.toString();
      stringArray0[2] = stringArray3;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray0, 0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.599992620560723
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_Counts = null;
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      resultMatrixPlainText0.getColName(0);
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 2;
      intArray0[8] = 0;
      resultMatrixPlainText0.setRowOrder(intArray0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.padString("", 1);
      resultMatrixLatex0.setShowStdDev(true);
      resultMatrixLatex0.getDisplayName();
      assertTrue(resultMatrixLatex0.getShowStdDev());
      
      resultMatrixPlainText0.getDefaultCountWidth();
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4853953440385363
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[0][0];
      resultMatrixLatex0.m_Significance = intArray0;
      resultMatrixLatex0.m_ShowStdDev = false;
      resultMatrixLatex0.TIE_STRING = " ";
      resultMatrixLatex0.LEFT_PARENTHESES = " ";
      resultMatrixLatex0.listOptions();
      resultMatrixLatex0.getDefaultEnumerateColNames();
      int[] intArray1 = new int[2];
      intArray1[0] = 1;
      intArray1[1] = 0;
      resultMatrixLatex0.m_ColOrder = intArray1;
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.clearRanking();
      resultMatrixLatex0.getColNameWidth();
      resultMatrixLatex0.setShowStdDev(true);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(843, 0);
      resultMatrixCSV0.listOptions();
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.LEFT_PARENTHESES = "   <tr><td align=\"center\"><b>&gt;-&lt;</b></td><td align=\"center\"><b>&gt;</b></td><td align=\"center\"><b>&lt;</b></td><td><b>Resultset</b></td></tr>\n";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 1);
      resultMatrixGnuPlot0.getRevision();
      resultMatrixLatex0.toStringRanking();
      assertTrue(resultMatrixLatex0.getShowStdDev());
      
      String string0 = resultMatrixGnuPlot0.padString(" ", 2);
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.8235291340347706
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      resultMatrixGnuPlot0.m_RowHidden = booleanArray0;
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.setEnumerateColNames(true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      resultMatrixPlainText0.setCountWidth(5);
      resultMatrixPlainText0.toStringMatrix();
      String[][] stringArray0 = new String[3][5];
      String[] stringArray1 = new String[4];
      stringArray1[0] = ":-kmhcqfy0HL#z";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[2];
      stringArray2[0] = " ";
      stringArray2[1] = " ";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[0];
      stringArray0[2] = stringArray3;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray0, 0, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2901106847150485
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 5);
      resultMatrixLatex0.getRevision();
      double[][] doubleArray0 = new double[8][9];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-269.82);
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 5;
      doubleArray3[2] = (-269.82);
      doubleArray3[3] = 0.0;
      doubleArray3[4] = (-269.82);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 5;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (-269.82);
      doubleArray5[2] = (-269.82);
      doubleArray5[3] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = (double) 1;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = (double) 5;
      doubleArray6[5] = (double) 2;
      doubleArray6[6] = (double) 1;
      doubleArray6[7] = (double) 5;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = (double) 0;
      doubleArray7[2] = (double) 5;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[6];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 1;
      doubleArray8[2] = (double) 2;
      doubleArray8[3] = (double) 0;
      doubleArray8[4] = (double) 2;
      doubleArray8[5] = (double) 2;
      doubleArray0[7] = doubleArray8;
      resultMatrixLatex0.m_StdDev = doubleArray0;
      resultMatrixLatex0.clear();
      resultMatrixLatex0.globalInfo();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.doubleToString((-1895.898014903049), (-830));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.020056464274406
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.getDefaultEnumerateRowNames();
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultColNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertTrue(resultMatrixCSV0.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.6073065920038827
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      
      String[][] stringArray0 = new String[2][4];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "v";
      stringArray1[1] = "*";
      stringArray1[2] = " ";
      stringArray0[0] = stringArray1;
      String string0 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"col0\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string0);
      
      String[] stringArray2 = new String[3];
      stringArray2[0] = " ";
      stringArray2[1] = "";
      stringArray2[2] = "";
      stringArray0[1] = stringArray2;
      int int0 = resultMatrixGnuPlot0.getColSize(stringArray0, 3, true, true);
      assertEquals(0, int0);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(50, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.9824339291949604
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "v";
      resultMatrixHTML0.m_ColNameWidth = (-2768);
      ResultMatrixHTML.main(stringArray0);
      resultMatrixHTML0.m_MeanPrec = (-1238);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixHTML0.assign(resultMatrixLatex0);
      resultMatrixHTML0.getRevision();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.setColNameWidth((-1238));
      assertEquals((-1238), resultMatrixHTML0.getMeanPrec());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.0206698357730772
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setSize(1, 0);
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(1, resultMatrixCSV0.getColCount());
  }
}
