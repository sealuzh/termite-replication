/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:04:18 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1764));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("lr=7zhK+DWOrjm");
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("");
      assertEquals("lr=7zhK+DWOrjm", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.setQSObjectPoolMaker("y[|(}TqB6");
      advancedSettings0.setQSObjectPoolMaker("y[|(}TqB6");
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(65536);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getCharset();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.getBacklog();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(65536, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      String string1 = advancedSettings0.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string1);
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("</client-socket-tcp-no-delay>\n");
      assertEquals("</client-socket-tcp-no-delay>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(591);
      advancedSettings0.setSocketLinger(591);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesBandwidth(3121);
      advancedSettings0.getSocketLinger();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4893764193967094
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1256));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings1.getClientIdentifier();
      advancedSettings1.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize(447);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(65536);
      assertEquals(65536, advancedSettings1.getClientSocketReceiveBufferSize());
      
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.toXML((String) null);
      String string0 = advancedSettings4.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.709864627019329
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      String string0 = advancedSettings0.toXML("</performance-preferences-latency>\n");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass(string0);
      advancedSettings0.setPerformancePreferencesLatency(1697);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(1697, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7431033124892004
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getClientIdentifier();
      advancedSettings1.setClientSocketSendBufferSize(1428);
      advancedSettings2.getClientSocketSendBufferSize();
      advancedSettings2.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings2.setClientSocketReceiveBufferSize(0);
      advancedSettings2.getQSObjectPoolMaker();
      advancedSettings2.getByteBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientIdentifier();
      advancedSettings2.setCharset("");
      advancedSettings0.toXML("org.quickserver.util.pool.MakeQSObjectPool");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-3203));
      advancedSettings0.setBacklog((-3203));
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-3203), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6875440376031756
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(2376);
      advancedSettings0.setPerformancePreferencesBandwidth(2376);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(2376);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getCharset();
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(2376, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0248847886694654
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog((-1774));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize((-918));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      assertEquals((-918), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8816224050082146
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(2376);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(2376);
      advancedSettings0.setByteBufferSize((-2280));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-1539));
      advancedSettings0.setPerformancePreferencesConnectionTime((-2280));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesConnectionTime((-2280));
      advancedSettings0.setByteBufferSize((-2280));
      advancedSettings0.setClientIdentifier("z-A?B_bb");
      assertEquals("z-A?B_bb", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("O]4~$EYoY~bXk*");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // O]4~$EYoY~bXk*
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6813259589776894
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(804);
      advancedSettings0.setClientSocketTrafficClass(" W+jE@\"hc&6t,Gv5");
      advancedSettings0.setPerformancePreferencesLatency(1163);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth(10);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesBandwidth(1163);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesLatency(1163);
      advancedSettings0.toXML((String) null);
      assertEquals(10, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(10, int0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("\"77=Gl7t;g%b@Bv");
      advancedSettings0.setClientIdentifier("\"77=Gl7t;g%b@Bv");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals("\"77=Gl7t;g%b@Bv", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.415779257625656
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(2870);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize(2870);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize((-829));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setQSObjectPoolMaker("[L");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesLatency(1114);
      assertEquals(2870, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6574754455375635
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(2870);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize((-3085));
      advancedSettings0.toXML("B^=44TI!W\"GKN6");
      assertEquals(2870, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, int0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = "";
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("H");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // H
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4612087823644635
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.toXML("W");
      advancedSettings0.setPerformancePreferencesBandwidth((-3974));
      advancedSettings0.toXML("");
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>-3974</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.setPerformancePreferencesLatency((-3974));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>-3974</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      assertEquals((-3974), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.431412871011569
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.toXML("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-tcp-no-delay>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-tcp-no-delay>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6638192075514553
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setByteBufferSize((-661));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger((-661));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("kgAh;A");
      advancedSettings0.setBacklog((-661));
      advancedSettings0.setClientIdentifier("</client-socket-send-buffer-size>\n");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger((-156));
      advancedSettings0.setClientSocketTrafficClass("kgAh;A");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getBacklog();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.toXML("</client-socket-send-buffer-size>\n");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setBacklog((-1897));
      assertEquals("</client-socket-send-buffer-size>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.6690405611384644
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.toXML("B<S&x^[WCm.");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1289));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.577189259122345
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-292));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings1.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize(65541);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings1.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setPerformancePreferencesConnectionTime(839);
      advancedSettings1.setClientSocketReceiveBufferSize(2841);
      advancedSettings2.toXML("");
      advancedSettings0.getClientIdentifier();
      assertEquals(65541, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), int0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5366237611531015
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.toXML("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setQSObjectPoolMaker(".");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      advancedSettings1.setUseDirectByteBuffer(true);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-292));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings1.getClientIdentifier();
      advancedSettings1.setBacklog(1026);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings1.setClientSocketSendBufferSize((-292));
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings1.getClientSocketTcpNoDelay();
      assertEquals((-292), advancedSettings1.getClientSocketReceiveBufferSize());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getClientIdentifier();
      advancedSettings2.getQSObjectPoolMaker();
      String string0 = advancedSettings2.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4596199617174017
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientIdentifier();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(2870);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.setPerformancePreferencesBandwidth(2870);
      advancedSettings0.setClientSocketTrafficClass("4|pmum");
      advancedSettings1.getClientIdentifier();
      advancedSettings0.toXML("49D:mMCCI3%hw`ZJ");
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.setClientIdentifier("49D:mMCCI3%hw`ZJ");
      assertEquals(2870, advancedSettings1.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(7);
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings1.setClientSocketReceiveBufferSize(7);
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(7, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.526944711480895
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setCharset("");
      advancedSettings0.toXML("");
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.6416280023076024
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier(":{L9P-d4+2mECn^");
      advancedSettings0.setClientSocketTrafficClass("c2Q'`m%J");
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientIdentifier();
      advancedSettings1.setClientSocketSendBufferSize(65536);
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass(":{L9P-d4+2mECn^");
      advancedSettings1.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.toXML(")R/{h}G");
      advancedSettings0.setByteBufferSize((-4193));
      advancedSettings0.toXML(":{L9P-d4+2mECn^");
      assertEquals(65536, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.5360485526400147
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketReceiveBufferSize(1110);
      advancedSettings0.toXML("</performance-preferences-connection-time>\n");
      advancedSettings0.setByteBufferSize(1);
      assertEquals(65536, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.530918966707689
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize((-150));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketTrafficClass("");
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize((-3974));
      assertEquals((-3974), advancedSettings0.getClientSocketReceiveBufferSize());
      
      advancedSettings1.getClientIdentifier();
      advancedSettings1.setCharset("");
      advancedSettings1.setByteBufferSize(0);
      String string0 = advancedSettings1.toXML("");
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n\t<client-socket-send-buffer-size>-150</client-socket-send-buffer-size>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.53634590619339
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("S[RQemp4");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(1110);
      advancedSettings0.toXML("</performance-preferences-connection-time>\n");
      advancedSettings0.setByteBufferSize(1);
      assertEquals(65536, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6690405611384644
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.toXML("B<S&x^[WCm.");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1289));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getDebugNonBlockingMode();
      int int0 = advancedSettings0.getByteBufferSize();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertNotNull(string0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }
}
