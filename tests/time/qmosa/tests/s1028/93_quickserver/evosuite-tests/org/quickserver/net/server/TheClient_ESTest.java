/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:57:03 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.Proxy;
import java.net.Socket;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.DataType;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.util.xmlreader.BasicServerConfig;
import org.quickserver.util.xmlreader.ObjectPoolConfig;
import org.quickserver.util.xmlreader.QSAdminServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.380167676263512
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg(" fi`?_SdM&d!Z4");
      theClient0.setTimeout(3792);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setCommunicationLogging(true);
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getAuthenticator();
      SocketChannel.open();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getSocket();
      theClient0.toString();
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      System.setCurrentTimeMillis(286L);
      theClient0.getTimeout();
      theClient0.getTimeout();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      assertEquals(3792, theClient0.getTimeout());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.258303007954067
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry(3527);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setTimeout((-1));
      quickServer0.setClientCommandHandler("ciRui3a");
      quickServer0.getServerHooks();
      QuickServer.getVersionNo();
      theClient0.setServer(quickServer0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTry(3527);
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientEventHandler();
      theClient0.getTimeout();
      theClient0.getClientObjectHandler();
      assertEquals(3527, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.173124811849275
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.getMaxAuthTry();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      Data data0 = new Data();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      data0.setPassword(byteArray0);
      data0.setLastAsked("org.quickserver.util.xmlreader.IpFilterConfig");
      theClient0.setClientData(data0);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      theClient0.setAuthenticator((Authenticator) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      Socket socket0 = theClient0.getSocket();
      theClient0.setSocket(socket0);
      theClient0.getClientEvent();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.124771615329544
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      theClient0.getMaxAuthTryMsg();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.setMaxAuthTry(3527);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setTimeout((-1));
      quickServer0.setClientCommandHandler("ciRui3a");
      quickServer0.getServerHooks();
      QuickServer.getVersionNo();
      theClient0.setServer(quickServer0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTry(3527);
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientEventHandler();
      theClient0.getTimeoutMsg();
      theClient0.getMaxConnectionMsg();
      assertEquals(3527, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.48629831128984
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setTrusted(false);
      theClient0.setMaxAuthTry(0);
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setSocket((Socket) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setMaxConnectionMsg("0.VZtVD|L;z{M_eju");
      theClient0.setTimeoutMsg("");
      theClient0.setTrusted(false);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.setTrusted(false);
      theClient0.getClientWriteHandler();
      theClient0.setTrusted(false);
      ClientEvent clientEvent0 = theClient0.getClientEvent();
      theClient0.setClientEvent(clientEvent0);
      TheClient theClient1 = new TheClient();
      theClient1.getClientEventHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      assertEquals(0, theClient0.getMaxAuthTry());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTryMsg("");
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.toString();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-1168));
      blockingClientHandler0.forceClose();
      ClientEvent clientEvent0 = ClientEvent.READ;
      blockingClientHandler0.removeEvent(clientEvent0);
      theClient0.getMaxAuthTryMsg();
      blockingClientHandler0.toString();
      // Undeclared exception!
      try { 
        defaultClientEventHandler0.gotConnected(blockingClientHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      QuickServer quickServer0 = new QuickServer("x", 0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Creating ClientData pool", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      BasicServerConfig basicServerConfig0 = new BasicServerConfig();
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.getClientBinaryHandler();
      basicServerConfig0.setClientBinaryHandler((ClientBinaryHandler) null);
      QSAdminServerConfig qSAdminServerConfig0 = new QSAdminServerConfig();
      basicServerConfig0.getDefaultDataMode();
      ObjectPoolConfig objectPoolConfig0 = qSAdminServerConfig0.getObjectPoolConfig();
      basicServerConfig0.setObjectPoolConfig(objectPoolConfig0);
      quickServer0.setBasicConfig(basicServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getSocketChannel();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientAuthenticationHandler();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getServer();
      theClient0.getSocket();
      theClient0.getServer();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.126862207664039
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      Data data0 = new Data();
      data0.setLastAsked("");
      data0.setLastAsked("");
      theClient0.setClientData(data0);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      TheClient theClient1 = new TheClient();
      boolean boolean0 = theClient1.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getClientData();
      theClient1.getClientExtendedEventHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setCommunicationLogging(true);
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertTrue(theClient2.getCommunicationLogging());
      
      theClient0.getMaxConnectionMsg();
      TheClient theClient3 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient3.setClientObjectHandler((ClientObjectHandler) null);
      TheClient theClient4 = new TheClient();
      theClient4.getSocketChannel();
      theClient4.getClientAuthenticationHandler();
      theClient3.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.getMaxAuthTry();
      theClient0.getMaxAuthTry();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getClientBinaryHandler();
      theClient0.setAuthenticator((Authenticator) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3797334600238247
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientData((ClientData) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.getClientData();
      theClient0.getServer();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEvent();
      theClient0.getTimeoutMsg();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocketChannel();
      theClient0.setMaxAuthTry((-1));
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getSocketChannel();
      theClient0.getMaxConnectionMsg();
      theClient0.getSocketChannel();
      theClient0.toString();
      theClient0.getMaxAuthTry();
      theClient0.getTimeoutMsg();
      theClient0.getTimeoutMsg();
      assertEquals((-1), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.getMaxAuthTry();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getMaxAuthTry();
      theClient0.setMaxAuthTry((-927));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)75;
      theClient0.setClientData((ClientData) null);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.getMaxAuthTry();
      theClient0.toString();
      theClient0.setMaxAuthTry((byte)75);
      theClient0.toString();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientAuthenticationHandler();
      System.setCurrentTimeMillis(328L);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getSocket();
      theClient0.setSocket((Socket) null);
      Data data0 = new Data();
      data0.setLastAsked("");
      theClient0.setClientData(data0);
      MockInetSocketAddress.createUnresolved("", 58);
      SocketChannel socketChannel0 = SocketChannel.open();
      Socket socket0 = socketChannel0.socket();
      theClient0.setSocket(socket0);
      theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1958550791509905
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      theClient0.getTrusted();
      theClient0.setTimeoutMsg("si\fUy`zRTa&");
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getTimeoutMsg();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      theClient1.toString();
      theClient1.getClientExtendedEventHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-890));
      blockingClientHandler0.getSocket();
      assertEquals("<ClientHandler-Pool#-890-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setSocket((Socket) null);
      theClient0.toString();
      TheClient theClient3 = new TheClient();
      theClient3.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient3.setClientObjectHandler((ClientObjectHandler) null);
      assertFalse(theClient3.getTrusted());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Data data0 = new Data();
      data0.setLastAsked("Closing input streams");
      data0.setLastAsked("b9");
      data0.setLastAsked("@iv^CoILe|7");
      DataType dataType0 = DataType.IN;
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("Closing input streams");
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry(3527);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      QuickServer quickServer0 = new QuickServer();
      theClient0.setTimeout((-1));
      quickServer0.setClientCommandHandler("ciRui3a");
      quickServer0.getServerHooks();
      QuickServer.getVersionNo();
      theClient0.setServer(quickServer0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.toString();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.toString();
      theClient0.setMaxAuthTry(3527);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      assertEquals(3527, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setTimeoutMsg("org.quickserver.net.server.TheClient");
      theClient0.setTimeout((-2410));
      theClient0.setTrusted(true);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getTrusted();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTryMsg("org.quickserver.net.server.TheClient");
      theClient0.setTrusted(true);
      theClient0.setMaxAuthTry(0);
      assertEquals((-2410), theClient0.getTimeout());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Data data0 = new Data();
      data0.setLastAsked("Closing input streams");
      byte[] byteArray0 = new byte[6];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte)75;
      byteArray1[2] = (byte)75;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)125;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-119);
      byteArray0[5] = (byte)0;
      data0.setPassword(byteArray0);
      data0.setLastAsked("b9");
      data0.setLastAsked("@iv^CoILe|7");
      DataType dataType0 = DataType.IN;
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setServer((QuickServer) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getCommunicationLogging();
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.toString();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setTimeout(0);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.setCommunicationLogging(true);
      theClient1.getClientData();
      assertTrue(theClient1.getCommunicationLogging());
      
      theClient0.setClientData((ClientData) null);
      assertFalse(theClient0.getTrusted());
  }
}
