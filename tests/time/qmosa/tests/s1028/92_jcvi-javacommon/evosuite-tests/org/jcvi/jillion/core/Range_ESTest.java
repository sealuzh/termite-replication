/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:09:29 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.ofLength(2333L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.697483798021532
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.equals(range1);
      range1.getLength();
      range1.iterator();
      Range range2 = Range.ofLength(1L);
      Range range3 = Range.of(1L, 4294967295L);
      range2.isSubRangeOf(range3);
      Range.ofLength(1869L);
      Range.of(1665L, 2147483647L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.08644315450659
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = (-2147479830L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      Long long1 = new Long(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.ofLength(0L);
      range3.endsBefore(range1);
      Range.Comparators.values();
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range3.toString(range_CoordinateSystem0);
      range2.complement(range1);
      long long2 = (-3456L);
      long long3 = 1138L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1138L, (-2147479830L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.2186622840784445
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(4294967295L);
      Range range1 = Range.ofLength(9223372034707292162L);
      range1.endsBefore(range0);
      Range.Comparators.values();
      Range range2 = Range.of(4294967295L);
      range0.toString(range_CoordinateSystem0);
      range1.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1435L, 2147483647L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, (-1128L), 1435L);
      range3.intersection(range0);
      Range range4 = Range.of(255L, 2118L);
      range3.intersects(range4);
      range2.split(1L);
      Range.parseRange("[ 4294967295 .. 4294967295 ]/0B");
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.1033610813746755
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long(2147483647L);
      Long long1 = new Long(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(2147483647L);
      range0.endsBefore(range1);
      Range.Comparators.values();
      Range range2 = Range.of(2147483647L);
      range2.toString(range_CoordinateSystem0);
      range1.complement(range0);
      Range range3 = Range.of(range_CoordinateSystem2, (-3456L), 3171L);
      range3.getEnd();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.startsBefore(range0);
      long long2 = (-2491L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 1L, (-2491L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.0730476517770065
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-938L), (-51L));
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-938L), (-938L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range0.intersection(range1);
      Long long0 = new Long(352L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range0.isEmpty();
      Range range3 = range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-1974L), (-938L));
      range2.getEnd(range_CoordinateSystem1);
      Range range4 = Range.of((-4294965942L));
      List<Range> list0 = range4.complement(range0);
      range3.complementFrom(list0);
      range4.endsBefore(range3);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Residue Qased");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Residue Qased
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7118611847265495
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem3);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      Range range1 = Range.of(range_CoordinateSystem4, 2147483647L, 4294967295L);
      range1.intersects(range0);
      range1.isSubRangeOf(range0);
      Range range2 = Range.ofLength(2147483647L);
      Range range3 = Range.of(2147483647L);
      range2.getBegin();
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range3.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.035557646145188
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range2 = range_Builder1.build();
      Range range3 = Range.of((-70L));
      range2.intersection(range3);
      long long0 = (-94L);
      Range range4 = Range.of((-3390L), (-94L));
      range4.getEnd();
      range_Builder1.copy();
      range2.isEmpty();
      range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.expandEnd((-3370L));
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.406843574312277
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(263L, 263L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.76388473343986
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(3171L, 9223372036854775807L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4294967295L);
      range_Builder0.shift((-2815L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.87755447666415
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range2.equals(range0);
      Range.Comparators.values();
      Range.of(0L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, (-32768L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32769 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.043645336851991
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-33L), (-33L));
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.expandEnd(127L);
      Range.Builder range_Builder3 = range_Builder0.expandBegin(601L);
      range_Builder3.expandEnd(601L);
      Range range2 = Range.of((-500L));
      Range range3 = Range.of(range_CoordinateSystem0, 763L, 763L);
      range3.getEnd();
      range_Builder2.copy();
      range3.isEmpty();
      Range range4 = Range.of(127L, 126L);
      range2.getEnd();
      range4.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range4.getBegin(range_CoordinateSystem2);
      range1.isEmpty();
      range1.endsBefore(range0);
      range_Builder0.shift(4294966272L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem3);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem4, 2147483647L, (-500L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.086890081752677
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of(3068L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3068L, 3297L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(3068L, long0);
      
      Range range2 = Range.ofLength(3068L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.endsBefore(range2);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(range_CoordinateSystem2, 3068L, 3068L);
      range3.toString();
      Range range4 = Range.parseRange("[ 3068 .. 3069 ]/SB");
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      Range.of(range_CoordinateSystem3, (-1L), (-1L));
      Range range5 = Range.parseRange("[ 3068 .. 3068 ]/0B", range_CoordinateSystem3);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem4, (-1L), (-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range5.complementFrom(linkedList0);
      range_Builder1.build();
      List<Range> list0 = range1.complement(range5);
      assertFalse(list0.contains(range1));
      assertNotSame(range5, range4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.936085756377121
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = 3L;
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      range1.intersection(range0);
      long long1 = 4294967295L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      range_Builder0.contractEnd((-2292L));
      range_Builder0.shift(3L);
      Range range2 = Range.of((-2292L));
      Range range3 = Range.of((-1668L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range3.getBegin(range_CoordinateSystem0);
      range2.equals((Object) null);
      Range.Comparators.values();
      Range.of(289L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Sd_HHG<go'@@;)r.", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Sd_HHG<go'@@;)r. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.5818191461286806
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5527L), 241L);
      range0.equals(range_CoordinateSystem0);
      range0.getLength();
      range0.iterator();
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.813407633567588
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.intersects(range0);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      range_Builder0.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of(1L, 4496L);
      boolean boolean1 = range0.equals(range2);
      assertFalse(boolean1 == boolean0);
      
      Range.Comparators.values();
      List<Range> list0 = range0.complement(range1);
      assertEquals(1, list0.size());
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.621489272829881
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(3171L, 9223372036854775807L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(4294967295L);
      range_Builder0.shift((-2815L));
      range_Builder1.contractEnd((-141L));
      long long0 = 9223372036854775807L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-2815L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2815 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4561777962470694
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 263L, 263L);
      range0.equals(range_CoordinateSystem0);
      range0.getLength();
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6566416868218665
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(4294967295L);
      Long long1 = new Long(4294967295L);
      long long2 = 9223372034707292162L;
      Range range1 = Range.ofLength(9223372034707292162L);
      range1.endsBefore(range0);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$UnsignedShortStartShortLengthRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.012970708085
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      range0.getEnd();
      long long0 = new Long((-1L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range1.intersection(range0);
      range_Builder0.expandEnd((-52L));
      range2.getEnd();
      Range.Builder range_Builder2 = range_Builder1.copy();
      range1.isEmpty();
      Range.of((-4194L), (-52L));
      range0.getEnd();
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      range2.isEmpty();
      range2.endsBefore(range0);
      range_Builder2.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-52L), 9223372036854743041L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.004230700047865
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem2);
      assertEquals(2147483647L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      Range range3 = Range.of(2147483647L, 2147483647L);
      long long1 = range3.getEnd();
      assertEquals(2147483647L, long1);
      
      range_Builder0.copy();
      range3.isEmpty();
      Range range4 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder2.shift((-52L));
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem2, (-2081L), 2147483647L);
      range_Builder3.shift(2147483647L);
      range_Builder1.contractEnd((-155L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem3, (-3611L), 2147483647L);
      range4.startsBefore(range1);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.702002655072955
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 2147483648L, 2147483647L);
      range_Builder0.contractEnd((-1L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-1L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("7MA<jN|:_b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 7MA<jN|:_b into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.9626455088703696
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      long long0 = range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range_Builder1.copy();
      Range range1 = range_Builder1.build();
      range0.intersection(range1);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder2.expandEnd(0L);
      range1.getEnd();
      range_Builder1.copy();
      range1.isEmpty();
      Range range2 = range_Builder3.build();
      range_Builder0.expandEnd((-2417L));
      range_Builder1.build();
      Range range3 = Range.of((-1083L));
      assertFalse(range3.isEmpty());
      
      long long1 = range2.getLength();
      assertTrue(long1 == long0);
      
      Range.Builder range_Builder4 = new Range.Builder(9223372036854774454L, (-3611L));
      range_Builder4.contractBegin((-685L));
      List<Range> list0 = range1.split(32767L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5871629994312677
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = 104L;
      long long1 = 1203L;
      Range range1 = Range.ofLength(104L);
      range1.isSubRangeOf(range0);
      range1.intersection(range0);
      long long2 = 2147483647L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(104L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.64508830320067
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of(3171L, 9223372036854775807L);
      range0.complement(range1);
      long long1 = (-2815L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(4294967295L);
      long long2 = (-141L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.9943885276340665
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(1354L);
      range0.equals(range_CoordinateSystem0);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      range0.iterator();
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Range.ofLength(2147483647L);
      Range range2 = Range.of((-3611L), (-2435L));
      Range range3 = range2.intersection(range1);
      assertFalse(range2.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.768879238478916
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2904L);
      assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(1L, 2904L);
      range_Builder0.shift((-996L));
      Range.ofLength(1L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1063L), 1L);
      range0.isSubRangeOf(range1);
      Range.ofLength(454L);
      Range range2 = Range.of(0L, 1L);
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2098L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.591687479915048
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of(2334L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getLength();
      range0.iterator();
      Range range1 = Range.ofLength(2745L);
      range1.isSubRangeOf(range0);
      Range.ofLength(2334L);
      long long0 = (-3611L);
      // Undeclared exception!
      try { 
        Range.of(1L, (-2428L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.9451837139170793
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 0 ]/0B", string0);
      
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      assertTrue(range1.isEmpty());
      
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      Range.Builder range_Builder3 = range_Builder2.shift(4294967295L);
      range0.equals((Object) null);
      Range.Comparators.values();
      Range range2 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      long long0 = range2.getLength();
      assertEquals(1L, long0);
      
      range_Builder3.expandEnd((-3470L));
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(1L, 929L);
      range_Builder5.build();
      Range.of(1L);
      Range range3 = Range.of(1L, 4294967295L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.907288379233321
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.intersects(range0);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      Range.Builder range_Builder3 = range_Builder2.shift(4294967295L);
      range0.equals((Object) null);
      Range.Comparators.values();
      Range.of(4294967295L);
      range0.complement(range0);
      long long0 = new Long(1L);
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(1L, 929L);
      range_Builder5.build();
      Range.of(1L);
      // Undeclared exception!
      try { 
        range_Builder3.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.9949601921004416
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      range0.intersects(range0);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      long long1 = 4294967295L;
      range_Builder2.shift(4294967295L);
      range0.equals((Object) null);
      Range.Comparators.values();
      Range.of(4294967295L);
      range0.complement(range0);
      Range range1 = Range.ofLength(4294967295L);
      range1.getEnd();
      Range.parseRange("[ 0 .. 0 ]/0B");
      // Undeclared exception!
      try { 
        Range.parseRange("~Z\"[YPR@9+Nc_r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ~Z\"[YPR@9+Nc_r into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.73852403307177
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.of(3171L, 9223372036854775807L);
      range0.iterator();
      Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.isSubRangeOf(range0);
      Range.ofLength(3171L);
      long long0 = (-3611L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 3171L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.8298172512342186
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      Range range2 = range1.intersection(range0);
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      long long1 = (-380L);
      range_Builder0.shift((-380L));
      range_Builder0.shift((-380L));
      range0.equals(range1);
      long long2 = (-1281L);
      range_Builder0.contractBegin((-1281L));
      Range range3 = Range.ofLength(1024L);
      range0.endsBefore(range3);
      range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long3 = new Long(0L);
      range3.equals(long3);
      Range.Comparators.values();
      Range range4 = Range.of(0L);
      range1.complement(range4);
      range3.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 996L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.807364012993004
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      range0.intersects(range0);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.shift(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long1 = 4496L;
      range_Builder2.contractEnd(0L);
      range_Builder0.shift((-1732L));
      Range range2 = Range.of(2147483647L);
      range2.equals(range1);
      range2.isSubRangeOf(range0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 0 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 0 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.557008997915831
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder0.shift((-2815L));
      range_Builder2.shift((-141L));
      range_Builder1.contractEnd((-2815L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 693L, 9223372036854775807L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.8964537248291466
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      range1.startsBefore(range2);
      range_Builder0.contractBegin((-1281L));
      Range range3 = Range.ofLength(1024L);
      range0.endsBefore(range3);
      range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1281L), 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 280L, (-380L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.321775345854883
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, (-9223372036854775808L));
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(949L, (-3611L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.166365447202302
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      range1.intersection(range0);
      range_Builder0.expandEnd((-52L));
      Range range2 = Range.of(0L);
      range2.getEnd();
      range_Builder1.copy();
      range2.isEmpty();
      Range.of((-4194L), (-52L));
      range0.getEnd();
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range2.isEmpty();
      Range range3 = Range.of(292L);
      range2.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range1.equals(range_CoordinateSystem2);
      range3.getBegin();
      range2.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("0B", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.9221469000392477
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      range0.getLength();
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = range_Builder1.build();
      range1.intersection(range0);
      Range.of(0L);
      range1.getEnd();
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.copy();
      range1.isEmpty();
      Range range2 = range_Builder1.build();
      range_Builder0.expandEnd(0L);
      range_Builder2.build();
      range_Builder1.expandBegin(551L);
      Range range3 = Range.of(32767L);
      range1.getLength();
      range3.isSubRangeOf(range2);
      range3.getBegin();
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.021551904656005
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      range1.intersects(range1);
      range_Builder0.build();
      range_Builder0.contractBegin((-1281L));
      Range range3 = Range.ofLength(1024L);
      range0.endsBefore(range3);
      Range range4 = range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long((-380L));
      Long long1 = new Long(0L);
      range4.endsBefore(range3);
      Range.Comparators.values();
      Range range5 = Range.of(0L);
      range1.complement(range5);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range6 = Range.of(range_CoordinateSystem1, (-1281L), 0L);
      range6.getEnd();
      Range.of(range_CoordinateSystem0, (long) long0, 1024L);
      Range range7 = Range.of(1024L, 4294967295L);
      range4.intersects(range7);
      Range range8 = Range.of((-380L));
      range0.intersects(range8);
      Range.of(0L, 1434L);
      // Undeclared exception!
      try { 
        range7.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.1769099303471195
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.intersects(range1);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range2 = range_Builder1.build();
      range_Builder0.expandEnd(127L);
      range_Builder0.expandBegin(601L);
      String string0 = "?~2UT?USy_TKD`";
      range0.equals("[ 0 .. 0 ]/0B");
      Range.Builder range_Builder2 = new Range.Builder(2783L);
      range_Builder2.contractBegin(601L);
      Range range3 = range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.getBegin(range_CoordinateSystem1);
      range1.equals(range_Builder2);
      Range.Comparators.values();
      Range.of(289L);
      range3.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-5067L), 819L);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("?~2UT?USy_TKD`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ?~2UT?USy_TKD` into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.9889070629312116
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range0.intersects(range1);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder1.build();
      range_Builder2.shift((-78L));
      Range.Builder range_Builder3 = range_Builder0.shift((-78L));
      range1.equals((Object) null);
      Range.Comparators.values();
      Range range2 = Range.of(9223372036854775807L);
      range_Builder2.copy();
      range2.complement(range0);
      range0.getLength();
      long long0 = (-32768L);
      range_Builder3.expandEnd((-32768L));
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(1448L, 9223372036854775807L);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.769708685683633
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      Range.ofLength(0L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.9076685377718676
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = (-2147479830L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      range_Builder0.contractEnd((-2292L));
      range_Builder0.shift(0L);
      Range range3 = Range.of((-2292L));
      range2.equals(range3);
      range3.isSubRangeOf(range2);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("9gN>XS!<BY6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.9gN>XS!<BY6
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.124791283807184
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-189L), (-189L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(0L);
      Range range3 = range1.intersection(range2);
      Range range4 = range_Builder0.build();
      range2.complement(range4);
      Object object0 = new Object();
      range2.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem1);
      range1.intersects(range2);
      range1.isSubRangeOf(range0);
      Range range5 = Range.ofLength(127L);
      Range range6 = Range.of((long) long0);
      range6.getBegin();
      Range range7 = null;
      range5.isSubRangeOf(range3);
      range0.endsBefore(range4);
      range0.startsBefore(range4);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("5?$2_-z;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.5?$2_-z;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.62659628894367
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      Range range0 = Range.of(0L, 0L);
      long long2 = 0L;
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      long long3 = (-2339L);
      long long4 = 255L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.067941118526688
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      Range range2 = range1.intersection(range0);
      range0.equals(range1);
      Range range3 = Range.ofLength(1024L);
      range0.endsBefore(range3);
      Range range4 = range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Long long0 = new Long(0L);
      range3.equals(long0);
      Range.Comparators.values();
      Range range5 = Range.of(0L);
      range1.complement(range5);
      Range range6 = Range.of(range_CoordinateSystem0, (-1281L), 0L);
      range6.getEnd();
      Range.of(range_CoordinateSystem0, 0L, 1024L);
      Range range7 = Range.of(1024L, 4294967295L);
      range4.intersects(range7);
      // Undeclared exception!
      try { 
        range7.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.9776628777062464
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-189L), (-189L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(0L);
      Range range2 = range0.intersection(range1);
      Range range3 = range_Builder0.build();
      range1.complement(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1L, 0L);
      Range.ofLength(0L);
      Range range4 = range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range4.getBegin();
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.609351659165205
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = 0L;
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2906L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 3406L, 2906L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.070392381718868
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-189L), (-189L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder1.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.getEnd(range_CoordinateSystem0);
      range0.intersection(range1);
      Range range2 = range_Builder0.build();
      range_Builder1.expandEnd(0L);
      Range.Comparators.values();
      range0.getLength();
      range_Builder0.expandEnd(0L);
      range_Builder1.build();
      Range range3 = Range.of(2147483647L);
      range3.getLength();
      range_Builder1.contractBegin(0L);
      // Undeclared exception!
      try { 
        range2.split((-2194L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.9714955370666463
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder1.build();
      Range range1 = Range.of((-2147483648L));
      range0.intersection(range1);
      String string0 = "org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream";
      range_Builder0.copy();
      range_Builder3.build();
      range_Builder1.expandEnd(214L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder4.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.io.RandomAccessFileInputStream into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.634440437221311
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = 2147483647L;
      Range range1 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getLength();
      Range range2 = Range.of(65535L);
      range2.iterator();
      long long1 = 2147483647L;
      Range range3 = Range.ofLength(2147483647L);
      range3.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2084L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.769405009002924
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range1.isEmpty();
      long long0 = new Long((-2147479830L));
      range1.iterator();
      Range range2 = Range.ofLength(0L);
      range2.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.560701354088896
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      long long1 = (-2815L);
      Range.of(0L);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-2815L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2046L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.880908317408963
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.of((-2815L));
      Range.Builder range_Builder2 = new Range.Builder(0L);
      long long0 = (-2339L);
      range_Builder1.contractBegin((-2339L));
      Range.Builder range_Builder3 = range_Builder2.shift(0L);
      Range range0 = Range.of(0L);
      range0.equals(range_Builder3);
      Range.Comparators.values();
      Range range1 = Range.of((-2815L));
      range1.getLength();
      range_Builder2.expandEnd((-2487L));
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(0L, (-656L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9477220574929075
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-2147479830L), 104L);
      range0.isSubRangeOf(range0);
      range1.intersection(range0);
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      range_Builder0.contractEnd((-2310L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      Range.ofLength(0L);
      Range.of(0L, 4294967295L);
      long long1 = 1154L;
      range_Builder1.shift(1154L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(range_CoordinateSystem0, 388L, (-2147479830L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.728593947395651
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      Range range2 = Range.ofLength(0L);
      range2.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=4.051522068376845
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      range1.intersects(range1);
      range_Builder0.contractBegin((-1281L));
      Range range3 = Range.ofLength(1024L);
      range0.endsBefore(range3);
      Range range4 = range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long((-380L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      List<Range> list1 = range2.complementFrom(list0);
      range4.complementFrom(list1);
      Long long1 = new Long(0L);
      range4.endsBefore(range3);
      Range.Comparators.values();
      Range range5 = Range.of(0L);
      range1.complement(range5);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range6 = Range.of(range_CoordinateSystem1, (-1281L), 0L);
      range6.getEnd();
      Range.of(range_CoordinateSystem0, (long) long0, 1024L);
      Range.of(1024L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.of(0L, (-380L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.7544455399444905
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range range1 = range_Builder0.build();
      range1.intersection(range0);
      Range.of(2147483647L);
      range0.getEnd();
      range_Builder2.copy();
      range1.isEmpty();
      long long0 = (-698L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-698L), (-2374L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.877079862694272
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, (-24L), 3171L);
      Range range2 = Range.ofLength(2147483647L);
      range2.intersection(range1);
      range2.getEnd(range_CoordinateSystem0);
      range1.getBegin();
      // Undeclared exception!
      try { 
        Range.of((-1L), (-1256L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.767479064589369
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-380L));
      range1.intersects(range1);
      long long1 = (-1281L);
      range_Builder0.contractBegin((-1281L));
      Range range2 = Range.ofLength(1024L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range2.getEnd(range_CoordinateSystem0);
      range0.endsBefore(range2);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1025L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.2397208470799024
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.320964579372711
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      range0.toString();
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.intersects(range1);
      range0.toString();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 4294967295 .. 4294967295 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 4294967295 .. 4294967295 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.534230071087523
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(4294967295L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.2402880620543777
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2904L, 2904L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.460175160841728
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-729L), 1L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.getBegin();
      range_Builder0.shift(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.contractBegin(1L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.162658804734221
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-189L), (-189L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range range1 = range_Builder0.build();
      range_Builder2.contractEnd((-1112L));
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(0L);
      range1.intersection(range2);
      Range range3 = range_Builder0.build();
      List<Range> list0 = new LinkedList<Range>();
      range3.complement(range0);
      Object object0 = new Object();
      range_Builder3.copy();
      range3.isEmpty();
      Range range4 = range_Builder3.build();
      range_Builder0.expandEnd((-189L));
      range_Builder2.build();
      Range range5 = Range.of(1023L);
      range5.getLength();
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder4.contractBegin((-189L));
      // Undeclared exception!
      try { 
        range4.split((-4376L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.5844045617925193
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2291L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2291L), (-2291L));
      Range.of((-2291L), (-2291L));
      List<Range> list0 = new LinkedList<Range>();
      List<Range> list1 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.split((-2291L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.982019678573242
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      long long1 = (-2147479830L);
      long long2 = 104L;
      Range range1 = Range.of((-2147479830L), 104L);
      range0.isSubRangeOf(range0);
      Range range2 = range1.intersection(range0);
      long long3 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 4294967295L);
      range_Builder0.contractEnd((-2292L));
      range_Builder0.shift(0L);
      Range.ofLength(0L);
      Range range3 = Range.of((-1668L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range4.complement(range3);
      range3.complementFrom(list0);
      range3.endsBefore(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.5873859858187425
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      long long0 = 0L;
      long long1 = 0L;
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(4294967295L, 3171L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.5624501226397607
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.copy();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1790L), (-1790L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("-b1ePiVhJK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.-b1ePiVhJK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.456309396343089
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.6925217141533686
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      Range.of(0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 30L);
      range_Builder0.shift((-380L));
      Range range2 = Range.ofLength(0L);
      range2.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.ofLength((-380L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.4108748164387572
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(1354L);
      Range.of(range_CoordinateSystem0, 2904L, 2904L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.2769981309902945
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      long long0 = 9223372036854775553L;
      Range.ofLength(9223372036854775553L);
      long long1 = 104L;
      // Undeclared exception!
      try { 
        Range.of(104L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.165754881412656
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.of(2906L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-69L), (-69L));
      range_Builder0.contractEnd((-3194L));
      range_Builder0.contractEnd(1505L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(509L);
      assertSame(range_Builder0, range_Builder1);
  }
}
