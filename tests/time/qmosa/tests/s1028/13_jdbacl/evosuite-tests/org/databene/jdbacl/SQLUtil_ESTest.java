/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:04:49 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.net.URL;
import java.util.List;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputText;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9871493526448465
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = SQLUtil.normalize("T=K$l0DjQr*13coB<", true);
      assertEquals("T = K $ l0DjQr * 13coB <", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(0, "T=K$l0DjQr*13coB<");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("T = K $ l0DjQr * 13coB <", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Js<c*Mu)$E,F$0p0$k", (DBTable) null, 0, "Js<c*Mu)$E,F$0p0$k");
      defaultDBColumn0.setNullable(true);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      VersionNumber.valueOf("T = K $ l0DjQr * 13coB <");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "T=K$l0DjQr*13coB<";
      stringArray0[1] = "H6cw\"s88b";
      stringArray0[2] = "H6cw\"s88b";
      stringArray0[3] = "T = K $ l0DjQr * 13coB <";
      stringArray0[4] = "Js<c*Mu)$E,F$0p0$k";
      stringArray0[5] = "T=K$l0DjQr*13coB<";
      stringArray0[6] = "Js<c*Mu)$E,F$0p0$k";
      String string1 = SQLUtil.renderColumnListWithTableName("H6cw\"s88b", stringArray0);
      assertEquals("H6cw\"s88b.T=K$l0DjQr*13coB<, H6cw\"s88b.H6cw\"s88b, H6cw\"s88b.H6cw\"s88b, H6cw\"s88b.T = K $ l0DjQr * 13coB <, H6cw\"s88b.Js<c*Mu)$E,F$0p0$k, H6cw\"s88b.T=K$l0DjQr*13coB<, H6cw\"s88b.Js<c*Mu)$E,F$0p0$k", string1);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.290099584263974
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2654), " as ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-2706));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ynsW", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      defaultDBTable0.getIndex(" as ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "GkjPX+)$tiAqh|k";
      stringArray0[1] = "STATE";
      stringArray0[2] = "wbf 3oGZ^";
      stringArray0[4] = " AS (-2706)";
      stringArray0[5] = " AS (-2706)";
      stringArray0[8] = "GkjPX+)$tiAqh|k";
      String string0 = SQLUtil.renderColumnListWithTableName("GkjPX+)$tiAqh|k", stringArray0);
      assertEquals("GkjPX+)$tiAqh|k.GkjPX+)$tiAqh|k, GkjPX+)$tiAqh|k.STATE, GkjPX+)$tiAqh|k.wbf 3oGZ^, GkjPX+)$tiAqh|k.null, GkjPX+)$tiAqh|k. AS (-2706), GkjPX+)$tiAqh|k. AS (-2706), GkjPX+)$tiAqh|k.null, GkjPX+)$tiAqh|k.null, GkjPX+)$tiAqh|k.GkjPX+)$tiAqh|k", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("ynsW, ynsW, ynsW, ynsW, ynsW, ynsW, ynsW, ynsW, ynsW", string1);
      
      String string2 = SQLUtil.renderColumn(dBColumnArray0[4]);
      assertEquals("ynsW  AS (-2706) NULL", string2);
      
      Character character0 = new Character('7');
      String string3 = SQLUtil.substituteMarkers("J:xV0*\"", "STATE", character0);
      assertEquals("J:xV0*\"", string3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9966392780576339
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "create table";
      SQLUtil.isProcedureCall("create table");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create table";
      SQLUtil.isProcedureCall("create table");
      SQLUtil.mutatesDataOrStructure("create table");
      StringBuilder stringBuilder0 = new StringBuilder(548);
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8596425309202056
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLUtil.normalize("VRE3,eC9KhK'r:&9", false);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition(".", stringBuilder0);
      String string0 = SQLUtil.renderValue(stringBuilder1);
      assertEquals(".", stringBuilder0.toString());
      assertEquals(".", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "select into";
      stringArray0[1] = "select into";
      stringArray0[2] = "select into";
      stringArray0[3] = "select into";
      stringArray0[4] = "select into";
      stringArray0[5] = "select into";
      stringArray0[6] = "select into";
      stringArray0[7] = "select into";
      stringArray0[8] = "select into";
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("select into", stringArray0, "execute", "select into", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.750709360322697
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("ResultSet type: ");
      dBPrimaryKeyConstraint0.setName("");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      dBPrimaryKeyConstraint0.setTable(defaultDBTable1);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      byte[] byteArray0 = new byte[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.isQuery("E");
      SQLUtil.isProcedureCall("ResultSet type: ");
      SQLUtil.mutatesDataOrStructure("E");
      NameSpec nameSpec0 = NameSpec.NEVER;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType.getInstance(0, "drop matriaized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)68;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-89);
      byteArray0[7] = (byte)109;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("(r-L/z}apcq.c");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (r-L/z}apcq.c
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0970992492955554
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/*";
      stringArray0[1] = "/*";
      stringArray0[2] = "/*";
      stringArray0[3] = "yyyy-MM-dd'T'HH:mm:ss.SSSSSS";
      SQLUtil.renderColumnListWithTableName("/*", stringArray0);
      SQLUtil.join((String) null, "yyyy-MM-dd'T'HH:mm:ss.SSSSSS", stringArray0, "", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a--L52U%1l?~!NG");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.parseColumnTypeAndSize("inner");
      SQLUtil.isProcedureCall("'BDx");
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure(" as  on yyyy-MM-dd'T'HH:mm:ss.SSSSSS./* = ./* and yyyy-MM-dd'T'HH:mm:ss.SSSSSS./* = ./* and yyyy-MM-dd'T'HH:mm:ss.SSSSSS./* = ./* and yyyy-MM-dd'T'HH:mm:ss.SSSSSS.yyyy-MM-dd'T'HH:mm:ss.SSSSSS = .yyyy-MM-dd'T'HH:mm:ss.SSSSSS");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2584261358947217
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2654), " as ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-2706));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ynsW", defaultDBTable0, dBDataType0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" AS (-2706)", string0);
      
      defaultDBTable0.getIndex(" as ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "GkjPX+)$tiAqh|k";
      stringArray0[1] = " 30hh q,nmNzmU";
      stringArray0[2] = "wbf 3oGZ^";
      stringArray0[4] = " AS (-2706)";
      stringArray0[5] = " AS (-2706)";
      stringArray0[8] = "GkjPX+)$tiAqh|k";
      SQLUtil.removeComments(" 30hh q,nmNzmU");
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("ynsW, ynsW, ynsW, ynsW, ynsW, ynsW, ynsW, ynsW, ynsW", string1);
      
      String string2 = SQLUtil.ownerDotComponent(defaultDBTable0);
      assertEquals("null", string2);
      
      boolean boolean0 = SQLUtil.isDDL("create tablealter tableay$r+:.qwe%e0m,#");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5061277556382293
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/*";
      stringArray0[1] = "/*";
      stringArray0[2] = "/*";
      stringArray0[3] = "yyyy-MM-dd'T'HH:mm:ss.SSSSSS";
      SQLUtil.renderColumnListWithTableName("/*", stringArray0);
      SQLUtil.join((String) null, "yyyy-MM-dd'T'HH:mm:ss.SSSSSS", stringArray0, "", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a--L52U%1l?~!NG");
      int int0 = 0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'{n53XB7*XIw<3u", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(518, (CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSSSS");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 518
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2700999245402291
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.normalize("drop matriaized view", true);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType.getInstance(0, "drop matriaized view");
      Integer integer0 = RawTransaction.ABORT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Js<c*Mu)$E,F$0p0$k", (DBTable) null, 0, "Js<c*Mu)$E,F$0p0$k");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Js<c*Mu)$E,F$0p0$k";
      stringArray0[1] = "drop matriaized view";
      stringArray0[2] = "drop matriaized view";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "Js<c*Mu)$E,F$0p0$k";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop matriaized view", stringArray0, "drop matriaized view", "drop matriaized view", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6379940485425777
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1524, "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-2706));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ynsW", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      defaultDBTable0.getIndex((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "/3w";
      stringArray0[2] = "";
      stringArray0[3] = "(3)";
      stringArray0[4] = " 30hh q,nmNzmU";
      SQLUtil.renderColumnListWithTableName("/3w", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6201083765043527
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2654), " as ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-2706));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ynsW", defaultDBTable0, dBDataType0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      defaultDBTable0.getIndex(" as ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "GkjPX+)$tiAqh|k";
      stringArray0[1] = " 30hh q,nmNzmU";
      stringArray0[2] = "wbf 3oGZ^";
      stringArray0[4] = " AS (-2706)";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[5] = " AS (-2706)";
      stringArray0[8] = "GkjPX+)$tiAqh|k";
      SQLUtil.renderColumnListWithTableName("GkjPX+)$tiAqh|k", stringArray0);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[8] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" as ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      MockFile mockFile0 = new MockFile("9,vfB6FG$)P!*-6Eb(", "<le9$r#F'");
      MockFile mockFile1 = new MockFile(mockFile0, "wbf 3oGZ^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      PrintWriter printWriter0 = mockPrintWriter0.append('b');
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.5732052067491771
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SQLUtil.normalize("[.|a0ziC2", false);
      DBDataType dBDataType0 = DBDataType.getInstance(0, "[.|a0ziC2");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[.| a0ziC2", (DBTable) null, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("8xmpxXQ", (DBTable) null, 0, "#A");
      defaultDBColumn0.setNullable(true);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      VersionNumber versionNumber0 = VersionNumber.valueOf("Js<c*Mu)$E,F$0p0$k");
      assertNotNull(versionNumber0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-81);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "5CEECK ";
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "%>QX{~[K,V\"(";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("%>QX{~[K,V\"(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: %>QX{~[K,V\"(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "random()";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)113;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("random()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5128768837332562
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(stringArray0[3], compositeDBObject0);
      tableContainer0.getSchema();
      SQLUtil.join("FOREIGN KEY ", "isc_info_firebird_version:", stringArray0, "FOREIGN KEY ", "select", stringArray0);
      SQLUtil.mutatesStructure("FOREIGN KEY  join FOREIGN KEY  as select on isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null");
      SQLUtil.isDML("delete");
      SQLUtil.removeComments("isc_info_firebird_version:");
      String string0 = "(";
      String string1 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized view", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(871, 1082L);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 871
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9117400734174094
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.normalize("drop matriaized view", true);
      String string0 = "rename";
      String string1 = "~\"h'%3RVr29XA {w3c[";
      String[] stringArray0 = new String[5];
      stringArray0[0] = "drop matriaized view";
      stringArray0[1] = "drop matriaized view";
      stringArray0[2] = "drop matriaized view";
      stringArray0[3] = "rename";
      stringArray0[4] = "=kp#mdHb}K";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.join("4hNfM-`PE],-", "~\"h'%3RVr29XA {w3c[", stringArray0, (String) null, "drop matriaized view", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SQLUtil.isProcedureCall("%)vq");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      VersionNumber.valueOf("DV0.<dI\"g_X");
      SQLUtil.substituteMarkers("%)vq", "execc*{}1g'jptw[lnw$z", "DV0.<dI\"g_X");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4610439264386184
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "create materialized viewxq?x}}f";
      stringArray1[1] = "";
      stringArray1[2] = "create materialized viewxq?x}}f";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "create materialized viewxq?x}}f", true, stringArray1);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec1);
      String string0 = null;
      SQLUtil.innerJoin("", stringArray1, "", "", stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "create materialized viewxq?x}}f");
      stringBuilder1.append(stringBuffer0);
      int int0 = 0;
      int int1 = 1204;
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) "create materialized viewxq?x}}f", 0, 1204);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 0, end 1204, s.length() 31
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2164456558508325
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/*";
      stringArray0[1] = "/*";
      stringArray0[2] = "/*";
      String string0 = "yyyy-MM-dd'T'HH:mm:ss.SSSSSS";
      stringArray0[3] = "yyyy-MM-dd'T'HH:mm:ss.SSSSSS";
      SQLUtil.renderColumnListWithTableName("/*", stringArray0);
      SQLUtil.join((String) null, "yyyy-MM-dd'T'HH:mm:ss.SSSSSS", stringArray0, "", "", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a--L52U%1l?~!NG");
      int int0 = 580;
      DBDataType dBDataType0 = DBDataType.getInstance(580, "SELECT * FROM ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, dBDataType0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[15];
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(stringArray0[3], compositeDBObject0);
      tableContainer0.getSchema();
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.typeAndName(tableContainer0);
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) nameSpec0;
      objectArray0[2] = (Object) stringArray0[0];
      StringBuilder stringBuilder0 = new StringBuilder("container null");
      SQLUtil.addOptionalCondition("container null", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns (, , , , , , , , , , , , , , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.275697228873461
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[3] = "random()";
      stringArray0[5] = "v4gM_uyy";
      stringArray0[6] = "v4gM_uyy";
      stringArray0[7] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      FileUtil.canonicalFile("v4gM_uyy");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "v4gM_uyy");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) charArrayWriter1;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2494688930810645
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isProcedureCall("create table");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "create table";
      boolean boolean0 = SQLUtil.isProcedureCall("create table");
      assertFalse(boolean0);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("foreign key");
      assertNull(boolean1);
      
      String string0 = SQLUtil.normalize("drop materialized view", false);
      assertEquals("drop materialized view", string0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition((String) null, stringBuilder0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(64, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "oRFkX%");
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleWithFixedDelay(mockThread0, 64, 64, timeUnit0);
      SQLUtil.renderValue(scheduledFuture0);
      String string1 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)113;
      byteArray0[3] = (byte)113;
      byteArray0[4] = (byte)113;
      MockURL.getHttpExample();
      SQLUtil.renderValue("random()");
      TableContainer tableContainer0 = new TableContainer("7dA256.@oY<)T}");
      assertEquals("7dA256.@oY<)T}", tableContainer0.getName());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}]+W:ro04Ir!aoB";
      stringArray0[1] = "4hNfM-`PE],-";
      stringArray0[2] = "LATIN5";
      stringArray0[3] = "LATIN5";
      stringArray0[4] = "LATIN5";
      String string0 = SQLUtil.join("LATIN5", "}]+W:ro04Ir!aoB", stringArray0, "rename", "~\"h'%3RVr29XA {w3c[", stringArray0);
      assertEquals("LATIN5 join rename as ~\"h'%3RVr29XA {w3c[ on }]+W:ro04Ir!aoB.}]+W:ro04Ir!aoB = ~\"h'%3RVr29XA {w3c[.}]+W:ro04Ir!aoB and }]+W:ro04Ir!aoB.4hNfM-`PE],- = ~\"h'%3RVr29XA {w3c[.4hNfM-`PE],- and }]+W:ro04Ir!aoB.LATIN5 = ~\"h'%3RVr29XA {w3c[.LATIN5 and }]+W:ro04Ir!aoB.LATIN5 = ~\"h'%3RVr29XA {w3c[.LATIN5 and }]+W:ro04Ir!aoB.LATIN5 = ~\"h'%3RVr29XA {w3c[.LATIN5", string0);
      
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(}]+W:ro04Ir!aoB, 4hNfM-`PE],-, LATIN5, LATIN5, LATIN5)", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.327732405703302
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)65;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[3] = (byte)113;
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.isQuery("random()");
      SQLUtil.isProcedureCall("%9C.Fc{_[XeY-6j");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("*v3){*<-TD`.#[W*H~T");
      assertNull(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.innerJoin("create materialized view", stringArray0, "create materialized view", "43Y04.U", stringArray0);
      assertEquals("create materialized view as 43Y04.U on ", string0);
      
      SQLUtil.renderColumnListWithTableName("43Y04.U", stringArray0);
      TableContainer tableContainer0 = new TableContainer("MERGE");
      tableContainer0.setDoc("");
      tableContainer0.getTable("create materialized view");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("^#ZETe/u?Y}Hd(", (DBTable) null, 512, "");
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string1);
      
      SQLUtil.parseColumnTypeAndSize("54~5'N=$B))LZl!e");
      DBColumn[] dBColumnArray0 = new DBColumn[4];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      String string2 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("^#ZETe/u?Y}Hd(, ^#ZETe/u?Y}Hd(, ^#ZETe/u?Y}Hd(, ^#ZETe/u?Y}Hd(", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.568155382556487
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("XQ?X}}FDXNXs+yneff");
      String string0 = "alter tablekh_ze{ph2x '";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "alter tablekh_ze{ph2x '";
      SQLUtil.renderColumnListWithTableName("alter tablekh_ze{ph2x '", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7114084334163704
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "execc*{}1g'jptw[lnw$z";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[6] = "random()";
      stringArray0[3] = "v4gM_uyy";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = null;
      stringArray0[1] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, false, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = null;
      stringArray1[1] = "v4gM_uyy";
      stringArray1[2] = "v4gM_uyy";
      stringArray1[3] = "v4gM_uyy";
      SQLUtil.renderWhereClause(stringArray1, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.mutatesStructure("constraint");
      String string0 = null;
      SQLUtil.join((String) null, "random()", stringArray0, "w|CO~.", "a`s,=E|}~", stringArray0);
      int int0 = (-1984645759);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-1984645759));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6937380924037475
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("", "wbf 3oGZ^", "");
      assertEquals("", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2654), " as ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = new Integer((-2706));
      Integer.toUnsignedLong((-2654));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ynsW", defaultDBTable0, dBDataType0, integer1);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" AS (-2706)", string1);
      
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, (-2654), "");
      String string2 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("  NULL", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wbf 3oGZ^";
      stringArray0[1] = "wbf 3oGZ^";
      stringArray0[2] = " as ";
      stringArray0[3] = " as ";
      stringArray0[4] = "ynsW";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("#", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string3 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT # FOREIGN KEY (wbf 3oGZ^, wbf 3oGZ^,  as ,  as , ynsW) REFERENCES null(wbf 3oGZ^, wbf 3oGZ^,  as ,  as , ynsW)", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "C8Li=V&F6ba?e-Y:H>";
      stringArray0[1] = "C8Li=V&F6ba?e-Y:H>";
      stringArray0[2] = "C8Li=V&F6ba?e-Y:H>";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "C8Li=V&F6ba?e-Y:H>";
      stringArray1[1] = "C8Li=V&F6ba?e-Y:H>";
      stringArray1[2] = "C8Li=V&F6ba?e-Y:H>";
      stringArray1[3] = "C8Li=V&F6ba?e-Y:H>";
      SQLUtil.innerJoin("C8Li=V&F6ba?e-Y:H>", stringArray0, "C8Li=V&F6ba?e-Y:H>", "C8Li=V&F6ba?e-Y:H>", stringArray1);
      String string0 = "alter session";
      boolean boolean0 = false;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-1984645759));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.741392687372129
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[4];
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer(stringArray0[3], compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(stringArray0[2], (DBSchema) null);
      SQLUtil.typeAndName(tableContainer0);
      Object[] objectArray0 = new Object[3];
      objectArray0[2] = (Object) stringArray0[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.944295773396046
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/*";
      stringArray0[1] = "/*";
      stringArray0[3] = "/*";
      stringArray0[3] = "yyyy-MM-dd'T'HH:mm:ss.SSSSSS";
      String string0 = SQLUtil.renderColumnListWithTableName("/*", stringArray0);
      assertEquals("/*./*, /*./*, /*.null, /*.yyyy-MM-dd'T'HH:mm:ss.SSSSSS", string0);
      
      String string1 = SQLUtil.join((String) null, "yyyy-MM-dd'T'HH:mm:ss.SSSSSS", stringArray0, "", "select", stringArray0);
      assertEquals(" as select on yyyy-MM-dd'T'HH:mm:ss.SSSSSS./* = select./* and yyyy-MM-dd'T'HH:mm:ss.SSSSSS./* = select./* and yyyy-MM-dd'T'HH:mm:ss.SSSSSS.null = select.null and yyyy-MM-dd'T'HH:mm:ss.SSSSSS.yyyy-MM-dd'T'HH:mm:ss.SSSSSS = select.yyyy-MM-dd'T'HH:mm:ss.SSSSSS", string1);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("a--L52U%1l?~!NG");
      DBDataType dBDataType0 = DBDataType.getInstance(580, "SELECT * FROM ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("/*", defaultDBTable0, dBDataType0);
      String string2 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("/* SELECT * FROM  NULL", string2);
      
      String string3 = SQLUtil.normalize("/*", true);
      assertEquals("", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      SQLUtil.removeComments("'");
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5693394030593097
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("XQ?X}}FDXNXs+yneff");
      assertNull(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("XQ?X}}FDXNXs+yneff", "XQ?X}}FDXNXs+yneff", (Object) null);
      assertEquals("null", string0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("null");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[1] = "Cost of ";
      stringArray0[2] = "+(:jut4UFz\":";
      SQLUtil.innerJoin("Cost of ", stringArray0, "Cost of ", "Cost of ", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "+(:jut4UFz\":";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("-`", stringArray0, stringArray0[0], "Cost of ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "B8>iQ(iT)?nmP1v>T[p";
      Boolean boolean0 = Boolean.TRUE;
      String string1 = "BLOB";
      SQLUtil.removeComments("BLOB");
      DBObject dBObject0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.544943664690598
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      SQLUtil.removeComments("");
      genericDescriptorList0.clear();
      TableContainer tableContainer0 = new TableContainer("");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-41);
      byteArray0[1] = (byte) (-41);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-41);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.parseColumnTypeAndSize("FSFhWx5E$R5K?Qw");
      SQLUtil.isQuery("");
      SQLUtil.isProcedureCall("");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Ku w");
      assertNull(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.810377258278942
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("CHECK ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "CHECK ";
      stringArray0[1] = "CHECK ";
      stringArray0[2] = "CHECK ";
      SQLUtil.join("CHECK ", "CHECK ", stringArray0, "CHECK ", "CHECK ", stringArray0);
      SQLUtil.mutatesStructure("CHECK ");
      String string0 = "delete";
      SQLUtil.isDML("CHECK ");
      SQLUtil.removeComments("CHECK ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("\"R!u");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete", false, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      int int0 = 871;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(871, (-200L));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 871
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "*", false, (String[]) null);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec1);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("Em=ea0HWB}J", (DBSchema) null);
      String string0 = SQLUtil.ownerDotComponent(dBSequence0);
      assertEquals("Em=ea0HWB}J", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[1] = "Em=ea0HWB}J";
      stringArray0[1] = "Em=ea0HWB}J";
      String string1 = SQLUtil.join("Em=ea0HWB}J", "w Y!9\"QB8eYLy", stringArray0, "&br>#e&V542|", "Em=ea0HWB}J", stringArray0);
      assertEquals("Em=ea0HWB}J join &br>#e&V542| as Em=ea0HWB}J on w Y!9\"QB8eYLy.null = Em=ea0HWB}J.null and w Y!9\"QB8eYLy.Em=ea0HWB}J = Em=ea0HWB}J.Em=ea0HWB}J", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3947817452377964
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[3] = "random()";
      stringArray0[5] = "v4gM_uyy";
      stringArray0[6] = "v4gM_uyy";
      stringArray0[7] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      FileUtil.canonicalFile("v4gM_uyy");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "v4gM_uyy");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1, true);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.524622061602005
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[3] = "random()";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = "v4gM_uyy";
      stringArray0[6] = "v4gM_uyy";
      stringArray0[7] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.innerJoin("7D;ARFm", stringArray0, "v4gM_uyy", (String) null, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "random()");
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      stringBuilder0.append((CharSequence) "random()", 0, 0);
      stringBuilder2.delete(0, 0);
      SQLUtil.addRequiredCondition("/Wq\"?$^d{V)", stringBuilder2);
      assertEquals("0random() and /Wq\"?$^d{V)", stringBuilder2.toString());
      assertEquals("0random() and /Wq\"?$^d{V)", stringBuilder0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%)vq", dBCatalog0);
      dBSchema0.getTable((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%)vq", dBSchema0);
      dBCatalog0.getSequences();
      String string0 = "";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("%)vq", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("%)vq", dBCatalog0);
      String string0 = null;
      dBSchema0.getTable((String) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("%)vq", dBSchema0);
      dBCatalog0.getSequences();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      SQLUtil.typeAndName(defaultDBTable0);
      SQLUtil sQLUtil0 = new SQLUtil();
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "%)vq.%)vq";
      stringArray1[1] = null;
      stringArray1[2] = "table %)vq";
      stringArray1[3] = "%)vq";
      stringArray1[4] = "%)vq.%)vq";
      stringArray1[5] = "%)vq.%)vq";
      stringArray1[6] = "%)vq.%)vq";
      stringArray1[7] = "!;q(U8J[#xYt1N7";
      String string1 = " AND ";
      stringArray1[8] = " AND ";
      SQLUtil.leftJoin("table %)vq", stringArray0, "%)vq", "%)vq", stringArray1);
      SQLUtil.typeAndName((DBObject) null);
      dBCatalog0.isIdentical((DBObject) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5277976729071816
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v4gM_uyy");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "random()";
      stringArray0[1] = "v4gM_uyy";
      stringArray0[2] = "v4gM_uyy";
      stringArray0[3] = "random()";
      stringArray0[4] = "v4gM_uyy";
      stringArray0[5] = "v4gM_uyy";
      stringArray0[6] = "v4gM_uyy";
      stringArray0[7] = "v4gM_uyy";
      stringArray0[8] = "random()";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "random()", true, stringArray0);
      dBUniqueConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.innerJoin("7D;ARFm", stringArray0, "v4gM_uyy", (String) null, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "random()");
      stringBuilder1.append(stringBuffer0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1871705644479302
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SQLUtil.normalize("drop materialized view", true);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBDataType dBDataType0 = DBDataType.getInstance(0, "drop materialized view");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop materialized view", (DBTable) null, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Js<c*Mu)$E,F$0p0$k", (DBTable) null, 0, "Js<c*Mu)$E,F$0p0$k");
      defaultDBColumn0.setNullable(true);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn1.setFractionDigits(integer1);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("truncate", (DBTable) null, 205, "");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      SQLUtil.mutatesStructure(".");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".";
      stringArray0[1] = "drop materialized view, Js<c*Mu)$E,F$0p0$k";
      stringArray0[2] = "Js<c*Mu)$E,F$0p0$k";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "";
      stringArray0[5] = "truncate";
      stringArray0[6] = "drop materialized view";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "drop materialized view";
      stringArray1[3] = "truncate";
      stringArray1[4] = "org.h2.expression.ExpressionVisitor";
      // Undeclared exception!
      try { 
        SQLUtil.join((String) null, "gC<Gl=35", stringArray0, "truncate", "drop materialized view", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "}]+W:ro04Ir!aoB";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "~\"h'%3RVr29XA {w3c[";
      stringArray1[1] = "4hNfM-`PE],-";
      stringArray1[2] = "}]+W:ro04Ir!aoB";
      stringArray1[3] = "drop materialized view";
      stringArray1[4] = "drop materialized view";
      stringArray1[5] = "~\"h'%3RVr29XA {w3c[";
      stringArray1[6] = "CHECK ";
      String string0 = SQLUtil.join("CHECK ", "Ut+H7b,|(de$)lAC2", stringArray0, "drop materialized view", "CHECK ", stringArray1);
      assertEquals("CHECK  join drop materialized view as CHECK  on Ut+H7b,|(de$)lAC2.}]+W:ro04Ir!aoB = CHECK .~\"h'%3RVr29XA {w3c[", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      PGConnectionPoolDataSource pGConnectionPoolDataSource1 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource1.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 360, "");
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.128183350293198
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "c*{}1G'jPTW[lnW$Z";
      stringArray0[1] = "c*{}1G'jPTW[lnW$Z";
      stringArray0[2] = "drop index";
      stringArray0[3] = "^&}I2#H";
      stringArray0[4] = null;
      stringArray0[5] = "MAXVALUE";
      stringArray0[6] = null;
      String string0 = SQLUtil.innerJoin((String) null, stringArray0, "drop index", "MAXVALUE", stringArray0);
      assertEquals("drop index as MAXVALUE on null.c*{}1G'jPTW[lnW$Z = MAXVALUE.c*{}1G'jPTW[lnW$Z and null.c*{}1G'jPTW[lnW$Z = MAXVALUE.c*{}1G'jPTW[lnW$Z and null.drop index = MAXVALUE.drop index and null.^&}I2#H = MAXVALUE.^&}I2#H and null.null = MAXVALUE.null and null.MAXVALUE = MAXVALUE.MAXVALUE and null.null = MAXVALUE.null", string0);
      
      String string1 = SQLUtil.leftJoin("^&}I2#H", stringArray0, "inner", ")", stringArray0);
      assertEquals("left join inner as ) on ^&}I2#H.c*{}1G'jPTW[lnW$Z = ).c*{}1G'jPTW[lnW$Z and ^&}I2#H.c*{}1G'jPTW[lnW$Z = ).c*{}1G'jPTW[lnW$Z and ^&}I2#H.drop index = ).drop index and ^&}I2#H.^&}I2#H = ).^&}I2#H and ^&}I2#H.null = ).null and ^&}I2#H.MAXVALUE = ).MAXVALUE and ^&}I2#H.null = ).null", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String string0 = "";
      boolean boolean0 = true;
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      NameSpec nameSpec0 = NameSpec.NEVER;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, 360, "");
      defaultDBColumn0.getForeignKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.533948555176578
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("c*{}1G'jPTW[lnW$Z");
      SQLUtil.isDDL("BMV)rT~KDO");
      SQLUtil sQLUtil0 = new SQLUtil();
      MockFile mockFile0 = new MockFile("alter tableay$r+:.qwe%e0m,#");
      mockFile0.setWritable(false);
      FileUtil.canonicalFile((File) mockFile0);
      URL uRL0 = MockURL.getHttpExample();
      SQLUtil.mutatesStructure("alter tableay$r+:.qwe%e0m,#");
      MockURL.getHttpExample();
      MockURL.toURI(uRL0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-98);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-74);
      SQLUtil.parseColumnTypeAndSize("create materialized viewforeign key join foreign key as select on isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null and isc_info_firebird_version:.null = select.null");
      SQLUtil.isProcedureCall("ARX!^C");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" NOT NULL");
      assertNull(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("c*{}1G'jPTW[lnW$Z");
      SQLUtil.isDDL("c*{}1G'jPTW[lnW$Z");
      MockFile mockFile0 = new MockFile("alter tableay$r+:.qwe%e0m,#");
      mockFile0.delete();
      mockFile0.setWritable(true);
      FileUtil.canonicalFile((File) mockFile0);
      MockURL.getHttpExample();
      String string0 = "7dA256.@oY<w1)T}";
      DBConstraint dBConstraint0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("7dA256.@oY<w1)T}", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      DBColumn dBColumn0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1392921128169875
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SQLUtil.mutatesStructure(" +/- SELECT COUNT(*) FROM ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("/*", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      RowOutputText rowOutputText0 = new RowOutputText("/*", "J@$scTj|,>Ai2ndn", "J@$scTj|,>Ai2ndn", false, "xqY8djo");
      defaultDBTable0.setDoc("g^pUn*Dm061oQuHE");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputText0, false);
      mockPrintWriter0.print((-1.0));
      mockPrintWriter0.format("xqY8djo", (Object[]) stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("/*", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7813719133938317
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SQLUtil.mutatesStructure("}r01u1gP|8QD&5$i`");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
