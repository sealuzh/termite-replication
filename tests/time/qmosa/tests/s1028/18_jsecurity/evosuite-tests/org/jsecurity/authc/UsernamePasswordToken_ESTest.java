/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:33:43 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.472942726245813
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken((String) null, (String) null, true);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName((String) null);
      char[] charArray0 = new char[8];
      charArray0[4] = 'N';
      charArray0[1] = '5';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      usernamePasswordToken0.clear();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      assertEquals("/192.168.1.42", inetAddress0.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      char[] charArray0 = new char[8];
      charArray0[2] = 'o';
      charArray0[3] = '=';
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("']3N+&0q7JT)=R<", "']3N+&0q7JT)=R<", false, inetAddress0);
      usernamePasswordToken0.clear();
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      assertFalse(inetAddress1.isMCNodeLocal());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[7];
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("EceI;rM9s$-", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.getPassword();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, inetAddress0);
      usernamePasswordToken0.toString();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (/192.168.1.42)", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[7];
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("EceI;rM9s$-", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setPassword(charArray0);
      char[] charArray1 = usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", "", true);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPrincipal();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[4];
      charArray0[3] = ',';
      charArray0[2] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=true (/192.168.1.42)", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'R';
      charArray0[1] = '.';
      charArray0[2] = '\\';
      charArray0[3] = 'L';
      charArray0[4] = '1';
      charArray0[5] = 'K';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%XZ#TJ)o{lRS*hW|}", charArray0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[9];
      charArray0[0] = '}';
      charArray0[1] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      charArray0[4] = ',';
      charArray0[5] = ',';
      charArray0[6] = ',';
      charArray0[7] = ',';
      charArray0[8] = ',';
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8587438218223364
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("8>w*rq=ju", "", true);
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.toString();
      char[] charArray0 = usernamePasswordToken0.getPassword();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setPassword(charArray0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setUsername("8>w*rq=ju");
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setUsername("8>w*rq=ju");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - 8>w*rq=ju, rememberMe=false", string0);
      
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getPrincipal();
      Object object0 = new Object();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("sVh$-zm%C[&%mh^", "PB:^??y!:QY'XSAE%");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - sVh$-zm%C[&%mh^, rememberMe=false", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("E9[w6Ud9:#Qmx}9", (String) null, true, inetAddress0);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[7];
      charArray0[2] = '8';
      charArray0[1] = ':';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = 'a';
      charArray0[5] = '4';
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false, (InetAddress) null);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[4];
      charArray0[2] = ',';
      charArray0[2] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("_?s3", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'K';
      charArray0[2] = 'N';
      charArray0[3] = '~';
      charArray0[4] = '.';
      charArray0[5] = '0';
      charArray0[6] = 's';
      charArray0[7] = '~';
      charArray0[8] = 'V';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", charArray0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true);
      usernamePasswordToken0.getCredentials();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[4];
      charArray0[2] = ',';
      charArray0[2] = ',';
      charArray0[2] = ',';
      charArray0[3] = ',';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("_?s3", charArray0, inetAddress0);
      usernamePasswordToken0.setUsername("_?s3");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      Object object0 = new Object();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "Dh", inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      charArray0[1] = 'I';
      charArray0[2] = 'n';
      charArray0[3] = '3';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("TnXVo5m9F#1qb,0}", charArray0, true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - TnXVo5m9F#1qb,0}, rememberMe=true", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Td<ql6)I}t", "Fz4q|#Sj6jS1-$si");
      char[] charArray0 = new char[8];
      charArray0[1] = 'R';
      charArray0[2] = 'T';
      charArray0[3] = 'a';
      charArray0[4] = '&';
      charArray0[5] = '`';
      charArray0[6] = 'v';
      charArray0[7] = 'J';
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("'7M", "", true);
      usernamePasswordToken0.setRememberMe(false);
      assertFalse(usernamePasswordToken0.isRememberMe());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("{]T:z/W#%z", "");
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[7];
      charArray0[0] = '8';
      charArray0[1] = ':';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte) (-21);
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [76, -59, 61, 11, -21]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = 'f';
      charArray0[1] = 'T';
      charArray0[2] = '!';
      charArray0[3] = 'O';
      charArray0[4] = '9';
      charArray0[5] = '}';
      charArray0[6] = 'n';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("u", charArray0, true);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
