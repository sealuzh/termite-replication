/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:40:48 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.059102325924267
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat("-omitEncoding", true, "5fgoC");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-omitEncoding";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "5fgoC";
      stringArray0[3] = "NVI(vX0$tB( ^";
      stringArray0[4] = "-omitEncoding";
      outputFormat0.parseOptions(stringArray0, 4076);
      OutputFormat outputFormat2 = new OutputFormat("-omitEncoding", true);
      assertFalse(outputFormat2.isOmitEncoding());
      
      int int0 = outputFormat2.parseOptions(stringArray0, 1);
      assertTrue(outputFormat2.isOmitEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1782530169774805
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags((-884));
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterNTags((-2474));
      outputFormat1.setNewlines(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setEncoding((String) null);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[1];
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setXHTML(true);
      outputFormat0.parseOptions(stringArray0, 39);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      
      outputFormat3.setOmitEncoding(true);
      outputFormat2.getEncoding();
      boolean boolean0 = outputFormat3.isOmitEncoding();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.112646050581686
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[3];
      outputFormat0.setExpandEmptyElements(false);
      stringArray0[1] = "-padText";
      stringArray0[2] = ",2<XlSz^2P";
      outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isPadText());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isPadText());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.792923193994996
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent("-indentSize");
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(true);
      outputFormat0.isOmitEncoding();
      outputFormat1.getEncoding();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-indentSize";
      outputFormat2.setIndentSize(0);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.792923193994996
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat1.setIndent("-indentSize");
      OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(true);
      outputFormat0.isOmitEncoding();
      outputFormat1.getEncoding();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-indentSize";
      outputFormat2.setIndentSize(0);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("\n", true, "Czu9ZDhphHx}X");
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NVI(vX0$tB( ^";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      stringArray0[3] = "Czu9ZDhphHx}X";
      stringArray0[4] = "Czu9ZDhphHx}X";
      stringArray0[5] = "NVI(vX0$tB( ^";
      stringArray0[6] = "NVI(vX0$tB( ^";
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.getEncoding();
      outputFormat0.setIndent((String) null);
      assertFalse(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4943744364005296
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&Ie,mbRrs]tX'";
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.parseOptions(stringArray0, 0);
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat0.isXHTML();
      outputFormat3.setIndent("-expandEmpty-hUZa,");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat3.setXHTML(true);
      outputFormat1.setPadText(true);
      String string0 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6568671789549314
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", true, "-expandEmpty");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setEncoding("r|Rv<jllh");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty";
      stringArray0[1] = "-expandEmpty";
      outputFormat1.setNewLineAfterNTags(1);
      stringArray0[2] = "-expandEmpty";
      stringArray0[3] = "r|Rv<jllh";
      stringArray0[4] = "xPB}Rq2_(ic+";
      stringArray0[5] = "r|Rv<jllh";
      stringArray0[6] = "r|Rv<jllh";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat0.setNewLineAfterNTags(5133);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getNewLineAfterNTags();
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat1.getEncoding();
      outputFormat0.setIndent("r|Rv<jllh");
      assertEquals(5133, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.944797816169571
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      int int0 = (-1408);
      outputFormat0.setIndentSize((-1408));
      outputFormat0.setPadText(false);
      outputFormat0.setAttributeQuoteCharacter('\'');
      outputFormat0.isXHTML();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String string0 = null;
      outputFormat1.setLineSeparator((String) null);
      outputFormat1.setIndentSize(94);
      outputFormat0.getAttributeQuoteCharacter();
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-512));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -512
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.857186997743457
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      OutputFormat outputFormat0 = new OutputFormat((String) null);
      outputFormat0.setEncoding((String) null);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat.createPrettyPrint();
      outputFormat0.setOmitEncoding(false);
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isXHTML());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals("  ", outputFormat2.getIndent());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertTrue(outputFormat2.isPadText());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertTrue(outputFormat2.isNewlines());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isPadText());
      assertTrue(outputFormat1.isNewlines());
      assertEquals("  ", outputFormat1.getIndent());
      
      OutputFormat outputFormat2 = new OutputFormat();
      assertFalse(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isNewlines());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = ";xS|`1";
      stringArray0[3] = "-xhtmlCzu9ZDhphHx}X";
      stringArray0[4] = "z$n.{Bkm";
      stringArray0[5] = "Invalid attribute quote character (";
      stringArray0[6] = "'dlj#lL$aUfH(Q";
      stringArray0[7] = "-lineSeparator";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "Qu\"\"Veb";
      stringArray1[1] = "'dlj#lL$aUfH(Q";
      outputFormat0.parseOptions(stringArray1, 2);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4994467946012942
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding");
      OutputFormat outputFormat1 = new OutputFormat("NVI(vX0$tB( ^", false, "-encoding");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "NVI(vX0$tB( ^";
      stringArray0[2] = "";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat0.setOmitEncoding(true);
      outputFormat1.getEncoding();
      assertEquals("NVI(vX0$tB( ^", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8602912106037675
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags((-884));
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewlines(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      outputFormat0.getNewLineAfterNTags();
      assertEquals((-884), outputFormat0.getNewLineAfterNTags());
      
      OutputFormat outputFormat2 = new OutputFormat("", true);
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat3.getIndent());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat0.isPadText());
      assertTrue(outputFormat0.isTrimText());
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = new OutputFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat2.isNewlines());
      assertTrue(outputFormat2.isTrimText());
      
      outputFormat1.setIndent((String) null);
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertFalse(outputFormat1.isNewlines());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isOmitEncoding());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isPadText());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "-hUZa,CUS -{\"";
      OutputFormat outputFormat0 = new OutputFormat("-hUZa,CUS -{\"", true, (String) null);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setPadText(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setNewlines(true);
      outputFormat0.setEncoding("");
      outputFormat0.setPadText(true);
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals("", outputFormat0.getEncoding());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8760707436641795
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("xJq2TIAa", false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isXHTML();
      outputFormat0.setIndent("xJq2TIAa");
      outputFormat0.setIndentSize(39);
      outputFormat0.setIndent(true);
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "xJq2TIAa";
      stringArray0[1] = "xJq2TIAa";
      stringArray0[2] = "xJq2TIAa";
      stringArray0[3] = "xJq2TIAa";
      stringArray0[4] = "xJq2TIAa";
      stringArray0[5] = "xJq2TIAa";
      stringArray0[6] = "vFn--mg%";
      stringArray0[7] = "xJq2TIAa";
      outputFormat0.parseOptions(stringArray0, 34);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterNTags((-2226));
      outputFormat0.setIndent((String) null);
      boolean boolean0 = outputFormat0.isNewlines();
      assertEquals((-2226), outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6352034547224137
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "vJ%qO=}x(";
      OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isPadText());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.614587722538201
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("xJq2TIAa", false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isXHTML();
      outputFormat0.setIndent("xJq2TIAa");
      outputFormat0.setIndentSize(39);
      outputFormat0.setIndent(true);
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "xJq2TIAa";
      stringArray0[1] = "xJq2TIAa";
      stringArray0[2] = "xJq2TIAa";
      stringArray0[3] = "xJq2TIAa";
      stringArray0[4] = "xJq2TIAa";
      stringArray0[5] = "xJq2TIAa";
      stringArray0[6] = "vFn--mg%";
      stringArray0[7] = "xJq2TIAa";
      outputFormat0.setIndent(false);
      outputFormat0.setTrimText(false);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('}');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (})
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7757456023992884
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      int int0 = (-884);
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "5fgoC=57;v,Y'";
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-995));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -995
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7377285573432877
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterNTags((-884));
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      boolean boolean0 = false;
      outputFormat1.setNewlines(false);
      int int0 = 0;
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('&');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (&)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5436118176366946
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.isPadText();
      outputFormat0.setXHTML(true);
      outputFormat0.setEncoding("-hUZa,");
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-hUZa,", outputFormat0.getEncoding());
      
      outputFormat1.setOmitEncoding(true);
      String string0 = outputFormat1.getEncoding();
      assertEquals("UTF-8", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.179921228284246
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterNTags((-884));
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setNewlines(false);
      outputFormat0.setNewLineAfterNTags(0);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize((-1915826481));
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setIndent(false);
      outputFormat3.setNewlines(true);
      outputFormat2.setIndent(false);
      outputFormat2.setNewLineAfterDeclaration(true);
      outputFormat2.setPadText(false);
      outputFormat3.setIndentSize((-1915826481));
      outputFormat2.setPadText(true);
      outputFormat2.setExpandEmptyElements(false);
      outputFormat1.isPadText();
      outputFormat1.isNewlines();
      outputFormat1.setIndentSize(0);
      outputFormat0.setPadText(false);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      
      outputFormat3.isTrimText();
      outputFormat3.isSuppressDeclaration();
      outputFormat2.setPadText(false);
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.215638826201224
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.isPadText();
      outputFormat0.setXHTML(true);
      outputFormat0.setEncoding("-hUZa,");
      assertEquals("-hUZa,", outputFormat0.getEncoding());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-hUZa,";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.setOmitEncoding(true);
      String string0 = outputFormat1.getEncoding();
      assertEquals("UTF-8", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.getIndent();
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.134504361713703
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = ";xS|`1";
      stringArray0[3] = "-xhtmlCzu9ZDhphHx}X";
      stringArray0[4] = "z$n.{Bkm";
      stringArray0[5] = ";xS|`1";
      outputFormat2.setIndentSize(1);
      stringArray0[6] = "'dlj#lL$aUfH(Q";
      stringArray0[7] = "-lineSeparator";
      stringArray0[8] = "_vQiA";
      outputFormat2.parseOptions(stringArray0, 1);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "-xhtmlCzu9ZDhphHx}X";
      stringArray1[1] = "Qu\"\"Veb";
      outputFormat0.parseOptions(stringArray1, 934);
      outputFormat1.parseOptions(stringArray0, 1);
      assertEquals(";xS|`1", outputFormat1.getLineSeparator());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat3.getIndent());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "-hUZa,CUS -{\"";
      stringArray0[4] = "xPB}Rq2_(ic+";
      stringArray0[5] = "r|Rv<jllh";
      stringArray0[6] = "r|Rv<jllh";
      OutputFormat outputFormat0 = new OutputFormat("s|2B.goZI4&#d", true);
      outputFormat0.getLineSeparator();
      outputFormat0.setLineSeparator("\n");
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1591119326368067
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags((-884));
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setIndentSize((-884));
      outputFormat1.setNewlines(false);
      outputFormat1.setIndent(false);
      outputFormat0.setNewLineAfterNTags(0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "~,Ab&TK@WXmMwfz5|]Y";
      stringArray0[2] = "~,Ab&TK@WXmMwfz5|]Y";
      stringArray0[3] = "~,Ab&TK@WXmMwfz5|]Y";
      stringArray0[4] = "~,Ab&TK@WXmMwfz5|]Y";
      stringArray0[3] = "~,Ab&TK@WXmMwfz5|]Y";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat1.setNewlines(false);
      assertFalse(outputFormat1.isPadText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "-hUZa,CUS -{\"";
      stringArray0[4] = "xPB}Rq2_(ic+";
      stringArray0[5] = "r|Rv<jllh";
      stringArray0[6] = "r|Rv<jllh";
      OutputFormat outputFormat0 = new OutputFormat("r|Rv<jllh");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('.');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (.)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7590479998760498
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterDeclaration(true);
      assertTrue(outputFormat0.isOmitEncoding());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Invalid attribute quote character (";
      stringArray0[1] = "Invalid attribute quote character (";
      stringArray0[2] = "Invalid attribute quote character (";
      stringArray0[3] = "3I5<";
      stringArray0[4] = "0:e!_";
      stringArray0[5] = "";
      stringArray0[6] = "-lineSeparator";
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3634541894442356
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Czu9ZDhphHx}X", true, "NVI(vX0$tB( ^");
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Czu9ZDhphHx}X";
      stringArray0[1] = "Czu9ZDhphHx}X";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getEncoding();
      assertTrue(outputFormat0.isOmitEncoding());
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.3647979493149665
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "z$n.{Bkm";
      stringArray0[1] = "-expandEmptyEcH@sIkLHRc/O";
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "z$n.{Bkm";
      stringArray0[5] = "'dlj#lL$aUf(Q";
      stringArray0[6] = "-xhtmlCzu9ZDhphHx}X";
      stringArray0[7] = ";xS|`1";
      stringArray0[8] = "_vQiA";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.651760534930837
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(false);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      outputFormat1.setIndent(false);
      OutputFormat.createCompactFormat();
      stringArray0[2] = "kxS1`1";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.215792481524769
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = new OutputFormat();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "Qu\"\"Veb";
      stringArray0[2] = "kxS1`1";
      stringArray0[3] = "-xhtmlCzu9ZDhphHx}X";
      stringArray0[4] = "z$n.{Bkm";
      stringArray0[5] = "Invalid attributerquote charact]r (";
      stringArray0[6] = "'dlj#lL$aUfH(Q";
      stringArray0[7] = "-lineSeparator";
      stringArray0[8] = "_vQiA";
      outputFormat1.parseOptions(stringArray0, 1);
      outputFormat0.setXHTML(true);
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertEquals("Qu\"\"Veb", outputFormat1.getLineSeparator());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2182325184989784
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent(true);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "-xhtmlCzu9ZDhphHx}X";
      stringArray0[4] = "z$n.{Bkm";
      stringArray0[5] = "Invalid attribute quote character (";
      stringArray0[6] = "'dlj#lL$aUfH(Q";
      stringArray0[7] = "-lineSeparator";
      outputFormat0.parseOptions(stringArray0, 1);
      assertEquals("-lineSeparator", outputFormat0.getLineSeparator());
      
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertTrue(outputFormat2.isTrimText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0413203841951786
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[9];
      outputFormat0.setTrimText(true);
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "Qu\"\"Veb";
      stringArray0[2] = "kxS1`1";
      stringArray0[3] = "-xhtmlCzu9ZDhphHx}X";
      stringArray0[4] = "z$n.{Bkm";
      stringArray0[5] = "Invalid attribute quote character (";
      stringArray0[6] = "'dlj#lL$aUfH(Q";
      stringArray0[7] = "-lineSeparator";
      stringArray0[8] = "_vQiA";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isTrimText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.5209868197862835
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("a<$bPwB1*)&0", false);
      outputFormat0.getLineSeparator();
      outputFormat0.setPadText(false);
      outputFormat0.setExpandEmptyElements(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setXHTML(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setIndent(false);
      outputFormat0.setNewLineAfterNTags(2048);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\n";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      outputFormat0.parseOptions(stringArray0, 967);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndent(false);
      outputFormat0.setTrimText(false);
      outputFormat0.isOmitEncoding();
      outputFormat0.isTrimText();
      outputFormat0.getIndent();
      OutputFormat.createCompactFormat();
      outputFormat0.setEncoding("\n");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setPadText(true);
      assertTrue(outputFormat0.isPadText());
      
      String string0 = outputFormat1.getLineSeparator();
      assertEquals("\n", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = false;
      OutputFormat outputFormat0 = new OutputFormat("Czu9ZDhphHx}X", false, "Czu9ZDhphHx}X");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Czu9ZDhphHx}X";
      stringArray0[1] = "-expandEmpty\n";
      stringArray0[2] = "NVI(vX0$tB( ^";
      stringArray0[3] = "Czu9ZDhphHx}X";
      stringArray0[4] = "Czu9ZDhphHx}X";
      stringArray0[5] = "Czu9ZDhphHx}X";
      stringArray0[6] = "NVI(vX0$tB( ^";
      stringArray0[7] = "-expandEmpty~,Ab&TK@WXmMwfz5|]Y";
      stringArray0[8] = "NVI(vX0$tB( ^";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-hUZaCUS -{\"", true, "-hUZaCUS -{\"");
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("-hUZaCUS -{\"", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("-hUZaCUS -{\"", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9440256153973703
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize(0);
      outputFormat0.setNewlines(false);
      outputFormat0.setXHTML(false);
      outputFormat0.setPadText(false);
      outputFormat1.isNewlines();
      outputFormat1.isNewlines();
      String string0 = outputFormat0.getIndent();
      assertEquals("", string0);
      
      outputFormat1.isXHTML();
      outputFormat0.setIndent(true);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.852140740384332
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setPadText(true);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setTrimText(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setLineSeparator("");
      outputFormat0.setTrimText(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setTrimText(false);
      OutputFormat outputFormat1 = new OutputFormat("", true);
      outputFormat1.setLineSeparator("T1XaPxp+{Z4gl");
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.isTrimText();
      boolean boolean0 = outputFormat1.isNewlines();
      assertEquals("T1XaPxp+{Z4gl", outputFormat1.getLineSeparator());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.108225184091854
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isExpandEmptyElements());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-expandEmpty3I5<";
      stringArray0[2] = "kxS1`1";
      stringArray0[3] = "-xhtmlCzu9ZDhphHx}X";
      stringArray0[4] = "z$n.{Bkm";
      stringArray0[5] = "Invalid attribute quote character (";
      stringArray0[6] = "'dlj#lL$aUfH(Q";
      stringArray0[7] = "-lineSeparator";
      stringArray0[8] = "_vQiA";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5407000528031478
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Czu9ZDhphHx}X", true, "NVI(vX0$tB( ^");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Czu9ZDhphHx}X";
      stringArray0[1] = "-hUZa,CUS -{\"";
      stringArray0[2] = "-hUZa,CUS -{\"";
      stringArray0[3] = "xPB}Rq2_(ic+";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setNewLineAfterNTags(8);
      outputFormat0.isExpandEmptyElements();
      outputFormat0.getNewLineAfterNTags();
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals(8, outputFormat0.getNewLineAfterNTags());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9060618009193138
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-padText";
      stringArray0[1] = "HcxK0 GfD`}iJunU+_";
      stringArray0[2] = "}lr{e<U:";
      stringArray0[3] = "UTF-8";
      stringArray0[4] = "cQ)h%Ud'L.zKml";
      stringArray0[5] = "";
      stringArray0[6] = "-omitEncoding";
      stringArray0[7] = "\n";
      stringArray0[8] = "BV<U%<x!dXA";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertEquals(1, int0);
      
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("  ", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(boolean0);
      assertTrue(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding");
      outputFormat0.setEncoding("-encoding");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "NVI(vX0$tB( ^";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "V]a3iN{$ W^6kiQl";
      outputFormat0.parseOptions(stringArray0, 2049);
      outputFormat0.setOmitEncoding(true);
      assertEquals("-encoding", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[3] = "-hUZa,CUS -{\"";
      stringArray0[4] = "xPB}Rq2_(ic+";
      stringArray0[5] = "r|Rv<jllh";
      stringArray0[6] = "r|Rv<jllh";
      OutputFormat outputFormat0 = new OutputFormat("r|Rv<jllh", false, "#Bt;WR6aP5QoDkY7");
      String string0 = outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("r|Rv<jllh", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", string0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("#Bt;WR6aP5QoDkY7", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }
}
