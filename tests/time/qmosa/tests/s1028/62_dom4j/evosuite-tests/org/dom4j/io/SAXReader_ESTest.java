/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:51:55 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.setProperty(";ehJpuHQ~vU", ";ehJpuHQ~vU");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property ';ehJpuHQ~vU' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.getDocumentFactory();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.49649273994102
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(349);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("-.n]", "-.n]");
      SAXReader sAXReader1 = new SAXReader(false);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isValidating());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isStripWhitespaceText());
      
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3911765450520486
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      String string0 = "";
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      sAXReader0.resetHandlers();
      inputSource0.getEncoding();
      URI uRI0 = MockURI.URI("http://xml.org/sax/handlers/LexicalHandler", "", "http://xml.org/sax/handlers/LexicalHandler");
      URL uRL0 = MockURI.toURL(uRI0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@31a606e4 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@31a606e4 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3747573122360364
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setParent(xMLFilterImpl1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-76);
      xMLFilterImpl0.resolveEntity("http://xml.org/sax/properties/lexical-handler", "QsFCUy'*");
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-76);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      String string0 = "HS>\"h8>q^";
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "HS>\"h8>q^");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      QName qName0 = new QName(":");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName1 = defaultDocumentFactory0.createQName("org.dom4j.io.SAXReader$SAXEntityResolver", "", "org.dom4j.io.SAXReader$SAXEntityResolver");
      defaultDocumentFactory0.getQNames();
      qName0.equals(qName1);
      MockFile mockFile0 = new MockFile("]a9jO(S>5");
      mockFile0.createNewFile();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.isIncludeInternalDTDDeclarations();
      int int0 = (-388);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-388));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[0];
      int int0 = 720;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 720, 24);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "lDU=D?P[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.992740721271704
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(")&0]ewcCx2ImVj");
      sAXReader_SAXEntityResolver0.resolveEntity(")&0]ewcCx2ImVj", "PQ5~^=v_~u");
      sAXReader_SAXEntityResolver0.resolveEntity("^Zd6", "^Zd6");
      boolean boolean1 = sAXReader0.isStringInternEnabled();
      assertFalse(boolean1 == boolean0);
      
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      
      sAXReader0.isValidating();
      sAXReader0.setXMLReader((XMLReader) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("");
      sAXReader0.setDispatchHandler(dispatchHandler0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      StringReader stringReader0 = new StringReader("^Zd6");
      sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", (Object) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      inputSource0.setPublicId("AbB|:%ihcY)mp");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5022378744527134
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      QName qName0 = new QName("");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      sAXReader1.isStringInternEnabled();
      sAXReader1.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      sAXReader0.getDocumentFactory();
      sAXReader0.isValidating();
      sAXReader1.setXMLReader((XMLReader) null);
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      dispatchHandler0.removeHandler("http://xml.org/sax/handlers/LexicalHandler");
      String string0 = "";
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName((String) null, "http://xml.org/sax/handlers/LexicalHandler", "");
      defaultDocumentFactory0.getQNames();
      MockFile mockFile0 = new MockFile("YunE~d(eS9!s");
      mockFile0.createNewFile();
      sAXReader1.setDocumentFactory((DocumentFactory) null);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.setPublicId("org.dom4j.io.PruningDispatchHandler");
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      xMLFilterImpl0.getDTDHandler();
      DefaultDocument defaultDocument0 = new DefaultDocument("<nHaC>O^<Q.");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      URI uRI0 = MockURI.aHttpURI;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.getDTDHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.datatype.DatatypeElement");
      sAXReader_SAXEntityResolver0.resolveEntity("3:bXl_?~;@e-#/", "Nested exception: ");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl2);
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      ElementStack elementStack0 = new ElementStack(1321);
      elementStack0.getDispatchHandler();
      pruningDispatchHandler0.setDefaultHandler(pruningDispatchHandler0);
      pruningDispatchHandler1.removeHandler("\"0~,raEP\"jub&QNiE^");
      DefaultDocument defaultDocument0 = new DefaultDocument("aQ{&LP)<\"");
      assertEquals("Document", defaultDocument0.getNodeTypeName());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5010693989799213
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(".En) >9&M`7v");
      sAXReader_SAXEntityResolver0.resolveEntity(".En) >9&M`7v", "CaHcg s|bKWp:kG#");
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.getXMLReader();
      // Undeclared exception!
      try { 
        sAXReader1.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getDTDHandler();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      sAXReader0.getEntityResolver();
      String string0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.createXMLReader();
      xMLFilterImpl1.endElement("file://", (String) null, "wyn.[");
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl2);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      xMLFilterImpl0.getDTDHandler();
      StringReader stringReader0 = new StringReader("~j");
      try { 
        sAXReader0.read((Reader) null, "~j");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@547e095e Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@547e095e Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("ATTRIBUTE_NODE");
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertNotNull(xMLReader0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.getErrorHandler();
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      SAXReader sAXReader1 = new SAXReader((DocumentFactory) null);
      sAXReader1.createDefaultEntityResolver("");
      URL uRL0 = MockURL.getFtpExample();
      // Undeclared exception!
      try { 
        MockURL.openStream(uRL0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2009388382289825
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 720, 1);
      InputSource inputSource0 = new InputSource(byteArrayInputStream0);
      inputSource0.setPublicId((String) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      QName qName0 = new QName(":");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":");
      sAXReader_SAXEntityResolver0.resolveEntity("`5=E5", ":");
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3497427651978415
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      QName qName0 = new QName("=-/>xD&_~7*X");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      MockFile mockFile0 = new MockFile("=-/>xD&_~7*X");
      mockFile0.createNewFile();
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl1);
      xMLFilterImpl0.notationDecl("Notation", "Notation", "Notation");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLReaderAdapter0.setDTDHandler(xMLFilterImpl0);
      String string0 = "k<R,n8";
      xMLFilterImpl0.endPrefixMapping("k<R,n8");
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      parserAdapter0.getErrorHandler();
      parserAdapter0.startDocument();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.isIgnoreComments();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      ElementStack elementStack0 = new ElementStack(11);
      elementStack0.popElement();
      // Undeclared exception!
      try { 
        dispatchHandler0.onStart(elementStack0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.DispatchHandler", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      sAXReader0.removeHandler("");
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setStringInternEnabled(true);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler("", sAXModifyElementHandler0);
      try { 
        sAXReader0.setProperty("", "");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      QName qName0 = new QName(":");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.setStringInternEnabled(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      List<QName> list0 = new LinkedList<QName>();
      MockFile mockFile0 = new MockFile("");
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.439208409093167
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endElement("//home/ubuntu/termite/projects/62_dom4j/sOAR.MA?J}\"iH]", "//home/ubuntu/termite/projects/62_dom4j/sOAR.MA?J}\"iH]", "");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLReader0, defaultHandler2_0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'n';
      charArray0[2] = '\"';
      charArray0[3] = '*';
      charArray0[4] = ',';
      charArray0[5] = 'z';
      charArray0[6] = '(';
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      try { 
        sAXReader0.read("O=0b-R>~sMY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: O=0b-R>~sMY Nested exception: no protocol: O=0b-R>~sMY
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<!--");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, true);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      defaultDocumentFactory0.getQNames();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultDocument defaultDocument0 = new DefaultDocument("5&Eq>WiQy3s:CFnu\"Ml");
      assertNull(defaultDocument0.getXMLEncoding());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.40249355993943
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<!--");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      String string0 = "}Zn";
      defaultDocumentFactory0.createQName("}Zn", "}Zn", "}Zn");
      defaultDocumentFactory0.getQNames();
      MockFile mockFile0 = new MockFile("-L");
      mockFile0.setExecutable(true);
      mockFile0.createNewFile();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      sAXReader0.createXMLReader();
      sAXReader0.getEntityResolver();
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.5163129739334824
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.setXMLReader(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      stringReader0.mark(349);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLReader0, defaultHandler2_0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'g';
      charArray0[1] = 'n';
      charArray0[2] = '\"';
      charArray0[3] = '*';
      charArray0[4] = ',';
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("");
      sAXReader0.addHandler("", (ElementHandler) null);
      charArray0[5] = 'z';
      charArray0[6] = '(';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0, "O=0b-R>~sMY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.338123915578089
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.getQNames();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("y");
      sAXReader_SAXEntityResolver0.resolveEntity("_p^3HA*H2n", "//home/ubuntu/termite/projects/62_dom4j/]a9jO(S>5");
      StringReader stringReader0 = new StringReader("Validation not supported for XMLReader: ");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
          URI uRI0 = MockURI.aHttpURI;
          URL uRL0 = MockURI.toURL(uRI0);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"foo.bar\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"foo.bar\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor207.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      xMLFilterImpl0.getDTDHandler();
      xMLFilterImpl0.setDTDHandler(xMLFilterImpl1);
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("//home/ubuntu/termite/projects/62_dom4j/]a9jO(S>5");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/]a9jO(S>5 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("ATTRIBUTE_NODE");
      try { 
        sAXReader0.setProperty("http://xml.org/sax/features/string-interning", documentFactory0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'http://xml.org/sax/features/string-interning' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.getQNames();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXReader sAXReader1 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader1.createContentHandler(xMLFilterImpl0);
      sAXReader1.setErrorHandler(sAXContentHandler0);
      xMLFilterImpl0.getDTDHandler();
      xMLFilterImpl0.setDTDHandler(sAXContentHandler0);
      sAXReader1.setMergeAdjacentText(true);
      // Undeclared exception!
      try { 
        MockURL.URL("//home/ubuntu/termite/projects/62_dom4j/sOAR.MA?J}\"iH]", "y", 47, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.Parts", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6423676011521207
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl1);
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setMergeAdjacentText(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      pruningDispatchHandler0.setDefaultHandler(dispatchHandler0);
      pruningDispatchHandler0.removeHandler((String) null);
      sAXReader0.addHandler((String) null, pruningDispatchHandler0);
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.setEntityResolver(xMLFilterImpl1);
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      try { 
        sAXReader0.read("e l4Bd?^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: e l4Bd?^ Nested exception: no protocol: e l4Bd?^
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4650276902273234
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = new QName("", namespace0);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setEncoding("");
      try { 
        sAXReader0.read("17)2nw<y)UkcD@:");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 17)2nw<y)UkcD@: Nested exception: no protocol: 17)2nw<y)UkcD@:
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      MockFile mockFile0 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/sOAR.MA?J}\"iH]");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.removeHandler("'ajYmY4HD3w8v");
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.setValidation(true);
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'n';
      charArray0[2] = '\"';
      charArray0[3] = '*';
      charArray0[4] = ',';
      charArray0[6] = '(';
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEntityResolver(xMLFilterImpl0);
      sAXReader0.getEntityResolver();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.tree.LazyList$Entry");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.LazyList$Entry", "O=0b-R>~sMY");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setValidation(true);
      sAXReader0.getDispatchHandler();
      sAXReader0.setEncoding(" data: ");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      SAXReader sAXReader1 = new SAXReader(xMLReader0);
      sAXReader1.setXMLReader(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader1.setXMLFilter(xMLFilterImpl0);
      String string0 = "~j";
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl2);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      xMLFilterImpl0.getDTDHandler();
      try { 
        sAXReader0.setFeature("~j", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: ~j
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setIgnoreComments(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStripWhitespaceText(true);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      xMLFilterImpl0.getDTDHandler();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      boolean boolean1 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean1 == boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7287107014185685
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.isStripWhitespaceText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(")&0]ewcCx2ImVj");
      sAXReader_SAXEntityResolver0.resolveEntity(")&0]ewcCx2ImVj", "PQ5~^=v_~u");
      sAXReader_SAXEntityResolver0.resolveEntity("^Zd6", "^Zd6");
      sAXReader0.isStringInternEnabled();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      sAXReader0.getDocumentFactory();
      sAXReader0.isValidating();
      sAXReader0.setXMLReader((XMLReader) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-49);
      byteArray0[4] = (byte) (-1);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getParent();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.createXMLReader();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.setContentHandler(xMLFilterImpl2);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      xMLFilterImpl0.getParent();
      try { 
        sAXReader0.setXMLReaderClassName("//home/ubuntu/termite/projects/62_dom4j/-L");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/-L not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      String string0 = "org.dom4j.tree.AbstractAttribute";
      sAXReader0.isStripWhitespaceText();
      String string1 = "";
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      QName qName0 = new QName("=-/>xD&_~7*X");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read("=-/>xD&_~7*X");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: =-/>xD&_~7*X Nested exception: no protocol: =-/>xD&_~7*X
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("WmYdJ8LF`?z1a ;F");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = null;
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler("mwt\"VSgV:Q");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      try { 
        MockURL.URL("org.dom4j.io.SAXHelper", (String) null, (-2342), "org.dom4j.io.SAXHelper", (URLStreamHandler) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: org.dom4j.io.saxhelper
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      URI uRI0 = MockURI.aHttpURI;
      MockURI.toURL(uRI0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("//home/ubuntu/termite/projects/62_dom4j/-L", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //home/ubuntu/termite/projects/62_dom4j/-L not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getType("");
      xMLFilterImpl0.startElement("http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces", "http://xml.org/sax/features/namespaces", attributes2Impl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read("org.dom4j.tree.AbstractAttribute");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String string0 = "=-/>xD&_~7*X";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      QName qName0 = new QName("=-/>xD&_~7*X");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)53;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Invalid byte 1 of 1-byte UTF-8 sequence. Nested exception: Invalid byte 1 of 1-byte UTF-8 sequence.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(true);
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/AaMgg/4*rbg26X:_Rz~";
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/AaMgg/4*rbg26X:_Rz~");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }
}
