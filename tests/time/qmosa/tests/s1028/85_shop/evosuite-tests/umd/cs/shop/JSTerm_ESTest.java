/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:41:50 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6469111032549804
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.makeVariable();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.503333204440867
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("ka4,dC");
      StringReader stringReader1 = new StringReader("ka4,dC");
      StringReader stringReader2 = new StringReader("@-Uj-#b}v~?");
      stringReader2.mark(0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader("$tFYQB6$TPioZQaVP5");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      streamTokenizer1.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) stringReader1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add(object0);
      jSSubstitution0.add((Object) stringReader1);
      JSTerm jSTerm2 = jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 1073;
      JSJshopVars.lessT = 1073;
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5221724228151077
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "(";
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.print();
      Object object1 = new Object();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object object2 = jSTerm0.get(0);
      jSTerm0.add(object2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7888932710725727
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("X]9=6)");
      streamTokenizer0.quoteChar(46);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.print();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) streamTokenizer1;
      objectArray0[2] = (Object) streamTokenizer0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm3;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) stringReader0;
      objectArray0[7] = (Object) jSTerm2;
      stringReader0.skip((-299L));
      jSTerm3.toArray(objectArray0);
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.get(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 32
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5356274215834405
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[?%%%]", jSTerm3.toString());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7547579433186486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution1);
      System.setCurrentTimeMillis(264L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8254582001216564
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.equals(jSTerm1);
      jSTerm0.standardizerTerm();
      jSTerm1.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(");
      stringReader0.markSupported();
      char[] charArray0 = new char[2];
      stringReader0.markSupported();
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 2628.0976079;
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4053827769455363
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("v{aiable");
      StringReader stringReader2 = new StringReader("vvariable");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.print();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "v{aiable");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.or(predicate1);
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.exclamation = 118;
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.534543410743332
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.call();
      JSJshopVars.interrogation = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("% ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "% ";
      StringReader stringReader1 = new StringReader("% ");
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[4] = 'Z';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.quoteChar((-4));
      StringReader stringReader2 = new StringReader("");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(125);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.75659017825207
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("X]9=6)");
      streamTokenizer0.quoteChar(46);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.isFunction();
      jSTerm2.toStr();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4122733884873107
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("v{aiable");
      StringReader stringReader2 = new StringReader("vvariable");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.print();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) stringReader0;
      Object object1 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.413213043134847
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.817452344103205
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.equals(jSTerm1);
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertEquals("[?%%%0]", jSTerm3.toString());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
      
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm0);
      assertEquals(1, jSSubstitution0.size());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8800221234841177
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("variable");
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
      assertEquals("[?%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.555090656133836
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm1.isVariable());
      
      jSSubstitution1.add(object0);
      jSTerm1.applySubstitutionT((JSSubstitution) null);
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      jSTerm1.call();
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.821677893445988
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("X]9=6)");
      streamTokenizer0.quoteChar(46);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution0.spliterator();
      jSTerm2.clonePF();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution1);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.clone();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution4);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.listIterator();
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution3.forEach(consumer0);
      jSSubstitution4.addElement(stringReader1);
      jSTerm0.removeAll(jSSubstitution5);
      jSSubstitution0.add((Object) spliterator0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm6 = jSTerm5.applySubstitutionT(jSSubstitution3);
      jSTerm2.isGround();
      JSTerm jSTerm7 = jSTerm6.call();
      System.setCurrentTimeMillis(32);
      boolean boolean0 = jSTerm7.equals(jSTerm2);
      assertEquals(6.0, streamTokenizer1.nval, 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.660462928323659
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("?}");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.quoteChar(91);
      jSTerm0.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) null);
      jSSubstitution3.addElement(jSSubstitution4);
      jSTerm0.removeAll(jSSubstitution3);
      Object object0 = jSTerm0.lastElement();
      assertEquals("?%%%", object0);
      
      jSSubstitution3.add((Object) "?%%%");
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution5);
      boolean boolean0 = jSTerm2.isGround();
      assertFalse(boolean0);
      
      jSTerm1.call();
      jSTerm2.call();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution2);
      assertFalse(jSTerm0.isFunction());
      assertEquals(10, jSTerm3.capacity());
      assertFalse(jSTerm3.isFunction());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(")oZb#kS}wj9]}QgsK[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      System.setCurrentTimeMillis(41);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7158154575024773
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("X]9=6)");
      streamTokenizer0.quoteChar(46);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      jSTerm0.add((Object) "Expecting variable name in term");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) "X]9=6)");
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      JSTerm jSTerm4 = jSTerm3.call();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSTerm4;
      objectArray0[1] = (Object) jSTerm4;
      jSTerm3.toArray(objectArray0);
      jSTerm1.call();
      jSTerm4.cloneT();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("% ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "variable";
      StringReader stringReader1 = new StringReader("% ");
      char[] charArray0 = new char[5];
      streamTokenizer0.ttype = (int) 'd';
      charArray0[1] = 'Z';
      charArray0[2] = 'p';
      charArray0[3] = '}';
      charArray0[4] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.compact();
      charBuffer0.codePoints();
      stringReader1.read(charBuffer0);
      stringReader1.read(charBuffer0);
      streamTokenizer0.sval = "% ";
      stringReader1.markSupported();
      streamTokenizer0.quoteChar(100);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?&}");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.631009606547895
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "Expecting variable name in term";
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.isGround();
      JSSubstitution jSSubstitution0 = jSTerm3.matches(jSTerm0);
      stringReader0.reset();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm5.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting Term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals(1, jSTerm1.size());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.552323360536352
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSJshopVars.VarCounter = (-403);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertTrue(jSTerm4.isFunction());
      assertNotSame(jSTerm4, jSTerm3);
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.749595555302334
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isVariable());
      
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.call();
      JSJshopVars.interrogation = (-1);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm3.isFunction());
      assertTrue(jSTerm3.isVariable());
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm3.isConstant());
      assertEquals("[?%%%0]", jSTerm3.toString());
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1050296313349124
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceil");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.print();
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      jSTerm1.makeConstant();
      jSTerm1.isVariable();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("vvariable");
      stringReader1.mark(716);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      StringReader stringReader3 = new StringReader("vvariable");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.413861375019163
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("T#~3'e]fov=6'i}'d&t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(42, 0);
      jSTerm0.isGround();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "BI/}mt^?-;/");
      jSSubstitution0.add((Object) "BI/}mt^?-;/");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      String string0 = "7.0";
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(");
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      StringReader stringReader1 = new StringReader("D%FB'ze~9-nNo&Q8_0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5223619021075714
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ceil");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      stringReader0.reset();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.382797757078264
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      JSJshopVars.apostrophe = 65;
      boolean boolean1 = jSTerm0.isGround();
      assertFalse(boolean1 == boolean0);
      
      JSJshopVars.astherisk = 43;
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      jSTerm0.removeIf(predicate3);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis((-4021L));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6328137802152098
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("7.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0572842263623
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.containsAll(jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeFunction();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isEval();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution2);
      StringReader stringReader0 = new StringReader("b0*<+B}'idM@a5");
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSJshopVars.coma = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(");
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      stringReader0.close();
      charArray0[1] = 'C';
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.clone();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("% ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "variable";
      StringReader stringReader1 = new StringReader("% ");
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'Z';
      charArray0[2] = 'l';
      stringReader0.read();
      charArray0[3] = '}';
      charArray0[4] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.compact();
      charBuffer0.codePoints();
      stringReader1.read(charBuffer0);
      stringReader1.read(charBuffer0);
      streamTokenizer0.sval = "% ";
      stringReader1.markSupported();
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("variable");
      StringReader stringReader1 = new StringReader("?}");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(43);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("?1zfD#8VO");
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isConstant();
      jSTerm0.isConstant();
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("v{aiable");
      StringReader stringReader2 = new StringReader("vvariable");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.and(predicate0);
      predicate2.or(predicate1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeIf(predicate0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1985574616803634
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis((-210L));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.648103709098749
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vvariable");
      StringReader stringReader1 = new StringReader("?}");
      StringReader stringReader2 = new StringReader("?}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm1.call();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm2.isFunction());
      assertTrue(boolean0);
      assertEquals(10, jSTerm2.capacity());
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7185533731902765
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.coma = 0;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.call();
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.matches(jSTerm1);
      jSTerm0.matches(jSTerm2);
      assertTrue(jSTerm0.isEval());
      
      jSTerm2.matches(jSTerm1);
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("variable");
      StringReader stringReader1 = new StringReader("?}");
      stringReader1.mark(43);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals(5, stringBuffer0.length());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("variable");
      StringReader stringReader1 = new StringReader("?}");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(43);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a% ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "variable";
      StringReader stringReader1 = new StringReader("a% ");
      stringReader1.markSupported();
      streamTokenizer0.quoteChar((-1084));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      assertFalse(jSTerm0.isEval());
      assertFalse(jSTerm0.isVariable());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("% ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "variable";
      StringReader stringReader1 = new StringReader("% ");
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      charArray0[1] = 'Z';
      charArray0[2] = 'l';
      charArray0[3] = '\u0086';
      charArray0[4] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.compact();
      charBuffer0.codePoints();
      stringReader1.read(charBuffer0);
      stringReader1.read(charBuffer0);
      streamTokenizer0.sval = "% ";
      StringReader stringReader2 = new StringReader("/I6tg<]$k0>@.0]y[9&");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSJshopVars.coma = (-2440);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("a~(=MMI.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
