/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 11:11:19 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapToolBar;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsConfiguration;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URISyntaxException;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.ResourceBundle;
import java.util.Vector;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.plaf.basic.BasicListUI;
import javax.swing.plaf.multi.MultiTreeUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.svggen.DefaultExtensionHandler;
import org.apache.batik.svggen.ImageHandlerBase64Encoder;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.ElemEmpty;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.Tile;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0867512227489686
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object[][] objectArray0 = new Object[4][9];
      Object[] objectArray1 = new Object[1];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray0[1] = objectArray1;
      Object[] objectArray2 = new Object[3];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray2);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, (-1591), "day", (-1591), 316);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getClientProperty(jDayChooser0);
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.393281863136727
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(302, (-1331), 302, (-1331), 302, 302);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(164, color0.getBlue());
      
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.240224004636059
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(302, (-1331), 302, (-1331), 302, 302);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=302,MONTH=-1331,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=302,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-1331,HOUR_OF_DAY=-1331,MINUTE=302,SECOND=302,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setWeekOfYearVisible(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      jDayChooser0.repaint((-2324), 7, 7, 185);
      MockDate mockDate0 = new MockDate();
      System.setCurrentTimeMillis(302);
      jDayChooser0.setWeekdayForeground(color0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-16754012), color0.getRGB());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.054112235052666
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getFocusTraversalKeys(0);
      jDayChooser0.setDay(39);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-143));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.362889887330625
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("day");
      PrintStream printStream0 = mockPrintStream0.append(' ');
      jDayChooser0.list(printStream0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 8, 8, 8, 1906, (-195));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      int int0 = jDayChooser1.getDay();
      assertEquals(14, int0);
      
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser1.setSelectableDateRange((Date) null, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(false);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2895512107969527
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getDaysInMonth();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3470), 8745, 8745, 14, 41, (-3225));
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-3470,MONTH=8745,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=8745,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=41,SECOND=-3225,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      jDayChooser0.setWeekOfYearVisible(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.getWeekdayForeground();
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar((-1578), 1958, 14, 36, 238);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      StyleContext styleContext1 = StyleContext.getDefaultStyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext1.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext1.new NamedStyle("day", styleContext_NamedStyle0);
      Style style0 = defaultStyledDocument0.addStyle("day", styleContext_NamedStyle1);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle(style0);
      styleContext0.addAttribute(styleContext_NamedStyle2, locale0, jDayChooser_DecoratorButton0);
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_NamedStyle0);
      jDayChooser0.setFont(font0);
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.240224004636059
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setAlwaysFireDayProperty(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      DefaultCaret defaultCaret0 = new DefaultCaret();
      int int0 = (-3708);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 6, 6, 8262, (-3708), '2');
      FileSystemHandling.shouldAllThrowIOExceptions();
      keyEvent0.consume();
      jDayChooser0.keyReleased(keyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.isFocusable();
      ElemEmpty elemEmpty0 = new ElemEmpty();
      ImageHandlerBase64Encoder imageHandlerBase64Encoder0 = new ImageHandlerBase64Encoder();
      DefaultExtensionHandler defaultExtensionHandler0 = new DefaultExtensionHandler();
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(elemEmpty0, imageHandlerBase64Encoder0, defaultExtensionHandler0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.274187885506905
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.firePropertyChange("sG.DC'{^yr]y#nL", (-409), (-409));
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      StyleContext styleContext0 = new StyleContext();
      int int0 = 0;
      Color color0 = Color.getColor("AE", 0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setWeekOfYearVisible(true);
      int int1 = (-608);
      char char0 = '`';
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      BrowseMode browseMode0 = new BrowseMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.15095160531416
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.weekOfYearVisible = false;
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.addInputMethodListener((InputMethodListener) null);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.dayBordersVisible = true;
      jDayChooser0.setMonth(2398);
      jDayChooser0.isDecorationBordersVisible();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "i3a YA?(}Q<VVgQA";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.133718079257485
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMonth(5);
      jDayChooser0.setFocus();
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      Color color0 = null;
      try {
        color0 = new Color((ColorSpace) null, floatArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      System.setCurrentTimeMillis(100L);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2021652724202685
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      int int0 = 0;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      int int1 = (-4230);
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBordersVisible(true);
      BasicListUI basicListUI0 = new BasicListUI();
      Vector<Integer> vector0 = new Vector<Integer>();
      JList<Integer> jList0 = new JList<Integer>(vector0);
      int int0 = 0;
      MultiTreeUI multiTreeUI0 = new MultiTreeUI();
      try { 
        MockURI.URI("day", "i", "i", "i", "day");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: day://ii?i#day
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day");
      jCheckBoxMenuItem0.getAccelerator();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 8935, 8935, 8935, 8935, 'B');
      AWTKeyStroke.getAWTKeyStrokeForEvent(keyEvent0);
      jDayChooser0.getActionForKeyStroke((KeyStroke) null);
      jDayChooser0.setYear((-4292));
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isWeekOfYearVisible();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.getGraphicsConfiguration();
      JFrame jFrame0 = null;
      try {
        jFrame0 = new JFrame("H2#Z6z", (GraphicsConfiguration) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 873, 0, 0, 81);
      MockDate mockDate0 = new MockDate();
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals((-6029312), color0.getRGB());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(false);
      int int0 = 2517;
      Class<StyledEditorKit.UnderlineAction> class0 = StyledEditorKit.UnderlineAction.class;
      jDayChooser0.yearChooser = null;
      jDayChooser0.getListeners(class0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2517);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1700179605675673
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockPrintStream mockPrintStream0 = new MockPrintStream("day");
      PrintStream printStream0 = mockPrintStream0.append(' ');
      jDayChooser0.list(printStream0);
      jDayChooser0.transferFocusUpCycle();
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.getColorModel();
      MockDate mockDate0 = new MockDate(2336, (-698), (-698), 2336, 2336, (-698));
      jDayChooser0.setDebugGraphicsOptions(2336);
      mockDate0.getTime();
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.remove(2336);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2336
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0918164583074423
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFocusTraversalKeys(0);
      jDayChooser0.setDay(0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "B;~^:u PR_w^Nx#R");
      jDayChooser0.addListeners(0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1295660810286687
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object[][] objectArray0 = new Object[4][9];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray1[1] = (Object) jDayChooser0;
      objectArray1[2] = (Object) jDayChooser0;
      objectArray1[3] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[1];
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[3];
      objectArray3[0] = (Object) jDayChooser0;
      objectArray3[1] = (Object) jDayChooser0;
      objectArray3[2] = (Object) jDayChooser0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[3];
      objectArray4[0] = (Object) jDayChooser0;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Windows";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      jDayChooser0.getDaysInMonth();
      JDayChooser jDayChooser1 = new JDayChooser();
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(0);
      jDayChooser0.initDecorations();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser1.drawDays();
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.134574116897396
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getDaysInMonth();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      jDayChooser0.initDecorations();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Vector<String> vector0 = new Vector<String>();
      List<String> list0 = ResourceBundle.Control.FORMAT_CLASS;
      ResourceBundle.Control.getNoFallbackControl(list0);
      Locale locale0 = Locale.KOREAN;
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      MindMapToolBar mindMapToolBar0 = null;
      try {
        mindMapToolBar0 = new MindMapToolBar((MindMapController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.MindMapToolBar", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.205447973345968
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDay();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setAlwaysFireDayProperty(false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object[][] objectArray0 = new Object[4][9];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray1[1] = (Object) jDayChooser0;
      objectArray1[2] = (Object) jDayChooser0;
      objectArray1[3] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[1];
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[3];
      objectArray3[0] = (Object) jDayChooser0;
      objectArray3[1] = (Object) jDayChooser0;
      objectArray3[2] = (Object) jDayChooser0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[3];
      objectArray4[0] = (Object) jDayChooser0;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Windows";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      jDayChooser0.drawDays();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1708624547780904
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferedImage bufferedImage0 = Tile.LOADING_IMAGE;
      bufferedImage0.getSubimage(5, 5, 5, 5);
      jMonthChooser0.checkImage((Image) bufferedImage0, (ImageObserver) jDayChooser0);
      jMonthChooser0.transferFocusBackward();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      StyleContext styleContext0 = new StyleContext();
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("0", styleContext_NamedStyle0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, (-25), (-33), 0, 7);
      StyledEditorKit.UnderlineAction styledEditorKit_UnderlineAction0 = new StyledEditorKit.UnderlineAction();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) styledEditorKit_UnderlineAction0;
      objectArray0[1] = null;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 0);
      styleContext0.addAttribute(styleContext_NamedStyle0, styledEditorKit_UnderlineAction0, defaultTableModel0);
      Font font0 = styleContext0.getFont((AttributeSet) styleContext_NamedStyle1);
      jDayChooser0.setFont(font0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.drawWeeks();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2055218749828893
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.initDecorations();
      jDayChooser0.isDecorationBackgroundVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jMonthChooser0.transferFocusBackward();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Class<StyledEditorKit.UnderlineAction> class0 = StyledEditorKit.UnderlineAction.class;
      jDayChooser_DecoratorButton0.getListeners(class0);
      jDayChooser_DecoratorButton0.isRequestFocusEnabled();
      jDayChooser_DecoratorButton0.isFocusable();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "page", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, (-1289L), 3, 0, '@', 0);
      jDayChooser0.keyTyped(keyEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1677717028005006
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = false;
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(true);
      jDayChooser0.initDecorations();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Vector<String> vector0 = new Vector<String>();
      // Undeclared exception!
      try { 
        ResourceBundle.Control.getNoFallbackControl(vector0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ResourceBundle$Control", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object[][] objectArray0 = new Object[4][9];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray1[1] = (Object) jDayChooser0;
      objectArray1[2] = (Object) jDayChooser0;
      objectArray1[3] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[1];
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[3];
      objectArray3[0] = (Object) jDayChooser0;
      objectArray3[1] = (Object) jDayChooser0;
      objectArray3[2] = (Object) jDayChooser0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[3];
      objectArray4[0] = (Object) jDayChooser0;
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser0.removeFocusListener(defaultCaret0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Windows";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.2023052875885787
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Object[][] objectArray0 = new Object[4][9];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = (Object) jDayChooser0;
      objectArray1[1] = (Object) jDayChooser0;
      objectArray1[2] = (Object) jDayChooser0;
      objectArray1[3] = (Object) jDayChooser0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[1];
      objectArray2[0] = (Object) jDayChooser0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[3];
      objectArray3[0] = (Object) jDayChooser0;
      objectArray3[1] = (Object) jDayChooser0;
      objectArray3[2] = (Object) jDayChooser0;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[3];
      objectArray4[0] = (Object) jDayChooser0;
      objectArray4[1] = (Object) jDayChooser0;
      objectArray4[2] = (Object) jDayChooser0;
      objectArray0[3] = objectArray4;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JTable jTable0 = new JTable(objectArray0, objectArray1);
      Rectangle rectangle0 = jTable0.getCellRect(6, 6, false);
      rectangle0.setSize(42, 6);
      jDayChooser0.repaint(rectangle0);
      jDayChooser0.getAccessibleContext();
      jDayChooser0.isFocusable();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setEnabled(true);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(boolean0);
      
      jDayChooser0.updateUI();
      jDayChooser0.initDecorations();
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.169993336394016
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = new Locale("z!,OdP]8iN");
      jDayChooser0.setLocale(locale0);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isPaintingTile();
      GraphicContext graphicContext0 = new GraphicContext();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[5];
      try { 
        ICC_Profile.getInstance("day");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file day
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 100, "u]U-C!Q[z", 2974, 14);
      ActionEvent actionEvent1 = new ActionEvent(actionEvent0, 100, "u]U-C!Q[z", 0L, 14);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.ActionEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
