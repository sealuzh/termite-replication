/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:51:20 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.Proxy;
import java.net.Socket;
import java.sql.SQLDataException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import java.sql.SQLTransientConnectionException;
import java.sql.SQLTransientException;
import java.util.HashMap;
import java.util.Stack;
import java.util.Vector;
import messages.Message;
import messages.global.SessionListMsg;
import messages.round.BombExplodedMsg;
import messages.round.TileHitPlayerMsg;
import messages.session.PlayerInfo;
import messages.session.SessionParticipationMsg;
import org.apache.log4j.helpers.LogLog;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      String string0 = "6WZpR)c";
      SQLDataException sQLDataException0 = new SQLDataException("client.network.ClientMsgReceiver", "6WZpR)c");
      Vector<Integer> vector0 = new Vector<Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      BombExplodedMsg bombExplodedMsg0 = new BombExplodedMsg((-1882), vector0, vector0, stack0, false);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      int int0 = (-46);
      TileHitPlayerMsg tileHitPlayerMsg0 = new TileHitPlayerMsg((-1882));
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(bombExplodedMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = null;
      SQLDataException sQLDataException0 = new SQLDataException(string0, string0);
      String string1 = "";
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException(string0, string1, sQLDataException0);
      Throwable throwable0 = sQLDataException0.initCause(sQLTimeoutException0);
      String string2 = "Lost connection to server!";
      SQLTransientException sQLTransientException0 = new SQLTransientException(string2, throwable0);
      int int0 = 31;
      Stack<Integer> stack0 = new Stack<Integer>();
      boolean boolean0 = true;
      BombExplodedMsg bombExplodedMsg0 = new BombExplodedMsg(int0, stack0, stack0, stack0, boolean0);
      boolean boolean1 = true;
      int int1 = 2583;
      String string3 = "JSRd#";
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(boolean1, int1, string3);
      clientMsgReceiver0.processMsg(sessionParticipationMsg0);
      String string4 = "";
      SQLTransientException sQLTransientException1 = new SQLTransientException(string4, sQLTransientException0);
      String string5 = "";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string5);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BomberClient bomberClient0 = BomberClient.getInstance();
      MockSocket mockSocket0 = new MockSocket();
      MockThread.interrupted();
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = true;
      boolean boolean2 = false;
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean1, boolean2);
      Vector<PlayerInfo> vector0 = new Vector<PlayerInfo>();
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      Vector<Integer> vector1 = new Vector<Integer>();
      Stack<Integer> stack1 = new Stack<Integer>();
      Stack<Integer> stack2 = new Stack<Integer>();
      Vector<Integer> vector2 = new Vector<Integer>();
      Vector<Integer> vector3 = new Vector<Integer>();
      SessionListMsg sessionListMsg0 = new SessionListMsg();
      MockSocket mockSocket1 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket1, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(sessionListMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte) (-66);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(4694);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      System.setCurrentTimeMillis((-2242L));
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      BomberClient bomberClient0 = BomberClient.getInstance();
      Socket socket0 = bomberClient0.server;
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(socket0, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BomberClient bomberClient0 = BomberClient.getInstance();
      MockSocket mockSocket0 = new MockSocket();
      byte byte0 = (byte)1;
      EvoSuiteFile evoSuiteFile0 = null;
      MockThread.interrupted();
      String string0 = ";<WK[M\\DG]uAq?Ke3";
      String string1 = "";
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string1, string0, byte0);
      int int0 = (-3858);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string0, string1, int0, sQLNonTransientConnectionException0);
      SQLTransientConnectionException sQLTransientConnectionException0 = new SQLTransientConnectionException(string0, string1, byte0);
      sQLNonTransientConnectionException0.setNextException(sQLTransientConnectionException0);
      String string2 = null;
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      String string3 = "K0:,*2b6ucW4 RJ";
      StackTraceElement stackTraceElement0 = new StackTraceElement(string0, string3, string3, int0);
      stackTraceElementArray0[0] = stackTraceElement0;
      String string4 = "wN&x+!]&1H?C\\";
      String string5 = "wN&Qk3ETx_zsvt";
      StackTraceElement stackTraceElement1 = new StackTraceElement(string4, string3, string5, byte0);
      stackTraceElementArray0[1] = stackTraceElement1;
      String string6 = "";
      String string7 = ",tN()?E";
      int int1 = (-757);
      StackTraceElement stackTraceElement2 = new StackTraceElement(string6, string7, string7, int1);
      stackTraceElementArray0[2] = stackTraceElement2;
      String string8 = "client.network.ClientMsgReceiver";
      int int2 = 2981;
      StackTraceElement stackTraceElement3 = new StackTraceElement(string0, string0, string8, int2);
      stackTraceElementArray0[3] = stackTraceElement3;
      String string9 = "";
      String string10 = "Couldn't close input stream";
      StackTraceElement stackTraceElement4 = new StackTraceElement(string9, string10, string8, byte0);
      stackTraceElementArray0[4] = stackTraceElement4;
      String string11 = "";
      String string12 = "";
      String string13 = "\"wM";
      StackTraceElement stackTraceElement5 = new StackTraceElement(string11, string12, string13, int0);
      stackTraceElementArray0[5] = stackTraceElement5;
      String string14 = "P=6%T2$";
      String string15 = "ArL+Zg?39\"V7C<";
      String string16 = null;
      StackTraceElement stackTraceElement6 = new StackTraceElement(string14, string15, string16, int0);
      stackTraceElementArray0[6] = stackTraceElement6;
      String string17 = "y%";
      StackTraceElement stackTraceElement7 = new StackTraceElement(string12, string17, string14, int2);
      stackTraceElementArray0[7] = stackTraceElement7;
      sQLTransientConnectionException0.setStackTrace(stackTraceElementArray0);
      String string18 = "ServerGameLoop#doPostGameProcessing";
      int int3 = 1;
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException(string2, string18, int3, sQLTransientConnectionException0);
      String string19 = "H*vy.fiT<";
      SQLTransientConnectionException sQLTransientConnectionException1 = new SQLTransientConnectionException(string19, sQLTransientConnectionException0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      boolean boolean0 = false;
      boolean boolean1 = false;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean0, boolean1);
      sQLIntegrityConstraintViolationException0.addSuppressed(sQLNonTransientConnectionException0);
      StartFrame startFrame0 = StartFrame.startFrame;
      StartFrame.startFrame = startFrame0;
      boolean boolean2 = true;
      LogLog.setQuietMode(boolean2);
      Message message0 = null;
      clientMsgReceiver0.processMsg(message0);
      assertEquals(0, clientMsgReceiver0.countStackFrames());
  }
}
