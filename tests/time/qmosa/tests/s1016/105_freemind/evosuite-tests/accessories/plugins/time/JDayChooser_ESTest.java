/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 03:56:33 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapToolBar;
import freemind.modes.mindmapmode.actions.EdgeStyleAction;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.dnd.DropTarget;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.IndexColorModel;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Time;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.Vector;
import javax.help.HelpSet;
import javax.swing.DebugGraphics;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GapContent;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.fop.fonts.LazyFont;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.Stylesheet;
import org.apache.xerces.util.SymbolTable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.mock.javax.swing.MockDefaultListSelectionModel;
import org.hsqldb.Session;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      SystemColor systemColor0 = SystemColor.control;
      jDayChooser0.setSundayForeground(systemColor0);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.repaint(14, 14, 4427, 21);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      HelpSet helpSet0 = new HelpSet(classLoader0);
      helpSet0.setHomeID("ri=");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Time time0 = new Time(0L);
      jDayChooser0.setMaxSelectableDate(time0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.660726144843012
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.removeMouseWheelListener((MouseWheelListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getActionCommand();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      MockDate mockDate0 = new MockDate(34, 1716, 1716, 420, (-3993));
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser0.setMinSelectableDate((Date) null);
      GapContent gapContent0 = new GapContent((-17));
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(gapContent0, styleContext0);
      Element element0 = defaultStyledDocument0.getParagraphElement(1483);
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      jDayChooser0.setFont(font0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = jYearChooser0.dayChooser;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6773482149604972
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.repaint(1807, 46, 25, 9999);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getSelectedDay();
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      MindMapToolBar mindMapToolBar0 = null;
      try {
        mindMapToolBar0 = new MindMapToolBar((MindMapController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.MindMapToolBar", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(8927);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 8927, "&5[I1?i<G}TW*k");
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      JTree jTree0 = new JTree(stack0);
      JTree jTree1 = new JTree(stack0);
      Dimension dimension0 = jTree1.getPreferredScrollableViewportSize();
      jDayChooser0.setPreferredSize(dimension0);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = jScrollPane0.getViewportBorderBounds();
      jDayChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYear(0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setAlwaysFireDayProperty(false);
      MenuElement[] menuElementArray0 = new MenuElement[5];
      JMenu jMenu0 = new JMenu("BD%uF6s0m", false);
      menuElementArray0[0] = (MenuElement) jMenu0;
      jMenu0.isOptimizedDrawingEnabled();
      JMenuBar jMenuBar0 = new JMenuBar();
      jMenuBar0.getMenu(5);
      menuElementArray0[1] = (MenuElement) null;
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      structuredMenuHolder0.addMenu((JMenu) null, "BD%uF6s0m");
      jMenu0.getTransferHandler();
      menuElementArray0[2] = (MenuElement) null;
      SystemColor systemColor0 = SystemColor.windowText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMapNodePositionHolders();
      // Undeclared exception!
      try { 
        mapDialog0.getFreeMindMapController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("plugins.map.MapDialog", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      boolean boolean0 = false;
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.wml.dom.WMLTemplateElementImpl";
      stringArray0[1] = "day";
      stringArray0[2] = null;
      jDayChooser0.setAlwaysFireDayProperty(true);
      stringArray0[3] = null;
      stringArray0[4] = "day";
      stringArray0[5] = "14";
      stringArray0[6] = "day";
      stringArray0[7] = null;
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMenu jMenu0 = new JMenu("day", true);
      jMenu0.getMouseMotionListeners();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.setDecorationBordersVisible(true);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(8927);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 8927, "&5[I1?i<G}TW*k");
      actionEvent0.paramString();
      jDayChooser0.setDecorationBordersVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.getHierarchyListeners();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      Locale locale0 = Locale.GERMAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6717601208463124
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      debugGraphics0.getDebugOptions();
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.isDecorationBackgroundVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("}I{px\"");
      font0.deriveFont(2590.9387F);
      jDayChooser0.setFocusCycleRoot(false);
      jDayChooser0.setFont(font0);
      Color color0 = Color.YELLOW;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getSelectedDay();
      int int0 = 986;
      NamedProfileCache namedProfileCache0 = NamedProfileCache.getDefaultCache();
      // Undeclared exception!
      try { 
        namedProfileCache0.request("uqb1!?0.");
        fail("Expecting exception: ThreadDeath");
      
      } catch(ThreadDeath e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Thread", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 14;
      int int1 = 0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, 14, 14, 14, '`', 0);
      InputEvent.getMaskForButton(14);
      jDayChooser0.createToolTip();
      jDayChooser0.setMonth(0);
      JButton[] jButtonArray0 = new JButton[5];
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      String string0 = "accessories.plugins.time.JDayChooser$DecoratorButton";
      EdgeStyleAction edgeStyleAction0 = null;
      try {
        edgeStyleAction0 = new EdgeStyleAction((MindMapController) null, "accessories.plugins.time.JDayChooser$DecoratorButton");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.actions.NodeGeneralAction", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.8028984485314505
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.firePropertyChange("", (byte) (-65), (byte) (-1));
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      FocusEvent focusEvent0 = new FocusEvent(jMonthChooser0, (byte) (-1));
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setEnabled(false);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((byte) (-65), ":ExFy:7bz`XO/0jl", (byte) (-1), (byte) (-65), 0, (-1933), 1683, 0, 0, (-4180));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month -1
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = false;
      jDayChooser0.setDecorationBackgroundVisible(false);
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      // Undeclared exception!
      try { 
        mockGregorianCalendar0.add(46, 46);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true);
      pDFDocumentGraphics2D0.getFontInfo();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D();
      LazyFont lazyFont0 = new LazyFont("accessories.plugins.time.JDayChooser$1", "'!|:PB?*~!=e5#elS", true);
      org.apache.fop.fonts.Font font0 = new org.apache.fop.fonts.Font("accessories.plugins.time.JDayChooser$1", lazyFont0, (-1611));
      pDFDocumentGraphics2D1.setOverrideFontState(font0);
      pDFDocumentGraphics2D1.getPDFDocument();
      PDFResources pDFResources0 = new PDFResources(0);
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext(pDFResources0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.defaultMaxSelectableDate = date0;
      jDayChooser0.setMonth(1031);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.770581544706131
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getMinSelectableDate();
      Color color0 = Color.green;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDecorationBackgroundColor((Color) null);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8028984485314505
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "year";
      stringArray0[1] = "month";
      stringArray0[2] = "";
      stringArray0[3] = "month";
      stringArray0[4] = "day";
      stringArray0[5] = "month";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8028984485314505
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      jYearChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setDecorationBackgroundColor((Color) null);
      jDayChooser0.isDecorationBordersVisible();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "year";
      stringArray0[1] = "month";
      Stylesheet stylesheet0 = new Stylesheet((Stylesheet) null);
      try { 
        stylesheet0.getVariableOrParam(19);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.templates.Stylesheet", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      JTree jTree0 = new JTree(stack0);
      Dimension dimension0 = jTree0.getPreferredScrollableViewportSize();
      jDayChooser0.setPreferredSize(dimension0);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = new Rectangle();
      jDayChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYear(300);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      Button button0 = null;
      try {
        button0 = new Button("day");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getUI();
      jDayChooser0.getDaysInMonth();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DateEditor jSpinner_DateEditor0 = null;
      try {
        jSpinner_DateEditor0 = new JSpinner.DateEditor(jSpinner0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // model not a SpinnerDateModel
         //
         verifyException("javax.swing.JSpinner$DateEditor", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getMaxSelectableDate();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      SymbolTable symbolTable0 = new SymbolTable();
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'k';
      charArray0[2] = 'I';
      // Undeclared exception!
      try { 
        symbolTable0.addSymbol(charArray0, (-2142), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2142
         //
         verifyException("org.apache.xerces.util.SymbolTable", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addComponentListener((ComponentListener) null);
      int int0 = 757;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 757, false, jDayChooser0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.initDecorations();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "center";
      stringArray0[2] = "day";
      stringArray0[3] = "";
      stringArray0[4] = "day";
      // Undeclared exception!
      try { 
        HsqlProperties.argArrayToProps(stringArray0, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.766524484595135
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 0;
      jDayChooser0.setLocation(0, (-3828));
      jDayChooser0.weekOfYearVisible = true;
      jDayChooser0.setEnabled(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser_DecoratorButton0, (-849), (-849), (-3828), 3138, '>', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.focusLost((FocusEvent) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.addListeners(0);
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(0, "day", 939, 16, 16, 3138, 0, (-849), (-849), 821, (-811));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 939
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.616230775360895
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JMenu jMenu0 = new JMenu("day", true);
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      jDayChooser0.setComponentPopupMenu(jPopupMenu0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent("&5[I1?i<G}TW*k", 1278, "31");
      MockCalendar.getInstance();
      actionEvent0.setSource("&5[I1?i<G}TW*k");
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.init();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6717601208463124
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.setAlignmentY((-1667));
      int int0 = 828;
      jDayChooser0.repaint((-1667), 61451, 828, 61451);
      jDayChooser0.drawDays();
      jDayChooser0.initDecorations();
      jDayChooser0.init();
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.isValidateRoot();
      jDayChooser0.getDay();
      jDayChooser0.getLocale();
      SystemColor systemColor0 = SystemColor.controlHighlight;
      int int0 = 0;
      byte[] byteArray0 = null;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(14, 0, (byte[]) null, (byte[]) null, (byte[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Map size (0) must be >= 1
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy((String) null, vetoableChangeListener0);
      jDayChooser0.removeVetoableChangeListener(vetoableChangeListenerProxy0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDecorationBackgroundVisible();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.wml.dom.WMLTemplateElementImpl";
      stringArray0[1] = "day";
      stringArray0[2] = null;
      jDayChooser0.setAlwaysFireDayProperty(true);
      stringArray0[3] = null;
      stringArray0[4] = "day";
      stringArray0[5] = "14";
      stringArray0[6] = "day";
      stringArray0[7] = null;
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAccessibleContext();
      int int0 = (-3514);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-3514));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      ActionEvent actionEvent0 = new ActionEvent("&5[I1?i<G}TW*k", 1278, "31");
      MockCalendar.getInstance();
      actionEvent0.setSource("&5[I1?i<G}TW*k");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createImage((-1), (-1));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.addFocusListener(jDayChooser1);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, mockDefaultListSelectionModel0);
      jTable0.getTableHeader();
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.660726144843012
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = true;
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekOfYearVisible(true);
      boolean boolean1 = false;
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser0.getHierarchyListeners();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser3 = jYearChooser0.dayChooser;
      jDayChooser1.addFocusListener((FocusListener) null);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      MockDefaultListSelectionModel mockDefaultListSelectionModel0 = new MockDefaultListSelectionModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, mockDefaultListSelectionModel0);
      jTable0.getTableHeader();
      DropTarget dropTarget0 = null;
      try {
        dropTarget0 = new DropTarget();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.dnd.DropTarget", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getFocusListeners();
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1.0F);
      floatArray0[1] = 5961.292F;
      floatArray0[2] = 76.0F;
      floatArray0[3] = (-2165.3667F);
      Color.getColor("day", color0);
      floatArray0[4] = 0.0F;
      color0.getRGBComponents(floatArray0);
      // Undeclared exception!
      try { 
        jDayChooser0.putClientProperty((Object) null, color0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.JComponent", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Stack<MockGregorianCalendar> stack0 = new Stack<MockGregorianCalendar>();
      Vector<Integer> vector0 = new Vector<Integer>();
      JTree jTree0 = new JTree(vector0);
      Dimension dimension0 = jTree0.getPreferredScrollableViewportSize();
      dimension0.setSize(1142, 228);
      jDayChooser0.setPreferredSize(dimension0);
      JScrollPane jScrollPane0 = new JScrollPane();
      Rectangle rectangle0 = new Rectangle();
      jDayChooser0.computeVisibleRect(rectangle0);
      jDayChooser0.setYear((-152));
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getMouseWheelListeners();
      jDayChooser0.setYearChooser(jYearChooser0);
      Button button0 = null;
      try {
        button0 = new Button("Aq{>");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocus();
      int int0 = 0;
      jDayChooser0.setLocation(0, (-773));
      int int1 = 2;
      jDayChooser0.setMonth(2);
      jDayChooser0.getSelectedDay();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2, false);
      focusEvent0.paramString();
      jDayChooser0.focusGained(focusEvent0);
      int int2 = 946;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1487, 946);
      int int3 = 4269;
      BrowseMode browseMode0 = new BrowseMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(browseMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis((-2L));
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.repaint((-1950), 25, 25, 25);
      jDayChooser0.setDayBordersVisible(false);
      JButton[] jButtonArray0 = new JButton[2];
      jDayChooser0.getSelectedDay();
      jButtonArray0[0] = null;
      MapDialog mapDialog0 = new MapDialog();
      mapDialog0.getMindMapController();
      MindMapToolBar mindMapToolBar0 = null;
      try {
        mindMapToolBar0 = new MindMapToolBar((MindMapController) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.mindmapmode.MindMapToolBar", e);
      }
  }
}
