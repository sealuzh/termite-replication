/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:58:36 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Comparator;
import java.util.NoSuchElementException;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7631087558798084
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.slash = 0;
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution1.add((Object) "umd.cs.shop.JSJshopVars");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElement(jSTerm2);
      jSSubstitution1.add((Object) jSSubstitution2);
      JSTerm jSTerm4 = jSTerm2.call();
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm5.addElement(jSTerm0);
      jSTerm4.applySubstitutionT(jSSubstitution1);
      jSTerm5.cloneT();
      boolean boolean0 = jSTerm3.equals(jSTerm1);
      assertEquals("[umd.cs.shop.JSJshopVars]", jSTerm0.toString());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = (-1880);
      StringReader stringReader0 = new StringReader("()7`k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("()7`k");
      StringReader stringReader2 = new StringReader("?");
      stringReader2.read();
      StringReader stringReader3 = new StringReader("c#:|-*a5VDtp'kDrR");
      stringReader2.close();
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.313689641022684
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.rightPar = 0;
      jSTerm0.equals(jSTerm1);
      Object object0 = jSTerm0.clone();
      jSTerm1.insertElementAt(object0, 0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.251623955677366
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.514481681461393
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "?L#U";
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.insertElementAt(jSTerm1, 0);
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.trimToSize();
      jSTerm1.isGround();
      StringReader stringReader0 = new StringReader("?L#U");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm2.set(2, jSTerm3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6573186405438316
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("()7`k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("()7`k");
      StringReader stringReader2 = new StringReader("?");
      StringReader stringReader3 = new StringReader("c#:|-*a5VDtp'kDrR");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("()7`k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("()7`k");
      StringReader stringReader2 = new StringReader("?");
      StringReader stringReader3 = new StringReader("c#:|-*a5VDtp'kDrR");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "%%%";
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9550457711116036
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      jSSubstitution0.add((Object) streamTokenizer0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'M';
      charArray0[2] = 'o';
      charArray0[3] = 'k';
      charArray0[4] = '/';
      charArray0[5] = 'i';
      stringReader0.read(charArray0);
      System.setCurrentTimeMillis(233L);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.581519261899748
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.add((Object) streamTokenizer0);
      System.setCurrentTimeMillis(233L);
      jSTerm0.firstElement();
      jSTerm0.lastElement();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSSubstitution1;
      objectArray0[1] = null;
      jSSubstitution1.toArray(objectArray0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      StringReader stringReader1 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.556984702897899
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.ensureCapacity(39);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.trimToSize();
      jSTerm0.isFunction();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      assertEquals(39, jSTerm0.capacity());
      
      StringReader stringReader0 = new StringReader("28TiMO6~IVtX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      jSTerm3.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer1);
      jSTerm4.matches(jSTerm3, jSSubstitution0);
      assertFalse(jSTerm4.isEval());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.853276617650487
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.slash = 0;
      jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      jSTerm0.equals(jSTerm2);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.equals(jSTerm2);
      StringReader stringReader1 = new StringReader("Y");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSJshopVars.rightBrac = 0;
      jSTerm3.print();
      jSTerm3.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.57496510834415
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.408395986745591
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.trimToSize();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.insertElementAt(jSTerm0, (-860));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8096391152889
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm2, (JSSubstitution) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
      jSTerm1.equals(jSTerm0);
      jSTerm2.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      assertEquals("[[]]", jSSubstitution1.toString());
      
      JSTerm jSTerm4 = jSTerm3.call();
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.406889646567548
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = new StringReader("Reading Predicate");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.lastElement();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "@.C*y";
      objectArray0[2] = (Object) "%%%";
      objectArray0[3] = (Object) jSTerm1;
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) streamTokenizer1;
      objectArray0[7] = (Object) jSTerm1;
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.939151956128136
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.equals(jSTerm0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.trimToSize();
      jSTerm0.isFunction();
      jSTerm1.isFunction();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2, jSSubstitution0);
      jSTerm0.add((Object) jSTerm3);
      jSTerm1.print();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution1.subList(0, 0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.call();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.toStr();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.477267931250311
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      jSTerm0.equals(jSTerm0);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
      jSTerm0.equals(jSTerm2);
      jSTerm2.equals(jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.add((Object) jSTerm3);
      jSTerm1.equals(jSTerm3);
      StringReader stringReader0 = new StringReader("%%%");
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSSubstitution3.add((Object) "umd.cs.shop.JSJshopVars");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3818686043334774
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("H&2Y:V4btHwX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean1 = jSTerm2.equals(jSTerm0);
      assertFalse(boolean1 == boolean0);
      
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm3.isFunction());
      assertNotSame(jSTerm0, jSTerm2);
      assertNotSame(jSTerm3, jSTerm0);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSTerm3.isVariable());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.95248532425593
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.trimToSize();
      jSTerm0.isFunction();
      jSTerm2.isFunction();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm4.matches(jSTerm3, jSSubstitution0);
      jSTerm1.add((Object) jSTerm4);
      jSTerm2.print();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = new JSTerm(streamTokenizer0);
      jSTerm4.makeVariable();
      jSTerm1.toStr();
      jSTerm4.matches(jSTerm1);
      jSTerm1.print();
      jSTerm5.call();
      JSTerm jSTerm6 = null;
      try {
        jSTerm6 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6589442822499625
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "umd.cs.shop.JSJshopVars";
      jSTerm0.stream();
      int int0 = 0;
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.504354571864977
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.insertElementAt(jSTerm2, 0);
      StringReader stringReader0 = new StringReader("eDr~UO+)a8`/%kYa\"B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm1.trimToSize();
      jSTerm4.sort((Comparator) null);
      StringReader stringReader1 = new StringReader("nil");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader(">XbQWBI;\".9:7(");
      char[] charArray0 = new char[2];
      charArray0[0] = '0';
      charArray0[1] = '0';
      stringReader0.read(charArray0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3036481731228307
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StringReader stringReader0 = new StringReader("h+e");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      assertFalse(jSTerm2.isEval());
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringReader0;
      Object[] objectArray1 = jSSubstitution1.toArray(objectArray0);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.toArray(objectArray1);
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.resetSyntax();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution3);
      jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm4 = jSTerm3.cloneT();
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm4, jSTerm3);
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.04076543981964
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = null;
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2692404415462466
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      jSTerm0.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Predicate<String> predicate3 = predicate0.or(predicate2);
      predicate3.negate();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.582410857386749
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("28.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertEquals("[28.0]", jSTerm1.toString());
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSTerm2.isVariable());
      
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm3, jSSubstitution1);
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertNotSame(jSTerm2, jSTerm1);
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.164889789219196
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      Object object0 = null;
      jSSubstitution0.add((Object) streamTokenizer0);
      System.setCurrentTimeMillis(233L);
      // Undeclared exception!
      try { 
        jSTerm1.firstElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0718155831275626
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution1);
      JSJshopVars.interrogation = 2;
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[3];
      jSTerm2.makeVariable();
      charArray0[0] = '0';
      charArray0[1] = '\\';
      charArray0[2] = 'd';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm5.print();
      jSTerm5.cloneT();
      jSTerm2.call();
      assertFalse(jSTerm2.isFunction());
      assertTrue(jSTerm2.isVariable());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9wVZI+2i;xILjN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      jSTerm0.makeEval(true);
      jSTerm0.isFunction();
      jSTerm0.add((Object) "<=");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2383497075834473
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4128065726143313
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "umd.cs.shop.JSJshopVars";
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      jSTerm0.toStr();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.trimToSize();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.set((-961), "umd.cs.shop.JSJshopVars");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -961
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("1tcm5Dj@*zC\"Uf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals(jSTerm0);
      stringReader0.markSupported();
      int int0 = 2952;
      StringReader stringReader1 = new StringReader("");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = null;
      jSSubstitution0.add((Object) null);
      System.setCurrentTimeMillis((-2));
      // Undeclared exception!
      try { 
        jSTerm0.firstElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9550763110546947
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm1);
      String string0 = "%%%";
      int int0 = 0;
      jSTerm0.insertElementAt("%%%", 0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.percent = 0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      unaryOperator0.apply(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.containsAll(jSTerm2);
      Function<JSSubstitution, String> function0 = (Function<JSSubstitution, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super JSSubstitution, ?>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4723952533011255
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isVariable();
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      jSTerm0.equals(jSTerm3);
      jSTerm3.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[8];
      charArray0[0] = '0';
      charArray0[1] = 'd';
      charArray0[2] = '#';
      charArray0[3] = '0';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      charArray0[6] = '\'';
      charArray0[7] = '\\';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6064604090893377
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.rightPar = 0;
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.trimToSize();
      jSTerm2.toString();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSJshopVars.equalT = 1478;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSJshopVars.astherisk = 1478;
      StringReader stringReader0 = new StringReader("T");
      boolean boolean0 = stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean1 = jSTerm0.isEval();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5146017160185474
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Stream stream0 = jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.trimToSize();
      jSTerm0.isFunction();
      jSTerm2.isFunction();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      StringReader stringReader0 = new StringReader("28TiMO6~IVtX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) stream0;
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) jSTerm3;
      jSTerm0.lastElement();
      objectArray0[3] = (Object) "umd.cs.shop.JSJshopVars";
      objectArray0[4] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5975170300947936
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSJshopVars");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, Object> function0 = Function.identity();
      unaryOperator0.andThen((Function<? super JSSubstitution, ?>) function0);
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("()7`k");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("()7`k");
      StringReader stringReader2 = new StringReader("?");
      StringReader stringReader3 = new StringReader("c#:|-*a5VDtp'kDrR");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.733137998752271
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.insertElementAt("umd.cs.shop.JSJshopVars", 0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.slash = 0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm1);
      jSTerm0.isFunction();
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElement(jSTerm2);
      assertEquals("[[umd.cs.shop.JSJshopVars]]", jSSubstitution2.toString());
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution3);
      jSTerm3.print();
      jSTerm3.cloneT();
      assertNotSame(jSTerm0, jSTerm4);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "umd.cs.shop.JSEvaluate";
      StringReader stringReader1 = new StringReader("%%%");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 0;
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.removeElement(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      jSSubstitution1.add((Object) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.059615150468091
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@.C*y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(37, 64);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.trimToSize();
      jSTerm1.sort((Comparator) null);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.set((-1), stringReader0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("cft?V)(e3!8w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.parseList(streamTokenizer0);
      String string0 = "umd.cs.shop.JSEvaluate";
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSEvaluate");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader2 = new StringReader(":};I,l");
      StringReader stringReader3 = null;
      try {
        stringReader3 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".eNaZd8e6qhs7|-&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      assertEquals((-2), streamTokenizer0.ttype);
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'gnie7?c`$qAt.");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("'gnie7?c`$qAt.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'gnie?kjcU$qAs.");
      String string0 = "&QcD^h_,3";
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
