/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:30:01 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.CfsSubsetEval;
import weka.attributeSelection.GainRatioAttributeEval;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.evaluation.output.prediction.HTML;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.InputMappedClassifier;
import weka.clusterers.FilteredClusterer;
import weka.clusterers.SimpleKMeans;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.neighboursearch.CoverTree;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.129899128884771
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.899131247337129
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Filter.makeCopy((Filter) null);
      testInstances0.setHandler((CapabilitiesHandler) null);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.relativeAbsoluteError();
      evaluation0.toSummaryString(".arff", false);
      testInstances0.setWordSeparators((String) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_MaxTarget;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation1.unweightedMicroFmeasure();
      XML xML0 = new XML();
      xML0.getHeader();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-1293L);
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) (-1);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.641310484537307
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      evaluation0.toSummaryString(false);
      testInstances0.setWordSeparators(".arff");
      double double0 = evaluation0.m_MaxTarget;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.unweightedMicroFmeasure();
      XML xML0 = new XML();
      xML0.getHeader();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances1);
      evaluation0.toClassDetailsString("yes");
      evaluation0.SFPriorEntropy();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3164648855394714
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      testInstances0.setHandler(gainRatioAttributeEval0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 93.58771603761498;
      SparseInstance sparseInstance0 = new SparseInstance(93.58771603761498, doubleArray0);
      instances1.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      costSensitiveClassifier0.distributionForInstance(binarySparseInstance0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6871160022108755
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      Instances instances2 = new Instances(instances1);
      Evaluation evaluation0 = new Evaluation(instances2);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      evaluation0.toSummaryString(false);
      evaluation0.SFEntropyGain();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances2);
      evaluation0.rootMeanPriorSquaredError();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.equals((Object) null);
      evaluation0.areaUnderROC(2);
      evaluation0.confusionMatrix();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.8619490894941726
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      testInstances0.setMultiInstance(true);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toSummaryString(true);
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedTruePositiveRate();
      MockRandom mockRandom0 = new MockRandom(2);
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5931047782807215
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      testInstances0.setHandler(gainRatioAttributeEval0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      evaluation0.KBRelativeInformation();
      MockRandom mockRandom0 = new MockRandom(0L);
      evaluation0.weightedTruePositiveRate();
      long long0 = 3335L;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7659767920186922
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "N}(|");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6170139437875286
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances1);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation1.SFEntropyGain();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances2);
      evaluation1.rootMeanPriorSquaredError();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PlainText plainText0 = new PlainText();
      evaluation0.equals(plainText0);
      evaluation1.areaUnderROC(1);
      evaluation1.getHeader();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "e)=Bs6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2492963676255995
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.toSummaryString(false);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = Evaluation.MIN_SF_PROB;
      MockRandom mockRandom0 = new MockRandom(2);
      DenseInstance denseInstance0 = new DenseInstance(424);
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) votedPerceptron0, (Instance) denseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.847305553964232
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      costSensitiveClassifier0.distributionForInstance(binarySparseInstance0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray1 = evaluation0.m_TrainClassWeights;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTrueNegativeRate();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.matthewsCorrelationCoefficient(0);
      evaluation0.errorRate();
      evaluation0.avgCost();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.541532499660181
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(false);
      evaluation0.SFEntropyGain();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.rootMeanPriorSquaredError();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      HTML hTML0 = new HTML();
      evaluation0.equals(hTML0);
      evaluation0.areaUnderROC(6);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.840392663422192
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = multilayerPerceptron0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      evaluation0.toSummaryString(false);
      testInstances0.setWordSeparators(".arff");
      double double0 = evaluation0.m_MaxTarget;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.unweightedMicroFmeasure();
      XML xML0 = new XML();
      xML0.getHeader();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8903075818572013
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.relativeAbsoluteError();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      evaluation0.rootMeanPriorSquaredError();
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8863251830392813
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      CfsSubsetEval cfsSubsetEval0 = new CfsSubsetEval();
      testInstances0.setHandler(cfsSubsetEval0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 19, 1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[7];
      SparseInstance sparseInstance0 = new SparseInstance((-1671.9987384), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      costSensitiveClassifier0.distributionForInstance(sparseInstance0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray1 = evaluation0.m_TrainClassWeights;
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.m_TotalSizeOfRegions;
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.unweightedMacroFmeasure();
      double double2 = evaluation1.matthewsCorrelationCoefficient(7);
      assertNotEquals(double2, double0, 0.01);
      
      evaluation1.errorRate();
      evaluation1.makeDistribution(1.0);
      assertEquals(Double.NaN, evaluation1.weightedTrueNegativeRate(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.652598033233893
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      FilteredClusterer filteredClusterer0 = new FilteredClusterer();
      Filter filter0 = filteredClusterer0.getFilter();
      testInstances0.setHandler(filter0);
      testInstances0.generate();
      Instances instances2 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopy(costSensitiveClassifier0);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.getRevision();
      double double0 = evaluation1.pctCorrect();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double1, 0.01);
      
      evaluation1.coverageOfTestCasesByPredictedRegions();
      double double2 = evaluation1.falsePositiveRate((-2));
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.numTruePositives(1);
      assertEquals(Double.NaN, evaluation1.pctCorrect(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.834126800511573
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = multilayerPerceptron0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      evaluation0.toSummaryString(false);
      testInstances1.setWordSeparators(".arff");
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.unweightedMicroFmeasure();
      MockRandom mockRandom0 = new MockRandom((-1293L));
      XML xML0 = new XML();
      xML0.getHeader();
      try { 
        evaluation0.crossValidateModel((Classifier) multilayerPerceptron0, (Instances) null, 1110, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.561353222783344
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = multilayerPerceptron0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation1 = new Evaluation(instances0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      multiClassClassifierUpdateable0.getMethod();
      evaluation0.toSummaryString(false);
      evaluation0.SFEntropyGain();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances1);
      evaluation0.falsePositiveRate(0);
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8564909139241834
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      testInstances0.setHandler(gainRatioAttributeEval0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Instances instances2 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-277));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -277
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.784054367793823
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      Capabilities capabilities0 = multilayerPerceptron1.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.BINARY_CLASS;
      capabilities0.disable(capabilities_Capability0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities1 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances0.assign(testInstances1);
      evaluation0.toSummaryString(false);
      testInstances0.setWordSeparators("`IJz;XIGNYnrlP{x$~");
      double double0 = evaluation0.m_MaxTarget;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.unweightedMicroFmeasure();
      XML xML0 = new XML();
      xML0.getHeader();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances1);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1293L);
      doubleArray0[3] = 2.0;
      doubleArray0[4] = (double) (-1293L);
      doubleArray0[1] = Double.NaN;
      doubleArray0[6] = (double) 1110;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.413808968623814
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6817176635961935
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      Instances instances2 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      multiClassClassifierUpdateable0.getMethod();
      evaluation0.toSummaryString();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      double double0 = evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.m_TotalSizeOfRegions;
      double double2 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4302430984442407
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      evaluation0.SFEntropyGain();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) sGD0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.185461840587553
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances2 = inputMappedClassifier0.getModelHeader(instances0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      Evaluation evaluation1 = new Evaluation(instances2);
      double double0 = Evaluation.MIN_SF_PROB;
      MockRandom mockRandom0 = new MockRandom(1);
      DenseInstance denseInstance0 = new DenseInstance(1766);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) inputMappedClassifier0, (Instance) denseInstance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      Instances instances2 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      try { 
        Evaluation.evaluateModel("getLowercaseTokens", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name getLowercaseTokens.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9959149597043577
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = multilayerPerceptron0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NOMINAL_ATTRIBUTES;
      capabilities0.disable(capabilities_Capability0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      evaluation0.numInstances();
      evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2194.684645748;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = 3.0;
      DenseInstance denseInstance0 = new DenseInstance(3.0, doubleArray0);
      try { 
        evaluation0.updateStatsForPredictor((-2), denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1755528020956922
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MultiFilter multiFilter0 = new MultiFilter();
      Capabilities capabilities0 = multiFilter0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.confusionMatrix();
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3952167464692553
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      Instances instances2 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      multiClassClassifierUpdateable0.getMethod();
      boolean boolean0 = true;
      evaluation0.toSummaryString(true);
      evaluation0.SFEntropyGain();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances1);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) sGD0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8629302229208218
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      testInstances0.getWords();
      costSensitiveClassifier0.distributionForInstance(binarySparseInstance0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray1 = evaluation0.m_TrainClassWeights;
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTrueNegativeRate();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.unweightedMacroFmeasure();
      double double1 = evaluation0.matthewsCorrelationCoefficient((-1842177144));
      double double2 = evaluation0.errorRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.unclassified();
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4606798560245595
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SGD sGD0 = new SGD();
      SGD sGD1 = new SGD();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.toSummaryString(false);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.incorrect();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1711188126637793
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TestInstances testInstances0 = new TestInstances();
      GainRatioAttributeEval gainRatioAttributeEval0 = new GainRatioAttributeEval();
      testInstances0.setHandler(gainRatioAttributeEval0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.toSummaryString(false);
      double double1 = evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation2.m_TotalSizeOfRegions;
      evaluation2.confusionMatrix();
      evaluation0.weightedRecall();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7810730593880173
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      Instances instances2 = testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances2);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      testInstances0.setWordSeparators("listOptions");
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.unweightedMicroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation0.falsePositiveRate(8);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      assertEquals(4, testInstances0.getNumClasses());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7556291165200912
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      Instances instances2 = new Instances(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      testInstances0.setMultiInstance(false);
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation0.toSummaryString(true);
      evaluation1.weightedFalseNegativeRate();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.weightedTruePositiveRate();
      MockRandom mockRandom0 = new MockRandom(438L);
      MockRandom mockRandom1 = new MockRandom(1797L);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[3] = (Object) mockRandom1;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "9101";
      objectArray0[4] = (Object) instances2;
      objectArray0[5] = (Object) mockRandom1;
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances1, 225, (Random) mockRandom1, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6586398233986746
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      testInstances0.setMultiInstance(true);
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.m_SumSchemeEntropy = (double) (-2);
      evaluation1.toSummaryString(true);
      double double0 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedTruePositiveRate();
      String string0 = evaluation1.toClassDetailsString(".bsi");
      assertEquals(".bsi\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.611502619212395
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      instances1.add((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      sparseInstance0.isMissing(2);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.distributionForInstance(binarySparseInstance0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "' is unknown!");
      evaluation0.weightedMatthewsCorrelation();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution((-2555.031));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2555
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.507604636220772
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\tonly the options are saved to the XML file, not the model.\n");
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      testInstances0.setHandler(randomSubSpace0);
      testInstances0.generate();
      Instances instances2 = new Instances(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = new CostMatrix(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.weightedTruePositiveRate();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances2);
      evaluation1.setPriors(instances0);
      double double0 = evaluation1.weightedAreaUnderROC();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      CoverTree coverTree0 = new CoverTree();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      Version.REVISION = 20;
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8810129709506906
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.getRevision();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      Capabilities capabilities0 = multilayerPerceptron0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      evaluation0.toSummaryString(false);
      testInstances1.setWordSeparators(".arff");
      evaluation0.weightedAreaUnderPRC();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.weightedTruePositiveRate();
      MockRandom mockRandom0 = new MockRandom((-1));
      try { 
        evaluation1.crossValidateModel((Classifier) naiveBayesMultinomialText0, instances1, (-2), (Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6320878113084203
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      Instances instances2 = testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances2);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      evaluation0.toSummaryString(false);
      double double0 = evaluation0.weightedFalseNegativeRate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      double double2 = evaluation1.m_TotalSizeOfRegions;
      double double3 = evaluation1.pctCorrect();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7489366070208934
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      sGD0.reset();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      wrapperSubsetEval0.getClassifier();
      Evaluation.makeOptionString(sGD0, true);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances1, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4208430327407737
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Filter.makeCopy((Filter) null);
      testInstances0.setHandler((CapabilitiesHandler) null);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.relativeAbsoluteError();
      evaluation0.numInstances();
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.m_NumClasses = 0;
      double double1 = evaluation1.SFMeanEntropyGain();
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      CoverTree coverTree0 = new CoverTree();
      SparseInstance sparseInstance0 = new SparseInstance(0);
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      SGD sGD0 = new SGD();
      testInstances0.setHandler(sGD0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String string0 = Evaluation.makeOptionString(classifier0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.914827510144397
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      Instances instances2 = testInstances0.getData();
      Evaluation evaluation0 = new Evaluation(instances2);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) (-1);
      evaluation0.toSummaryString(true);
      double double0 = evaluation0.weightedFalseNegativeRate();
      Evaluation evaluation1 = new Evaluation(instances2);
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.m_TotalSizeOfRegions;
      evaluation1.confusionMatrix();
      double double3 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalString((-3523));
      testInstances0.getRelationalClassFormat();
      Evaluation.handleCostOption((String) null, (-3523));
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      testInstances0.setHandler(randomSubSpace0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 985.746199327521;
      doubleArray0[5] = 0.75;
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = 985.746199327521;
      SparseInstance sparseInstance0 = new SparseInstance(985.746199327521, doubleArray0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, sparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 0;
      try { 
        Evaluation.handleCostOption("'Fa5$8)", 0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3426497841485943
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SGD sGD0 = new SGD();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = sGD0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setHandler(multiClassClassifierUpdateable0);
      Instances instances0 = testInstances0.generate();
      Instances instances1 = new Instances(instances0, 2, 0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance0);
      costSensitiveClassifier0.distributionForInstance(binarySparseInstance0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray1 = evaluation0.m_TrainClassWeights;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Object[][] objectArray0 = new Object[4][0];
      objectArray0[0] = (Object[]) multiClassClassifierUpdateable0.TAGS_METHOD;
      objectArray0[1] = (Object[]) sGD0.TAGS_SELECTION;
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) instances1;
      objectArray1[1] = (Object) costSensitiveClassifier0;
      objectArray1[2] = (Object) costMatrix0;
      objectArray0[2] = objectArray1;
      objectArray0[3] = (Object[]) sGD0.TAGS_SELECTION;
      costMatrix0.m_matrix = objectArray0;
      CostMatrix costMatrix1 = new CostMatrix(2);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(10);
      MockRandom mockRandom0 = new MockRandom();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterStandardDevs();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
