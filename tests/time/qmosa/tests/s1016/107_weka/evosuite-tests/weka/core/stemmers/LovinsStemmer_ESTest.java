/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:58:28 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5844812613952288
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      String string0 = "";
      lovinsStemmer0.stem("");
      stringArray0[1] = "1=)5m*+8";
      lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.stem(",GcBHa1Bf}|>");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6000440918329333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string0 = lovinsStemmer0.stem("end");
      assertEquals("ens", string0);
      
      lovinsStemmer0.stemString("ician");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stem("ician");
      assertEquals("ic", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("er");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ens");
      lovinsStemmer1.stemString("!irWe/uvW46<zU");
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stemString("er");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("!irWe/uvW46<zU");
      assertEquals("!irw/uvw46<zu", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6196295366980236
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer1.stem("ite");
      assertEquals("it", string0);
      
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer2.stemString("serex");
      assertEquals("serec", string1);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer4.toString();
      lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string2 = lovinsStemmer5.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6722412929777686
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      lovinsStemmer0.stem("");
      stringArray0[1] = "1=)5m*+8";
      lovinsStemmer0.stemString("ax");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "ix";
      stringArray1[1] = "";
      stringArray1[2] = "ature";
      stringArray1[3] = "ix";
      stringArray1[4] = "ix";
      stringArray1[5] = "";
      stringArray1[6] = "ature";
      stringArray1[7] = "ax";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("ionality");
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7164780015388803
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("uad");
      lovinsStemmer0.stem("i/1|('");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.stem("8034");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      String string0 = lovinsStemmer3.stem("uas");
      assertEquals("ua", string0);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.stemString("pand");
      assertEquals("pans", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer4.stemString("RH^&W8N");
      assertEquals("rh^&w8n", string2);
      
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.692645289629057
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("FJ7:mK&,d");
      lovinsStemmer0.stem("2h1]@");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("2h1]@");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("UNPUBLISHED");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("bex");
      lovinsStemmer3.toString();
      lovinsStemmer0.stemString("vad");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer3.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6449507408268615
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ADDRESS");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ADDRESS");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ADDRESS";
      stringArray0[1] = "addres";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("2r^BK~K*KJs");
      lovinsStemmer1.toString();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "addres";
      stringArray1[1] = "ADDRESS";
      stringArray1[2] = "addres";
      stringArray1[3] = "ional";
      stringArray1[4] = "addres";
      stringArray1[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[6] = "addres";
      stringArray1[7] = "\"C4G";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("arize");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray1);
      assertEquals(8, stringArray1.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6815276747002152
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      lovinsStemmer0.stem("");
      stringArray0[1] = "1=)5m*+8";
      stringArray0[2] = "1=)5m*+8";
      LovinsStemmer.main(stringArray0);
      stringArray0[3] = "[Hp4yj3p! AR-";
      String string0 = lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ional");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("1=)5m*+8");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5548550220956046
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.toString();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer2.stem("BOOKLET");
      assertEquals("bookles", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer3.stem("8034");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7320120545287712
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Ao$O=_9");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ivities");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("ature");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("ieollax");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("atur");
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("ao$o=_9");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5287400224677214
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Ao$O=_9");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem("@NaY(,B ,e|Df");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("@/");
      String string0 = lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("@/");
      String string2 = lovinsStemmer0.stem("jkuslud");
      assertEquals("jkuslus", string2);
      
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer0.stem("unpublished");
      assertEquals("unpubl", string3);
      
      String string4 = lovinsStemmer0.stemString("");
      assertFalse(string4.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7883436228771843
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("8034");
      lovinsStemmer0.stemString("@j0jj");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      String string1 = lovinsStemmer0.stem("lud");
      assertEquals("lus", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("@j0jj");
      assertEquals("@j0jj", string2);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("@j0jj");
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.getRevision();
      assertTrue(string4.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8390572441336093
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ic");
      lovinsStemmer0.stem("<\"7Vn:]}8X&M?rKiv");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<\"7Vn:]}8X&M?rKiv";
      stringArray0[1] = "OKc*H.^'/c8w,`)&";
      stringArray0[2] = "<\"7Vn:]}8X&M?rKiv";
      stringArray0[3] = "'uPi8p;EW";
      stringArray0[4] = "<\"7vn:]}8x&m?rkiv";
      stringArray0[5] = "OKc*H.^'/c8w,`)&";
      stringArray0[6] = "addresyz";
      stringArray0[7] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("addresyz");
      lovinsStemmer0.stem("<\"7Vn:]}8X&M?rKiv");
      String string1 = lovinsStemmer0.stemString("addresyz");
      assertEquals("addresys", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("<\"7Vn:]}8X&M?rKiv");
      assertEquals("<\"7vn:]}8x&m?rkiv", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Variance: ");
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer0.stemString("3BqP?a.g7{");
      assertEquals("3bqp?a.g7{", string4);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8283914547966351
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("a location associated with the entry, such as the city in which a conference took place.yz");
      assertEquals("a location associated with the entry, such as the city in which a conference took place.ys", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stemString("2`c^J,#G_8am");
      lovinsStemmer0.stem("5fx>1M|^TbJX1&<s@(");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2`c^j,#g_8am";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "5fx>1m|^tbjx1&<s@(";
      stringArray0[4] = "a location associated with the entry, such as the city in which a conference took place.ys";
      stringArray0[5] = "2`c^J,#G_8am";
      stringArray0[6] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      String string2 = lovinsStemmer0.stemString("v41}s[s`#60;|&W");
      assertEquals("v41}s[s`#60;|&w", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7446422401781811
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "1)5m|%+s";
      stringArray0[2] = "ix";
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      stringArray0[3] = "[Hp4yj3p! AR-";
      lovinsStemmer0.stem("vvD");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("[Hp4yj3p! AR-");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer1.stemString("bex");
      assertEquals("bic", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6463549654138736
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer0.stem("ul");
      assertEquals("ul", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("rud");
      lovinsStemmer0.stemString("\"-^*s{jQ");
      lovinsStemmer0.stem("y.Kx5')}@");
      String string3 = lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6584242908910938
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "incollectond";
      stringArray0[1] = "$Revision: 8034 $";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("incollectond");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("$Revision: 8034 $");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("incollectbex");
      assertEquals("incollectbic", string0);
      
      String[] stringArray1 = new String[1];
      stringArray1[0] = "8034";
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("Variance: ");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Variance: ");
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("$Revision: 8034 $");
      assertEquals("$revis: 8034 $", string2);
      
      lovinsStemmer0.stem("addrespand");
      String string3 = lovinsStemmer0.stem("?1:-mU^buO_!C");
      assertEquals("?1:-mu^buo_!c", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6962090812790167
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("{,Y3AGGWNki %");
      lovinsStemmer0.stemString("ive");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "iv";
      lovinsStemmer0.globalInfo();
      stringArray0[1] = "-n!^HhqVan$d:HClS,";
      stringArray0[2] = "ive";
      stringArray0[3] = "ive";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("-n!^HhqVan$d:HClS,");
      stringArray0[4] = "iv";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      stringArray0[5] = "iv";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("f");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("f");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("zrl7gvbtt6ax");
      lovinsStemmer0.stem("atable");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6390630219806268
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ":.N>J";
      stringArray0[1] = "end";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("6G");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("^Y3;#QbNX9r8C9J6");
      String string0 = lovinsStemmer1.stemString("tex");
      assertEquals("tic", string0);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("Variance: ");
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("6g");
      String string2 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer0.stemString("tic");
      lovinsStemmer2.stem("inism");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer3.stem("6g");
      assertEquals("6g", string3);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7255242713990575
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("hnhdrend");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.stemString("lux");
      lovinsStemmer2.stemString("8034");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6362627837341228
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8'b!");
      String string0 = lovinsStemmer0.stemString("yz");
      assertEquals("yz", string0);
      
      lovinsStemmer0.stemString("itix");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ions");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem(";]c#,/pgSCLo=");
      String string2 = lovinsStemmer0.stemString("{9kI7)");
      assertEquals("{9ki7)", string2);
      
      String string3 = lovinsStemmer0.stemString("itmit");
      assertEquals("itmis", string3);
      
      String string4 = lovinsStemmer0.stem("Jk^S'Zf1Ual");
      assertEquals("jk^s'zf1u", string4);
      
      String[] stringArray1 = new String[4];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "jk^s'zf1u";
      stringArray1[2] = ";]c#,/pgSCLo=";
      stringArray1[3] = "{9kI7)";
      LovinsStemmer.main(stringArray1);
      String string5 = lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string5);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8305274435518624
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      lovinsStemmer0.stem("");
      stringArray0[1] = "1)5m|%+s";
      stringArray0[2] = "ix";
      LovinsStemmer.main(stringArray0);
      stringArray0[3] = "[Hp4yj3p! AR-";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString(":2`{qoUZw");
      assertEquals(":2`{qouzw", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("nn");
      assertEquals("nn", string1);
      
      String[] stringArray1 = new String[3];
      stringArray1[0] = "nn";
      stringArray1[1] = "6'R252M0RR";
      stringArray1[2] = "ix";
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stemString("metr");
      assertEquals("meter", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.666971600705806
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\nStemmer options:\n\n");
      lovinsStemmer0.stem("S}]pVAncT7B");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("dex");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("[Hp4yj3p! AR-");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.636222449131769
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      lovinsStemmer0.stem("");
      stringArray0[1] = "1=)5m*+8";
      String string0 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "ix";
      lovinsStemmer0.stem("{6uw Ss9[vY");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("");
      String string2 = lovinsStemmer0.stem("dex");
      assertEquals("dic", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("E40xmo");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      String string3 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6318120178817774
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ert");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("variance: cid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("pex");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stem(",nMK!UpL0+*q^");
      assertEquals(",nmk!upl0+*q^", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7453323713030948
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      String string0 = lovinsStemmer0.getRevision();
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      lovinsStemmer0.stem("Zkx9,5tg@EQcNK|Hq");
      stringArray0[6] = "8034";
      stringArray0[7] = "8034";
      stringArray0[8] = "|}+#I{{mdCBhto7;x~F";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("w8nvad");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5925636389235094
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("SCHOOL");
      String string0 = lovinsStemmer0.stemString("uad");
      assertEquals("uas", string0);
      
      lovinsStemmer0.stem("i");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stem("uas");
      assertEquals("ua", string1);
      
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.stemString("20y/h,rN");
      assertEquals("20y/h,rn", string2);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("school");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.728827588165784
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stem("edituad");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ix");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("eNx");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.671070916598655
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8'b!");
      lovinsStemmer0.stemString("HQMIV%!a}");
      lovinsStemmer0.stem("hcllux");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("<bJ~Q,S");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("jhv|bz6T{I1lM_#:q");
      String string0 = lovinsStemmer0.stemString("8'b!");
      assertEquals("8'b!", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("M{7o-HQ5YX4|3GjvY");
      assertEquals("m{7o-hq5yx4|3gjv", string2);
      
      String string3 = lovinsStemmer0.stem("yz");
      assertEquals("yz", string3);
      
      String string4 = lovinsStemmer0.stemString(":i");
      assertEquals(":i", string4);
      
      lovinsStemmer1.stem("k03ert");
      String string5 = lovinsStemmer1.stem("to6LhiXAR*");
      assertEquals("to6lhixar*", string5);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7184917607783623
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$|nYqy";
      stringArray0[2] = "!X=tK_/\"K";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("iEOluLi$R~@$'|XC");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("The physical dimensions of a work.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6465279477621269
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8'b!");
      lovinsStemmer0.stemString("HQMIV%!a}");
      lovinsStemmer0.stem("hcllux");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("<bJ~Q,S");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("jhv|bz6T{I1lM_#:q");
      String string0 = lovinsStemmer0.stemString("8'b!");
      assertEquals("8'b!", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("lid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4712766306705698
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stem("HOWPUBL&ISHED");
      lovinsStemmer0.stem("LHIGEh[h\"R+O].qvv");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("iS]Tsdp@'c");
      lovinsStemmer2.getRevision();
      lovinsStemmer2.getRevision();
      lovinsStemmer2.stem("ionerid");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("~}H tH0'cWi Y*");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6411874185369575
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("bb'fk;^s5ots8rud");
      String string0 = lovinsStemmer0.stemString("bb'fk;^s5ots8rud");
      assertEquals("bb'fk;^s5ots8rus", string0);
      
      lovinsStemmer0.stem("XG[%;");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("bb'fk;^s5ots8rus");
      lovinsStemmer0.stem("erid");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("publisher");
      lovinsStemmer0.stemString("$");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.673896759078317
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "incollectond";
      stringArray0[1] = "$Revision: 8034 $";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("incollectond");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("$Revision: 8034 $");
      assertEquals("$revis: 8034 $", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6065202718146447
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("icalness");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("icalness");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ioning");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("vFE>");
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6290672529528212
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "ANNOTE";
      stringArray0[3] = "";
      stringArray0[4] = " URL ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7117914134494545
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ADDRESS");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ADDRESS");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ADDRESS";
      stringArray0[1] = "addres";
      stringArray0[2] = "addres";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "ADDRESS";
      lovinsStemmer0.stemString("ature");
      stringArray0[5] = "ADDRESS";
      stringArray0[6] = "addres";
      stringArray0[7] = "addres";
      stringArray0[8] = "addres";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("ADDRESS");
      assertEquals("addres", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("addres");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString(">");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("MG @OAe<~<\";A2K]nJD");
      assertEquals("mg @oa<~<\";a2k]njd", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5533960751107494
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ADDRESS");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("ADDRESS");
      assertEquals("addres", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ADDRESS";
      stringArray0[1] = "addres";
      stringArray0[2] = "addres";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "ADDRESS";
      lovinsStemmer0.stemString("ature");
      stringArray0[5] = "ADDRESS";
      stringArray0[6] = "addres";
      stringArray0[7] = "addres";
      stringArray0[8] = "addres";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stem("language");
      assertEquals("langu", string2);
      
      lovinsStemmer0.stem("langu");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("r\"^>o)_,\"9aS|C}d1");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer0.stemString("arizable");
      assertEquals("ar", string3);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6738650127911223
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8'b!");
      lovinsStemmer0.stemString("8'b!");
      lovinsStemmer0.stem("8'b!");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8'b!");
      lovinsStemmer0.stemString("20y/h,rN");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8'b!");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4447009414350178
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String[] stringArray0 = new String[2];
      lovinsStemmer0.toString();
      stringArray0[0] = "ite";
      LovinsStemmer.main((String[]) null);
      stringArray0[1] = "^";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("^");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("kRPrLxj-cjqA8x");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("f,R6\"?gaPw");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("Z$}I$uM");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0728978829159086
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      String string0 = "8034ax";
      stringArray0[0] = "8034ax";
      stringArray0[1] = "ZcZa_A>T";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.stemString("34");
      stringArray0[5] = "3W.";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6578880805849532
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      String string0 = lovinsStemmer0.stemString("bb'fk;^s5ots8rud");
      assertEquals("bb'fk;^s5ots8rus", string0);
      
      lovinsStemmer0.stemString("(HzMD!Dbf:M^79\"Z,Q");
      lovinsStemmer0.stem("");
      stringArray0[1] = "1=)5m*+8";
      stringArray0[2] = "ix";
      LovinsStemmer.main(stringArray0);
      stringArray0[3] = "[Hp4yj3p! AR-";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("publisher");
      String string1 = lovinsStemmer0.stem("ix");
      assertEquals("ix", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stem("Induction of 6ecision trees");
      assertEquals("induction of 6ecision tree", string2);
      
      lovinsStemmer0.stemString("publisher");
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6284488679242395
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer0.stem("ul");
      assertEquals("ul", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("+:Ih#::");
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5103904611870775
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("entally");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ent";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "entally";
      stringArray0[4] = "ent";
      stringArray0[5] = "ent";
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7827527488150405
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("`_%&?S[|3{<5JGD.s?");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "`_%&?S[|3{<5JGD.s?";
      stringArray0[2] = "icalize";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "";
      stringArray0[5] = "`_%&?S[|3{<5JGD.s?";
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7164148101650438
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "EA9&9U{xxS";
      stringArray1[3] = "unpublaccyt";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "[Hp4yj3p! AR-";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("unpublaccyt");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
