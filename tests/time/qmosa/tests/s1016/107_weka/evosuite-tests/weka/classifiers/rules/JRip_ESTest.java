/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:07:36 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.filters.supervised.attribute.ClassOrder;
import weka.filters.unsupervised.attribute.Remove;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      StringReader stringReader0 = new StringReader("");
      RuleStats ruleStats0 = new RuleStats();
      protectedProperties0.getOrDefault(ruleStats0, ruleStats0);
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 7);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("", protectedProperties2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => =", string1);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string2 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string2);
      
      boolean boolean0 = jRip0.getDebug();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 2408.7455148118443, (-2227.6359));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      IBk iBk0 = new IBk(4);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@end";
      stringArray0[1] = "`oOv/7AP";
      stringArray0[2] = "integer";
      stringArray0[3] = "numeric";
      stringArray0[4] = "`oOv/7AP";
      stringArray0[5] = "relational";
      stringArray0[6] = ",4!nW ?q";
      stringArray0[7] = "relational";
      stringArray0[8] = "real";
      jRip0.setOptions(stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.setCheckErrorRate(true);
      jRip0.listOptions();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      StringReader stringReader0 = new StringReader("");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 7);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("", protectedProperties2);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => =", string1);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string2 = jRip_NumericAntd0.getRevision();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("8118", string2);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2085716838811678
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L7L>CE7uOyF~kGXy9`";
      stringArray0[1] = "P_mp \"BGxe{";
      stringArray0[2] = "P_mp \"BGxe{";
      stringArray0[3] = "P_mp \"BGxe{";
      Attribute attribute0 = new Attribute("r||:4\u0001a");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "@attribute";
      stringArray1[1] = "P_mp \"BGxe{";
      stringArray1[2] = "r||:4\u0001a";
      stringArray1[3] = "implementation in aspects of accuracy, ruleset size and running time ";
      jRip0.setOptions(stringArray1);
      attribute0.indexOfValue("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.setCheckErrorRate(false);
      jRip0.listOptions();
      jRip0.getSeed();
      jRip_NumericAntd0.getAttr();
      assertFalse(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Remove remove0 = new Remove();
      decisionTable0.m_delTransform = remove0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L7L>CE7uOyF~~kGXy9`");
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-E";
      stringArray0[1] = "T";
      stringArray0[2] = "WWt$TfE,(n#";
      stringArray0[3] = "";
      jRip0.setOptions(stringArray0);
      assertFalse(jRip0.getCheckErrorRate());
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.setCheckErrorRate(true);
      jRip0.listOptions();
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L7L>CE7uOyF~kGXy9`";
      stringArray0[1] = "P_mp \"BGxe{";
      stringArray0[2] = "P_mp \"BGxe{";
      stringArray0[3] = "L7L>CE7uOyF~kGXy9`";
      Attribute attribute0 = new Attribute("r||:4\u0001a");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 6.0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "L7L>CE7uOyF~~kGXy9`";
      stringArray0[1] = "P_mp \"Bxe{";
      stringArray0[2] = "P_mp \"Bxe{";
      stringArray0[3] = "P_mp \"Bxe{";
      stringArray0[4] = "3] pBOC^30f2]#Yu`k";
      stringArray0[5] = "P_mp \"Bxe{";
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.064396240310271
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3] pBOC^30f2]#Yu`k";
      stringArray0[1] = ",V@0Dff-%HxN";
      stringArray0[2] = "P_mp \"Bxe{";
      jRip0.setOptions(stringArray0);
      jRip0.setCheckErrorRate(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("3] pBOC^30f2]#Yu`k", linkedList0, (-3577));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      locale0.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("", linkedList0);
      IBk iBk0 = new IBk(1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("Nu)g*X+a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Nu)g*X+a not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip_RipperRule0.setConsequent((-2622.6624897555325));
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      Attribute attribute1 = new Attribute("w");
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute1);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.toString();
      Attribute attribute0 = new Attribute("Iz", "");
      jRip_RipperRule0.toString(attribute0);
      Utils.SMALL = (-364.47574);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip0.minNoTipText();
      jRip_RipperRule0.getRevision();
      jRip0.debugTipText();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      
      jRip_NominalAntd0.cover = (double) 2;
      jRip_NominalAntd0.getAttrValue();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      jRip_RipperRule0.covers(binarySparseInstance0);
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      jRip0.listOptions();
      Attribute attribute0 = new Attribute("ig,&#!#o");
      Attribute attribute1 = attribute0.copy("ig,&#!#o");
      attribute0.enumerateValues();
      attribute0.copy();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      
      String string1 = jRip0.checkErrorRateTipText();
      assertFalse(jRip0.getDebug());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string1);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("+2Ztt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // +2Ztt not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = (-3112.4851);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("is", arrayList0, 0);
      Instances instances1 = new Instances(instances0);
      jRip0.getUsePruning();
      try { 
        jRip0.rulesetForOneClass((-3112.4851), instances0, 0, (-3112.4851));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      double double0 = (-3112.4851);
      String string0 = "is";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      try { 
        jRip0.rulesetForOneClass((-3112.4851), (Instances) null, (-3112.4851), 6.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.198051792436285
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(11, stringArray0.length);
      
      String[] stringArray1 = new String[3];
      stringArray1[0] = "3] pBOC^30f2]#Yu`k";
      stringArray1[1] = ",V@0Dff-%HxN";
      stringArray1[2] = "P_mp \"Bxe{";
      jRip0.setOptions(stringArray1);
      jRip0.setCheckErrorRate(true);
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("VIK&QS", 376);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy((Classifier) null);
      Utils.log2 = (-1871.02954);
      jRip0.seedTipText();
      Attribute attribute0 = new Attribute((String) null, ". 9h Fw-", 42);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(3293L);
      SparseInstance sparseInstance0 = new SparseInstance(11);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(sparseInstance0);
      int[] intArray0 = new int[8];
      intArray0[0] = 19;
      intArray0[1] = 6;
      intArray0[2] = 19;
      intArray0[3] = 11;
      intArray0[4] = 19;
      intArray0[5] = 6;
      intArray0[6] = 6;
      intArray0[7] = 11;
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance(177.3, (double[]) null, intArray0, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip_RipperRule0.getConsequent();
      int int0 = 6;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.convertInstance((Instance) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // convertInstance: Principal components not built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("is", arrayList0, 0);
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass(0, instances0, (-1.0), (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7509066143365108
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3] pBOC^30f2]#Yu`k";
      stringArray0[1] = ",V@0Dff-%HxN";
      stringArray0[2] = "P_mp \"Bxe{";
      jRip0.setOptions(stringArray0);
      jRip0.checkErrorRateTipText();
      jRip0.setUsePruning(false);
      assertFalse(jRip0.getUsePruning());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.8872569749260304
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0, (-1364));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.makeCopies(additiveRegression0, 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      jRip_NominalAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      JRip.RipperRule jRip_RipperRule2 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule2.getConsequent(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule2, jRip_RipperRule1);
      
      long long0 = jRip0.getSeed();
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, long0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4572.698234788694;
      jRip0.getCheckErrorRate();
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (double) 5;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4, doubleArray0);
      try { 
        coverTree0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.300534891680103
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      String string0 = jRip0.globalInfo();
      jRip0.setOptimizations((-3188));
      jRip0.setDebug(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      attribute0.equals(string0);
      jRip_RipperRule0.toString(attribute0);
      jRip_RipperRule0.setConsequent(0.0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      jRip0.setMinNo((-3731.16));
      jRip_NumericAntd0.copy();
      jRip0.getSeed();
      IBk iBk0 = new IBk(1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 0, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo((-3112.4851));
      JRip jRip1 = new JRip();
      jRip1.minNoTipText();
      ProtectedProperties protectedProperties0 = null;
      try {
        protectedProperties0 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("oFKY5Jl", linkedList0, 11);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip.main((String[]) null);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-1574));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip0.listOptions();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      int[] intArray0 = new int[5];
      intArray0[1] = 1;
      intArray0[2] = (-4549);
      intArray0[4] = 9;
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = 0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      jRip0.minNoTipText();
      jRip_RipperRule0.getRevision();
      jRip0.debugTipText();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("is", "The minimum total weight of the instances in a rule.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'T'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7509066143365108
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "_";
      stringArray0[2] = "HdE#6ZXvAsa_";
      stringArray0[3] = "";
      stringArray0[4] = ";`yB_XLdohRkv,!$8#";
      jRip0.setOptions(stringArray0);
      AbstractClassifier.makeCopies(jRip0, 767);
      jRip0.getRevision();
      String[] stringArray1 = jRip0.getOptions();
      assertEquals(11, stringArray1.length);
      
      jRip0.enumerateMeasures();
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.4955170051907487
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("YO3:>f:o+M\"VR", "", 2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.hasAntds();
      jRip_RipperRule0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "numeric";
      stringArray0[2] = "date";
      stringArray0[3] = "real";
      stringArray0[4] = "weka.classifiers.rules.JRip$NumericAntd";
      stringArray0[5] = "Rl/Wr<]E\"S";
      stringArray0[6] = "string";
      stringArray0[7] = "8118";
      stringArray0[8] = "numeric";
      jRip0.setOptions(stringArray0);
      double double0 = jRip_NominalAntd0.maxInfoGain;
      JRip jRip1 = new JRip();
      jRip1.getRevision();
      jRip0.getSeed();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1775));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      IBk iBk0 = new IBk(1);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, 0);
      Attribute attribute1 = attribute0.copy((String) null);
      jRip0.setCheckErrorRate(true);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      jRip0.getSeed();
      Attribute attribute0 = new Attribute("c_j?!y,20y/h,rNRuX\"", 2);
      attribute0.value(2);
      JRip jRip1 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "integer";
      stringArray0[3] = "c_j?!y,20y/h,rNRuX\"";
      stringArray0[1] = "string";
      stringArray0[5] = "string";
      try { 
        jRip1.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Remove remove0 = new Remove();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L7L>CE7uOyF~~kGXy9`");
      Instances instances0 = decisionTable0.m_dtInstances;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1589.3302607107596);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (-13.8);
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 2216.9954;
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 5;
      intArray0[2] = 1;
      intArray0[3] = 4;
      intArray0[4] = 5;
      intArray0[5] = 5;
      intArray0[6] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-13.8), intArray0, (-45));
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "L7L>CE7uOyF~~kGXy9`");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[23];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) (-4549);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 5;
      doubleArray0[5] = 0.0;
      String string0 = jRip0.optimizationsTipText();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The number of optimization runs.", string0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      IBk iBk0 = new IBk();
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 46;
      doubleArray0[2] = 976.242978953;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 4;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = 3216.6218411458;
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = (-2156);
      intArray0[4] = 1;
      intArray0[5] = 4;
      intArray0[6] = 1;
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getCover();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      IBk iBk0 = new IBk(4);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6941960781238792
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(11);
      JRip jRip1 = new JRip();
      jRip1.setFolds(80);
      assertEquals(80, jRip1.getFolds());
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(sparseInstance0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-4595);
      intArray0[1] = 6;
      intArray0[2] = (-4595);
      intArray0[3] = 11;
      intArray0[4] = (-4595);
      intArray0[5] = 6;
      JRip jRip2 = new JRip();
      jRip2.setOptions((String[]) null);
      assertEquals(1L, jRip2.getSeed());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      IBk iBk0 = new IBk();
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      jRip_NominalAntd0.accu = 0.5;
      jRip_NominalAntd0.getAttrValue();
      JRip jRip1 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      String string0 = jRip0.foldsTipText();
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip_RipperRule0.setConsequent(0.0);
      jRip0.getOptions();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip0.globalInfo();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertTrue(jRip0.getCheckErrorRate());
      
      jRip0.setCheckErrorRate(false);
      assertFalse(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(11);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip_RipperRule0.size();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (-1589.3302607107596);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 11;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 4;
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 1;
      intArray0[2] = 5;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 3;
      intArray0[6] = 5;
      intArray0[7] = 2;
      SparseInstance sparseInstance1 = new SparseInstance(2591.637505501347, doubleArray0, intArray0, 2);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      assertEquals(2, sparseInstance2.numAttributes());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = new Attribute("L7L>CE7uOyF~~kGXy9`");
      IBk iBk0 = new IBk(4);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "numeric");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy((Classifier) null);
      Utils.log2 = (-1871.02954);
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      
      Attribute attribute0 = new Attribute((String) null, ". 9h Fw-", 42);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip jRip1 = new JRip();
      String string1 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute1 = new Attribute("n}5't.'.Ypd;z", 1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertTrue(jRip1.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(1L, jRip1.getSeed());
      assertFalse(jRip1.getDebug());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4741050341006434
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      jRip0.getTechnicalInformation();
      stringArray0[0] = "-N";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "#a[mQcRh'+sa+i:`%";
      stringArray0[4] = "";
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1450.72308);
      jRip_RipperRule0.setConsequent(1422.228308249822);
      assertEquals(1422.228308249822, jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.getCapabilities();
      jRip0.setOptions(stringArray0);
      Attribute attribute0 = new Attribute("Whether if the normalization of attributes should be turned off for distance calculation (Default: false i.e. attribute values are normalized). ", "", (-1));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }
}
