/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:07:27 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.939792811164566
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "-M";
      Discretize discretize0 = new Discretize("-M");
      discretize0.setOutputFormat();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      String string1 = "bx|0Jn";
      arrayList1.add("bx|0Jn");
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = object0;
      Object object2 = new Object();
      objectArray0[1] = object2;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) discretize0;
      objectArray0[4] = object0;
      arrayList1.toArray(objectArray0);
      Discretize discretize1 = new Discretize();
      discretize0.getCutPoints((-1913));
      discretize1.binsTipText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-M";
      stringArray0[1] = "bx|0Jn";
      stringArray0[2] = "bx|0Jn";
      stringArray0[3] = "-M";
      stringArray0[4] = "-M";
      stringArray0[5] = "Number of bins.";
      stringArray0[6] = "bx|0Jn";
      stringArray0[7] = "-M";
      stringArray0[8] = "-M";
      try { 
        discretize1.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, (byte)0);
      Instances instances1 = new Instances(instances0, (byte)0);
      Instances instances2 = new Instances("@data", arrayList0, 3382);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute("ERROR: pop did not throw exception!", list0);
      arrayList0.add(attribute0);
      Instances instances3 = new Instances("Registering ", arrayList0, 1);
      attribute0.setStringValue("@relation");
      Discretize discretize0 = new Discretize("No second input file given.\n");
      try { 
        discretize0.setInputFormat(instances3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at No second input file given.
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)41;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Consumer<Locale.LanguageRange> consumer0 = (Consumer<Locale.LanguageRange>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      linkedList1.poll();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0, locale_FilteringMode1);
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1781274094291887
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine(" .,;:!?'\"");
      Attribute attribute0 = new Attribute("ce;=*`'w", (String) null, (-1789569704));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)", arrayList0, 1);
      attribute0.setStringValue("");
      Instances instances1 = new Instances(instances0, 461);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = (-1789569704);
      intArray0[2] = (-1789569704);
      intArray0[3] = 2;
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("9$2u(");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-1.0);
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("\n");
      discretize0.m_IgnoreClass = false;
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      
      String string1 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string1);
      
      String string2 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string2);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=8VOg+;#");
      Discretize discretize0 = new Discretize("J9lTpJV7F4V3zmsKP*[");
      double[][] doubleArray0 = new double[3][4];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) (byte) (-22);
      doubleArray1[1] = (double) (byte) (-22);
      doubleArray1[2] = (double) (byte)41;
      doubleArray1[4] = (double) (byte)41;
      doubleArray1[5] = (double) (byte) (-22);
      doubleArray1[6] = 2415.449;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 5.5;
      doubleArray2[1] = (double) (byte) (-22);
      doubleArray2[2] = (double) (byte)41;
      doubleArray2[3] = 2415.449;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (double) (byte)41;
      doubleArray3[1] = 5.5;
      doubleArray3[2] = (double) (byte) (-22);
      doubleArray3[3] = (double) (byte) (-22);
      doubleArray3[5] = 2014.3720816;
      doubleArray3[6] = 5.5;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((byte)41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 41
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, (byte)0);
      Instances instances1 = new Instances(instances0, (byte)0);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances1.forEach(consumer0);
      stringArray0[2] = "@relation";
      instances1.listIterator();
      Instances.test(stringArray0);
      Instances instances2 = new Instances(instances1);
      try { 
        discretize0.setInputFormat(instances2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, (byte)0);
      Instances instances1 = new Instances(instances0, (byte)0);
      Instances instances2 = new Instances("@data", arrayList0, 3382);
      arrayList0.listIterator();
      arrayList0.listIterator();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "Z!0OG@'D3ULg3LCO[Gx";
      Discretize discretize0 = new Discretize("Z!0OG@'D3ULg3LCO[Gx");
      discretize0.getRevision();
      String[] stringArray0 = new String[1];
      Filter filter0 = Filter.makeCopy(discretize0);
      try { 
        filter0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9111939941470046
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("LuI>IHG15ls*BuGS#uG");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("LuI>IHG15ls*BuGS#uG", (List<String>) null, 77);
      arrayList0.add(attribute0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "6";
      stringArray0[2] = "LuI>IHG15ls*BuGS#uG";
      stringArray0[3] = "string";
      stringArray0[4] = "integer";
      stringArray0[5] = "@attribute";
      stringArray0[6] = "@attribute";
      Discretize.main(stringArray0);
      Attribute attribute1 = new Attribute("ce;=`'w", "'B2of2'", 2);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("ce;=`'w", arrayList0, 2);
      Instances instances1 = new Instances(instances0, (-1994091956));
      Discretize discretize1 = new Discretize();
      Instances instances2 = new Instances(instances0);
      boolean boolean0 = discretize0.m_IgnoreClass;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(67, intArray0, (-308));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-3881.5963495), intArray0, 14);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(14);
      Discretize discretize0 = new Discretize("$b6y?iG@8A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$b6y?iG@8A");
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      binarySparseInstance3.setWeight((-3351.9179713));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1073;
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (double) 67;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (-3881.5963495);
      doubleArray0[6] = (double) 1073;
      doubleArray0[7] = 5.70001;
      doubleArray0[8] = (double) 14;
      SparseInstance sparseInstance0 = new SparseInstance(5.70001, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.831673301904631
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("-M");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.poll();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(289);
      arrayList0.removeAll(linkedList0);
      arrayList0.add((Locale.LanguageRange) null);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      SystemInUtil.addInputLine("-M");
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-M";
      stringArray0[1] = "S)QGZt@; nB";
      stringArray0[2] = "S)QGZt@; nB";
      stringArray0[3] = "S)QGZt@; nB";
      stringArray0[4] = "-M";
      stringArray0[5] = "-M";
      stringArray0[6] = "-M";
      stringArray0[7] = "-M";
      Filter.runFilter(discretize0, stringArray0);
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize1.findNumBins((-172));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1952692537765084
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)41;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)89;
      byteArray0[5] = (byte) (-3);
      byteArray0[6] = (byte)33;
      Discretize discretize0 = new Discretize("M?F3/=eCJ[0D");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("P[Y;,__pLSc\"v`\"2O");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "P[Y;,__pLSc\"v`\"2O";
      stringArray0[1] = "P[Y;,__pLSc\"v`\"2O";
      stringArray0[2] = "P[Y;,__pLSc\"v`\"2O";
      stringArray0[3] = "P[Y;,__pLSc\"v`\"2O";
      stringArray0[4] = "P[Y;,__pLSc\"v`\"2O";
      stringArray0[5] = "P[Y;,__pLSc\"v`\"2O";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.710283334414665
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "M?F3/=eCJ[0D";
      Discretize discretize0 = new Discretize("M?F3/=eCJ[0D");
      discretize0.setInvertSelection(true);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8155859898897524
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("eDI8s^^[ZM");
      discretize0.setBins(3094);
      discretize0.getOptions();
      discretize0.getInvertSelection();
      discretize0.listOptions();
      discretize0.setBins(315);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-84));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[3];
      int int0 = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 456;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getAttributeIndices();
      discretize0.globalInfo();
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.setUseEqualFrequency(true);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setFindNumBins(true);
      DenseInstance denseInstance0 = new DenseInstance(0);
      denseInstance0.toString();
      // Undeclared exception!
      try { 
        denseInstance0.classValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "P[;,__pLSc\"v`\"2O";
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      Locale.getISOLanguages();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-308);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(67, intArray0, (-308));
      int int1 = 1073;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-3881.5963495), intArray0, 14);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(14);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.970166511608329
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      discretize0.invertSelectionTipText();
      discretize0.setFindNumBins(false);
      discretize0.listOptions();
      discretize0.findNumBinsTipText();
      discretize0.makeBinaryTipText();
      discretize0.getInvertSelection();
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "k[R3MDWmfnJ~Bn.Y");
      Discretize discretize0 = new Discretize("p7>*o:KyTtEl");
      String[] stringArray0 = new String[2];
      discretize0.setMakeBinary(true);
      stringArray0[0] = "false";
      stringArray0[1] = "2SGkeZ=E#MgeX/l";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: false 2SGkeZ=E#MgeX/l 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("#z@G");
      discretize0.getUseEqualFrequency();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize(" less than lower bound (");
      String[] stringArray0 = new String[6];
      stringArray0[0] = " less than lower bound (";
      stringArray0[1] = " less than lower bound (";
      stringArray0[2] = " less than lower bound (";
      stringArray0[3] = " less than lower bound (";
      stringArray0[4] = " less than lower bound (";
      stringArray0[5] = " less than lower bound (";
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      int[] intArray0 = new int[9];
      intArray0[0] = (-2);
      intArray0[2] = 67;
      intArray0[3] = (-2);
      intArray0[4] = (-308);
      intArray0[6] = 10;
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) 0;
      objectArray0[2] = (Object) (-308);
      Object object1 = new Object();
      objectArray0[3] = object1;
      Object object2 = new Object();
      objectArray0[4] = object2;
      Object[] objectArray1 = arrayList0.toArray(objectArray0);
      assertSame(objectArray1, objectArray0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, (byte)0);
      Instances instances1 = new Instances(instances0, (byte)0);
      Instances instances2 = new Instances("@data", arrayList0, 3382);
      arrayList0.listIterator();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances1.replaceAll(unaryOperator0);
      Discretize discretize0 = new Discretize("first-last");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(67, intArray0, (-308));
      Discretize discretize0 = new Discretize("t=Oy^OT?");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.0));
      String[] stringArray0 = new String[3];
      Instances.test(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.poll();
      arrayList0.add((Locale.LanguageRange) null);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode1);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "S)QGZt@; nB";
      stringArray0[1] = "S)QGZt@; nB";
      stringArray0[2] = "S)QGZt@; nB";
      stringArray0[3] = "S)QGZt@; nB";
      stringArray0[4] = "S)QGZt@; nB";
      stringArray0[5] = "S)QGZt@; nB";
      stringArray0[6] = "S)QGZt@; nB";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("");
      discretize0.setInvertSelection(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("'", protectedProperties1);
      discretize0.getAttributeIndices();
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setOutputFormat();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = object0;
      Object object3 = new Object();
      objectArray0[1] = object3;
      objectArray0[2] = object1;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) arrayList0;
      Object object4 = new Object();
      objectArray0[5] = object4;
      objectArray0[6] = (Object) arrayList0;
      Object object5 = new Object();
      objectArray0[7] = object5;
      objectArray0[8] = object2;
      arrayList1.toArray(objectArray0);
      discretize0.getUseBinNumbers();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2826));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("9Y2u(");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9Y2u(");
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "false";
      stringArray0[1] = "]Se&JC";
      stringArray0[2] = "";
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(67, intArray0, (-308));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("t=Oy^OT?");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1286.606098389317);
      SparseInstance sparseInstance0 = new SparseInstance(356);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance1);
      binarySparseInstance2.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)41;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("V");
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object1;
      objectArray0[1] = object2;
      objectArray0[2] = (Object) linkedList1;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Discretize discretize0 = new Discretize("V");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("first-last", arrayList0, (byte)0);
      Instances instances1 = new Instances(instances0, (byte)0);
      Instances instances2 = new Instances("@data", arrayList0, 3382);
      Discretize discretize0 = new Discretize("first-last");
      instances1.setRelationName("first-last");
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      Object object0 = new Object();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.toArray((Object[]) stringArray0);
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=8VOg+;#");
      Discretize discretize0 = new Discretize("}=I3sNQcjWj!");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.getBinRangesString((-2161));
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)41;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      SystemInUtil.addInputLine("S)QGZt@; nB");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode0);
      linkedList1.poll();
      Discretize discretize0 = new Discretize("Nominal class");
      discretize0.getCutPoints((byte)41);
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(67, intArray0, (-308));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-3881.5963495), intArray0, 14);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(14);
      Discretize discretize0 = new Discretize("$b6y?iG@8A");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "$b6y?iG@8A");
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance1);
      binarySparseInstance3.setWeight((-3351.9179713));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1073;
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (double) 67;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = (double) 14;
      doubleArray0[5] = (-3881.5963495);
      doubleArray0[6] = (double) 1073;
      doubleArray0[7] = 5.70001;
      doubleArray0[8] = (double) 14;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$b6y?iG@8A";
      stringArray0[1] = "$b6y?iG@8A";
      stringArray0[2] = "$b6y?iG@8A";
      stringArray0[3] = "$b6y?iG@8A";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(67, intArray0, (-308));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("t=Oy^OT?");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (double) 67;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-308);
      doubleArray0[6] = (double) (-308);
      doubleArray0[7] = (double) 14;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(14, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize("tjkut'Or18l(J6,C");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(67, intArray0, (-308));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("t=[y^3T?");
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 14;
      doubleArray0[1] = (double) 67;
      doubleArray0[2] = (double) 67;
      doubleArray0[3] = (double) 14;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-308);
      doubleArray0[6] = (double) (-308);
      doubleArray0[7] = (double) 14;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(14, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
