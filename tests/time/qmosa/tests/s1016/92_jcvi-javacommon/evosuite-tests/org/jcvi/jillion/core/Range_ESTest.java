/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:07:44 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.245905362460896
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = (-690L);
      Range range0 = Range.of((-690L));
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.896136238781334
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of(4141L, 4141L);
      range0.spliterator();
      range0.endsBefore(range0);
      List<Range> list0 = range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.equals(list0);
      assertEquals(0, list0.size());
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 8842L, 8842L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.7318995993548527
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(4294967295L);
      range0.endsBefore(range1);
      List<Range> list0 = range1.complement(range0);
      range0.iterator();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(4294967295L);
      range0.intersection(range1);
      range1.equals(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("H8yP3>!)*~ut197;1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse H8yP3>!)*~ut197;1 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.7363078147077857
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = range0.intersection(range1);
      range0.endsBefore(range2);
      Range range3 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range1.complement(range2);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      range1.iterator();
      Range.of(9223372036854771700L);
      range0.equals(range3);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertSame(range0, range2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3010144690573107
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.of((-193L), (-193L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775800L, (-193L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -193 would make range [9223372036854775800 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.705813913449428
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(range0.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range1));
      
      range0.iterator();
      Range range2 = Range.of(9223372036854771700L);
      boolean boolean1 = range0.equals(range2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.479981902987775
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 7L;
      Range range0 = Range.ofLength(7L);
      Range range1 = Range.of(7L);
      range0.getBegin();
      range1.spliterator();
      range0.isSubRangeOf(range1);
      range1.split(7L);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("(4{u(k>^=CA}uWh");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (4{u(k>^=CA}uWh into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8331418207351025
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.ofLength(7L);
      Range range1 = Range.of(7L);
      range0.isSubRangeOf(range1);
      List<Range> list0 = range1.split(7L);
      range0.complementFrom(list0);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range1.split(8L);
      range1.complementFrom(list0);
      Range range2 = Range.of(8L);
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(7L, (-1922L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6822799065669027
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(4109L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.iterator();
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.parseRange("[ 4109 .. 4110 ]/SB", range_CoordinateSystem1);
      range0.startsBefore(range1);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0808360831049293
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.of(9223372036854771700L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.397581313593758
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Range range1 = Range.ofLength(2022L);
      range0.intersects(range1);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2022L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.054771351135407
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      range0.endsBefore(range1);
      range0.toString(range_CoordinateSystem0);
      range1.spliterator();
      range1.intersects(range0);
      range0.complement(range1);
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd();
      Range range3 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      range3.split(4294967295L);
      range2.endsBefore(range0);
      range0.startsBefore(range0);
      Range.of((-1L));
      // Undeclared exception!
      try { 
        Range.of(0L, (-3376L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.211482266101241
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.ofLength(374L);
      range0.getEnd();
      Range range1 = Range.of((-2356L), 374L);
      range0.getLength();
      List<Range> list0 = range1.complement(range0);
      range0.startsBefore(range1);
      long long0 = 65535L;
      Range range2 = Range.ofLength(65535L);
      range1.complementFrom(list0);
      range2.complementFrom(list0);
      range2.endsBefore(range1);
      range0.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.688839470212627
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 2022L;
      Range range0 = Range.ofLength(2022L);
      long long1 = 0L;
      Range range1 = Range.of(0L, 1075L);
      range1.spliterator();
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5139867481869307
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      Range range1 = Range.of((-128L), (-128L));
      range0.intersects(range1);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2216L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.175082024721997
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getLength();
      range0.getLength();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = Range.of((-1L), 1916L);
      Range range2 = Range.of(2022L);
      List<Range> list0 = range2.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      //  // Unstable assertion: assertTrue(list1.contains(range2));
      //  // Unstable assertion: assertEquals(2, list1.size());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7453475211467224
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of((-193L), (-193L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range range1 = Range.of(range_CoordinateSystem0, 785L, 4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long1 = 0L;
      Range.of((-193L), 0L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.512579311695636
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 785L, 4294967295L);
      long long0 = range0.getBegin();
      assertEquals(785L, long0);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-1L));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.354100214318228
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      long long1 = 1287L;
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.925575865379783
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      range3.toString(range_CoordinateSystem0);
      range0.endsBefore(range3);
      Range range4 = Range.ofLength(9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range3);
      range4.complementFrom(linkedList0);
      range0.isEmpty();
      range_CoordinateSystem0.toString();
      Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/SB");
      range2.getLength();
      Range range5 = Range.of(1L);
      range3.startsBefore(range5);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6570201055915526
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.ofLength(7L);
      Range range1 = Range.of(7L);
      range0.isSubRangeOf(range1);
      List<Range> list0 = range1.split(7L);
      range0.complementFrom(list0);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$Comparators", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$Comparators into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.5837921419591368
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Range range1 = Range.of(0L, 1075L);
      range0.iterator();
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.9670882953653654
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(815L, 9223372036854775807L);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(1798L);
      range2.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 815L, 3818L);
      // Undeclared exception!
      try { 
        range1.split((-2110L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.541061843572177
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(1535L, 1535L);
      range0.toString();
      Range.of((-2147483648L), (-415L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Wlduw;{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Wlduw;{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.777597460567112
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(4294967295L);
      range1.endsBefore(range0);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range2 = range_Builder0.build();
      long long0 = 1197L;
      Range range3 = Range.ofLength(1197L);
      range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967295L, (-446L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6462263651297655
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      long long0 = (-193L);
      Range range0 = Range.of((-193L));
      long long1 = 32767L;
      Range range1 = Range.of((-32768L));
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-193L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7722379864387947
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(4108L, 4108L);
      Range range1 = Range.of(4108L, 4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 9977L, 4294967295L);
      Range range2 = Range.of(965L);
      Range range3 = range0.intersection(range2);
      assertFalse(range2.isEmpty());
      assertTrue(range3.isEmpty());
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.8957856444881585
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(4141L, 4141L);
      range0.spliterator();
      range0.endsBefore(range0);
      range0.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.390776384988023
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of((-128L), (-128L));
      range0.getEnd();
      String string0 = "yEx|+:XKd-";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("yEx|+:XKd-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse yEx|+:XKd- into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.876029733900967
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range1.intersection(range0);
      List<Range> list0 = range0.complement(range1);
      range0.getEnd();
      range0.complementFrom(list0);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("-B!'$0fY^VEV{v\f", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse -B!'$0fY^VEV{v\f into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.809074450578472
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(4108L, 4108L);
      range0.spliterator();
      Range range1 = Range.of(727L);
      Range range2 = Range.of(0L);
      Range range3 = range2.intersection(range0);
      assertFalse(range2.isEmpty());
      assertTrue(range3.isEmpty());
      
      range1.startsBefore(range0);
      Range range4 = Range.of(727L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      assertSame(range1, range4);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8279129353321655
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of((-193L), (-193L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 785L, 4294967295L);
      Range range2 = range0.intersection(range1);
      range2.getLength();
      range0.getBegin(range_CoordinateSystem0);
      long long0 = range2.getLength();
      assertFalse(range1.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6013766878690725
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(4294967295L);
      List<Range> list0 = range0.split(4294967295L);
      List<Range> list1 = range1.complementFrom(list0);
      range1.complementFrom(list1);
      // Undeclared exception!
      try { 
        range1.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.997983045961736
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 4294967295L, 4294967295L);
      range0.isSubRangeOf(range0);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-809L), 4294967295L);
      Range range2 = range_Builder0.build();
      Range range3 = Range.ofLength(4108L);
      range3.intersection(range2);
      long long0 = 9954L;
      long long1 = (-422L);
      Range.of((-422L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$Comparators", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$Comparators into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.970346508243119
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getLength();
      range0.getLength();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(2022L);
      List<Range> list0 = range1.split(2022L);
      range1.complementFrom(list0);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("(v_{TXPSz2jztOp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.(v_{TXPSz2jztOp
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=4.043950729851012
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.of((-193L));
      Range range1 = Range.of((-32768L));
      List<Range> list0 = range0.complement(range1);
      Range.of(2340L);
      Object object0 = new Object();
      range1.equals(object0);
      List<Range> list1 = range1.split(32767L);
      range1.complementFrom(list1);
      List<Range> list2 = range1.complementFrom(list1);
      assertFalse(list2.equals((Object)list0));
      assertTrue(list2.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.051111079399451
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      range0.iterator();
      Range range3 = Range.of(0L, 4009L);
      Range range4 = Range.of((-1340L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range4.complementFrom(list0);
      assertTrue(list1.contains(range1));
      assertFalse(range4.isEmpty());
      assertNotSame(range1, range3);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.7569831402534444
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of((-193L), (-193L));
      Range range1 = Range.of((-193L), 2105L);
      range0.endsBefore(range1);
      range1.complement(range0);
      long long0 = (-476L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-476L), (-476L));
      range_Builder0.build();
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, (-193L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.716131700618888
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 4294967295L;
      Range range1 = Range.of(4294967295L);
      range0.endsBefore(range1);
      range1.complement(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range2 = range_Builder1.build();
      range2.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-9223372036854775805L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775805L), 4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.69082215273818
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((-9223372036854775808L));
      range1.endsBefore(range0);
      range0.complement(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-476L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.615009810942095
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of(4108L, 4108L);
      Range range1 = Range.of(4108L, 4294967295L);
      Object object0 = new Object();
      range1.split(4294967295L);
      boolean boolean0 = range0.isEmpty();
      Range range2 = Range.ofLength(4108L);
      Object object1 = new Object();
      boolean boolean1 = range2.intersects(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3007812004290016
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.of((-128L), (-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2017L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.623339967997357
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.ofLength(2022L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2022L, 2913L);
      range_Builder0.expandEnd(2913L);
      Range range0 = Range.of((-110L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.8058354773022143
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(0L, 4294967295L);
      range1.startsBefore(range0);
      boolean boolean0 = range2.startsBefore(range3);
      assertFalse(boolean0);
      assertTrue(range2.isEmpty());
      
      Range range4 = range3.asRange();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.134872968988304
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-128L);
      range_Builder0.shift((-128L));
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.745707375765456
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      Range range1 = Range.of(0L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      
      range0.startsBefore(range1);
      Range range3 = Range.of(0L);
      boolean boolean0 = range0.startsBefore(range3);
      assertFalse(range3.isEmpty());
      assertSame(range3, range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.978893781104437
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(764L);
      range_Builder0.copy();
      range_Builder0.expandEnd((-329L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.expandBegin(764L);
      long long0 = (-45L);
      range_Builder1.contractBegin((-45L));
      range_Builder1.contractEnd(764L);
      // Undeclared exception!
      try { 
        Range.parseRange("VpJ$@D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse VpJ$@D into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.945137423322472
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2022L, long0);
      
      range0.getLength();
      range0.getLength();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = Range.of(2022L, 2022L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = Range.of((-966L));
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.equals(range_Builder0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.0626575065413375
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      range0.endsBefore(range1);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. -1 ]/0B", string0);
      
      Range range2 = Range.ofLength(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of((-1922L));
      range1.complement(range3);
      Range range4 = Range.of((-296L), 4294967295L);
      range1.startsBefore(range4);
      range0.startsBefore(range1);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range range5 = range3.intersection(range4);
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.361445543503274
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.ofLength(2022L);
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      long long1 = 255L;
      // Undeclared exception!
      try { 
        Range.of(2022L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.355647603099659
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of(838L, 838L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(839L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4768319716056624
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-128L));
      Range range0 = range_Builder0.build();
      long long0 = (-836L);
      Range range1 = range0.intersection(range0);
      range1.startsBefore(range0);
      long long1 = 65535L;
      Range range2 = Range.of(65535L);
      range0.startsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.338123915578089
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.of((-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("yEx|+:XKd-", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse yEx|+:XKd- into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-1404L));
      range_Builder0.expandBegin((-55L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      range_Builder0.contractEnd((-1L));
      range_Builder0.shift((-297L));
      range_Builder0.shift(857L);
      range_Builder0.contractEnd((-959L));
      range_Builder0.expandEnd(2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.739345638134477
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-395L), (-395L));
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.084535020596188
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(4294967295L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      range0.toString(range_CoordinateSystem0);
      range1.spliterator();
      range1.endsBefore(range0);
      range0.complement(range1);
      Range range2 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString();
      range2.getEnd();
      Range range3 = Range.of(range_CoordinateSystem1, 0L, 4294967295L);
      List<Range> list0 = range3.split(4294967295L);
      assertFalse(list0.contains(range1));
      assertFalse(range3.isEmpty());
      assertTrue(list0.contains(range3));
      
      range2.endsBefore(range0);
      range2.isEmpty();
      Range range4 = Range.of((-1L));
      String string0 = range4.toString(range_CoordinateSystem1);
      assertEquals("[ -1 .. 0 ]/SB", string0);
      
      boolean boolean1 = range2.isSubRangeOf(range4);
      assertTrue(boolean1);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, 0L, 926L);
      assertFalse(range5.isEmpty());
      
      range1.startsBefore(range0);
      assertFalse(range1.equals((Object)range3));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.637620723018454
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(1535L);
      range_Builder0.build();
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      range_Builder1.contractEnd((-3438L));
      range_Builder1.expandEnd((-1307L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 127L, (-3438L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.9364619313177465
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      range0.spliterator();
      Range range1 = Range.of(11L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range2.isSubRangeOf(range0);
      assertFalse(boolean0);
      
      range0.startsBefore(range0);
      Range.of(727L);
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem0);
      assertEquals(12L, long0);
      
      boolean boolean1 = range2.intersects(range1);
      assertTrue(range2.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.9565538999288568
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      range_Builder0.expandBegin(1535L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1307L));
      Range range2 = Range.ofLength(2147483647L);
      Range range3 = range2.intersection(range1);
      assertFalse(range2.isEmpty());
      assertTrue(range3.isEmpty());
      
      Range range4 = Range.ofLength(652L);
      range4.startsBefore(range0);
      Range range5 = Range.of((-1307L));
      boolean boolean0 = range4.startsBefore(range1);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range5);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5645868562425225
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(0L, 1L);
      range_Builder0.contractEnd((-1L));
      range_Builder0.shift((-297L));
      range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd((-959L));
      range_Builder0.expandEnd(2147483647L);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.643596980233929
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775805L), 0L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(980L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.5270005754713
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1307L), (-1307L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long((-1270L));
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-1270L), 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.expandEnd(2147483647L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.552861342097328
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.of(1729L, 1729L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder0.shift(2147483647L);
      range_Builder1.shift(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2958L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of((-228L), (-228L));
      assertFalse(range0.isEmpty());
  }
}
