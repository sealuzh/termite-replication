/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:35:26 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 'A';
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("0pDlNP", charArray0, true, inetAddress0);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
      
      usernamePasswordToken0.setRememberMe(false);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("d}WGQPSt{j&`C|c4L", (String) null);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - d}WGQPSt{j&`C|c4L, rememberMe=false", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" anAiDOI[. GNV|Xpv*", (String) null, true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", (String) null, true, inetAddress1);
      assertTrue(usernamePasswordToken1.isRememberMe());
      
      usernamePasswordToken1.clear();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "(:!hI<3UR9MUuWD6P");
      usernamePasswordToken0.getUsername();
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
      
      usernamePasswordToken0.setRememberMe(false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "^]e", false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = 'V';
      charArray0[2] = '%';
      charArray0[3] = 'g';
      charArray0[4] = '>';
      charArray0[5] = '6';
      charArray0[6] = '~';
      charArray0[7] = 'O';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("V+Wr", charArray0, false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8945495015240397
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Q';
      charArray0[1] = '*';
      charArray0[2] = 'M';
      charArray0[3] = '0';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("s)X=bYhR^L9{%I/Sp", charArray0, false);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setUsername("s)X=bYhR^L9{%I/Sp");
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.setUsername("s)X=bYhR^L9{%I/Sp");
      usernamePasswordToken0.setUsername("s)X=bYhR^L9{%I/Sp");
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setUsername("s)X=bYhR^L9{%I/Sp");
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setRememberMe(false);
      String string0 = usernamePasswordToken0.toString();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - s)X=bYhR^L9{%I/Sp, rememberMe=false", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("h.!-`$#QX|9c", "h.!-`$#QX|9c", inetAddress0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("vjxEKcnC#0", "vjxEKcnC#0", inetAddress0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3786367172396226
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setUsername("U/vB,:O");
      char[] charArray0 = new char[8];
      usernamePasswordToken0.clear();
      charArray0[0] = 'Z';
      charArray0[1] = '$';
      usernamePasswordToken0.setRememberMe(false);
      charArray0[2] = '\\';
      usernamePasswordToken0.setRememberMe(false);
      charArray0[3] = '}';
      charArray0[4] = 'I';
      charArray0[5] = '$';
      charArray0[6] = '$';
      charArray0[7] = 'M';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setUsername("U/vB,:O");
      char[] charArray1 = new char[3];
      charArray1[0] = 'u';
      charArray1[1] = '}';
      charArray1[2] = 'M';
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setRememberMe(false);
      String string0 = usernamePasswordToken0.toString();
      assertFalse(usernamePasswordToken0.isRememberMe());
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "$z\"5fx", false);
      usernamePasswordToken0.setUsername("");
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("$z\"5fx", "", false);
      usernamePasswordToken1.setRememberMe(false);
      usernamePasswordToken1.getPassword();
      usernamePasswordToken0.toString();
      usernamePasswordToken1.setRememberMe(true);
      MockInetAddress.getByName("");
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken1.clear();
      usernamePasswordToken1.toString();
      usernamePasswordToken1.getUsername();
      usernamePasswordToken1.setRememberMe(true);
      usernamePasswordToken1.getUsername();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken1.setRememberMe(true);
      assertTrue(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.setUsername("");
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = 'd';
      charArray0[3] = '\u0080';
      charArray0[4] = '@';
      usernamePasswordToken0.getPassword();
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[7];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, inetAddress0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'v';
      charArray0[2] = 'W';
      charArray0[3] = '^';
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[18];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false (/127.0.0.1)", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" (", " (", inetAddress0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.setInetAddress(inetAddress1);
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", (char[]) null);
      usernamePasswordToken0.setPassword((char[]) null);
      Object object0 = new Object();
      char[] charArray0 = new char[1];
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("w<", "w<", inetAddress0);
      usernamePasswordToken0.getCredentials();
      char[] charArray0 = new char[7];
      charArray0[0] = 'N';
      charArray0[1] = 'd';
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      assertEquals("/192.168.1.42", inetAddress1.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", (char[]) null);
      Object object0 = new Object();
      usernamePasswordToken0.setUsername("");
      char[] charArray0 = new char[1];
      charArray0[0] = '@';
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("h.!-`$#QX|9c", "h.!-`$#QX|9c", inetAddress0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("{`c.", " anAiDOI[. GNV|Xpv*", true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
