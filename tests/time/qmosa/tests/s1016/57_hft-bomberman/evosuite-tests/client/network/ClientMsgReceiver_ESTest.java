/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:20:59 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.UnsupportedEncodingException;
import java.net.Proxy;
import java.sql.BatchUpdateException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLNonTransientException;
import java.sql.SQLSyntaxErrorException;
import java.sql.SQLTransactionRollbackException;
import messages.global.GlobalChatMsg;
import messages.round.RoundTimeOneSecondLeftMsg;
import messages.round.TileHitPlayerMsg;
import messages.session.SessionParticipationMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 2030;
      String string0 = "";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string0, string0);
      String string1 = "c1KI{(8b2~i]h";
      int int1 = 400;
      String string2 = "ERROR";
      int[] intArray0 = new int[3];
      intArray0[0] = int1;
      intArray0[1] = int1;
      intArray0[2] = int1;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException(string2, string1, int0, intArray0, sQLNonTransientException0);
      String string3 = "Starting Game!";
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg(string3);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 2030;
      TileHitPlayerMsg tileHitPlayerMsg0 = new TileHitPlayerMsg(int0);
      boolean boolean0 = false;
      String string0 = "ERROR";
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(boolean0, int0, string0);
      clientMsgReceiver0.processMsg(sessionParticipationMsg0);
      String string1 = "`I.GCdhJ/Ib4gdf!";
      String string2 = "messages.session.SessionStateMsg";
      SQLNonTransientException sQLNonTransientException0 = new SQLNonTransientException(string1, string2);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("UM", "oQL?%Q  =+ZD)1<", 1);
      SQLSyntaxErrorException sQLSyntaxErrorException0 = new SQLSyntaxErrorException(sQLIntegrityConstraintViolationException0);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("UM");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "UM");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0, "b)P");
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      mockThread0.setContextClassLoader(classLoader0);
      MockThread mockThread2 = new MockThread();
      MockThread.interrupted();
      Thread[] threadArray0 = new Thread[5];
      mockThread0.getStackTrace();
      threadArray0[0] = (Thread) mockThread2;
      threadArray0[1] = (Thread) mockThread2;
      MockThread.enumerate(threadArray0);
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      mockThread2.setContextClassLoader(classLoader1);
      MockThread.reset();
      MockThread.enumerate(threadArray0);
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread0;
      threadArray0[4] = (Thread) mockThread2;
      int int0 = MockThread.NORM_PRIORITY;
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      MockThread.reset();
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg("b)P");
      // Undeclared exception!
      try { 
        clientMsgReceiver1.processMsg(globalChatMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("messages.global.GlobalChatMsg", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      MockInetAddress.getLocalHost();
      int[] intArray0 = new int[7];
      intArray0[0] = 400;
      intArray0[1] = 400;
      intArray0[2] = 400;
      intArray0[3] = 486;
      intArray0[4] = 400;
      intArray0[5] = 0;
      intArray0[6] = 486;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("c1KI{(8b2~i]h", "Unknown message type: ", 400, intArray0, (Throwable) null);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("oQL?%Q  =+ZD)1<", "", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("", "b)P", sQLIntegrityConstraintViolationException0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("b)P", sQLTransactionRollbackException0);
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("", "`@S/v%b{PWRP_D~Y", 400, sQLNonTransientConnectionException0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLTransactionRollbackException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 2030;
      TileHitPlayerMsg tileHitPlayerMsg0 = new TileHitPlayerMsg(int0);
      clientMsgReceiver0.processMsg(tileHitPlayerMsg0);
      int int1 = 50000;
      int[] intArray0 = new int[16];
      intArray0[0] = int1;
      intArray0[1] = int1;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String string0 = "";
      OutputStreamWriter outputStreamWriter0 = null;
      try {
        outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, string0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      bomberClient0.discardSessionRequest();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException("b)P", "", 1);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException("I*k:Z`S?CJVh55flx-", "", sQLIntegrityConstraintViolationException0);
      sQLIntegrityConstraintViolationException0.fillInStackTrace();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("EcW.1`xAo`", "");
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException1 = new SQLIntegrityConstraintViolationException("common.GameRound", (String) null, 0, sQLTransactionRollbackException1);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver(bomberClient0.server, bomberClient0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      mockSocket0.getPort();
      RoundTimeOneSecondLeftMsg roundTimeOneSecondLeftMsg0 = new RoundTimeOneSecondLeftMsg(3439L);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(roundTimeOneSecondLeftMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }
}
