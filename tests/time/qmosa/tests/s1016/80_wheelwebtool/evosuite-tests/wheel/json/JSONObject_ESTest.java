/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 01:38:24 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.542426624289989
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.put("Y", true);
      Byte.toUnsignedInt((byte)28);
      JSONObject jSONObject2 = jSONObject0.put("(]c#.4w", false);
      jSONObject2.optBoolean("Y");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("{}");
      jSONObject0.put("2}", (Collection) linkedList0);
      assertTrue(linkedList0.contains(string0));
      
      boolean boolean0 = jSONObject1.optBoolean("A JSONObject text must end with '}'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, object0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject2 = jSONObject1.put("/YWOVmW)q*g", (Collection) linkedList0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.687825158096294
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(408L);
      linkedList0.offerLast(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      String string0 = "\\H*B";
      int int0 = 0;
      jSONObject0.toString(0, 0);
      jSONObject0.isNull("%uL0A");
      String string1 = "rot";
      Integer.getInteger("rot");
      try { 
        jSONObject1.get("%uL0A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%uL0A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.157440404345143
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject1.keys();
      Long long0 = new Long(0L);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("", (-1.59262126696001));
      jSONObject0.optString("g", (String) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.74665114209488
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Byte.toUnsignedInt((byte) (-34));
      JSONObject jSONObject2 = jSONObject0.put("", true);
      boolean boolean0 = jSONObject2.optBoolean("", true);
      assertTrue(boolean0);
      
      JSONObject.valueToString(jSONObject1);
      jSONObject1.keys();
      Object object0 = jSONObject0.opt("");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6655537979624024
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      byte byte0 = (byte)42;
      Byte byte1 = new Byte((byte)42);
      String string0 = "getnotifyAll";
      jSONObject1.accumulate("getnotifyAll", jSONObject0);
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject2.optLong("getnotifyAll");
      StringWriter stringWriter0 = new StringWriter((byte)42);
      StringWriter stringWriter1 = new StringWriter();
      String string1 = "sa+6;)Nmg9]@H`4$";
      stringWriter0.write("sa+6;)Nmg9]@H`4$");
      Writer writer0 = jSONObject2.write(stringWriter1);
      // Undeclared exception!
      jSONObject1.write(writer0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.752729779433152
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      String string0 = jSONObject0.toString(0, 0);
      boolean boolean0 = jSONObject0.isNull("%uL0A");
      assertTrue(boolean0);
      
      Integer.getInteger("rot");
      HashMap<Byte, Float> hashMap0 = new HashMap<Byte, Float>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject2.toString((-1346), 40);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      JSONObject jSONObject3 = jSONObject2.put("%uL0A", (Object) null);
      assertEquals(0, jSONObject3.length());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9055071003472293
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      Short short0 = new Short((short)6);
      Integer integer0 = new Integer((short)6);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer1 = new Integer((short)6);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = hashMap0.merge(short0, integer1, biFunction0);
      Short.compare((short)94, (short) (-1));
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("getlowestOneBit");
      Short short1 = new Short((short)6);
      Integer integer3 = new Integer((short)6);
      Short short2 = new Short((short)6);
      hashMap0.put(short2, integer2);
      JSONObject jSONObject3 = jSONObject1.put("getlowestOneBit", (Object) "Expected a ':' after a key");
      jSONObject0.optLong("] is not a JSONObject.");
      jSONObject1.toString(10, (int) (short)6);
      jSONObject3.names();
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Short cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.864836971977804
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      Byte byte0 = new Byte((byte)112);
      JSONObject jSONObject2 = jSONObject1.accumulate("", byte0);
      long long0 = new Byte((byte)112);
      StringWriter stringWriter0 = new StringWriter((byte)112);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write("{");
      jSONObject2.write(stringWriter1);
      jSONObject0.put("{", 1);
      jSONObject1.write(stringWriter0);
      jSONObject2.put(",:]}/\"[{;=#", 101);
      Float.sum((byte)112, (-2060.006F));
      // Undeclared exception!
      jSONObject2.toString(3901, 1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.092576858363855
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject1.keys();
      Long long0 = new Long(0L);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("", (-1.054849580773435));
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getgetClass";
      stringArray0[1] = "va";
      stringArray0[2] = "getgetClass";
      stringArray0[3] = "getgetClass";
      stringArray0[5] = "getgetClass";
      JSONObject jSONObject0 = new JSONObject("getgetClass", stringArray0);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0707341532512267
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String string0 = null;
      jSONObject0.optDouble((String) null);
      String string1 = "JSONArray[";
      try { 
        jSONObject0.put((String) null, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9847744105373337
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Substring bounds error";
      String string1 = "toU";
      JSONObject jSONObject1 = jSONObject0.put("toU", true);
      JSONObject jSONObject2 = jSONObject1.put("toU", 45L);
      jSONObject2.toString();
      jSONObject0.optBoolean("Substring bounds error", true);
      int int0 = 123;
      jSONObject0.optInt("Substring bounds error", 123);
      jSONObject0.optLong("Substring bounds error");
      jSONObject0.append("Substring bounds error", "Substring bounds error");
      jSONObject0.remove("Substring bounds error");
      try { 
        jSONObject0.getInt("Substring bounds error");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Substring bounds error\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.362410327284629
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Boolean boolean0 = new Boolean("isvalueOf");
      Byte byte0 = new Byte((byte) (-6));
      Byte byte1 = new Byte((byte)47);
      Boolean boolean1 = Boolean.valueOf((String) null);
      JSONObject jSONObject2 = new JSONObject(boolean1);
      jSONObject2.toString(21, (-81));
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.989499728493086
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject1.keys();
      Long long0 = new Long(0L);
      JSONObject.getNames((Object) long0);
      jSONObject1.optDouble("", (-1.054849580773435));
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.663689537876598
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ")WCs^hz3LZDj";
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      String string1 = "\\H*B";
      jSONObject0.toString(0, 0);
      jSONObject0.isNull("%uL0A");
      String string2 = "rot";
      Integer.getInteger(")WCs^hz3LZDj", 0);
      try { 
        jSONObject1.get("%uL0A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%uL0A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.571794680046677
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.put("\n", 0.0);
      Integer.getInteger("_Y9");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer(2423);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer1 = new Integer(3);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y9";
      stringArray0[1] = "_Y9";
      stringArray0[2] = "_Y9";
      jSONObject0.toString(850, 706);
      jSONObject0.names();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.7931482116625235
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      String string0 = "(]c#.4w";
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Byte.toUnsignedInt((byte)0);
      JSONObject jSONObject2 = jSONObject0.put("%iw3L'ND^t5", true);
      jSONObject2.optBoolean("%iw3L'ND^t5", true);
      Byte.toUnsignedInt((byte)0);
      jSONObject0.optDouble("yu");
      JSONObject.quote("(]c#.4w");
      jSONObject1.optInt("86e`[za7");
      String string1 = null;
      try { 
        jSONObject1.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2749466349572636
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "";
      Boolean boolean0 = new Boolean("");
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optDouble("is");
      jSONObject1.put("f", (-1145));
      JSONObject.quote("f");
      try { 
        jSONObject1.getJSONObject("f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"f\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getgetClass";
      stringArray0[1] = "eq";
      stringArray0[2] = "getgetClass";
      stringArray0[3] = "getgetClass";
      stringArray0[4] = "getequals";
      stringArray0[5] = "getgetClass";
      JSONObject jSONObject0 = new JSONObject("getgetClass", stringArray0);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("f`EWlx");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6107667398744567
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Byte.toUnsignedInt((byte) (-34));
      JSONObject jSONObject2 = jSONObject0.put("%iw3L'ND^t5", true);
      jSONObject2.optBoolean("%iw3L'ND^t5", true);
      Byte.toUnsignedInt((byte)0);
      jSONObject0.optDouble("yu");
      jSONObject1.get("] is not a number.");
      try { 
        jSONObject2.getLong("zng+cN8Wy4v!*&G6g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"zng+cN8Wy4v!*&G6g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5173551186224867
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject1.keys();
      Long long0 = new Long(0L);
      Long.sum(2359L, 1665L);
      JSONObject.getNames((Object) long0);
      jSONObject1.optDouble("", (-1.054849580773435));
      String string0 = "@_YtzBi:6x$wq8jxgY(x";
      try { 
        jSONObject1.getDouble("@_YtzBi:6x$wq8jxgY(x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@_YtzBi:6x$wq8jxgY(x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8285673622938314
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      Byte byte0 = new Byte((byte)112);
      JSONObject jSONObject2 = jSONObject1.accumulate("", byte0);
      jSONObject2.optLong("{");
      StringWriter stringWriter0 = new StringWriter((byte)112);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write("{");
      jSONObject1.write(stringWriter0);
      jSONObject2.put(",:]}/\"[{;=#", 101);
      try { 
        jSONObject1.getLong("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1610103088423247
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Long long0 = new Long((short)4);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.putOpt("getcompareTo", (Object) null);
      JSONObject jSONObject1 = jSONObject0.put("Q;\"&bF|{*q-RY6E ", 408L);
      jSONObject1.optDouble("Q;\"&bF|{*q-RY6E ");
      Short short0 = new Short((short) (-2347));
      Integer integer0 = new Integer((short) (-2347));
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer1 = new Integer((short)4);
      Short short1 = new Short((short)1);
      // Undeclared exception!
      try { 
        hashMap0.merge(short1, integer1, (BiFunction<? super Integer, ? super Integer, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.619083123702036
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      jSONObject1.optBoolean("H*B", true);
      jSONObject0.optBoolean(")WCs^hz3LZDj", false);
      Byte.toUnsignedInt((byte)13);
      jSONObject0.optDouble("`YgcaW\"");
      jSONObject0.optInt("H*B");
      JSONObject.doubleToString(Double.NaN);
      jSONObject0.optDouble("null");
      jSONObject0.optJSONObject("PJ:E`@$,vL");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("`YgcaW\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of `YgcaW\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-76));
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.has("div");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6773592366433845
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("Y", true);
      Byte.toUnsignedInt((byte)34);
      JSONObject jSONObject2 = jSONObject0.put("(]c#.4w", false);
      jSONObject0.optBoolean("2MI(1pL?/|D*>!<zLl", false);
      jSONObject2.toString();
      Short short1 = new Short((byte)34);
      JSONObject.quote("toU");
      jSONObject1.optInt("toO");
      String string0 = null;
      try { 
        jSONObject2.getDouble("a#h1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a#h1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7746751693919136
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Short short0 = new Short((short)4);
      JSONObject jSONObject0 = new JSONObject(short0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(]c#.4w";
      stringArray0[1] = "(]c#.4w";
      stringArray0[2] = "(]c#.4w";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      jSONObject0.toString();
      jSONObject1.put("(]c#.4w", true);
      Byte.toUnsignedInt((byte)13);
      String string0 = "";
      JSONObject jSONObject2 = jSONObject1.put("", true);
      jSONObject0.optBoolean("com", true);
      Byte.toUnsignedInt((byte)69);
      jSONObject0.optDouble("1Rh~ ;H4v5");
      String string1 = "] is not a Boolean.";
      jSONObject2.put("] is not a Boolean.", (int) (byte) (-34));
      try { 
        jSONObject2.getInt("Z(y#uZu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z(y#uZu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.107251001373613
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Long long0 = new Long((-64L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "\t";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.optBoolean("] is not a JSONObject.");
      jSONObject0.optInt("\t", 1945);
      jSONObject0.keys();
      try { 
        jSONObject0.getString("ry%KA -Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ry%KA -Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9664570593644335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      Iterator iterator0 = jSONObject1.keys();
      jSONObject0.put("", 1.0);
      Long long0 = new Long(0L);
      JSONObject.getNames(jSONObject1);
      jSONObject1.optDouble("", (-1.054849580773435));
      double double0 = new Float((double) 0L);
      JSONObject jSONObject2 = new JSONObject(iterator0);
      JSONObject.valueToString(jSONObject2);
      jSONObject1.keys();
      Object object0 = jSONObject1.opt("Substring bounds error");
      assertNull(object0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3978277180088603
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Short short0 = new Short((short)4);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.accumulate("qcg9a5Uu1TEx\"Z8h0`I", "z&>/ai");
      Byte.toUnsignedInt((byte) (-34));
      JSONObject jSONObject1 = jSONObject0.put("qcg9a5Uu1TEx\"Z8h0`I", false);
      jSONObject0.optBoolean("ri=", false);
      Byte.toUnsignedInt((byte) (-100));
      jSONObject1.optJSONObject("k'H?|J");
      StringWriter stringWriter0 = new StringWriter();
      JSONTokener jSONTokener0 = new JSONTokener("{^X9C");
      StringWriter stringWriter1 = new StringWriter();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.put("qcg9a5Uu1TEx\"Z8h0`I", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.468974051405862
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.put("\n", 0.0);
      Integer.getInteger("_Y9");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer(2423);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer1 = new Integer(3);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y9";
      stringArray0[1] = "_Y9";
      stringArray0[2] = "_Y9";
      stringArray0[3] = "%kn/@";
      stringArray0[4] = "_Y9";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.309596782821207
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "\\f";
      Object object0 = null;
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", (Object) null);
      jSONObject1.optBoolean("\"\"");
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4432250194254053
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.toString();
      String string0 = "] is not a number.";
      JSONObject jSONObject1 = jSONObject0.put("Y", true);
      Byte.toUnsignedInt((byte)34);
      JSONObject jSONObject2 = jSONObject0.put("(]c#.4w", false);
      String string1 = "2MI(1pL?/|D*>!<zLl";
      jSONObject0.optBoolean("2MI(1pL?/|D*>!<zLl", false);
      int int0 = new Short((byte)34);
      jSONObject2.optDouble("'");
      try { 
        jSONObject1.put((String) null, 92);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Integer.getInteger("_Y9");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      Integer integer0 = new Integer((-948));
      Boolean boolean2 = Boolean.FALSE;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.890137945436029
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      Byte byte0 = new Byte((byte)112);
      JSONObject jSONObject2 = jSONObject1.accumulate("", byte0);
      jSONObject2.optLong("{");
      StringWriter stringWriter0 = new StringWriter((byte)112);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.write("{");
      jSONObject2.write(stringWriter1);
      StringWriter stringWriter2 = (StringWriter)jSONObject1.write(stringWriter0);
      StringWriter stringWriter3 = new StringWriter((byte)112);
      StringWriter stringWriter4 = stringWriter2.append((CharSequence) "{");
      stringWriter4.write("Unterminated string");
      jSONObject1.write(stringWriter4);
      jSONObject1.write(stringWriter0);
      jSONObject1.put(".M_5bF~LfnOPF+!j", 88);
      try { 
        jSONObject1.getInt("sum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"sum\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.7146615135279784
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Byte.toUnsignedInt((byte) (-34));
      JSONObject jSONObject2 = jSONObject0.put("", true);
      jSONObject2.optBoolean("", true);
      Byte.toUnsignedInt((byte)0);
      String string0 = "\\u";
      jSONObject0.optDouble(string0);
      jSONObject1.put("JSONArray[", (int) (byte) (-34));
      try { 
        jSONObject2.getInt("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.330536661210341
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.toString(2146);
      jSONObject0.toString(10, 10);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.772302812592028
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      String string0 = "\\H*B";
      jSONObject0.optBoolean(")WCs^hz3LZDj", true);
      jSONObject0.keys();
      jSONObject1.accumulate(")WCs^hz3LZDj", ")WCs^hz3LZDj");
      String string1 = JSONObject.valueToString(jSONObject1, 2797, 0);
      Object object0 = new Object();
      Byte byte0 = new Byte((byte)1);
      JSONObject jSONObject2 = new JSONObject(byte0);
      try { 
        jSONObject2.getLong(string1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": [\\njava.lang.Long@0000000003,\\njava.lang.String@0000000006\\\"\\n]}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6565209451854974
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ")WCs^hz3LZDj";
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      jSONObject1.optBoolean("H*B", true);
      int int0 = 0;
      JSONObject.valueToString(jSONObject1, 0, 0);
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      try { 
        jSONObject0.getLong("{\"java.lang.String@0000000002\": java.lang.Long@0000000003}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": java.lang.Long@0000000003}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9948716036326153
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap1);
      Boolean boolean0 = Boolean.valueOf(true);
      int int0 = 956;
      JSONObject.valueToString(boolean0, 59, 956);
      try { 
        jSONObject1.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1807419214577735
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("+iT{`", "A[9-^k9");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("p#{acW=e`(uX", (Collection) linkedList0);
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6575776782108589
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      jSONObject0.optLong("false", (long) (byte)0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.080056919694302
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "HF0u8.jJ2M]KXOY}";
      byte byte0 = (byte) (-60);
      String string1 = "true";
      jSONObject0.put("true", (double) 883L);
      Byte byte1 = new Byte((byte) (-60));
      hashMap0.put(byte1, "HF0u8.jJ2M]KXOY}");
      jSONObject0.optLong("HF0u8.jJ2M]KXOY}", 883L);
      byte byte2 = (byte)92;
      Byte.toUnsignedLong((byte)11);
      Byte.compare((byte)123, (byte)92);
      try { 
        jSONObject0.getInt("HF0u8.jJ2M]KXOY}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HF0u8.jJ2M]KXOY}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.968663864023404
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Byte.toUnsignedInt((byte) (-34));
      JSONObject jSONObject2 = jSONObject0.put("%iw3L'ND^t5", true);
      jSONObject2.optBoolean("%iw3L'ND^t5", true);
      Byte.toUnsignedInt((byte)0);
      jSONObject0.optDouble("yu");
      jSONObject0.getString("%iw3L'ND^t5");
      String string0 = "86e`[za7";
      jSONObject1.optInt("86e`[za7");
      JSONObject.doubleToString(0.0);
      jSONObject2.put("49", (double) (byte)0);
      try { 
        jSONObject0.getJSONArray("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4821565986204637
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      Short short0 = new Short((short)6);
      Integer integer0 = new Integer((short)6);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer1 = new Integer((short)6);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer2 = hashMap0.merge(short0, integer1, biFunction0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("getlowestOneBit");
      assertEquals("", string0);
      
      Short short1 = new Short((short)6);
      Integer integer3 = new Integer((short)6);
      Short short2 = new Short((short)6);
      hashMap0.put(short2, integer2);
      jSONObject1.put("getlowestOneBit", (Object) "Expected a ':' after a key");
      long long0 = jSONObject0.optLong("] is not a JSONObject.");
      assertEquals(0L, long0);
      
      jSONObject0.opt("0..");
      String[] stringArray0 = JSONObject.getNames((Object) "getlowestOneBit");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7001382729329024
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ")WCs^hz3LZDj";
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      jSONObject1.optBoolean("H*B", true);
      JSONObject.valueToString(jSONObject1, 0, 0);
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject0.getLong(")WCs^hz3LZDj");
      try { 
        jSONObject2.get(")WCs^hz3LZDj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")WCs^hz3LZDj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6958332254557065
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.put("\n", 0.0);
      jSONObject1.optLong("\n", 0L);
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer integer0 = new Integer(2423);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer1 = new Integer(3);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y9";
      stringArray0[2] = "_Y9";
      stringArray0[3] = "%kn/@";
      stringArray0[4] = "_Y9";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.names();
      try { 
        jSONObject2.getJSONObject("_Y9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_Y9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      JSONObject.numberToString(byte0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      Integer integer0 = new Integer(3487);
      JSONObject.valueToString(integer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.lang.Integer@0000000001");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) charBuffer0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'E';
      charArray0[2] = 'l';
      charArray0[3] = 'C';
      charArray0[4] = 'T';
      charArray0[6] = 'l';
      charArray0[7] = 'F';
      charArray0[8] = 'E';
      stringWriter1.write(charArray0);
      Float.isFinite(3487);
      stringWriter1.append((CharSequence) "java.lang.Integer@0000000001");
      Long long0 = new Long(3487);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.198461003482034
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Byte byte0 = new Byte((byte)65);
      Byte.toUnsignedInt((byte)65);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = ",\n";
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      hashMap0.clone();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(",\n");
      try { 
        jSONObject1.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8741637353373641
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 4;
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String string0 = "Z.";
      try { 
        jSONObject0.get("Z.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.4555855693793682
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.toJSONArray((JSONArray) null);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "");
      jSONObject0.optLong("");
      jSONObject1.keys();
      jSONObject1.optDouble("", 0.0);
      String string1 = "@YtzBi:6x$wq8jxgY(x";
      try { 
        jSONObject1.getDouble("@YtzBi:6x$wq8jxgY(x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"@YtzBi:6x$wq8jxgY(x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Number number0 = null;
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.54801833058777
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.put("\n", 0.0);
      jSONObject1.optInt((String) null, (-2801));
      Integer.getInteger("_Y9");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer(2423);
      Boolean boolean2 = Boolean.FALSE;
      Integer integer1 = new Integer(3);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "_Y9";
      stringArray0[1] = "_Y9";
      stringArray0[2] = "_Y9";
      stringArray0[3] = "%kn/@";
      stringArray0[4] = "_Y9";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getJSONObject("e+)?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e+)?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      long long0 = 0L;
      Long long1 = new Long(0L);
      JSONObject.testValidity(long1);
      Long.getLong("lwAn$6p/~?k");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.451270869667564
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "wheel.json.JSONObject$Null";
      Float float0 = new Float((-1.0F));
      Float float1 = new Float((-1.0F));
      int int0 = (-671);
      JSONObject.valueToString(float1, (-671), (-671));
      String string1 = "get";
      jSONObject0.optLong("get");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(".;\"wwB06OZT%&AE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of .;\"wwB06OZT%&AE
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5197387829465234
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(object0, 2005, 2005);
      String string0 = "O7/7/{__YUq@4h%";
      try { 
        jSONObject0.getJSONObject("O7/7/{__YUq@4h%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O7/7/{__YUq@4h%\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2542831205729428
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      jSONObject1.toString(10, 10);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.550457449151751
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("D.AY-jc,XN`RD}N?>");
      hashMap0.getOrDefault(object0, boolean0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      jSONObject1.put("M^DGLih*X2WJQ~/]", 0.0);
      stringArray0[0] = "JSONArray[";
      stringArray0[1] = "";
      stringArray0[2] = "%%|@YvHdM=E(mpfhKel";
      Integer.getInteger("M^DGLih*X2WJQ~/]");
      Boolean boolean1 = new Boolean(true);
      hashMap0.put((Integer) null, boolean1);
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = "] is not a JSONArray.";
      stringArray0[5] = "!;3K:Jq";
      Integer integer0 = new Integer((-265));
      Boolean boolean2 = Boolean.FALSE;
      hashMap0.put(integer0, boolean2);
      stringArray0[6] = ">c(,";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.remove("] is not a JSONArray.");
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7859463380986909
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      jSONObject0.put("Ha1Bf}", (Map) hashMap0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Integer.getInteger("(]c#.4w");
      Boolean boolean0 = Boolean.valueOf("va");
      hashMap0.put((Integer) null, boolean0);
      Integer integer0 = new Integer(0);
      Boolean boolean1 = Boolean.FALSE;
      Integer integer1 = new Integer(0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3716838633356176
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "u)WCs^hz3LZDj";
      JSONObject jSONObject1 = jSONObject0.put("u)WCs^hz3LZDj", 408L);
      jSONObject0.optBoolean("u)WCs^hz3LZDj", true);
      jSONObject0.keys();
      jSONObject1.accumulate("u)WCs^hz3LZDj", "u)WCs^hz3LZDj");
      String string1 = "";
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3527443353243087
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      StringWriter stringWriter0 = new StringWriter(1038);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONObject text must end with '}'", 1470);
      jSONObject0.getInt("A JSONObject text must end with '}'");
      jSONObject0.optLong(")\u0003,T(aX1=");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("A JSONObject text must end with '}'", (Collection) linkedList0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7803440972023323
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      String string0 = jSONObject0.optString("istoLowerCase", "V~65");
      assertEquals("V~65", string0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.4074486105937747
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      Integer integer0 = new Integer((byte)0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer1 = new Integer(13);
      Short short0 = new Short((short)32);
      Integer integer2 = new Integer(319);
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(short0, integer2, biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optString("] is not a JSONObject.");
      Short short1 = new Short((byte)0);
      Integer integer3 = new Integer(13);
      Short short2 = new Short((short)114);
      Short short3 = new Short((short)128);
      hashMap0.put(short3, integer2);
      String string0 = "P@5m.*";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("P@5m.*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of P@5m.*
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.383787678452902
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4858);
      JSONObject jSONObject0 = new JSONObject((Object) "xyMJ[1?Ar?k,");
      jSONObject0.toString((-1), (-6254807));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.2802387707187752
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      StringWriter stringWriter0 = new StringWriter(1038);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toString((-1452), 2893);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.609777130770053
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte byte0 = (byte)0;
      Byte byte1 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      jSONObject0.toString();
      String string0 = "] is not a number.";
      jSONObject0.put("] is not a number.", true);
      Byte.toUnsignedInt((byte) (-34));
      JSONObject jSONObject1 = jSONObject0.put("%iw3L'ND^t5", true);
      jSONObject1.optBoolean("%iw3L'ND^t5", true);
      Byte.toUnsignedInt((byte)0);
      jSONObject0.optDouble("yu");
      Float.sum(5282.9F, (byte) (-34));
      try { 
        jSONObject0.getInt("Expected '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.4997010580498764
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(")WCs^hz3LZDj", 408L);
      Short short0 = new Short((short)6);
      Integer integer0 = new Integer((short)6);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      Integer integer1 = new Integer((short)6);
      BiFunction<Object, Integer, Integer> biFunction0 = (BiFunction<Object, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(short0, integer1, biFunction0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Byte.toUnsignedInt((byte)40);
      String string0 = "";
      jSONObject1.put("H+e_@\"_Y1N", false);
      jSONObject2.optBoolean(")WCs^hz3LZDj", false);
      Byte.toUnsignedInt((byte)2);
      String string1 = "\\u";
      jSONObject2.optDouble(string1);
      jSONObject2.put("tckGw}", (int) (byte)2);
      try { 
        jSONObject0.getInt("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HashMap<Object, Float> hashMap0 = new HashMap<Object, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "getwait";
      try { 
        jSONObject0.getJSONArray("getwait");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getwait\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5173715002134975
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.keySet();
      JSONObject jSONObject1 = jSONObject0.put("", 310.2);
      String string0 = "_Y9";
      JSONObject jSONObject2 = jSONObject1.put("x8 uhE6", true);
      Byte.toUnsignedInt((byte)29);
      String string1 = "jaC2h*Sj_\"";
      JSONObject jSONObject3 = jSONObject2.put("jaC2h*Sj_\"", true);
      jSONObject3.optBoolean("x8 uhE6", false);
      Byte.toUnsignedInt((byte) (-34));
      jSONObject3.optDouble("");
      JSONObject jSONObject4 = jSONObject3.put("_Y9", 334);
      try { 
        jSONObject4.getInt("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.6330706188672064
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.optBoolean("Unterminated string", true);
      Byte.toUnsignedInt((byte) (-77));
      jSONObject0.optDouble("Unterminated string");
      JSONObject jSONObject1 = jSONObject0.put("(]c#.4w", (-3434));
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getInt("(]c#.4w");
      long long0 = jSONObject0.optLong("g");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1238466169399186
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) "e+)?");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.129589527201262
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "xyMJ[1?Ar?k,");
      JSONObject jSONObject1 = jSONObject0.put("*v;XH$71 A.", 548.91417);
      Integer.getInteger("xyMJ[1?Ar?k,");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Boolean boolean2 = new Boolean("xyMJ[1?Ar?k,");
      hashMap0.put((Integer) null, boolean2);
      Integer integer0 = new Integer(2277);
      Boolean boolean3 = Boolean.FALSE;
      Integer integer1 = new Integer(2867);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "_Y9";
      stringArray0[1] = "_Y9";
      stringArray0[2] = "\n";
      stringArray0[3] = "_Y9";
      stringArray0[4] = "*v;XH$71 A.";
      stringArray0[5] = "xyMJ[1?Ar?k,";
      stringArray0[6] = "_Y9";
      stringArray0[7] = "xyMJ[1?Ar?k,";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.282620504908521
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4);
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toString((-2592), 59);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("h-rnqv");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of h-rnqv
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9094499788253425
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(]c#.4w";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = new Boolean("(]c#.4w");
      Byte byte1 = new Byte((byte)0);
      JSONObject jSONObject1 = new JSONObject(byte1);
      jSONObject0.toString(0, 30);
      Object object0 = new Object();
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.4129260688395986
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = jSONObject0.put("", 310.2);
      Integer.getInteger("_Y9");
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean(true);
      hashMap0.put((Integer) null, boolean1);
      Integer integer0 = new Integer((-948));
      Boolean boolean2 = Boolean.FALSE;
      Integer integer1 = new Integer(3);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Byte byte0 = new Byte((byte)0);
      Byte.compare((byte)0, (byte)0);
      Byte.toUnsignedInt((byte) (-34));
      Byte.toUnsignedInt((byte)0);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.0718783301579875
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Short, Integer> hashMap1 = new HashMap<Short, Integer>();
      JSONObject jSONObject1 = new JSONObject((Object) hashMap1);
      try { 
        jSONObject1.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9531850804565751
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Long long0 = new Long(0);
      JSONObject jSONObject1 = new JSONObject(long0);
      try { 
        jSONObject0.getLong("GXY8_WN!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"GXY8_WN!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject.doubleToString(646.614281534892);
      JSONTokener jSONTokener0 = new JSONTokener("646.614281534892");
      int int0 = 160;
      StringWriter stringWriter0 = new StringWriter(160);
      char[] charArray0 = new char[5];
      charArray0[0] = 'E';
      charArray0[1] = 'i';
      charArray0[2] = 'u';
      charArray0[3] = '-';
      charArray0[4] = 'x';
      stringWriter0.write(charArray0);
      char[] charArray1 = null;
      // Undeclared exception!
      try { 
        stringWriter0.write((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.4618268573240676
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      Float float0 = new Float(284.3600941599285);
      JSONObject jSONObject1 = jSONObject0.append("{", float0);
      Byte byte0 = new Byte((byte)112);
      JSONObject jSONObject2 = jSONObject1.accumulate("", byte0);
      jSONObject2.optLong("{");
      StringWriter stringWriter0 = new StringWriter((byte)112);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9844935290697798
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      String string1 = "]p!V@'^vTodDw?8]";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("", jSONArray0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.3265171534282083
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Short short0 = Short.valueOf((short)630);
      JSONObject.numberToString(short0);
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.443586496654617
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Object object0 = null;
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", (Object) null);
      jSONObject1.optBoolean("\"\"");
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.7433917933468566
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("] is not a number.", true);
      Byte.toUnsignedInt((byte)22);
      JSONObject jSONObject2 = jSONObject1.put("%iw3L'ND^t5", true);
      jSONObject0.optBoolean("%iw3L'ND^t5", true);
      Byte.toUnsignedInt((byte)126);
      jSONObject2.optDouble("pa");
      jSONObject0.optInt(">ooVc=l&B");
      JSONObject jSONObject3 = jSONObject1.putOpt("DheB8SE4'ESK", ">ooVc=l&B");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject3.put("DheB8SE4'ESK", (Collection) linkedList1);
      int int0 = jSONObject0.optInt("] is not a number.");
      assertEquals(3, jSONObject0.length());
      assertEquals(0, int0);
  }
}
