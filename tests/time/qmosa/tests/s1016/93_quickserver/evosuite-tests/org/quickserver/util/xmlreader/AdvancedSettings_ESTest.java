/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:11:03 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7321184591665695
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(721);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getSocketLinger();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(721, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6640179694569577
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-190));
      advancedSettings0.setClientSocketReceiveBufferSize(3475);
      advancedSettings0.setClientSocketSendBufferSize(2002);
      advancedSettings0.setPerformancePreferencesConnectionTime((-190));
      advancedSettings0.setClientSocketReceiveBufferSize(2002);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(2002);
      advancedSettings0.setByteBufferSize((-190));
      advancedSettings0.setClientSocketSendBufferSize(332);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.toXML("");
      advancedSettings0.getBacklog();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      advancedSettings0.getQSObjectPoolMaker();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("KB");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // KB
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("w\"Ap$)");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1189));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientIdentifier();
      assertEquals("w\"Ap$)", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(47);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(47);
      assertEquals(47, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.354124141337734
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-386));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4325260435533127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Cj^5MbsW@Y>T2 =&");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Cj^5MbsW@Y>T2 =&
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5994546511248977
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-2548));
      advancedSettings0.setCharset("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-2548));
      advancedSettings0.setClientSocketSendBufferSize((-2548));
      advancedSettings0.setPerformancePreferencesLatency((-2548));
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("@9\u0006\"njol{p");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // @9\u0006\"njol{p
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.508991312519329
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.getPerformancePreferencesBandwidth();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings1.toXML("");
      advancedSettings1.getPerformancePreferencesBandwidth();
      advancedSettings0.getCharset();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<performance-preferences-connection-time>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<performance-preferences-connection-time>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.753453770483451
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(58);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientIdentifier("");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings1.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.487634764824866
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-667));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.toXML("");
      assertEquals(1, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.9776894454962477
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier((String) null);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset((String) null);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings1.setUseDirectByteBuffer(false);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTcpNoDelay(true);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setDebugNonBlockingMode(false);
      advancedSettings3.setCharset("");
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings3.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings3.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings4.setClientSocketTcpNoDelay(true);
      advancedSettings4.setClientSocketSendBufferSize(0);
      advancedSettings1.getClientIdentifier();
      assertTrue(advancedSettings1.getClientSocketTcpNoDelay());
      
      int int0 = advancedSettings0.getByteBufferSize();
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3832884333189273
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-2681));
      advancedSettings0.setClientSocketTrafficClass("Q}M&7XM#%02");
      advancedSettings0.toXML("Frv3fLk/-XNcyp");
      assertEquals((-2681), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("</performance-preferences-bandwidth>\n");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      assertEquals("</performance-preferences-bandwidth>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0831728948417303
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-2548));
      advancedSettings0.setCharset("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-4714));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize((-4714));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      assertEquals((-4714), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.089097845467142
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(838);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(838);
      advancedSettings0.getBacklog();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(838);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientIdentifier("org.quickserver.util.pool.MakeQSObjectPool");
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("w\"Ap$)");
      advancedSettings0.setClientIdentifier("w\"Ap$)");
      assertEquals("w\"Ap$)", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(0);
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(0, int0);
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setBacklog(0);
      advancedSettings2.getQSObjectPoolMaker();
      advancedSettings1.getBacklog();
      advancedSettings2.getCharset();
      assertEquals(1, advancedSettings2.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-358));
      advancedSettings0.setBacklog((-358));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize(169);
      advancedSettings0.setPerformancePreferencesLatency(757);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(2110);
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(169, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(2110, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4169372058999015
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass(")hhMzTNMS");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("L,IG#Lt\"wk|sAt.6^");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier(")hhMzTNMS");
      assertEquals(")hhMzTNMS", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6681463067230835
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-4));
      advancedSettings0.toXML("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getCharset();
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger(721);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setByteBufferSize(721);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setUseDirectByteBuffer(true);
      assertEquals((-4), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertNotNull(string0);
      
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
      
      int int1 = advancedSettings0.getSocketLinger();
      assertEquals((-1), int1);
      
      int int2 = advancedSettings0.getByteBufferSize();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, int2);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9051066634117592
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      String string0 = "";
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.xmlreader.AdvancedSettings");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.xmlreader.AdvancedSettings
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8331547833861124
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-2548));
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize((-2548));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-2548), advancedSettings0.getClientSocketSendBufferSize());
      
      advancedSettings1.getClientSocketReceiveBufferSize();
      String string0 = advancedSettings1.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.69992335714857
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.toXML("");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setQSObjectPoolMaker(")5gk.$+`FyDES#Y$xv");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setSocketLinger((-367));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(10, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3352073540125335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
      
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.toXML("XoM @!\"4N'WpC");
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0343946195677223
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("Lhx");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(1940);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals("Lhx", advancedSettings0.getClientIdentifier());
      assertEquals(1940, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.32348757868292
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("J3d");
      assertEquals("J3d", advancedSettings1.getClientIdentifier());
      
      advancedSettings0.toXML((String) null);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getClientIdentifier();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(10, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1291365055997797
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n");
      advancedSettings0.setPerformancePreferencesConnectionTime((-228));
      advancedSettings0.setClientSocketSendBufferSize((-228));
      advancedSettings0.setSocketLinger((-228));
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getBacklog();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("{[HN");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesLatency((-228));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("<advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize((-1462));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals((-1462), advancedSettings0.getClientSocketSendBufferSize());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getClientSocketSendBufferSize();
      advancedSettings1.getClientSocketReceiveBufferSize();
      String string0 = advancedSettings2.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.639803392888057
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-798));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-4161));
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setClientIdentifier("QHsCy-g^");
      advancedSettings0.setByteBufferSize((-798));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.toXML("LT~*u>s,[$&7GHw3TD");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency((-4161));
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize(765);
      advancedSettings0.getBacklog();
      advancedSettings0.getBacklog();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals("QHsCy-g^", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setCharset("");
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      
      String string1 = advancedSettings0.getCharset();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", string1);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      String string0 = "";
      advancedSettings0.setCharset("");
      String string1 = "Dt*5pD";
      advancedSettings0.setBacklog(1);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Dt*5pD");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Dt*5pD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-667));
      advancedSettings0.setByteBufferSize(2342);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setSocketLinger(4);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientIdentifier();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.847642989259894
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize((-137));
      advancedSettings0.setClientSocketTrafficClass("_#[.K%g{");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.setClientIdentifier("AT:yv@3JMv");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals((-137), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }
}
