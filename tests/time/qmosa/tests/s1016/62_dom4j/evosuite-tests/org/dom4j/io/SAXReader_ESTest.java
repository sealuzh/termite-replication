/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:21:30 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.SyncFailedException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4897182683864876
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte byte0 = (byte)0;
      SAXReader sAXReader1 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("//tmp/http:/xml.org/sax/features/validation0HE&<A?O.o0X'v'5E'YO");
      sAXReader1.setDefaultHandler((ElementHandler) null);
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2964536265962807
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      locator2Impl0.setPublicId((String) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locator2Impl0.getSystemId();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("http:/xml.org/sax/features/validation");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "zrl7GVBtt6?Xq");
      MockException mockException0 = new MockException("zrl7GVBtt6?Xq");
      xMLFilterImpl0.unparsedEntityDecl((String) null, (String) null, "zrl7GVBtt6?Xq", (String) null);
      SAXParseException sAXParseException0 = new SAXParseException("zrl7GVBtt6?Xq", locatorImpl0, mockException0);
      xMLFilterImpl1.warning(sAXParseException0);
      sAXReader0.createXMLReader();
      String string0 = "";
      MockFile mockFile0 = new MockFile("http://xml.org/sax/features/validation", "");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/http:/xml.org/sax/features/validation : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.getXMLReader();
      sAXReader0.resetHandlers();
      sAXReader0.setStripWhitespaceText(true);
      String string0 = "b$@3$lVyzLT u*+";
      StringReader stringReader0 = new StringReader("b$@3$lVyzLT u*+");
      String string1 = "_Cf7`v~Ld6iB>";
      String string2 = "";
      StringReader stringReader1 = new StringReader("");
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      SAXReader sAXReader1 = new SAXReader();
      try { 
        sAXReader1.setXMLReaderClassName("_Cf7`v~Ld6iB>");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class _Cf7`v~Ld6iB> not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6796742326465708
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      String string0 = "";
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.dom4j.io.SAXReader");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "J\fcsq");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("J\fcsq");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("z;+KG2tv7\"|/", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class z;+KG2tv7\"|/ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = null;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      String string1 = "zrl7GVBtt6?Xq";
      MockException mockException0 = new MockException("zrl7GVBtt6?Xq");
      String string2 = "Namespace node may not be modified";
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.createContentHandler(parserAdapter0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = 'm';
      xMLReaderAdapter0.characters(charArray0, (-2599), (-2599));
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader1 = new SAXReader(parserAdapter1);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader2 = new SAXReader((String) null, false);
      sAXReader2.getDocumentFactory();
      DispatchHandler dispatchHandler1 = sAXReader1.getDispatchHandler();
      dispatchHandler1.setDefaultHandler(dispatchHandler0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "mq{Gp':";
      stringArray0[1] = "~.a).|^ji<(0<R";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      dispatchHandler1.setDefaultHandler(dispatchHandler0);
      int int0 = (-178);
      // Undeclared exception!
      try { 
        sAXReader1.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.334010586157512
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("'`rq");
      sAXReader0.isIgnoreComments();
      try { 
        sAXReader0.read("'`rq");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: '`rq Nested exception: no protocol: '`rq
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      MockURL.getFileExample();
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.createContentHandler(xMLFilterImpl1);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.unparsedEntityDecl("H_piy'vd5S", "H_piy'vd5S", "<t", "<t");
      SAXReader sAXReader1 = new SAXReader();
      sAXReader1.createContentHandler(xMLFilterImpl0);
      sAXReader1.isValidating();
      try { 
        sAXReader0.setXMLReaderClassName("org.dom4j.util.SimpleSingleton");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class org.dom4j.util.SimpleSingleton does not implement XMLReader
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)21;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 1067);
      try { 
        sAXReader0.setProperty("}k4Xj7", byteArrayInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '}k4Xj7' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      locator2Impl0.setPublicId((String) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locator2Impl0.getSystemId();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      MockException mockException0 = new MockException("zrl7GVBtt6?Xq");
      xMLFilterImpl0.unparsedEntityDecl((String) null, (String) null, "zrl7GVBtt6?Xq", (String) null);
      SAXParseException sAXParseException0 = new SAXParseException("zrl7GVBtt6?Xq", locatorImpl0, mockException0);
      xMLFilterImpl1.warning(sAXParseException0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "t(mS02");
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3643764676852554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/features/namespace-prefixes");
      sAXReader0.getDispatchHandler();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/q}KAo$O=_9}owx";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "http://xml.org/sax/features/namespace-prefixes";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, dispatchHandler0, 14);
      pruningElementStack1.getDispatchHandler();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.isIncludeExternalDTDDeclarations();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/q}KAo$O=_9}owx");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "H,m*oppg-9");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("4kTey-Mz#L~:HRk", "//tmp/http:/xml.org/sax/features/validation0HE&<A?O.o0X'v'5E'YO");
      InputSource inputSource1 = new InputSource();
      InputSource inputSource2 = sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.io.SAXReader", "");
      assertFalse(inputSource2.equals((Object)inputSource0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.315352224393084
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("F>!NFQ");
      String string0 = null;
      sAXReader_SAXEntityResolver0.uriPrefix = "DocumentType nodes cannot have children";
      sAXReader_SAXEntityResolver0.resolveEntity("F>!NFQ", "F>!NFQ");
      sAXReader_SAXEntityResolver0.resolveEntity("", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("x]{;j$k,<");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("f`EWlx/x]{;j$k,<");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "atM?E4d>FfDn:9tU's");
      sAXReader_SAXEntityResolver1.uriPrefix = "org.dom4j.bean.BeanAttributeList";
      sAXReader_SAXEntityResolver1.resolveEntity("`Y1ZV RO", ")?MZ_57S");
      boolean boolean0 = true;
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string0 = null;
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("L1*!g-Pt", "");
      sAXReader_SAXEntityResolver0.resolveEntity("HE&<A?O.o0X'v'5E'YO", (String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("");
      sAXReader0.isIncludeInternalDTDDeclarations();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid path of length: 1 it must be greater than 2
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'v';
      xMLReaderAdapter0.characters(charArray0, (-2599), (-2599));
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Error on line ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("~).|^ji<(0<R");
      sAXReader_SAXEntityResolver0.resolveEntity("~).|^ji<(0<R", "~).|^ji<(0<R");
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      SAXReader sAXReader1 = new SAXReader();
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.setValidation(false);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.addHandler("U \"#IM?F3/=eCJ[0", (ElementHandler) null);
      sAXReader0.getXMLReader();
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QName qName0 = QName.get("", "");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.getEntityResolver();
      sAXReader0.createDefaultEntityResolver("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      QName.get(",;4", (Namespace) null, "Index: {0}, Size: {1}");
      try { 
        xMLFilterImpl0.setFeature(",;4", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: ,;4
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.339431105120572
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      pipedInputStream0.markSupported();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/http:/xml.org/sax/features/validation0HE&<A?O.o0X'v'5E'YO");
      sAXReader_SAXEntityResolver0.resolveEntity("N=elu[n[##@w", "4kTey-Mz#L~:HRk");
      sAXReader_SAXEntityResolver0.resolveEntity("isEqual", "//tmp/http:/xml.org/sax/features/validation0HE&<A?O.o0X'v'5E'YO");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("4kTey-Mz#L~:HRk");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.bean.BeanAttributeList", "atM?E4d>FfDn:9tU's");
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "atM?E4d>FfDn:9tU's");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      locator2Impl0.setPublicId((String) null);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locator2Impl0.getSystemId();
      MockException mockException0 = new MockException("zrl7GVBtt6?Xq");
      xMLFilterImpl0.unparsedEntityDecl((String) null, (String) null, "zrl7GVBtt6?Xq", (String) null);
      SAXParseException sAXParseException0 = new SAXParseException("zrl7GVBtt6?Xq", locatorImpl0, mockException0);
      xMLFilterImpl1.warning(sAXParseException0);
      sAXReader0.createXMLReader();
      String string0 = "";
      MockFile mockFile0 = new MockFile("http://xml.org/sax/features/validation", "");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.getDispatchHandler();
      sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", (Object) null);
      MockFile mockFile1 = new MockFile(mockFile0, "(tXQZ&X@U");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockFile mockFile2 = new MockFile(mockFile0, "v@9tPW!DMF");
      SAXReader sAXReader1 = new SAXReader((String) null);
      DOMDocument dOMDocument0 = new DOMDocument();
      try { 
        sAXReader1.setXMLReaderClassName("http://xml.org/sax/features/namespace-prefixes");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class http://xml.org/sax/features/namespace-prefixes not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("L1*!g-Pt", "");
      sAXReader_SAXEntityResolver0.resolveEntity("HE&<A?O.o0X'v'5E'YO", (String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver1.uriPrefix = null;
      sAXReader_SAXEntityResolver1.resolveEntity("t(mS02", "");
      SAXReader sAXReader1 = new SAXReader((String) null, true);
      try { 
        sAXReader1.setFeature("Z!Hoku}v?GT", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Z!Hoku}v?GT' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3878641734961343
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.getXMLFilter();
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
          sAXReader0.setXMLFilter(xMLFilterImpl0);
          sAXReader0.getXMLReader();
          sAXReader0.installXMLFilter((XMLReader) null);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor145.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor145.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      InputStream inputStream0 = null;
      InputSource inputSource0 = new InputSource((InputStream) null);
      String string0 = "$Lb}e?\"MVwbH=njd";
      StringReader stringReader0 = new StringReader("$Lb}e?\"MVwbH=njd");
      inputSource0.setCharacterStream(stringReader0);
      StringReader stringReader1 = new StringReader("No text at offset: ");
      inputSource0.setCharacterStream(stringReader1);
      InputSource inputSource1 = new InputSource((InputStream) null);
      try { 
        sAXReader0.read(inputSource1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      MockException mockException0 = new MockException("zrl7GVBtt6?Xq");
      SAXParseException sAXParseException0 = new SAXParseException("zrl7GVBtt6?Xq", locatorImpl0, mockException0);
      xMLFilterImpl1.warning(sAXParseException0);
      sAXReader0.createXMLReader();
      String string0 = "Exception occurred evaluting XPath: ";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Exception occurred evaluting XPath: ");
      sAXReader_SAXEntityResolver0.resolveEntity("This PI is read-only and cannot be modified", ")?MZ_57S");
      boolean boolean0 = false;
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      QName qName0 = new QName("b>d)eQt1>bG");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Error on line ");
      sAXReader_SAXEntityResolver0.resolveEntity("Error on line ", "Error on line ");
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader(">W$x*ZN=e%,4}YUM7", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class >W$x*ZN=e%,4}YUM7 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      StringReader stringReader0 = new StringReader("org.dom4j.tree.QNameCache");
      DefaultHandler defaultHandler0 = new DefaultHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getPublicId();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      defaultHandler0.setDocumentLocator(locator2Impl0);
      sAXReader0.setEntityResolver(defaultHandler0);
      stringReader0.skip(3064L);
      defaultDocumentFactory0.createDocType("org.dom4j.tree.QNameCache", "http://xml.org/sax/features/namespaces", "org.dom4j.tree.QNameCache");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      try { 
        sAXReader0.read("eA^&P6R'");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: eA^&P6R' Nested exception: no protocol: eA^&P6R'
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      SAXParseException sAXParseException0 = new SAXParseException("", (String) null, (String) null, (-20), 534, (Exception) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("", (String) null, 12, "U.Ao5v`hG+HYUp,", uRLStreamHandler0);
      sAXReader0.isStringInternEnabled();
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "text";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("text");
      String string1 = "L1*!g-Pt";
      sAXReader_SAXEntityResolver0.resolveEntity("L1*!g-Pt", "text");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler1 = new PruningDispatchHandler();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.setDefaultHandler(pruningDispatchHandler0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.jaxen.expr.iter.IterablePrecedingAxis";
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, pruningDispatchHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid path of length: 1 it must be greater than 2
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'e';
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      StringReader stringReader0 = new StringReader("w<Or!");
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      DispatchHandler dispatchHandler2 = sAXReader0.getDispatchHandler();
      dispatchHandler1.setDefaultHandler(dispatchHandler2);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "Namespace node may not be modified";
      stringArray0[2] = "w<Or!";
      stringArray0[3] = "";
      stringArray0[4] = "w<Or!";
      stringArray0[5] = "w<Or!";
      stringArray0[6] = "w<Or!";
      stringArray0[7] = "Namespace node may not be modified";
      stringArray0[8] = "Namespace node may not be modified";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler1);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, dispatchHandler1, 0);
      // Undeclared exception!
      try { 
        pruningElementStack1.addHandler("w<Or!", dispatchHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.468339853211307
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.getXMLReader();
      sAXReader0.resetHandlers();
      sAXReader0.setStripWhitespaceText(false);
      String string0 = "b$@3$lVyzLT u*+";
      StringReader stringReader0 = new StringReader("b$@3$lVyzLT u*+");
      String string1 = "_Cf7`v~Ld6iB>";
      try { 
        sAXReader0.read((Reader) stringReader0, "b$@3$lVyzLT u*+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/b$@3$lVyzLT%20u*+ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      SAXParseException sAXParseException0 = new SAXParseException("", (String) null, (String) null, 0, 534, (Exception) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "alK", "alK", 368);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "}(aO.Y-o8d", 368);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("http://xml.org/sax/handlers/LexicalHandler", "", ">#HpYuP |", 2294);
      stackTraceElementArray0[2] = stackTraceElement2;
      sAXParseException0.setStackTrace(stackTraceElementArray0);
      xMLFilterImpl1.warning(sAXParseException0);
      sAXReader0.getEncoding();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.334010586157512
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      StringReader stringReader0 = new StringReader("w<Or!");
      SAXReader sAXReader1 = new SAXReader();
      try { 
        sAXReader1.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("java.util.concurrent.ConcurrentHashMap");
      try { 
        sAXReader0.read((Reader) stringReader0, "Y2Jvf9W9:v");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document Y2Jvf9W9:v : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5144914722255947
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setIgnoreComments(false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIgnoreComments(false);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setErrorHandler(handlerBase0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        fileDescriptor0.sync();
        fail("Expecting exception: SyncFailedException");
      
      } catch(SyncFailedException e) {
         //
         // sync failed
         //
         verifyException("java.io.FileDescriptor", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      ElementStack elementStack0 = new ElementStack();
      sAXModifyElementHandler0.onStart(elementStack0);
      pruningDispatchHandler0.addHandler("", sAXModifyElementHandler0);
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.isValidating();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 0;
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String string0 = "A\"mc*-0jy**P&>5*:zy";
      String string1 = null;
      dispatchHandler0.getHandler((String) null);
      dispatchHandler0.addHandler("A\"mc*-0jy**P&>5*:zy", (ElementHandler) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      String string0 = "w<Or!";
      String string1 = "NOTATION_NODE";
      StringReader stringReader0 = new StringReader("NOTATION_NODE");
      String string2 = "tH0'cWi Y*37";
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("tH0'cWi Y*37");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class tH0'cWi Y*37 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'v';
      xMLReaderAdapter0.characters(charArray0, (-2599), (-2599));
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("~).|^ji<(0<R");
      sAXReader_SAXEntityResolver0.resolveEntity("~).|^ji<(0<R", "~).|^ji<(0<R");
      sAXReader_SAXEntityResolver0.resolveEntity("AlAn", "Error on line ");
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("AlAn", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class AlAn not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3763612566307986
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endElement((String) null, (String) null, (String) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("F>!NFQ");
      sAXReader_SAXEntityResolver0.uriPrefix = "DocumentType nodes cannot have children";
      sAXReader_SAXEntityResolver0.resolveEntity("", (String) null);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("x]{;j$k,<");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("f`EWlx/x]{;j$k,<");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "atM?E4d>FfDn:9tU's");
      sAXReader_SAXEntityResolver1.uriPrefix = "";
      sAXReader_SAXEntityResolver1.uriPrefix = "org.dom4j.bean.BeanAttributeList";
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultElement defaultElement0 = new DefaultElement("//tmp/http:/xml.org/sax/features/validation0HE&<A?O.o0X'v'5E'YO");
      DOMNamespace dOMNamespace0 = new DOMNamespace(defaultElement0, "Validation not supported for XMLReader: ", "Nnwc9PtReLZ'QDo-");
      QName qName0 = defaultDocumentFactory0.createQName((String) null, (Namespace) dOMNamespace0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getXMLFilter();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3341012450656087
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.getXMLFilter();
          sAXReader0.getXMLReader();
          sAXReader0.installXMLFilter((XMLReader) null);
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor145.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor145.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.323014765444149
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("org.dom4j.QName.singleton.strategy", "", 1329, "-eq7^%84La*m8(5sypC", uRLStreamHandler0);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.isMergeAdjacentText();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.377614598137891
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      String string0 = "";
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      SAXParseException sAXParseException0 = new SAXParseException("", (String) null, (String) null, 0, 534, (Exception) null);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[3];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "alK", "alK", 368);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "}(aO.Y-o8d", 368);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("http://xml.org/sax/handlers/LexicalHandler", "", ">#HpYuP |", 2294);
      stackTraceElementArray0[2] = stackTraceElement2;
      sAXParseException0.setStackTrace(stackTraceElementArray0);
      xMLFilterImpl1.warning(sAXParseException0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      sAXReader0.getEncoding();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Feature: http://xml.org/sax/features/namespace-prefixes Nested exception: Feature: http://xml.org/sax/features/namespace-prefixes
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      MockException mockException0 = new MockException("zrl7GVBtt6?Xq");
      SAXParseException sAXParseException0 = new SAXParseException("zrl7GVBtt6?Xq", locatorImpl1, mockException0);
      SAXParseException sAXParseException1 = new SAXParseException("", (String) null, (String) null, 0, 534, (Exception) null);
      xMLFilterImpl1.warning(sAXParseException1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      sAXReader0.getEncoding();
      StringReader stringReader0 = new StringReader("");
      sAXReader0.setEncoding("");
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      String string0 = "Error on line ";
      InputSource inputSource0 = new InputSource("Error on line ");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      inputSource0.setByteStream(pipedInputStream0);
      String string1 = "1.0";
      String string2 = "file://";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL((URL) null, "file://", uRLStreamHandler0);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.320407277430774
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("J\fcsq");
      sAXReader_SAXEntityResolver0.resolveEntity("L1*!g-Pt", "J\fcsq");
      sAXReader_SAXEntityResolver0.resolveEntity("HE&<A?O.o0X'v'5E'YO", (String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("J\fcsq");
      sAXReader_SAXEntityResolver1.uriPrefix = null;
      sAXReader_SAXEntityResolver1.resolveEntity("t(mS02", "J\fcsq");
      SAXReader sAXReader1 = new SAXReader((String) null, true);
      MockFile mockFile0 = new MockFile(";8csfHy", "U8/0ZnOcv");
      URL uRL0 = mockFile0.toURL();
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/;8csfHy/U8/0ZnOcv (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/;8csfHy/U8/0ZnOcv (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.removeHandler("N");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputStream inputStream0 = null;
      InputSource inputSource0 = new InputSource((InputStream) null);
      StringReader stringReader0 = new StringReader("LKc8K1})");
      inputSource0.setCharacterStream(stringReader0);
      StringReader stringReader1 = new StringReader("$Lb}e?\"MVwbH=njd");
      inputSource0.setCharacterStream(stringReader1);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      pipedInputStream0.close();
      pipedInputStream0.close();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6af34a15 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@6af34a15 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.getXMLReader();
      sAXReader0.resetHandlers();
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.isValidating();
      sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[5];
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      ElementStack elementStack0 = new ElementStack();
      // Undeclared exception!
      try { 
        pruningDispatchHandler0.onEnd(elementStack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
