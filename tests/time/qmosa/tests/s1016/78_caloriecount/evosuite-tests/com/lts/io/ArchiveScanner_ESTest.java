/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 02:05:50 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis((-1406L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "");
      MockFile mockFile1 = new MockFile("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      Predicate.isEqual((Object) improvedFile0);
      Integer integer0 = new Integer((-3512));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(pushbackInputStream0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) bufferedInputStream1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate3.test(integer0);
      Vector<Object> vector0 = new Vector<Object>();
      predicate3.negate();
      Vector<Object> vector1 = new Vector<Object>();
      ImprovedFile improvedFile1 = new ImprovedFile(".EAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      String[] stringArray0 = new String[0];
      archiveScanner0.setIncludes(stringArray0);
      Vector<Object> vector2 = new Vector<Object>();
      archiveScanner0.filesExcluded = vector2;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile0, ".EAR", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-1311L));
      MockFile mockFile0 = new MockFile("z");
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "z");
      MockFile mockFile1 = new MockFile("z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile2 = new MockFile("z", "z");
      mockFile0.setReadable(true, true);
      String[] stringArray0 = new String[20];
      File file0 = mockFile2.getCanonicalFile();
      stringArray0[0] = ".jar";
      file0.toURI();
      stringArray0[1] = "z";
      stringArray0[2] = "z";
      stringArray0[3] = "z";
      mockFile0.setExecutable(true, true);
      mockFile2.setExecutable(true, true);
      mockFile0.renameTo(file0);
      stringArray0[4] = ".ZIP";
      stringArray0[6] = "z";
      mockFile2.setLastModified(3124L);
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      mockFile2.mkdir();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(mockFile2, ".ZIP", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis((-1406L));
      MockFile mockFile0 = new MockFile("", "");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "");
      MockFile mockFile1 = new MockFile("");
      improvedFile0.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      mockFile0.getAbsoluteFile();
      Locale locale0 = new Locale("");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Vector<String> vector0 = new Vector<String>(set0);
      archiveScanner0.dirsIncluded = vector0;
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-1406L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "");
      MockFile mockFile1 = new MockFile("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("bx\"MVAACj :g?", "", improvedFile0);
      improvedFile1.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, ".jar", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Integer integer0 = new Integer(641);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate1);
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate5.and(predicate2);
      Predicate<Object> predicate10 = predicate1.negate();
      predicate9.or(predicate6);
      Predicate<Object> predicate11 = predicate7.negate();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      predicate11.test(bufferedInputStream0);
      predicate2.negate();
      predicate11.test(predicate7);
      Predicate<Object> predicate12 = predicate8.and(predicate10);
      predicate8.and(predicate12);
      predicate4.negate();
      Integer integer1 = new Integer(641);
      Vector<Object> vector0 = new Vector<Object>();
      Predicate<Object> predicate13 = predicate0.negate();
      vector0.removeIf(predicate13);
      Vector<Object> vector1 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("9#mh1s\"m");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.getBasedir();
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "ry, .jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ImprovedFile", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-1311L));
      MockFile mockFile0 = new MockFile("");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0, "");
      MockFile mockFile1 = new MockFile("");
      mockFile0.toPath();
      improvedFile0.deleteOnExit();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      File file0 = mockFile0.getAbsoluteFile();
      String[] stringArray0 = new String[20];
      File file1 = file0.getCanonicalFile();
      stringArray0[0] = "'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "/resources/swing.properties";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      archiveScanner0.includes = stringArray0;
      file0.mkdir();
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(0L);
      int int0 = archiveScanner0.toFileType(file1);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-1406L));
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale0 = Locale.CANADA_FRENCH;
      Locale locale1 = Locale.JAPAN;
      Locale.setDefault(locale1);
      Locale.setDefault(locale_Category0, locale1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) vector0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale locale2 = Locale.FRENCH;
      locale2.getDisplayVariant(locale1);
      locale2.getUnicodeLocaleKeys();
      Locale locale3 = Locale.KOREA;
      locale3.getDisplayLanguage(locale1);
      Locale locale4 = Locale.KOREAN;
      Locale locale5 = Locale.CHINA;
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector1 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "dnGY@", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "?<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("6?\"=GE/8&Q9QBH", ".jar");
      improvedFile0.createNewFile();
      improvedFile0.toURI();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      boolean boolean1 = false;
      boolean boolean2 = true;
      FileSystemHandling.setPermissions(evoSuiteFile1, boolean1, boolean2, boolean0);
      System.setCurrentTimeMillis(int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!");
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9?pI* HIE:}VtH9#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("9?pI* HIE:}VtH9#", "9?pI* HIE:}VtH9#");
      improvedFile0.createNewFile();
      improvedFile0.toURI();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean1 = true;
      boolean boolean2 = true;
      FileSystemHandling.setPermissions(evoSuiteFile1, boolean0, boolean1, boolean2);
      System.setCurrentTimeMillis(int0);
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile(", is not one of the child nodes of ", "");
      ImprovedFile improvedFile0 = new ImprovedFile(", is not one of the child nodes of ");
      ImprovedFile improvedFile1 = ImprovedFile.createTempDirectory(", is not one of the child nodes of ", "", (File) improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, ", for archive ", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-1311L));
      MockFile mockFile0 = new MockFile("z");
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "z");
      MockFile mockFile1 = new MockFile("z");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      MockFile mockFile2 = new MockFile("z", "z");
      mockFile0.setReadable(true, true);
      String[] stringArray0 = new String[20];
      File file0 = mockFile2.getCanonicalFile();
      stringArray0[0] = ".jar";
      file0.toURI();
      stringArray0[1] = "z";
      stringArray0[2] = "z";
      stringArray0[3] = "z";
      mockFile0.setExecutable(true, true);
      MockFile.createTempFile(".jar", ".EAR", (File) mockFile0);
      mockFile0.toPath();
      mockFile2.setExecutable(true, true);
      mockFile0.renameTo(file0);
      stringArray0[4] = ".ZIP";
      stringArray0[6] = "z";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector0;
      mockFile2.setLastModified(3124L);
      archiveScanner0.includes = stringArray0;
      archiveScanner0.addDefaultExcludes();
      mockFile2.mkdir();
      archiveScanner0.processDirectory(mockFile2, ".ZIP", true);
      assertNotSame(mockFile2, file0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ", is not one of the child nodes of ");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate5);
      predicate6.or(predicate0);
      Predicate<Object> predicate7 = predicate4.or(predicate5);
      Predicate<Object> predicate8 = predicate5.or(predicate3);
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate8.and(predicate2);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate7.or(predicate9);
      Predicate<Object> predicate12 = predicate0.negate();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 641);
      predicate6.test(bufferedInputStream0);
      predicate3.and(predicate12);
      predicate5.negate();
      predicate8.negate();
      Integer integer0 = new Integer(641);
      predicate1.test((Object) null);
      Vector<Object> vector0 = new Vector<Object>();
      Predicate<Object> predicate13 = predicate11.negate();
      vector0.removeIf(predicate13);
      ImprovedFile improvedFile0 = new ImprovedFile(", is not one of the child nodes of ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "=/`NjudbsO-lPk", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/, is not one of the child nodes of 
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "Ak");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      Predicate<Object> predicate6 = predicate0.or(predicate1);
      Predicate<Object> predicate7 = predicate1.or(predicate2);
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate9 = predicate4.negate();
      Predicate<Object> predicate10 = predicate6.and(predicate2);
      Predicate<Object> predicate11 = predicate7.negate();
      Predicate<Object> predicate12 = predicate10.or(predicate7);
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate13.test(predicate8);
      Predicate<Object> predicate14 = predicate9.and(predicate11);
      predicate8.negate();
      Predicate<Object> predicate15 = predicate14.negate();
      predicate15.and(predicate12);
      predicate9.and(predicate15);
      Integer integer0 = new Integer(641);
      predicate8.test(predicate0);
      Vector<Object> vector0 = new Vector<Object>();
      predicate10.negate();
      vector0.removeIf(predicate11);
      ImprovedFile improvedFile0 = new ImprovedFile("Ak");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Ak";
      stringArray0[1] = "Ak";
      stringArray0[2] = "Ak";
      stringArray0[3] = "Ak";
      stringArray0[4] = "Ak";
      stringArray0[5] = "Ak";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("Ak");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Integer integer0 = new Integer((-2012));
      vector0.add((Object) "35IBfwhpI?.G");
      Vector<Object> vector1 = new Vector<Object>();
      Object object0 = new Object();
      vector1.add(object0);
      Object object1 = new Object();
      vector1.addElement("VpWgD%>wrN:X|P(LN ");
      Vector<Object> vector2 = new Vector<Object>();
      Integer integer1 = new Integer((-2012));
      vector2.add((Object) integer1);
      Object object2 = new Object();
      Object object3 = new Object();
      vector2.add(object3);
      vector2.addElement(object1);
      Object object4 = new Object();
      vector2.add(object4);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, ".EAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      ImprovedFile improvedFile0 = new ImprovedFile("");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("Quit", "", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1418L));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("!");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, (byte[]) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "?<");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile("Error trying to create output file, ", "6?\"=GE/8&Q9QBH");
      boolean boolean1 = improvedFile0.createNewFile();
      improvedFile0.toURI();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean0, boolean1);
      System.setCurrentTimeMillis(archiveScanner0.DIRECTORY);
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Integer integer0 = new Integer(641);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate1);
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate5.and(predicate2);
      Predicate<Object> predicate10 = predicate1.negate();
      predicate9.or(predicate6);
      Predicate<Object> predicate11 = predicate7.negate();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)48;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      predicate11.test(bufferedInputStream0);
      predicate2.negate();
      predicate11.test(predicate7);
      Predicate<Object> predicate12 = predicate8.and(predicate10);
      predicate8.and(predicate12);
      predicate4.negate();
      Integer integer1 = new Integer(641);
      Vector<Object> vector0 = new Vector<Object>();
      Predicate<Object> predicate13 = predicate0.negate();
      vector0.removeIf(predicate13);
      Vector<Object> vector1 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("9#mh1s\"m");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "ry, .jar");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, 9#mh1s\"m
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vector0.sort(comparator0);
      ImprovedFile improvedFile0 = new ImprovedFile(".jar");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("Quit", ".jar", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Integer integer0 = new Integer(641);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      predicate1.or(predicate2);
      Predicate<Object> predicate5 = predicate3.and(predicate0);
      predicate3.test("");
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.or(predicate5);
      predicate6.or(predicate0);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate7.and(predicate0);
      Predicate<Object> predicate9 = predicate6.negate();
      predicate1.and(predicate7);
      Object object0 = new Object();
      predicate5.and(predicate8);
      Predicate.isEqual((Object) predicate2);
      Integer integer1 = new Integer(641);
      predicate0.test(integer1);
      Vector<Object> vector0 = new Vector<Object>();
      Predicate<Object> predicate10 = predicate1.and(predicate0);
      predicate10.or(predicate6);
      predicate10.negate();
      vector0.removeIf(predicate9);
      Predicate<Object> predicate11 = predicate10.negate();
      vector0.removeIf(predicate11);
      Vector<Object> vector1 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile("|4f(KO>~Y");
      ImprovedFile.createTempImprovedFile("Error trying to ascertain the existence of entry, ", "Quit", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }
}
