/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:49:06 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.net.URI;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9999683577390481
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("e,~");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "e,~";
      stringArray0[8] = "e,~";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesExcluded = vector0;
      stringArray0[2] = "<`,'";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      stringArray0[0] = "e,~";
      stringArray0[5] = "e,~";
      stringArray0[6] = "e,~";
      File file0 = improvedFile0.getCanonicalFile();
      archiveScanner0.basedir = (File) improvedFile0;
      stringArray0[7] = "e,~";
      archiveScanner0.excludes = stringArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      archiveScanner0.includes = stringArray0;
      archiveScanner0.haveSlowResults = false;
      System.setCurrentTimeMillis(0);
      archiveScanner0.toFileType(file0);
      archiveScanner0.processFile("e,~");
      File file1 = ImprovedFile.createTempFileName("com.lts.io.ArchiveScanner", "e,~", improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(file1, "e,~", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ImprovedFile improvedFile0 = new ImprovedFile(", ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ", ";
      stringArray0[1] = ", ";
      stringArray0[2] = "~Dnv$Kg.n,6 ";
      stringArray0[3] = ", ";
      stringArray0[6] = ", ";
      stringArray0[7] = ", ";
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner0.haveSlowResults = true;
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(", ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("e,~");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[10];
      stringArray0[0] = "e,~";
      stringArray0[8] = "e,~";
      stringArray0[2] = "<`,'";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      stringArray0[0] = "e,~";
      stringArray0[5] = "e,~";
      stringArray0[6] = "e,~";
      improvedFile0.getCanonicalFile();
      archiveScanner0.basedir = (File) improvedFile0;
      stringArray0[7] = "e,~";
      archiveScanner0.excludes = stringArray0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      archiveScanner0.includes = stringArray0;
      archiveScanner0.haveSlowResults = false;
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("e,~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("W:t/zx/]Hpo=@");
      improvedFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream3.flush();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1);
      Integer integer0 = new Integer(0);
      vector0.add((Object) "e|7r3_{p\"e#l~6..C");
      Vector<Object> vector1 = new Vector<Object>();
      vector0.sort((Comparator<? super Object>) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W:t/zx/]Hpo=@";
      stringArray0[1] = "W:t/zx/]Hpo=@";
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "3mOnk,r_03mOnk,r_.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("le, ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "le, ";
      stringArray0[1] = "le, ";
      stringArray0[2] = "Error trying to read entry, ";
      stringArray0[3] = "le, ";
      stringArray0[4] = "Are you sure you want to exit the Application?.jar";
      stringArray0[5] = "le, ";
      stringArray0[6] = "le, ";
      stringArray0[7] = "le, ";
      stringArray0[8] = ".war";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "le, ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("le, ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "le, ";
      stringArray0[1] = "le, ";
      stringArray0[2] = "~Dnv$Kg.n,6 ";
      stringArray0[3] = "le, ";
      stringArray0[4] = "Are you sure you want to exit the Application?.jar";
      stringArray0[5] = "le, ";
      stringArray0[6] = "le, ";
      stringArray0[7] = "le, ";
      stringArray0[8] = ".war";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.excludes = stringArray0;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "hmVSG~+iR17oI96O", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8709148115253056
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("3mOnk,r_");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      Vector<Integer> vector0 = new Vector<Integer>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      File file0 = MockFile.createTempFile("3mOnk,r_", "3mOnk,r_", (File) improvedFile0);
      archiveScanner0.toFileType(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        archiveScanner1.scandir(improvedFile1, "3mOnk,r_", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("W:t/zx/]Hpo=@");
      improvedFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.close();
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      Integer integer0 = new Integer(7);
      vector0.add((Object) integer0);
      Vector<Object> vector1 = new Vector<Object>();
      vector0.sort((Comparator<? super Object>) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      vector0.add(object3);
      Object object4 = new Object();
      vector0.add(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      vector0.add((Object) dataInputStream0);
      ImprovedFile.createTempDirectory("/home/ubuntu/termite/projects/78_caloriecount/W:t/zx/]Hpo=@", "]iyueY2L(5O;t&fg.jar.jar", (File) improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("le, ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "le, ";
      stringArray0[1] = "le, ";
      stringArray0[3] = "le, ";
      stringArray0[4] = "Are you sure you want to exit the Application?.jar";
      stringArray0[5] = "le, ";
      stringArray0[6] = "le, ";
      stringArray0[7] = "le, ";
      Integer integer0 = new Integer((-1));
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "le, ");
      Vector<Object> vector1 = new Vector<Object>();
      vector1.sort((Comparator<? super Object>) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      vector0.add((Object) "le, ");
      vector1.add((Object) null);
      Object object3 = new Object();
      Object object4 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      vector1.add((Object) null);
      ImprovedFile improvedFile1 = ImprovedFile.createTempDirectory("eOcSwAw~h*|xB)", "eOcSwAw~h*|xB)", (File) improvedFile0);
      archiveScanner0.scandir(improvedFile1, (String) null, true);
      assertEquals(0L, improvedFile1.getUsableSpace());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.scandir(improvedFile0, ".jar", false);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner3 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner2.isIncluded("com.lts.io.archive.Defau{tNestedArchive");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      File file0 = null;
      ImprovedFile improvedFile0 = new ImprovedFile((File) null, "0|wg4:D");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ImprovedFile improvedFile1 = new ImprovedFile("|}-41u,4{NLO%*");
      ImprovedFile improvedFile2 = improvedFile1.createTempDir();
      archiveScanner0.toFileType(improvedFile2);
      URI uRI0 = MockURI.aFTPURI;
      URI uRI1 = MockURI.resolve(uRI0, uRI0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      linkedList1.addAll((Collection<? extends Locale>) linkedList1);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList4.listIterator();
      linkedList2.removeAll(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale1 = locale0.stripExtensions();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      vector0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0, locale_FilteringMode1);
      locale1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale2 = Locale.FRANCE;
      locale0.getUnicodeLocaleKeys();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile(")U$VF9\"'w<");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".JAR";
      Vector<Object> vector0 = new Vector<Object>();
      Locale locale0 = Locale.FRANCE;
      vector0.add((Object) locale0);
      Vector<Object> vector1 = new Vector<Object>();
      vector0.sort((Comparator<? super Object>) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      vector1.add(object3);
      vector1.add((Object) ".JAR");
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      vector2.add(object2);
      archiveScanner0.isArchive(improvedFile0);
      System.setCurrentTimeMillis(660L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.listIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      locale0.stripExtensions();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      vector0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) null, locale_FilteringMode1);
      Locale locale1 = Locale.ITALIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale locale2 = Locale.FRANCE;
      locale0.getUnicodeLocaleKeys();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile(".ZIP", "A,");
      MockFile mockFile1 = new MockFile(mockFile0, "#]f-");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile1);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(mockFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      linkedList1.addAll((Collection<? extends Locale>) list0);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList4.listIterator();
      linkedList2.removeAll(linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale1 = locale0.stripExtensions();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      vector0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode1);
      locale1.clone();
      URI uRI0 = MockURI.aFTPURI;
      ImprovedFile improvedFile0 = new ImprovedFile(".war", "/z1%s&G`");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "LF%3AKvD>ieY");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/.war/z1%s&G`
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("W:t/zx/]Hpo=@");
      improvedFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream3.flush();
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream1);
      Integer integer0 = new Integer(0);
      vector0.add((Object) "e|7r3_{p\"e#l~6..C");
      Vector<Object> vector1 = new Vector<Object>();
      vector0.sort((Comparator<? super Object>) null);
      Object object0 = new Object();
      Object object1 = new Object();
      vector1.addElement(pipedOutputStream0);
      Object object2 = new Object();
      vector1.add((Object) pipedInputStream0);
      vector0.add((Object) bufferedInputStream0);
      Object object3 = new Object();
      Object object4 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      vector3.add((Object) byteArrayInputStream0);
      archiveScanner0.isArchive(improvedFile0);
      System.setCurrentTimeMillis(1851L);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("OPk,r_");
      improvedFile0.getAbsolutePath();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      Integer integer0 = new Integer(5);
      vector0.add((Object) integer0);
      vector0.sort((Comparator<? super Object>) null);
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      vector1.add((Object) "HXe5Mg281320.com.lts.io.ArchiveScanner.jar");
      int int0 = ArchiveScanner.FILE;
      ImprovedFile.createTempDirectory("Px*k_%e+W", "etc.", (File) improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "45yE$Gc[d", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.UK;
      locale0.getScript();
      Locale locale1 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      linkedList0.listIterator();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      locale0.stripExtensions();
      Locale locale2 = (Locale)locale1.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      locale2.getUnicodeLocaleKeys();
      ImprovedFile improvedFile0 = new ImprovedFile("", "S}=}Jp.+![qd=W>:.oar.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ImprovedFile improvedFile1 = new ImprovedFile("INVALID_FILE_NAME");
      archiveScanner0.toFileType(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("le, ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "le, ";
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream1.flush();
      Integer integer0 = new Integer(0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) pipedOutputStream1);
      Vector<Object> vector1 = new Vector<Object>();
      vector1.sort((Comparator<? super Object>) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      vector1.add((Object) pipedOutputStream0);
      Object object4 = new Object();
      vector0.add((Object) ".WAR.jar");
      Object object5 = new Object();
      Object object6 = new Object();
      Vector<Object> vector2 = new Vector<Object>();
      Object object7 = new Object();
      vector0.add(object7);
      ImprovedFile.createTempDirectory("]iyueY2L(5O;t&fg.jar.jar", "]iyueY2L(5O;t&fg.jar.jar", (File) improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "OPk,r_0OPk,r_.jar0S}=}Jp.+!`qd=W>:.oar.jar.jar", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.US;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      linkedList1.addAll((Collection<? extends Locale>) list0);
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList0.listIterator();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList2.removeAll(linkedList4);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale1 = Locale.ITALY;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      vector0.removeAllElements();
      vector0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale> vector1 = new Vector<Locale>();
      Locale locale2 = Locale.ITALY;
      vector1.add(locale2);
      Locale locale3 = locale0.stripExtensions();
      vector1.addElement(locale3);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list1, locale_FilteringMode1);
      locale1.clone();
      Locale locale4 = Locale.FRANCE;
      locale3.getUnicodeLocaleKeys();
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "RM]_8x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("le, ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "le, ";
      stringArray0[1] = "le, ";
      stringArray0[2] = "~Dnv$Kg.n,6 ";
      stringArray0[3] = "le, ";
      stringArray0[4] = "Are you sure you want to exit the Application?.jar";
      stringArray0[5] = "le, ";
      stringArray0[6] = "le, ";
      stringArray0[7] = "le, ";
      Integer integer0 = new Integer(1);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) "Are you sure you want to exit the Application?.jar");
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      vector2.sort((Comparator<? super Object>) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      vector0.add(object3);
      Integer integer1 = new Integer(1024);
      vector1.add((Object) integer1);
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Integer integer2 = new Integer(1);
      vector2.add((Object) integer2);
      try { 
        archiveScanner0.scandir(improvedFile0, "~Dnv$Kg.n,6 ", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/le, 
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }
}
