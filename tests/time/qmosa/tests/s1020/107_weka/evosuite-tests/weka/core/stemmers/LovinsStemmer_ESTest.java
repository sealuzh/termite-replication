/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:58:20 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.650310177777652
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("B2%MmKx)+");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.stem("correlvad");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("as");
      assertEquals("as", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer0.stem("ORGANIZATION");
      assertEquals("organ", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.723607221120854
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "acious";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("uc");
      lovinsStemmer0.stemString("ys");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("uc");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("A hyperlink to a resource.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stem("Max index (ints): ");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("addreslidix");
      String string0 = lovinsStemmer0.stemString("addreslidtex");
      assertEquals("addreslidtic", string0);
      
      String string1 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6498927502661265
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "EDITOR";
      stringArray0[1] = "5IgI:\"+";
      stringArray0[2] = "I1|}rZ9:";
      lovinsStemmer0.stem("iers");
      lovinsStemmer0.stem("es");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("'{8M_cZ-t:/L}rTlJ>");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("umpt");
      assertEquals("um", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer4.stemString("Correlation: ");
      assertEquals("correl: ", string1);
      
      String string2 = lovinsStemmer0.stemString("yt");
      assertEquals("yt", string2);
      
      String string3 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.705852609695417
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.toString();
      stringArray0[0] = "D";
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("as");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("+1;I#>]%GGI[");
      assertEquals("+1;i#>]%g[", string1);
      
      String string2 = lovinsStemmer1.stemString("RV`.93z:cnd=Ql;#F");
      assertEquals("rv`.93z:cnd=ql;#f", string2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.685404058824585
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "acious";
      stringArray0[1] = "owns=_{1c?,dex";
      lovinsStemmer0.stemString("GjF>{)#m_g+3");
      stringArray0[2] = "ions";
      lovinsStemmer0.globalInfo();
      stringArray0[3] = "zwns=_{1c?,p9Hx";
      stringArray0[4] = "";
      stringArray0[5] = "owns=_{1c?,erid";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "zwns=_{1c?,p9Hx";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "zwns=_{1c?,p9Hx";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[4] = "L\"-d)0B";
      stringArray1[5] = "zwns=_{1c?,p9Hx";
      stringArray1[6] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("s8Car[I,");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("dex");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6954454726829655
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[19];
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("MASTERSTHESIS");
      lovinsStemmer0.stem("D");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("mastersthes");
      assertEquals("mastersth", string0);
      
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("mastersth");
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer1.stemString("-6.78: lud");
      assertEquals("-6.78: lus", string1);
      
      lovinsStemmer1.stemString("");
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("ceG$smxX?F'6");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6083279628733202
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("B2%MmKx)+");
      lovinsStemmer0.stemString("Original array (doubles): ");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Original array (doubles): ";
      stringArray0[1] = "R*^\"D7Wm|:7";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("+X");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Key words used for searching or possibly for annotation.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.640296363016515
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Ic:FEx!j57GghoWK");
      lovinsStemmer0.stemString("ys");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Xv");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("?g4Ww&T!Ww1|izu}8'");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("ental");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4920693937106453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("oidal");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6763959178471162
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.toString();
      stringArray0[0] = "D";
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("as");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("$Revision: 8080 $");
      assertEquals("$revis: 8080 $", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string4 = lovinsStemmer0.stem("8034");
      assertEquals("8034", string4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.649951851667359
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("$;vc9");
      lovinsStemmer1.stemString("ionyz");
      lovinsStemmer1.stem("");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer1.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stemString("zC.)tmMbq(v-D_\"");
      String string2 = lovinsStemmer2.stemString("encible");
      assertEquals("enc", string2);
      
      lovinsStemmer2.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("boY>txHHU");
      String string3 = lovinsStemmer2.stem(".x#znjtA;#`74!bxj");
      assertEquals(".x#znjta;#`74!bxj", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7908639151453951
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "8034";
      stringArray0[5] = "lovinsstemmerher";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("\"(ip");
      lovinsStemmer0.stemString("lovinsstemmerher");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("entpansyt");
      lovinsStemmer0.stemString("\"(ip");
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8414735799352948
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("B2%MmKx)+");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "'y4%1d5";
      stringArray0[3] = "b2%mmkx)+";
      stringArray0[4] = "b2%mmkx)+";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      stringArray0[6] = "B2%MmKx)+";
      stringArray0[7] = "'y4%1d5";
      stringArray0[8] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("`FYG M9U(/@");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("YGPP@,Sv-h/MDc2{K");
      assertEquals("ygp@,sv-h/mdc2{k", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6604334595163914
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8>7[tq7mj";
      stringArray0[1] = "";
      stringArray0[2] = "{9PX#b|K uA3:J)C?\"";
      stringArray0[3] = "";
      stringArray0[4] = "{BL=Z[~$d)GmRG";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("LOCATION");
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("{BL=Z[~$d)GmRG");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("end");
      lovinsStemmer0.stem("8>7[tq7mj");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("mit");
      String string3 = lovinsStemmer0.stemString("6q");
      assertEquals("6q", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7170816607350656
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "EDITOR";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Ah8?070j;^C%th,");
      lovinsStemmer0.stemString("EDITOR");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("8034pand");
      lovinsStemmer0.stemString("ah8?070j;^c%th,");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "8034";
      stringArray1[1] = "Ah8?070j;^C%th,";
      stringArray1[2] = "edit";
      LovinsStemmer.main(stringArray1);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.654515453759526
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("A part of a book having its own title.");
      lovinsStemmer0.stem("a part of a book having its own title.");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("a part of a book having its own title.");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "a part of a book having its own title.";
      stringArray0[1] = "})zP{9ycTANg^t@l/S{";
      stringArray0[2] = "a part of a book having its own title.";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.getRevision();
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6457722330127766
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("price");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("8034");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "x0]JtQ/,b\"";
      stringArray0[2] = "pric";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("\"(ipyt");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7068735101755803
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[4];
      lovinsStemmer0.stemString("R1{\u0000T^GF9ZH");
      stringArray0[0] = "ert";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      stringArray0[1] = "esy0dond";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("note");
      lovinsStemmer0.stem(">|P[r%5y=K");
      stringArray0[2] = "lux";
      stringArray0[3] = "mit";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("mEUKM7\"v&(Q9x*qe");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("mit");
      lovinsStemmer0.stem("mit");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("ert");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6440654745861374
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ister");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "ister";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "ister";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("@qn");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "ister";
      stringArray1[1] = "@qn";
      stringArray1[2] = "weka.core.stemmers.lovinsstemmer";
      stringArray1[3] = "ister";
      stringArray1[4] = "+1;I#>]%GGI[";
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("uct");
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7553805587158198
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[7];
      stringArray1[1] = "OWNS=_{1c?,";
      stringArray1[2] = "OWNS=_{1c?,";
      stringArray1[3] = "OWNS=_{1c?,";
      stringArray1[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[5] = "weka.core.TechnicalInformation$Type";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("addreslid");
      assertEquals("addreslis", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6911846537548634
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("rm(_R1eh");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("{!?PF*Qc@att/95");
      lovinsStemmer0.stem("ableness");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "{!?pf*qc@at/95";
      stringArray0[3] = "{!?pf*qc@at/95";
      stringArray0[4] = "8034";
      stringArray0[5] = "rm(_r1eh";
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6172330526631487
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "8034";
      stringArray0[0] = "8034";
      stringArray0[3] = "'y4%1d5";
      stringArray0[4] = "8034";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("acies");
      assertEquals("aci", string0);
      
      String string1 = lovinsStemmer0.stemString("arisations");
      assertEquals("aris", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8175105092109307
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("B2%MmKx)+");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("B2%MmKx)+");
      assertEquals("b2%mmkx)+", string0);
      
      String string1 = lovinsStemmer0.stemString("uad");
      assertEquals("uas", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "\"(ip";
      stringArray1[1] = "\"(ip";
      stringArray1[2] = "b2%mmkx)+";
      stringArray1[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[5] = "8034";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
      
      String string4 = lovinsStemmer0.stemString("addreslidticet");
      assertEquals("addreslidtices", string4);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6282486484815148
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("price");
      assertEquals("pric", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "icant";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("entpandtex");
      assertEquals("entpandtic", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.609941682359652
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zC.)tmMbq(v-D_\"";
      stringArray0[1] = "";
      stringArray0[2] = "71(J|7oWi`U*:hcf#$";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("71(J|7oWi`U*:hcf#$");
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("b2%mmkvx)+ensyz");
      assertEquals("b2%mmkvx)+ensys", string1);
      
      String string2 = lovinsStemmer0.stemString("!4rx9@[,qqos");
      assertEquals("!4rx9@[,qqo", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6601619680877953
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("$b!3y?W;>UCp=E|");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("end");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.stemString("Max index (doubles): ");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer3.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5858256420370673
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("B2%MmKx)+");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "'y4%1d5";
      stringArray0[3] = "b2%mmkx)+";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("lily");
      lovinsStemmer0.stemString("lux");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.687981682923634
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wC09qVs>.}o";
      lovinsStemmer0.stemString("wC09qVs>.}o");
      lovinsStemmer0.globalInfo();
      stringArray0[1] = "Copyright information.";
      stringArray0[2] = "iful";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      stringArray0[3] = "j\"RwPAbYGT%R";
      stringArray0[4] = "";
      stringArray0[5] = ",Fcg";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("address");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.toString();
      stringArray1[1] = "address";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Z!");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7933956067098282
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      lovinsStemmer0.toString();
      stringArray0[0] = "D";
      lovinsStemmer0.stemString("D");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("D");
      lovinsStemmer0.stemString(" =8_,1");
      String string0 = lovinsStemmer0.stemString(" =8_,1");
      assertEquals(" =8_,1", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("pF@C4TARc\"");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("cid");
      assertEquals("cis", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.564703484048128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zC.)tmMbq(v-D_\"";
      stringArray0[1] = "";
      stringArray0[2] = "71(J|7oWi`U*:hcf#$";
      stringArray0[3] = "Kc5,G";
      stringArray0[4] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("$;vc9");
      lovinsStemmer0.stem("L_1");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("ond");
      assertEquals("ons", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.stem("9FHn5m6*H^R9*");
      assertEquals("9fhn5m6*h^r9*", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6934860277980512
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("price");
      assertEquals("pric", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "icant";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("Normalized again (doubles): ");
      assertEquals("normal again (doubl): ", string2);
      
      String string3 = lovinsStemmer0.stemString("et");
      assertEquals("et", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6509183912917673
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("ionalness");
      assertEquals("ion", string0);
      
      String string1 = lovinsStemmer0.stemString("f.nZu$)`");
      assertEquals("f.nzu$)`", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "f.nZu$)`";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.ex");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.ec", string2);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer1.stemString("YEAR");
      assertEquals("year", string4);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5469182739791005
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("erid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("bex");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7061621167220629
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("KEY");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("key");
      lovinsStemmer0.stem("HTTP");
      lovinsStemmer0.stemString("MASTERSTHESIS");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "5e(ys\"St9|DbJNN%F";
      stringArray0[1] = "key";
      lovinsStemmer0.getRevision();
      stringArray0[2] = "KEY";
      stringArray0[3] = "KEY";
      stringArray0[4] = "key";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("KEY");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("3Z(K@/[p)E9X'tw8");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6336044794068958
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A part of a book having its own title.";
      stringArray0[1] = "2q3R/";
      stringArray0[2] = "8034";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "A part of a book having its own title.";
      stringArray0[6] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("izations");
      assertEquals("izat", string3);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6950820744031618
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wC09qVs>.}o";
      String string0 = lovinsStemmer0.stemString("wC09qVs>.}o");
      assertEquals("wc09qv>.}o", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      stringArray0[1] = "Copyright information.";
      stringArray0[2] = "iful";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      stringArray0[3] = "j\"RwPAbYGT%R";
      stringArray0[4] = "";
      stringArray0[5] = ",Fcg";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("address");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[0];
      lovinsStemmer0.stemString("iful");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("booklet");
      lovinsStemmer0.stem(",Fcg");
      lovinsStemmer0.stemString("series");
      lovinsStemmer0.stemString("");
      String string2 = lovinsStemmer0.stem("address");
      assertEquals("addres", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6802929624674368
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "8034";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "uas";
      stringArray0[6] = "8034";
      stringArray0[7] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("uas");
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7684837058905374
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "E2){ZBaeGX";
      stringArray0[1] = "8034";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "8034";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("w(FZNn>R/Iv6?tO");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7168850009074275
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("B2%MmKx)+");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "'y4%1d5";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "oB7|G;K7,4P8e,";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("QBeG{ _mc*dFlcwqL>");
      assertEquals("qbeg{ _mc*dflcwql>", string0);
      
      String string1 = lovinsStemmer0.stemString("rus");
      assertEquals("rus", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7172911197648797
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "zC.)tmMbq(v-D_\"";
      stringArray0[1] = "";
      stringArray0[2] = "71(J|7oWi`U*:hcf#$";
      stringArray0[3] = "Kc5,G";
      stringArray0[4] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("cg");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("$;vc9");
      lovinsStemmer0.stem("L_1");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("%3o8");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("71(J|7oWi`U*:hcf#$");
      lovinsStemmer0.stemString("ious");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.796781562040498
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("B2%MmKx)+");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "'y4%1d5";
      stringArray0[3] = "b2%mmkx)+";
      stringArray0[4] = "b2%mmkx)+";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.toString();
      stringArray0[6] = "B2%MmKx)+";
      stringArray0[7] = "'y4%1d5";
      stringArray0[8] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("'y4%1d5");
      assertEquals("'y4%1d5", string0);
      
      lovinsStemmer0.stemString("B2%MmKx)+");
      lovinsStemmer0.stemString("B2%MmKx)+");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[2] = "b2%mmkx)+";
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.stemString("pricpicend");
      assertEquals("pricpicens", string2);
      
      String string3 = lovinsStemmer0.stemString("nqf");
      assertEquals("nqf", string3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6871619948600771
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "acious";
      stringArray0[1] = "owns=_{1c?,dex";
      lovinsStemmer0.stemString("GjF>{)#m_g+3");
      stringArray0[2] = "ions";
      lovinsStemmer0.globalInfo();
      stringArray0[3] = "owns=_{1c?,pex";
      stringArray0[4] = "";
      stringArray0[5] = "owns=_{1c?,erid";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "owns=_{1c?,pex";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "owns=_{1c?,pex";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("owns=_{1c?,pex");
      lovinsStemmer0.stemString("2z");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6895779439732872
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("ously");
      assertEquals("ous", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.stemString("%=#_;EFC;<x6e@");
      assertEquals("%=#_;efc;<x6@", string2);
      
      String string3 = lovinsStemmer1.stemString("et");
      assertEquals("et", string3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.615646283803581
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gmrgher");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.627529544744872
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "OWNS=_{1c?,";
      stringArray0[2] = "OWNS=_{1c?,";
      stringArray0[3] = "OWNS=_{1c?,";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "weka.core.TechnicalInformation$Type";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("PROCEEDINGS");
      assertEquals("proceed", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1965442605467604
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("misc");
      assertEquals("misc", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.180135190814403
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("dex");
      assertEquals("dic", string0);
  }
}
