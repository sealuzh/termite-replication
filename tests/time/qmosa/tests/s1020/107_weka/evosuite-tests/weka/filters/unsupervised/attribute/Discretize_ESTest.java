/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:04:47 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("SU$M<P1o");
      discretize0.setMakeBinary(true);
      double[][] doubleArray0 = new double[4][4];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-1563.31);
      doubleArray1[1] = 884.15212;
      doubleArray1[2] = Double.NEGATIVE_INFINITY;
      doubleArray1[3] = 0.5;
      doubleArray1[4] = (-1144.72938352);
      doubleArray1[5] = 1.0E-6;
      doubleArray1[6] = 974.4368;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-1563.31);
      doubleArray2[1] = Double.NEGATIVE_INFINITY;
      doubleArray2[2] = 1440.97676994;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-1563.31);
      doubleArray3[1] = 974.4368;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = 1440.97676994;
      doubleArray3[4] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[4];
      doubleArray4[0] = 1.0E-6;
      doubleArray4[1] = 1.0E-6;
      doubleArray4[2] = 1.0E-6;
      doubleArray4[3] = 1440.97676994;
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      int int0 = (-259);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((-259));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -259
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-18);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-18);
      doubleArray0[1] = (double) (byte) (-18);
      doubleArray0[2] = (double) (byte)80;
      doubleArray0[0] = (double) (byte)80;
      doubleArray0[4] = (double) (byte) (-18);
      doubleArray0[6] = (double) (byte)80;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte) (-18), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(80.0, doubleArray0);
      binarySparseInstance1.toString();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.deleteAttributeAt(1);
      Discretize discretize0 = new Discretize("Bin number optimization in conjunction with equal-frequency binning not implemented.");
      binarySparseInstance2.setValue(4720, (double) 1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(606.9338, doubleArray0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(606.9338, intArray0, (-1756));
      binarySparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      arrayList0.add(attribute0);
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.isMissing(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      instances0.add((Instance) binarySparseInstance1);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances(instances0, 1);
      Instances instances2 = new Instances(instances1);
      int int0 = 60;
      Instances instances3 = new Instances(instances2, 60);
      Instances instances4 = new Instances(instances1);
      instances0.compactify();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      instances1.retainAll(instances2);
      Discretize discretize0 = new Discretize(".arff");
      try { 
        discretize0.setInputFormat(instances4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at .arff
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 2710;
      intArray0[3] = 0;
      intArray0[1] = 2;
      intArray0[5] = 0;
      Discretize discretize0 = new Discretize("numeric");
      discretize0.getCutPoints(0);
      arrayList0.add(attribute0);
      Attribute.typeToString(0);
      Discretize discretize1 = new Discretize("packages");
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 3;
      intArray0[2] = 2710;
      intArray0[3] = 0;
      intArray0[1] = 2;
      intArray0[5] = 0;
      Discretize discretize0 = new Discretize("numeric");
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 3;
      doubleArray2[4] = (double) 2710;
      doubleArray2[5] = (double) 2710;
      doubleArray2[6] = (double) 4;
      doubleArray2[7] = (double) 3;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = (double) 2;
      doubleArray4[1] = (double) 1;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 2710;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (double) 1;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = (double) 4;
      doubleArray5[3] = (double) 2;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 1;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      double[] doubleArray6 = discretize0.getCutPoints(0);
      assertNotNull(doubleArray6);
      assertEquals(4, doubleArray6.length);
      
      arrayList0.add(attribute0);
      Attribute.typeToString(0);
      Discretize discretize1 = new Discretize("packages");
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.195742067015279
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[5];
      intArray0[2] = (-2118);
      String[] stringArray0 = discretize0.getOptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize1 = new Discretize("!B2XdJ}:A*p#");
      assertFalse(discretize1.getMakeBinary());
      
      discretize1.setOptions(stringArray0);
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <filename>\n\tThe file containing first input instances.\n-o <filename>\n\tThe file first output instances will be written to.\n-r <filename>\n\tThe file containing second input instances.\n-s <filename>\n\tThe file second output instances will be written to.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n", arrayList0, 1011);
      Attribute attribute0 = new Attribute("\nClass is numeric: ");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-1144.72938352);
      doubleArray0[2] = (double) 2;
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = (-2496);
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 4;
      intArray0[5] = 1259;
      intArray0[6] = 0;
      intArray0[7] = 0;
      instances0.retainAll(arrayList0);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2721);
      Attribute attribute0 = new Attribute(".arff");
      Attribute attribute1 = new Attribute("@attribute", (List<String>) null, 333);
      attribute1.addRelation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2721;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 722;
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.isMissing(200);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("relational", arrayList0, 722);
      Instances instances2 = new Instances(instances1, 68);
      instances2.add((Instance) denseInstance0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute2 = new Attribute("real", (List<String>) null, protectedProperties0);
      DenseInstance denseInstance1 = new DenseInstance(0, doubleArray0);
      instances2.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("real");
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lR?#");
      SystemInUtil.addInputLine("fppc>OK,~8=4<&oR");
      Discretize discretize0 = new Discretize("lR?#");
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine("fppc>OK,~8=4<&oR");
      SystemInUtil.addInputLine("fppc>OK,~8=4<&oR");
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7", arrayList0, 2721);
      Attribute attribute0 = new Attribute(".arff");
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (double) 2710;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2710, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 772.29;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 1834;
      doubleArray1[5] = (double) 1;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2710.0, doubleArray1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      binarySparseInstance3.deleteAttributeAt(1);
      Discretize discretize0 = new Discretize("HY#]wSd^");
      discretize0.setUseBinNumbers(true);
      Discretize discretize1 = new Discretize("7");
      // Undeclared exception!
      try { 
        discretize1.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\nGeneral options:\n\n-h\n\tGet help on available options.\n-i <filename>\n\tThe file containing first input instances.\n-o <filename>\n\tThe file first output instances will be written to.\n-r <filename>\n\tThe file containing second input instances.\n-s <filename>\n\tThe file second output instances will be written to.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.\n", arrayList0, 1011);
      Attribute attribute0 = new Attribute("\nClass is numeric: ");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (-1144.72938352);
      attribute0.copy("=========\t==========\t=======");
      doubleArray0[2] = (double) 2;
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.9093506761746544
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("Sets the desired weight of instances per interval for equal-frequency binning.");
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[1] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[2] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[3] = "eym1";
      stringArray0[4] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[5] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[6] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      stringArray0[7] = "Sets the desired weight of instances per interval for equal-frequency binning.";
      Discretize.main(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0304401794831066
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getOptions();
      discretize0.getRevision();
      discretize0.setFindNumBins(false);
      discretize0.getAttributeIndices();
      discretize0.setBins(0);
      discretize0.m_UseBinNumbers = true;
      discretize0.setDesiredWeightOfInstancesPerInterval((-2922.8038179753726));
      boolean boolean0 = discretize0.m_UseBinNumbers;
      discretize0.useEqualFrequencyTipText();
      discretize0.getInvertSelection();
      discretize0.findNumBinsTipText();
      assertEquals((-2922.8038179753726), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useEqualFrequencyTipText();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte) (-25);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[3] = (double) (byte) (-25);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-5908.148278698557);
      int[] intArray0 = new int[6];
      intArray0[1] = (int) (byte) (-25);
      intArray0[2] = (int) (byte) (-25);
      intArray0[3] = 343;
      intArray0[4] = (int) (byte) (-25);
      intArray0[5] = 343;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((byte) (-25), doubleArray0, intArray0, (-25));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("X ['p");
      discretize0.m_DefaultCols = "";
      discretize0.setFindNumBins(false);
      discretize0.setIgnoreClass(true);
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&N");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("&N");
      int int0 = (-2145609310);
      discretize0.getBinRangesString((-2145609310));
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = (double) (-2145609310);
      doubleArray0[2] = (double) (-2145609310);
      double double0 = 5.70001;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.deleteAttributeAt((-1325));
      Discretize discretize1 = new Discretize("3EC");
      discretize1.setInvertSelection(false);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1325);
      intArray0[1] = 1;
      intArray0[2] = 1;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1153.728453576347), intArray0, 1);
      // Undeclared exception!
      try { 
        discretize1.convertInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals(10, discretize0.getBins());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.m_NumBins = (-3226);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      discretize0.setIgnoreClass(true);
      discretize0.setFindNumBins(false);
      discretize0.useBinNumbersTipText();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setOutputFormat();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.991004276632703
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)95;
      Discretize discretize0 = new Discretize();
      Filter.runFilter(discretize0, (String[]) null);
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (byte)95;
      intArray0[1] = (int) (byte)95;
      intArray0[2] = (-13);
      intArray0[3] = (-2086126969);
      discretize0.setAttributeIndicesArray(intArray0);
      System.setCurrentTimeMillis(2L);
      discretize0.setOutputFormat();
      discretize0.setOutputFormat();
      discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)80;
      byteArray0[2] = (byte) (-24);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "x");
      Discretize discretize0 = new Discretize("x");
      discretize0.m_UseBinNumbers = true;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2402.52794937007);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "x";
      stringArray0[1] = "x";
      stringArray0[2] = "x";
      stringArray0[3] = "\"y1ZL?Z]o>7:$Ca|a%4";
      stringArray0[4] = "x";
      stringArray0[5] = "eym1";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)95;
      Discretize discretize0 = new Discretize();
      System.setCurrentTimeMillis((-10L));
      System.setCurrentTimeMillis((-733L));
      System.setCurrentTimeMillis((byte)3);
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1781274094291887
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.5;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      binarySparseInstance0.isMissing(4);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instances instances1 = new Instances(instances0, 1834);
      instances1.add((Instance) binarySparseInstance0);
      arrayList0.add(attribute0);
      Instances instances2 = new Instances(instances1, 1);
      ArrayList<Discretize> arrayList1 = new ArrayList<Discretize>();
      instances2.retainAll(instances0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances1);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1144.72938352);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1966.50282);
      doubleArray0[3] = (-1144.72938352);
      int[] intArray0 = new int[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "first-last");
      intArray0[0] = 343;
      intArray0[1] = (-1775);
      Discretize discretize0 = new Discretize("PB}O5.:1");
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2710;
      doubleArray0[1] = (double) 2710;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2710, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 1;
      binarySparseInstance2.isMissing(1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(10.0, doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(772.29, doubleArray1);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance4.deleteAttributeAt((-1987));
      Discretize discretize0 = new Discretize("HY#]wSd^");
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.995398528580674
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-3);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (byte) (-3);
      doubleArray0[1] = (double) (byte)10;
      doubleArray0[2] = (double) (byte)10;
      doubleArray0[3] = (double) (byte) (-3);
      doubleArray0[4] = 772.29;
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      discretize0.setAttributeIndices("aS[\"g~");
      int[] intArray0 = new int[3];
      intArray0[0] = 2147483645;
      intArray0[1] = (int) (byte) (-3);
      intArray0[2] = 231;
      discretize0.setAttributeIndicesArray(intArray0);
      Discretize discretize1 = new Discretize();
      discretize1.getCapabilities();
      Discretize discretize2 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize("\u0005'TS@3|[2");
      discretize0.m_FindNumBins = false;
      discretize0.setUseEqualFrequency(false);
      Filter filter0 = Filter.makeCopy(discretize0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "\u0005'TS@3|[2";
      stringArray0[1] = "\u0005'TS@3|[2";
      stringArray0[2] = "\u0005'TS@3|[2";
      stringArray0[3] = "\u0005'TS@3|[2";
      stringArray0[4] = "\u0005'TS@3|[2";
      stringArray0[5] = "\u0005'TS@3|[2";
      stringArray0[6] = "\u0005'TS@3|[2";
      Filter.runFilter(filter0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("I406@Yd{on");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      Range range0 = new Range("ZZ`3)7z7RVP0bTW.");
      discretize0.m_DiscretizeCols = range0;
      discretize0.setMakeBinary(true);
      discretize0.makeBinaryTipText();
      discretize0.findNumBinsTipText();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)3;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize0 = new Discretize("xi0Os41^x#&+K{u");
      // Undeclared exception!
      try { 
        discretize0.findNumBins((byte)10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getAttributeIndices();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals("first-last", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = (-2028178998);
      discretize0.setDesiredWeightOfInstancesPerInterval((-1144.72938352));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[6];
      MockRandom mockRandom0 = new MockRandom(0L);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      instances0.resampleWithWeights((Random) mockRandom0, booleanArray0);
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1144.72938352);
      doubleArray0[3] = (-1144.72938352);
      doubleArray0[4] = (-1144.72938352);
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.enumerateAttributes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getUseBinNumbers();
      System.setCurrentTimeMillis(2L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7", arrayList0, 2710);
      Attribute attribute0 = new Attribute(".arff");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 5.5;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.5, doubleArray0);
      binarySparseInstance0.isMissing(1224);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 4;
      intArray0[3] = 3;
      intArray0[4] = 2710;
      discretize0.setAttributeIndicesArray(intArray0);
      System.setCurrentTimeMillis(4);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)106;
      byteArray0[7] = (byte)3;
      byteArray0[8] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      System.setCurrentTimeMillis(1L);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = false;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "import weka.filters.Filter;\n";
      discretize0.setBins(1147);
      stringArray0[1] = "";
      discretize0.m_DesiredWeightOfInstancesPerInterval = 413.81737;
      stringArray0[2] = "kTR Z.09d";
      stringArray0[3] = "iho~WTCF9g?I!qht";
      stringArray0[4] = "&U>..i6jgdxNV";
      stringArray0[5] = "x_W";
      discretize0.setFindNumBins(false);
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.findNumBinsTipText();
      assertEquals(1147, discretize0.getBins());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter.makeCopy(allFilter0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Discretize discretize0 = new Discretize("'All'");
      discretize0.getBinRangesString((-2));
      discretize0.getRevision();
      int int0 = 9;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8964";
      stringArray0[1] = null;
      stringArray0[2] = "'All'";
      stringArray0[3] = null;
      stringArray0[4] = null;
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("Gk(`", linkedList0, protectedProperties0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 4;
      DenseInstance denseInstance0 = new DenseInstance(481.24, doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }
}
