/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:06:20 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.sql.Time;
import java.time.Instant;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.time.temporal.TemporalAmount;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.swing.ActionMap;
import javax.swing.DebugGraphics;
import javax.swing.JTextPane;
import javax.swing.plaf.PanelUI;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleContext;
import javax.swing.undo.UndoManager;
import org.apache.batik.gvt.TextNode;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xml.utils.DefaultErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.time.MockLocalTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.237148934871626
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Font font0 = Font.decode("4Ku>+?gk");
      jDayChooser0.setFont(font0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setWeekOfYearVisible(false);
      JDayChooser jDayChooser1 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("xPm>", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("(ZW/", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setFont(font0);
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.setForeground(color0);
      assertTrue(jDayChooser3.isDayBordersVisible());
      assertEquals(14, jDayChooser3.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3804459623112426
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentListeners();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      PanelUI panelUI0 = jDayChooser0.getUI();
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(1560);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDay(1560);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getSelectedDay();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getParagraphElement(1157);
      LabelView labelView0 = new LabelView(element0);
      defaultStyledDocument0.getBidiRootElement();
      jDayChooser0.getGraphics();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      jDayChooser0.printAll(debugGraphics0);
      jDayChooser0.isDecorationBordersVisible();
      Color color0 = MapView.standardNodeTextColor;
      jDayChooser0.setWeekdayForeground((Color) null);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3580223313007487
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getComponentListeners();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      PanelUI panelUI0 = jDayChooser0.getUI();
      panelUI0.getMinimumSize(jDayChooser0);
      jDayChooser0.setUI(panelUI0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.initDecorations();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.setDay(1560);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDay(1560);
      jDayChooser0.setDay(0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1954686351769706
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.list();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      jDayChooser2.updateUI();
      jDayChooser2.isWeekOfYearVisible();
      jDayChooser2.getUIClassID();
      jDayChooser2.isDecorationBackgroundVisible();
      ActionMap actionMap0 = new ActionMap();
      actionMap0.getParent();
      actionMap0.clear();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.init();
      jDayChooser2.setFocus();
      jDayChooser0.setFocus();
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone((-5674), "T", 44, 44, 44, 27, 44, (-4372), (-891), 49, 44, (-891), 4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 44
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.159815398030626
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary(14);
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D(true, rowOutputBinary0, 1, 14);
      jDayChooser_DecoratorButton0.paint(pDFDocumentGraphics2D0);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getHeight();
      jDayChooser0.getInputContext();
      jDayChooser0.getMaxDayCharacters();
      Color color0 = Color.blue;
      jDayChooser0.getToolkit();
      int int0 = 5000;
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(5000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOpaque();
      jDayChooser0.setDay(1);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0918164583074423
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getGraphics();
      jDayChooser0.printComponents((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(0);
      jDayChooser0.addListeners(7);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.232046895647383
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.control;
      float[] floatArray0 = systemColor0.getComponents((float[]) null);
      int int0 = (-444);
      Color.getColor("");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.removeContainerListener((ContainerListener) null);
      Color.RGBtoHSB((-444), (-444), (-444), floatArray0);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.setDay((-444));
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser1.isDayBordersVisible();
      jDayChooser0.setEnabled(false);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-444));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0966532889808382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "accessories.plugins.time.JDayChooser$DecoratorButton";
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = new Color(64258, false);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setForeground(color0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser_DecoratorButton0.addMouseListener(defaultCaret0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.082414960526286
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDay();
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      assertEquals(14, jDayChooser1.getDay());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(41, 2011, 2011);
      jDayChooser0.setDay(14);
      jDayChooser1.setDay((-4357));
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.15605401524258
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(20);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.225574109127534
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "j";
      stringArray0[1] = "accessories.plugins.time.JDayChooser$DecoratorButton";
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      LocalTime localTime0 = MockLocalTime.ofNanoOfDay(976L);
      Time time0 = Time.valueOf(localTime0);
      Date date0 = jDayChooser0.setMinSelectableDate(time0);
      jDayChooser0.setSelectableDateRange(date0, time0);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(64258);
      jDayChooser0.getSelectedDay();
      jDayChooser0.setDay(1555);
      jDayChooser0.setDay(1555);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.15093828530084
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "accessories.plugins.time.JDayChooser$DecoratorButton";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "negative.count";
      stringArray0[5] = "`+#5\"K";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.activeCaptionText;
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.getWeekdayForeground();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getAccessibleContext();
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      jDayChooser0.addPropertyChangeListener("D~.q", (PropertyChangeListener) metalLabelUI0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isDecorationBordersVisible();
      Instant instant0 = MockInstant.ofEpochSecond(0L);
      // Undeclared exception!
      try { 
        MockInstant.minus(instant0, (TemporalAmount) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.time.Instant", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1236881900308546
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      StyleContext styleContext0 = new StyleContext();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Color color0 = jDayChooser1.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      int int0 = 3246;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 3246);
      focusEvent0.paramString();
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        MockZonedDateTime.parse((CharSequence) "day");
        fail("Expecting exception: DateTimeParseException");
      
      } catch(DateTimeParseException e) {
         //
         // Text 'day' could not be parsed at index 0
         //
         verifyException("java.time.format.DateTimeFormatter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.focusGained((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.167784642256785
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.drawWeeks();
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      Font.decode("4Ku>+Ggk");
      Instant instant0 = null;
      TextNode textNode0 = new TextNode();
      DefaultErrorHandler defaultErrorHandler0 = new DefaultErrorHandler();
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(defaultErrorHandler0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(stylesheetRoot0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0966532889808382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 61443;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(61443, 61443, 61443);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser0.init();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.initDecorations();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "day", 141);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(807, 0, 159, 807, 5, 0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=807,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=159,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=807,HOUR_OF_DAY=807,MINUTE=5,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1337666506513626
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getColorModel();
      jDayChooser0.getMouseWheelListeners();
      jDayChooser0.init();
      jDayChooser0.setFocus();
      jDayChooser0.setMonth((-4372));
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2528068348620707
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      Color color0 = jDayChooser0.getForeground();
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDayBordersVisible(false);
      Font font0 = Font.decode("4Ku>+Ggk");
      jDayChooser0.setFont(font0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      JDayChooser jDayChooser1 = new JDayChooser();
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("xPm>", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("(ZW/", vetoableChangeListenerProxy0);
      jDayChooser0.addVetoableChangeListener(vetoableChangeListenerProxy1);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setFont(font0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getCharacterAttributes();
      MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
      defaultStyledDocument0.getForeground(mutableAttributeSet0);
      JDayChooser jDayChooser3 = new JDayChooser(false);
      jDayChooser3.setForeground(color0);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      UndoManager undoManager0 = new UndoManager();
      defaultStyledDocument0.removeUndoableEditListener(undoManager0);
      defaultStyledDocument0.getBidiRootElement();
      Font font0 = labelView0.getFont();
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
