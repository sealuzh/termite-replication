/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:49:41 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.UnsupportedEncodingException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6241026221599717
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-11003), "", (-11003));
      player0.setZ((-11003));
      player0.setConnected(false);
      player0.reset(false);
      player0.pack();
      player0.gangStrength();
      player0.reset(true);
      player0.gangStrength();
      player0.getZ();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pushbackInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(3573, "state.PjayeN$JoinInfo", 180);
      Player player1 = new Player(1232, "state.PjayeN$JoinInfo", (String) null, 180, 1232);
      boolean boolean0 = true;
      player0.setJoinOK(player1, true);
      player0.setY((short)4919);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[2] = (byte)55;
      Player player0 = new Player((byte)55, "", "7m&,qj(fMqI2o+<|&", (byte) (-15));
      Player player1 = new Player((byte)55, "7m&,qj(fMqI2o+<|&", "", 10, 3908);
      Party party0 = new Party();
      player1.remove(party0);
      player1.prev = (Party) player1;
      player0.getIP();
      assertEquals(1, player0.getStrength());
      
      String string0 = player1.getIP();
      assertEquals(3908, player1.getStrength());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals("7m&,qj(fMqI2o+<|&", string0);
      assertFalse(player1.isDead());
      assertEquals(10, player1.getPictureId());
      assertEquals(0L, player1.getTimeOfDeath());
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-1856), "C", (-1856));
      player0.setDead();
      Party party0 = new Party();
      player0.next = party0;
      player0.setY((-3489.2961F));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte) (-76);
      player0.unpack(byteArray0);
      Party party1 = new Party((byte)85);
      player0.remove(party0);
      player0.setX(659.9713F);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.658492031284404
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((-1856), "C", (-1856));
      player0.getSubparty();
      player0.setDead();
      Party party0 = new Party();
      player0.next = party0;
      player0.reset(false);
      Player player1 = new Player((-1856), "C", "Q,aJyf2[", 0, (-1856));
      player1.remove(party0);
      byte[] byteArray0 = player0.pack();
      player0.head = (Party) player1;
      player0.setDead();
      party0.getSubparty();
      player1.gangStrength();
      player0.unpack(byteArray0);
      player1.setY((-391.0F));
      player0.pack();
      player0.isConnected();
      party0.prev = (Party) player1;
      player0.setMoney(0.2F);
      player1.setJoinOK(player0, false);
      player0.unpack(byteArray0);
      player1.isJoinOK(player0, true);
      player1.setConnected(true);
      player0.getZ();
      player0.getPictureId();
      player1.setMoney((-1856));
      player0.type();
      float float0 = player0.getMoney();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(0.2F, float0, 0.01F);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.474193099393209
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-1856), "]", (-1856));
      player0.getSubparty();
      player0.setDead();
      Party party0 = new Party();
      player0.next = party0;
      player0.reset(false);
      Player player1 = new Player((-1856));
      player1.remove(party0);
      player0.head = (Party) player1;
      player0.setDead();
      party0.getSubparty();
      player0.gangStrength();
      player1.setY((-391.0F));
      player0.pack();
      player0.isConnected();
      party0.prev = (Party) player1;
      player0.setMoney(0.2F);
      player1.setJoinOK(player0, false);
      player1.isJoinOK(player0, true);
      player1.setConnected(true);
      player0.getZ();
      Player player2 = new Player(0, "", "", 0, 0);
      player2.boss = party0;
      player2.getPictureId();
      player1.setMoney(0);
      int int0 = player1.type();
      assertEquals((-391.0F), player1.getY(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-725));
      player0.setY(4468.8F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      player0.unpack(byteArray0);
      player0.gangStrength();
      player0.setZ((-3423.0F));
      Party party0 = new Party(0);
      party0.head = (Party) player0;
      player0.remove(party0);
      player0.getY();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(4468.8F, player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Player player0 = new Player((-508), "", "", (-508), 3462);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(3, "", 5);
      byte[] byteArray0 = player0.pack();
      player0.setY((-3489.2961F));
      player0.unpack(byteArray0);
      Party party0 = player0.prev;
      player0.prev = null;
      player0.setZ(3);
      Party party1 = new Party(2);
      int int0 = (-8448);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-8448), 2);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.322575046183876
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player(3, "", 5);
      player0.pack();
      player0.setY((-3489.2961F));
      Player player1 = new Player(2739, "hpmXDQBR5", "", (short)4919, 2739);
      player1.remove(player0);
      byte[] byteArray0 = player0.pack();
      player1.setDead();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      dataInputStream0.readUnsignedShort();
      player1.unpack(dataInputStream0);
      player1.setZ((-1.0F));
      player0.setDead((long) 3, false);
      player1.isJoinOK(player0, false);
      Player player2 = new Player();
      player2.type();
      System.setCurrentTimeMillis(4919);
      player0.getStrength();
      float float0 = player0.getY();
      assertEquals(3L, player0.getTimeOfDeath());
      assertEquals((-3489.2961F), float0, 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.974268351915661
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player1 = new Player((short)4919, "l/B/IfY$", 3);
      player1.pack();
      player0.add(player1);
      Player player2 = new Player((short)4919, "", "", 3);
      player0.prev = (Party) player2;
      player0.setX((short)4919);
      player2.remove(player0.prev);
      player0.getX();
      player0.getX();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.isConnected();
      player0.getX();
      assertEquals(4919.0F, player0.getX(), 0.01F);
      
      player2.getMoney();
      player2.getName();
      player1.pack();
      System.setCurrentTimeMillis((short)4919);
      player1.getX();
      player1.type();
      player2.pack();
      player1.getName();
      assertEquals(10.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5716854538234237
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((-1856), "]", (-1856));
      player0.getSubparty();
      player0.setDead();
      Party party0 = new Party();
      player0.next = party0;
      player0.reset(false);
      Player player1 = new Player((-1856), "]", "Q,aJyf2[", 0, (-1856));
      player1.remove(party0);
      byte[] byteArray0 = player0.pack();
      player0.head = (Party) player1;
      player0.setDead();
      party0.getSubparty();
      player1.gangStrength();
      player0.unpack(byteArray0);
      player1.setY((-391.0F));
      player0.pack();
      player0.isConnected();
      party0.prev = (Party) player1;
      player0.setMoney(0.2F);
      player0.setDead();
      player1.setJoinOK(player0, false);
      player0.unpack(byteArray0);
      player1.isJoinOK(player0, true);
      player1.setConnected(true);
      player0.getZ();
      player1.setY((short)4919);
      System.setCurrentTimeMillis((-2473));
      float float0 = player0.getX();
      assertTrue(player0.isDead());
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-3644));
      Player player1 = new Player((short)4919, "ZOa", "", 368);
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(5);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      int int0 = 3;
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 4);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5681782945332445
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(3, "", 5);
      byte[] byteArray0 = player0.pack();
      player0.setY((-3489.2961F));
      Player player1 = new Player(504, "=krW]-E9oD7Wo9rltU", "", (-1099), 5);
      player1.remove(player0);
      byte[] byteArray1 = player1.pack();
      player1.setDead();
      player1.getSubparty();
      player0.gangStrength();
      player1.unpack(byteArray0);
      player0.setY(2073.0386F);
      player1.pack();
      player0.isConnected();
      player0.setMoney(0.2F);
      player0.unpack(byteArray1);
      player1.isJoinOK(player0, false);
      player1.setConnected(true);
      player0.getZ();
      player0.getPictureId();
      player1.setMoney((-1099));
      player1.type();
      float float0 = player1.getMoney();
      assertTrue(player1.isDead());
      assertEquals((-1099.0F), float0, 0.01F);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.258303007954067
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-1449), "y?W;>UCp=E|WnP", "y?W;>UCp=E|WnP", (-1449));
      byte[] byteArray0 = new byte[2];
      player0.setZ((-1449));
      player0.setY((-1449));
      player0.unpack(byteArray0);
      player0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Jbn;^:^h@}I");
      mockPrintStream0.print(",xOx&4dJC$o");
      mockPrintStream0.format("y?W;>UCp=E|WnP", (Object[]) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.pack(dataOutputStream0);
      player0.pack();
      player0.setDead();
      player0.getX();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y?W;>UCp=E|WnP");
      mockFileOutputStream0.flush();
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      mockPrintStream0.println();
      mockPrintStream0.println();
      player0.getTimeOfDeath();
      player0.setX(10.0F);
      assertEquals((-1449.0F), player0.getY(), 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6586564238538597
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player((-1856), "C", "C", (-1856));
      player0.setDead();
      Party party0 = new Party();
      player0.next = party0;
      player0.reset(false);
      Player player1 = new Player((-1856), "C", "l*qP*u,[DVEul", 0, (-1856));
      player1.remove(party0);
      byte[] byteArray0 = player0.pack();
      player0.head = (Party) player1;
      player0.setDead();
      party0.getSubparty();
      player0.unpack(byteArray0);
      player1.setY(0);
      player0.pack();
      player0.isConnected();
      party0.prev = (Party) player1;
      player0.setMoney(0.2F);
      player1.setJoinOK(player0, false);
      player0.unpack(byteArray0);
      player1.isJoinOK(player0, true);
      player1.setConnected(true);
      player0.getZ();
      player0.getPictureId();
      player1.setMoney((-1856));
      player0.type();
      player0.gangStrength();
      int int0 = player1.getStrength();
      assertEquals((-1856.0F), player1.getMoney(), 0.01F);
      assertEquals((-1856), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "state.Player$JoinInfo");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Player player0 = new Player();
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player((-585), "", (-1284));
      player0.setMoney(1.0F);
      player0.gangStrength();
      player0.toString();
      float float0 = player0.getX();
      assertEquals(1.0F, player0.getMoney(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(1576, "state.Party", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistentL ", (-3031));
      player0.setDead((-1346L), false);
      player0.setMoney(2983.9177F);
      player0.setMoney(1434.8F);
      Player player1 = new Player(1, (String) null, "", (-3031));
      player0.isDead();
      assertEquals((-1346L), player0.getTimeOfDeath());
      
      boolean boolean0 = player1.isConnected();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(1578, "state.Party", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", (-3031));
      Player player1 = new Player((-3031), "state.Party", "state.Party", (short)4919, (short)4919);
      player1.boss = (Party) player0;
      player0.prev = (Party) player0;
      player0.setZ(0.1F);
      player1.gangStrength();
      player1.getStrength();
      player0.getMoney();
      player0.id = (-29);
      player1.getSubparty();
      player0.setZ(0.1F);
      player0.setConnected(true);
      assertEquals(0.1F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, 0);
      player0.setDead((-214L));
      player0.gangStrength();
      player0.getTimeOfDeath();
      player0.setY((-1521.0154F));
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "Player";
      Player player0 = new Player(662, "Player", "cca#[^&Wa0C_n_8^b", 662, 662);
      player0.pack();
      player0.getIP();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Player", "Player");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Player
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(1576, "state.Party", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistentL ", (-3031));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertEquals((-3031), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("state.Party", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(boolean0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.19741190322987
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(462, "", "", (-8486));
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)67;
      byteArray0[2] = (byte) (-5);
      byteArray0[2] = (byte) (-15);
      Player player1 = new Player();
      player1.isConnected();
      player0.setMoney((-8486));
      player1.setJoinOK(player0, false);
      player1.unpack(byteArray0);
      player1.isBoss();
      Player player2 = new Player((byte)67, "", "=O]hO6korZ)'4xdkc`8", 5);
      player2.setConnected(true);
      player2.getZ();
      Player player3 = new Player(2, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", ":q*4P@Fxj98X>Gjm", (short)4919, 5);
      player3.getPictureId();
      player2.setMoney((-8486));
      assertEquals((-8486.0F), player2.getMoney(), 0.01F);
      
      int int0 = player1.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((-3135));
      int int0 = player0.getPictureId();
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("Player-3135", player0.toString());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Party party0 = new Party();
      int int0 = 1;
      Player player0 = new Player(14095, (String) null, (String) null, (-1964), 1);
      player0.gangStrength();
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((-1), "", "", (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)55, (-1));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.isDead();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals((-1), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = "";
      int int0 = 0;
      Player player0 = new Player(0, "", "", 6196, 0);
      Party party0 = new Party();
      player0.add(party0);
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(1948, "9,*&`{>^A;", 1);
      Party party0 = player0.head;
      player0.add((Party) null);
      player0.type();
      Player player1 = new Player(0, "%Rxm(2*V", "9,*&`{>^A;", 1948);
      player0.setJoinOK(player1, true);
      player0.setZ(1);
      player0.getZ();
      player0.reset(false);
      assertEquals(1.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.122928297357194
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((-1449), "y?W;>UCp=E|WnP", "y?W;>UCp=E|WnP", (-1449));
      byte[] byteArray0 = new byte[2];
      player0.setZ((-1449));
      player0.setY((-1449));
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-76);
      player0.unpack(byteArray0);
      player0.toString();
      MockPrintStream mockPrintStream0 = new MockPrintStream("y?W;>UCp=E|WnP");
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.pack(dataOutputStream0);
      player0.pack();
      player0.setDead();
      player0.getX();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("y?W;>UCp=E|WnP");
      mockFileOutputStream0.flush();
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockFileOutputStream0);
      mockPrintStream1.println();
      mockPrintStream1.println();
      // Undeclared exception!
      try { 
        mockPrintStream1.append((CharSequence) "y?W;>UCp=E|WnP", 2111, 0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(140L);
      Player player0 = new Player(2147340491);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(768, (String) null, 627);
      player0.getName();
      player0.toString();
      Player player1 = new Player();
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(1, player1.getStrength());
      assertEquals(0, player1.getPictureId());
      assertTrue(player1.isConnected());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals("Player-1", player1.getName());
      assertEquals(627, player0.getPictureId());
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player1.getIP());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((-1856), "C", (-1856));
      player0.getSubparty();
      Party party0 = new Party();
      player0.next = party0;
      Player player1 = new Player((-1856), "C", "Q,aJyf2[", 0, (-1856));
      player1.remove(party0);
      player1.setX((short)4919);
      player0.head = (Party) player1;
      party0.getSubparty();
      int int0 = Packable.UNDEFINED;
      player1.setY((-391.0F));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.022794924510636
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player(3, "", 5);
      byte[] byteArray0 = player0.pack();
      float float0 = (-3489.2961F);
      player0.setY((-3489.2961F));
      player0.unpack(byteArray0);
      player0.gangStrength();
      Party party0 = player0.prev;
      player0.isConnected();
      player0.setMoney(1);
      boolean boolean0 = false;
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player(3, "", 5);
      byte[] byteArray0 = player0.pack();
      player0.setY((-3489.2961F));
      player0.unpack(byteArray0);
      player0.getSubparty();
      int int0 = (-568);
      Party party0 = new Party((-568));
      player0.remove(party0);
      player0.setX(1.0F);
      String string1 = "";
      String string2 = null;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(0, "T3kt%K=", 0);
      boolean boolean0 = false;
      byte[] byteArray0 = player0.pack();
      player0.setY((-3489.2961F));
      Player player1 = new Player(2, "T3kt%K=", "T3kt%K=", (short)4919);
      player1.gangStrength();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      byteArrayInputStream0.markSupported();
      dataInputStream0.readUnsignedShort();
      player0.unpack(dataInputStream0);
      player1.setZ(0L);
      File file0 = null;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream((File) null, "T3kt%K=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6248400751431946
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((-1856), "C", (-1856));
      player0.setDead();
      Party party0 = new Party();
      player0.next = party0;
      player0.reset(false);
      Player player1 = new Player((-1856), "C", "Q,aJyf2[", 0, (-1856));
      player1.remove(party0);
      byte[] byteArray0 = player0.pack();
      player0.head = (Party) player1;
      player0.setDead();
      party0.getSubparty();
      player0.unpack(byteArray0);
      player1.setY(0);
      player0.pack();
      player0.isConnected();
      party0.prev = (Party) player1;
      player0.setMoney(0.2F);
      player1.setJoinOK(player0, false);
      player0.unpack(byteArray0);
      player1.isJoinOK(player0, false);
      player0.setDead(1392409296320L, true);
      player1.setConnected(true);
      player0.getZ();
      player0.getPictureId();
      player1.setMoney((-1856));
      player0.type();
      player0.getIP();
      assertEquals((-64), player0.getId());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player((-1), "", "", (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)55;
      player0.setZ((byte) (-35));
      Party party0 = new Party(1);
      player0.remove(party0);
      player0.setX(1);
      Player player1 = new Player();
      boolean boolean0 = player1.isJoinOK(player0, true);
      assertEquals((-35.0F), player0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(0);
      float float0 = player0.getY();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertEquals("Player0", player0.getName());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((-842), "1JN;", (String) null, (-842));
      player0.getY();
      player0.setConnected(true);
      Player player1 = new Player();
      player1.setZ((short)4919);
      player0.remove(player1);
      player0.getTimeOfDeath();
      player0.setY((-2182.0F));
      player0.getMoney();
      player0.setY((-842));
      assertEquals((-842.0F), player0.getY(), 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9431598145315694
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-1856), "C", (-1856));
      player0.getSubparty();
      Party party0 = new Party();
      player0.next = party0;
      player0.reset(false);
      Player player1 = new Player((-1856), "C", "Q,aJyf2[", 0, (-1856));
      player1.remove(party0);
      player0.head = (Party) player1;
      player0.setDead();
      party0.getSubparty();
      player1.gangStrength();
      player1.gangStrength();
      player1.setZ(0.2F);
      Party party1 = new Party((-2201));
      player0.remove(party1);
      player0.setX(1341.8385F);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      
      Player player2 = new Player();
      assertEquals(1, player2.getStrength());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0293980059486403
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player(0, "T3kt%K=", 0);
      byte[] byteArray0 = player0.pack();
      player0.setY(0.0F);
      player0.unpack(byteArray0);
      Player player1 = new Player(0, "T3kt%K=", "T3kt%K=", (short)4919);
      player0.setY((short)4919);
      player0.unpack(byteArray0);
      player0.gangStrength();
      player1.setZ(0.0F);
      Party party0 = new Party((short)4919);
      Party party1 = player0.head;
      player1.remove((Party) null);
      player0.setX(0.2F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      
      Player player2 = new Player();
      player2.isJoinOK(player1, true);
      assertEquals(10.0F, player1.getX(), 0.01F);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player0 = new Player(768, "\"UtnZJD`", "gui.ModuleBrowserDialog$ModuleFilter", 768);
      player0.setY(284.7F);
      player0.getSubparty();
      player0.setMoney(0.0F);
      player0.getName();
      player0.gangStrength();
      player0.getX();
      Player player1 = new Player(1, "gui.ModuleBrowserDialog$ModuleFilter", " Gk!(KMkfYC4aO,}%/", 768);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals(284.7F, player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      System.setCurrentTimeMillis(140L);
      Player player0 = new Player(4919, "module.ModuleBrowserDialog$ModuleFilter", "state.Player", 4919, 4919);
      int int0 = player0.gangStrength();
      assertEquals(4919, int0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("module.ModuleBrowserDialog$ModuleFilter", player0.getIP());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(4919, player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player((-3644));
      Player player1 = new Player((-1609), "", "", (-3644));
      player0.setJoinOK(player1, true);
      int int0 = 5;
      PipedInputStream pipedInputStream0 = new PipedInputStream(368);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      int int1 = (-3619);
      PipedInputStream pipedInputStream2 = null;
      try {
        pipedInputStream2 = new PipedInputStream(pipedOutputStream0, (-3619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6251607421305283
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player((-1856), "C", "C", (-1856));
      player0.getSubparty();
      Party party0 = new Party();
      player0.reset(false);
      Player player1 = new Player((-1856), "C", "l*qP*u,[DVEul", 70, (-1856));
      player1.remove(player0);
      byte[] byteArray0 = player0.pack();
      player0.setDead();
      player0.getSubparty();
      player1.unpack(byteArray0);
      player0.setY(0.1F);
      player1.pack();
      Player player2 = new Player((-1856), "C", "", (-3188), 229);
      player2.isConnected();
      player0.setMoney((-1000.6156F));
      player1.setJoinOK(player0, false);
      player2.unpack(byteArray0);
      player1.isJoinOK(player0, false);
      player2.setConnected(true);
      player2.getZ();
      player1.getPictureId();
      player1.setY(229);
      player1.setMoney(0.0F);
      player1.type();
      float float0 = player1.getX();
      assertEquals("C", player1.getName());
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "C";
      Player player0 = new Player((-1856), "C", (-1856));
      player0.getSubparty();
      player0.setDead();
      Party party0 = new Party();
      player0.next = party0;
      int int0 = 0;
      MockPrintStream mockPrintStream0 = new MockPrintStream("C");
      mockPrintStream0.print(",xOx&4dJC$o");
      mockPrintStream0.format("Q,aJyf2[", (Object[]) null);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.pack(dataOutputStream0);
      player0.pack();
      player0.setDead();
      player0.getX();
      PrintStream printStream0 = mockPrintStream0.format("", (Object[]) null);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      mockPrintStream0.println();
      mockPrintStream1.println();
      int int1 = 2351;
      MockPrintStream mockPrintStream2 = null;
      try {
        mockPrintStream2 = new MockPrintStream(printStream0, true, "C");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // C
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(140L);
      Player player0 = new Player((-1256), "pMt", "pMt", 0, 617);
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(3);
      player0.setZ(0.1F);
      Player player1 = new Player(3, (String) null, (short)4919);
      player0.setDead(1L);
      boolean boolean0 = false;
      player0.isJoinOK(player1, false);
      byte[] byteArray0 = new byte[1];
      player1.unpack(byteArray0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player(3, "", 3);
      player0.setY(3);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      player0.unpack(byteArray0);
      player0.gangStrength();
      player0.setZ((-527.0232F));
      Party party0 = new Party(4);
      player0.remove(party0);
      player0.setX(3.88F);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Player player0 = new Player((-1), "", "", (-1));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte) (-5);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)55, (-1));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertFalse(boolean0);
      assertTrue(player0.isConnected());
      assertEquals((-1), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }
}
