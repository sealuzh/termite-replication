/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:44:12 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0581782748865862
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("0vJo=NR@e5&_Rp4{");
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("0", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Jo", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.minus();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("R", token4.getTokenText());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      assertEquals("@", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("e", token6.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("0vJo=NR@e5&_Rp4{");
      xPathLexer1.div();
      xPathLexer1.operatorName();
      Token token9 = xPathLexer2.nextToken();
      assertEquals(30, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("]VN-jW`#-nle");
      xPathLexer3.mod();
      xPathLexer3.and();
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5039776777156644
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dyh$z^{");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.minus();
      assertEquals("d", token0.getTokenText());
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("y", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("A+D9|S/>gHWr");
      Token token2 = xPathLexer1.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("A", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      xPathLexer0.div();
      xPathLexer1.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer2.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer1.dots();
      assertEquals("+", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(26, token5.getTokenType());
      assertEquals("$", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9287806745861629
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dhz^{");
      xPathLexer0.operatorName();
      xPathLexer0.consume(9);
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer("D");
      xPathLexer1.nextToken();
      xPathLexer0.number();
      xPathLexer1.pipe();
      xPathLexer1.literal();
      XPathLexer xPathLexer2 = new XPathLexer("lIH<b3L\"Z3<,BDQ<wJ}");
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.28295291535547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("o", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.dots();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(13, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.161650870589465
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.consume(0);
      xPathLexer1.comma();
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer1.minus();
      xPathLexer1.rightParen();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("$");
      Token token3 = xPathLexer3.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("$", token3.getTokenText());
      
      xPathLexer1.whitespace();
      Token token4 = xPathLexer0.comma();
      assertEquals("o", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("m", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(".", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      xPathLexer3.comma();
      Token token7 = xPathLexer2.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer2.and();
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer3.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer1.dollar();
      assertEquals(26, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      Token token12 = xPathLexer4.whitespace();
      assertEquals((-2), token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.nextToken();
      Token token13 = xPathLexer4.getPreviousToken();
      assertEquals(15, token13.getTokenType());
      assertEquals("om.werken.saxpath.Token", token13.getTokenText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.149014572331934
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dyh$z^{");
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("^", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      xPathLexer0.star();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.comma();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals("yh", token6.getTokenText());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.dollar();
      Token token10 = xPathLexer0.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Hb");
      Token token11 = xPathLexer1.nextToken();
      assertEquals("Hb", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.549673964742584
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Lp", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("LpNt\"2'");
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("pNt", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("@\"a");
      xPathLexer1.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      assertEquals("\"", token3.getTokenText());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals(16, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer1.star();
      assertEquals("2", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightParen();
      assertEquals("t", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5607685857213331
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("qFE~%<ScUw");
      XPathLexer xPathLexer1 = new XPathLexer("LpNt\"2'");
      xPathLexer1.and();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.pipe();
      Token token0 = xPathLexer1.leftBracket();
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("p", token1.getTokenText());
      
      xPathLexer1.div();
      xPathLexer1.relationalOperator();
      xPathLexer1.consume();
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("F", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("LpNt\"2'");
      xPathLexer2.setPreviousToken(token0);
      assertEquals("L", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("E", token4.getTokenText());
      
      Token token5 = xPathLexer1.identifier();
      assertEquals(15, token5.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.987933035198005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dyh$z^{");
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("d", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("yh", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("^", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("{", token6.getTokenText());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("dyh$z^{");
      xPathLexer1.div();
      xPathLexer1.operatorName();
      Token token9 = xPathLexer1.nextToken();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5872481738643662
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("e", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("rken.saxpath.XPathLexer", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.93765008712512
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]VN-W`#-nl");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0261494088168464
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j|4pvXc~f");
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      xPathLexer0.setXPath("");
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.consume((-1978));
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.756066113909286
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.dots();
      assertEquals(".", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("werken.saxpath.XPathLexer", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7733061102819168
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.not();
      xPathLexer0.setXPath("[>T!vm\"?{v[8D 4A!");
      XPathLexer xPathLexer2 = new XPathLexer("LpNt\"2'");
      xPathLexer1.nextToken();
      xPathLexer0.number();
      xPathLexer2.pipe();
      xPathLexer0.literal();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7130517322441599
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.setXPath("[ (");
      XPathLexer xPathLexer1 = new XPathLexer("LpNt\"2'");
      xPathLexer0.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer1.pipe();
      xPathLexer1.literal();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.746139306873253
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]VN-jW`#-nle");
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer1 = new XPathLexer("BL)Bjg@R~7ZE|Cg*");
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer1.pipe();
      xPathLexer0.literal();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7950700631190346
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("BL)Bjg@R~7ZE|Cg*");
      xPathLexer2.setXPath("BeW*]uo,((mL=");
      XPathLexer xPathLexer3 = new XPathLexer("?\"AIjP{*8[|]");
      xPathLexer0.nextToken();
      xPathLexer3.number();
      xPathLexer1.pipe();
      xPathLexer1.literal();
      XPathLexer xPathLexer4 = new XPathLexer("?\"AIjP{*8[|]");
      Token token0 = xPathLexer4.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.563022240624786
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "]VN-jW`#-nle";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-1871));
      xPathLexer0.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1246017124300505
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dyh$z^{");
      XPathLexer xPathLexer1 = new XPathLexer("CbNA\"niKv_si;=4CyF");
      xPathLexer0.notEquals();
      xPathLexer1.slashes();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.div();
      assertNull(token0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.447720821842446
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Ar", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.leftParen();
      assertEquals(1, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer1.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("bM", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("?PVYtdH", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("ArbM?PVYtdH");
      Token token4 = xPathLexer3.identifier();
      assertEquals("ArbM", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3507318596612803
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]VN-jW`#-nle");
      xPathLexer0.or();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("]V", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("jW", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("", token3.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6080142685957022
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("):", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("[", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("E", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("&,", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("z", token5.getTokenText());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8168039870482073
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      xPathLexer0.and();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.plus();
      assertEquals("[", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      String string0 = token2.toString();
      assertEquals("[ (17) (,)", string0);
      
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer0.nextToken();
      assertEquals("z", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("/", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6491088608595612
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("Ar", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("b", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer1.div();
      xPathLexer1.relationalOperator();
      xPathLexer1.consume();
      Token token3 = xPathLexer1.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("M", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5851677734966327
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer2.plus();
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("0xN$");
      xPathLexer2.relationalOperator();
      xPathLexer3.consume();
      xPathLexer2.dots();
      xPathLexer1.nextToken();
      xPathLexer3.identifier();
      boolean boolean0 = xPathLexer1.isIdentifierChar('=');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.605150683856915
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Ar", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("b", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer1.setPreviousToken((Token) null);
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer(")");
      Token token3 = xPathLexer2.plus();
      assertEquals(")", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      xPathLexer2.div();
      XPathLexer xPathLexer3 = new XPathLexer("0xN$");
      xPathLexer2.relationalOperator();
      xPathLexer3.consume();
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("ArbM", token5.getTokenText());
      
      Token token6 = xPathLexer3.identifier();
      assertEquals("xN", token6.getTokenText());
      
      boolean boolean0 = xPathLexer3.isIdentifierStartChar('=');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3817719883085093
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer2.identifier();
      assertEquals("com.werken.saxpath.XPathLexer", token2.getTokenText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.000177120488926
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.dots();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.consume((-3557));
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.314889471075432
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Lp", token0.getTokenText());
      
      xPathLexer0.number();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("t", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("\"", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("2", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0646540987902378
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.not();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer1.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer1.dots();
      xPathLexer1.operatorName();
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      xPathLexer1.leftParen();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("O/");
      xPathLexer2.relationalOperator();
      Token token12 = xPathLexer2.leftParen();
      assertEquals("O", token12.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertTrue(boolean0);
      
      Token token13 = xPathLexer1.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer1.nextToken();
      assertEquals((-1), token14.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.456671825976929
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.number();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.comma();
      char char0 = 'e';
      xPathLexer0.div();
      xPathLexer0.isIdentifierStartChar('e');
      Token token0 = xPathLexer0.number();
      xPathLexer0.rightBracket();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8955881713576215
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("j|4pvXc~f");
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.and();
      xPathLexer0.setXPath(") (");
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.consume((-1978));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4481220675473363
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1233));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3172267977682433
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      xPathLexer0.or();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("):", token0.getTokenText());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("&,z/GmA", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      assertEquals("&", token4.getTokenText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.854211941487239
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D>*;MY:|#IftAt:9");
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      int int0 = (-2);
      xPathLexer0.rightBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.setXPath("D>*;MY:|#IftAt:9");
      xPathLexer0.consume((-2));
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6399216254942663
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]VN-jW`#-nle");
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("]V", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      XPathLexer xPathLexer2 = new XPathLexer(":[0nBE%&y\"sXC-");
      xPathLexer0.relationalOperator();
      xPathLexer1.consume();
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("]VN-jW`#-nle");
      Token token6 = xPathLexer3.identifier();
      assertEquals(15, token6.getTokenType());
      assertEquals("", token6.getTokenText());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.886575818431393
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.setXPath("LpNt\"2'");
      XPathLexer xPathLexer1 = new XPathLexer("BL)Bjg@R~7ZE|Cg*");
      xPathLexer1.nextToken();
      xPathLexer1.number();
      xPathLexer1.pipe();
      xPathLexer1.literal();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7268278280056366
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("pN", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("LpNt\"2'");
      Token token4 = xPathLexer1.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("Lp", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("", token5.getTokenText());
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer1.identifier();
      assertEquals(15, token6.getTokenType());
      assertEquals("Nt", token6.getTokenText());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7886161378943886
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
      
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-3709));
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9217184732060164
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.whitespace();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.not();
      token0.toString();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      token0.toString();
      token0.toString();
      xPathLexer0.consume(60);
      String string0 = token0.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.div();
      xPathLexer0.div();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('$');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7072587340773206
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.or();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7288789086566427
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]VN-jW`#-nle");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(4, token0.getTokenType());
      assertEquals("]", token0.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.div();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("-j", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("W`#-nle", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2450049682621502
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      char char0 = xPathLexer0.LA(1094);
      assertEquals('\uFFFF', char0);
      
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.dots();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNull(token3);
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.getPreviousToken();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('M');
      assertTrue(boolean0);
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.getPreviousToken();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(16, int0);
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1374082523210496
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dyh$z^{");
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.59761693505499
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Ar", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("BL)Bjg@R~7ZE|Cg*");
      xPathLexer0.not();
      Token token1 = xPathLexer2.not();
      assertEquals("B", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      xPathLexer1.mod();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("M", token2.getTokenText());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer0.div();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      Token token3 = xPathLexer4.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      Token token4 = xPathLexer4.nextToken();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer2.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("L", token5.getTokenText());
      
      int int0 = xPathLexer1.endPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.108408913022893
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]VN-jW`#-nle");
      xPathLexer0.or();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("]V", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("N", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("]VN-jW`#-nle");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(4, token3.getTokenType());
      assertEquals("]", token3.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(12, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.365229032103159
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("):", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals("[", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("E", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("&", token4.getTokenText());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals(32, token6.getTokenType());
      assertEquals(",", token6.getTokenText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.243977239828916
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("dyh$z^{");
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.comma();
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3672618489678579
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      xPathLexer1.notEquals();
      xPathLexer0.slashes();
      xPathLexer1.pipe();
      xPathLexer0.div();
      xPathLexer1.notEquals();
      xPathLexer1.nextToken();
      Token token0 = xPathLexer1.div();
      assertNull(token0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5248473283655857
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.identifier();
      xPathLexer0.colon();
      xPathLexer0.not();
      String string0 = "BL)Bjg@R~7ZE|Cg*";
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7469437142599413
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.consume(737);
      xPathLexer0.number();
      xPathLexer0.rightParen();
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.consume((-2558));
      xPathLexer0.consume();
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      xPathLexer0.consume();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.leftParen();
      xPathLexer0.consume(737);
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3645667556970897
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Ar", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("b", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      xPathLexer1.div();
      xPathLexer0.setPreviousToken((Token) null);
      Token token4 = xPathLexer0.identifier();
      assertEquals("M", token4.getTokenText());
      
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer1.identifier();
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9099851754548298
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.at();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.relationalOperator();
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.387464218338342
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.isIdentifierStartChar('');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.equals();
      xPathLexer1.leftParen();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.rightBracket();
      xPathLexer1.rightParen();
      xPathLexer0.LA(5);
      xPathLexer1.getPreviousToken();
      xPathLexer1.comma();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.2004537536946716
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.doubleColon();
      xPathLexer0.mod();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer1.rightBracket();
      xPathLexer0.number();
      xPathLexer1.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      xPathLexer1.star();
      xPathLexer1.dots();
      xPathLexer1.comma();
      xPathLexer1.comma();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.minus();
      xPathLexer2.getPreviousToken();
      xPathLexer1.pipe();
      xPathLexer1.plus();
      xPathLexer1.notEquals();
      xPathLexer0.dollar();
      xPathLexer2.whitespace();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer2.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4915752303500889
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("Lp", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("t", token2.getTokenText());
      
      Token token3 = xPathLexer0.dollar();
      assertEquals("\"", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightParen();
      assertEquals("2", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("'", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("LpNt\"2'");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("LpNt", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.20884844400696
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer0.plus();
      xPathLexer0.consume(0);
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.LA(0);
      xPathLexer0.minus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-871));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.9674983971788698
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.7982207190099846
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"St9|DbJNN%FX_Wo5.|");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals("\"", token1.getTokenText());
      assertEquals(18, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("S", token2.getTokenText());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("t", token3.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.getXPath();
      xPathLexer0.div();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("9", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("|", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("D", token6.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("b", token7.getTokenText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.346747464500145
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.doubleColon();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("LpNt\"2'");
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer2.star();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifier();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer2.pipe();
      xPathLexer3.consume();
      xPathLexer2.getXPath();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3611330540929227
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.6417955696464213
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1244269636314486
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]VN-jW`#-nle");
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.pipe();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.582365630696406
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("Lp", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("Nt", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("2", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("'", token3.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals("", token8.getTokenText());
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.star();
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer0.leftParen();
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer0.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.19178917266042
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer1.not();
      xPathLexer1.equals();
      xPathLexer1.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.setXPath("8|(HEz$c1qt|$*");
      XPathLexer xPathLexer2 = new XPathLexer("(}<y3pW");
      xPathLexer2.slashes();
      xPathLexer0.doubleColon();
      xPathLexer2.number();
      XPathLexer xPathLexer3 = new XPathLexer("(}<y3pW");
      xPathLexer1.pipe();
      xPathLexer3.literal();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.671157175812634
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("ArbM?PVYtdH");
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      xPathLexer0.dollar();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.529146500502747
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("):[E&,z/GmA");
      xPathLexer0.currentPosition();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.div();
      xPathLexer2.getPreviousToken();
      xPathLexer0.plus();
      xPathLexer2.dollar();
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer0.plus();
      xPathLexer2.notEquals();
      xPathLexer1.dollar();
      xPathLexer0.whitespace();
      xPathLexer2.comma();
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3610567310326736
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7127901831193715
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("LpNt\"2'");
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("Lp", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("N", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("LpNt\"2'");
      Token token2 = xPathLexer1.plus();
      assertEquals("L", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer1.star();
      assertEquals("p", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("LpNt\"2'");
      Token token4 = xPathLexer2.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("L", token4.getTokenText());
      
      xPathLexer2.consume(1);
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("Nt", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer2.equals();
      assertEquals(21, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.div();
      XPathLexer xPathLexer5 = new XPathLexer("LpNt\"2'");
      xPathLexer3.relationalOperator();
      xPathLexer3.consume();
      Token token7 = xPathLexer2.dollar();
      assertEquals("t", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("\"", token8.getTokenText());
      
      Token token9 = xPathLexer4.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
      assertEquals("t", token10.getTokenText());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.9518178231895775
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]VN-jW`#-nle");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("]V", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("N", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("j", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("W`", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.010600509602785
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8945495015240406
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.610326656518506
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer(":");
      xPathLexer1.leftParen();
      xPathLexer1.at();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.dots();
      xPathLexer0.not();
      xPathLexer1.star();
      xPathLexer1.leftBracket();
      xPathLexer1.relationalOperator();
      xPathLexer0.leftParen();
      xPathLexer1.relationalOperator();
      xPathLexer1.or();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
  }
}
