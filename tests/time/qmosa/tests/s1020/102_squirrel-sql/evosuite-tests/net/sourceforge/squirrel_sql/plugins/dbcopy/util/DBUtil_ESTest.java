/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:04:37 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.net.URI;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.function.Consumer;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.fw.sql.UDTInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      uidIdentifier0.setString("max");
      uidIdentifier0.setString("max");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("!0*3e-w}.(oP_", "!0*3e-w}.(oP_", "max", "?qWE", (-3), "T`#2J_g@3UQ", (-836), (-754), (-1480), (-754), "max", ".B6|NmH", 2002, 748, "|{Gzqq7xbztmsg");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("?qWE");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATABASE_TYPE_DBO;
      databaseObjectType0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("max", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("Null 'type' argument");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ITableInfo iTableInfo0 = null;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      dBCopyPlugin0.unload();
      String string0 = "gP$\\yU~y?";
      dBCopyPlugin0.setPasteToTableName("gP$yU~y?");
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, "H\"}e:", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("141ce0d4:16ecf4848ab:-7dbb", uidIdentifier0.toString());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("null", "null", "]un'ys+*:Kph;m#>", "]un'ys+*:Kph;m#>", 13, "", 13, 116, (-489), 1896, "null", "]un'ys+*:Kph;m#>", 118, (-3), "0");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.DATATYPE;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SCHEMA;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.COLUMN;
      Icon icon0 = databaseObjectType1.getIcon();
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("", icon0);
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 116);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("141ce0d4:16ecf4848ab:-7df7", uidIdentifier0.toString());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("null", "null", "]un'ys+*:Kph;m#>", "]un'ys+*:Kph;m#>", 13, "", 13, (-846), (-489), 1896, "null", "]un'ys+*:Kph;m#>", 118, (-3), "0");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TABLE;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType(" tableName = ");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.DATABASE_TYPE_DBO;
      databaseObjectType1.getIcon();
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      boolean boolean0 = DBUtil.typesAreEquivalent(3, (-846));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ISQLConnection iSQLConnection0 = null;
      ITableInfo iTableInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" ALTER COLUMN ", "Y>@xg-~", "org.apache.commons.cli.UnrecognizedOptionException", "locale", (-2), ",D]guxV(f [ c", (-2), 2147483645, 2147483645, (-1204), "Y>@xg-~", "}y?\"ja'Eb$kuB?0", 13, 4636, "select count(*) from ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("vhI-Z31");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBUtil.fixCase((ISession) null, (String) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, "[$6 #l", "[$6 #l", (-516), (String) null, 2004, 2822, 2822, 1092, "locale", (String) null, 1092, 1, "|`&EulZ");
      DBUtil.replaceDistinctDataType(2822, tableColumnInfo0, (ISession) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "J47Vt)vi5^9}K", "7e'TZ|&6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("141ce0d4:16ecf4848ab:-7e34", uidIdentifier0.toString());
      
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("clob", "clob", "32lvy1", "{,Qb//.Cr/5Q]rsi.", (-908), "k;FjK3IyE<J3#Y", (-4), (-4), (-1073741822), 15, "k;FjK3IyE<J3#Y", "[$6 #l", (-1073741822), 116, "Di-kAmG_}fH#m~7l-!D");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      DatabaseObjectType.createNewDatabaseObjectType("-Fj-{2v9tO)S|&Z:");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATABASE_TYPE_DBO;
      Icon icon0 = databaseObjectType1.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("c$2m&u2\u0007zGI", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("\t");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("(qeo_<T");
      ImageIcon imageIcon0 = new ImageIcon();
      DatabaseObjectType.createNewDatabaseObjectType("&n", (Icon) imageIcon0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 116);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)88;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Abnj0u", "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "DBUtil.mappingErrorKeyword", "R!LT,6", (-1219), (String) null, 662, 662, 91, (-2105376123), " ", "H]PEm [_Dj{x?RLa}P!", 44, 662, "H]PEm [_Dj{x?RLa}P!");
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo(" ", "Hs10 ", (String) null, "Abnj0u", 273, "wrapper-binary", 2001, 12, (-2105376123), 16, ". Skipping FK constraint", "LV8L", 48, (-2315), "EnNd%(*j");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDF_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfoArray0[1] = tableColumnInfo0;
      DBUtil.getColumnList(tableColumnInfoArray0);
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("R!LT,6, R!LT,6", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",D]guxV(f [ c");
      DBUtil.typesAreEquivalent(2579, 2579);
      IDatabaseObjectInfo iDatabaseObjectInfo0 = null;
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer1);
      Vector<ITableInfo> vector1 = new Vector<ITableInfo>();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("DBUtil.error.nocolumns", "blob", "DBUtil.error.nocolumns", "DBUtil.error.nocolumns", (-1073741822), "zC,N", (-1670), 16, (-1670), (-1670), "zC,N", "V)<Jo#", 65535, 16, "U-_");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DBUtil.typesAreEquivalent(2002, (-2235));
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("ERa");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(",\n\tPRIMARY KEY ", ">VdWs6*O3R", ",\n\tPRIMARY KEY ", ">VdWs6*O3R", (-1), ".Handler", 1003, 937, 1003, (-1348), ".2qY]O.6*,TZc=rNnC", "ERa", 1111, 1, ">VdWs6*O3R");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("dbcopytest");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteMenuEnabled(true);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "H]PEm [_Dj{x?RLa}P!", ">VdWs6*O3R");
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "\n", (ITableInfo) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "06%2[}#*>'bqZ", "ignore rollback");
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "[$6 #l";
      String string1 = null;
      DBUtil.fixCase((ISession) null, (String) null);
      int int0 = (-516);
      int int1 = 2004;
      String string2 = "|`&EulZ";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, "[$6 #l", "[$6 #l", (-516), (String) null, 2004, 2822, 2822, 1092, "locale", (String) null, 1092, 1, "|`&EulZ");
      DBUtil.replaceDistinctDataType(2822, tableColumnInfo0, (ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "=}xEC3x~IpEN[/J", "|`&EulZ", (String) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      LinkedList<TableInfo> linkedList0 = new LinkedList<TableInfo>();
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>(linkedList0);
      LinkedBlockingQueue<UDTInfo> linkedBlockingQueue0 = new LinkedBlockingQueue<UDTInfo>();
      Vector<ForeignKeyInfo> vector1 = new Vector<ForeignKeyInfo>();
      vector0.removeAll(vector1);
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, "wb| VOS_d*v87?+:L", 2, "Rwk3%m<", (-2705), 606, 1, 181, "=}xEC3x~IpEN[/J", "n&w&RU.LV`rqT)Ni", 1, 1, "24");
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, "org.jfree.data.general.DefaultValueDataset");
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = null;
      ISession iSession0 = null;
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "", 1896, "[$6 #l", (-768), 1896, 1896, 213, "", "H]PEm [_Dj{x?RLa}P!", 46, 230, (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TABLE;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType(" ADD CONSTRAINT FOREIGN KEY ");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.DATABASE_TYPE_DBO;
      databaseObjectType1.getIcon();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("fEUJ,", icon0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("START WITH");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), 46);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      uidIdentifier0.setString((String) null);
      uidIdentifier0.setString((String) null);
      SQLAlias sQLAlias0 = new SQLAlias(uidIdentifier0);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      sQLAlias0.setDriverProperties(sQLDriverPropertyCollection0);
      sQLAlias0.getDriverPropertiesClone();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, (String) null, (String) null, "|mT", 64, "|mT", 793, 64, 793, 1377, "ro}xU ", "http://www.squirrelsql.org", 793, 4, "http://www.squirrelsql.org");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin0, tableColumnInfo0, " )", "ro}xU ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "en&$}y";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "en&$}y");
      System.setCurrentTimeMillis((-2566L));
      ISession iSession0 = null;
      DBUtil.fixCase((ISession) null, "");
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "/.bN", "/.bN", "DBUtil.error.missingtable", (-1), "", 2383, (-1), (-1007), (-1007), "]_Im'-%/m[u?D", "]_Im'-%/m[u?D", (-825), (-825), "");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.unknowntype");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE;
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HI!+<[XiC~\"");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("File == null", ",D]guxV(f [ c", "F", " ", (-2), (String) null, (-719), (-104), (-2757), (-2757), "DBUtil.mappingErrorKeyword", "HI!+<[XiC~\"", 91, (-1219), "Sbj0u");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("net.sourceforge.squirrel_sql.fw.util.PropertyChangeReporter", "net.sourceforge.squirrel_sql.fw.util.PropertyChangeReporter", "DBUtil.error.unknowntype", "fPUEjr86in}", (-2757), "HI!+<[XiC~\"", 64000, (-1615), (-2232), 401, "net.sourceforge.squirrel_sql.fw.util.PropertyChangeReporter", "HI!+<[XiC~\"", 3765, 91, ",D]guxV(f [ c");
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("key", "DKi@~!", "!2`h!ez{om1<)", ".bPrd{ywJZm!xK", 32767, " ADD FOREIGN KEY (", 12, 32767, 93, (-115), "!2`h!ez{om1<)", " ADD FOREIGN KEY (", 12, 32767, "WzEVrl@VA}c{J;");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(32767, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "?b-,^4Qskw+@~?>#Sg");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Ka{UT^lPB1k_gEB!F3", "?b-,^4Qskw+@~?>#Sg", "?b-,^4Qskw+@~?>#Sg", "Ka{UT^lPB1k_gEB!F3", (-1), "Ka{UT^lPB1k_gEB!F3", 2479, 2004, 2004, 1565, "?b-,^4Qskw+@~?>#Sg", "http://www.squirrelsql.org", (-2176), 2004, "Ka{UT^lPB1k_gEB!F3");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.USER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      DatabaseObjectType.createNewDatabaseObjectType("x:N)C", icon0);
      databaseObjectType2.getIcon();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Icon icon1 = defaultTreeCellRenderer1.getClosedIcon();
      DatabaseObjectType.createNewDatabaseObjectType("V_L", icon1);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      assertFalse(databaseObjectType3.equals((Object)databaseObjectType0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ALTER SEQUENCE $sequenceName$ $restartWith$ $startValue$ $incrementBy $incrementValue$ ");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getWebSite();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "[$6 #l", ") has a particular foreign ", "[$6 #l", 5905, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1003, 5905, 1003, (-1045), "[$6 #l", "ALTER SEQUENCE $sequenceName$ $restartWith$ $startValue$ $incrementBy $incrementValue$ ", (-1101), (-1101), "");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("O:[}GB8\"KHOL");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE;
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      String string1 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ISQLConnection iSQLConnection0 = null;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "l/ER!Y5.^J,|E@";
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "l/ER!Y5.^J,|E@", "*?N6#~@FR^$QHp$");
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      arrayList0.add((IDatabaseObjectInfo) databaseObjectInfo0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(arrayList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getWebSite();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.getPasteToTableInfo((ISQLConnection) null, "AQVNg", "Could not find Object.equals() or Object.hashCode()");
      dBCopyPlugin1.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", " CASCADE");
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "P!73_LT3");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.createFolder(evoSuiteFile1);
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, (String) null, "http://www.squirrelsql.org");
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      sQLAlias0.setDriverProperties((SQLDriverPropertyCollection) null);
      sQLAlias0.getDriverPropertiesClone();
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, (TableColumnInfo) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(stack0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("[$6 #l", "%OiVf", "", "replaceDistinctDataType: Unexpected exception - ", 0, "[$6 #l", 1079, (-308), (-587), 65, "TRNu[%f", "TRNu[%f", 1410, 1079, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.setSourceDatabaseObjects(stack0);
      dBCopyPlugin1.getSourceSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
      
      List<ITableInfo> list1 = DBUtil.convertObjectToTableList(stack0);
      assertNotSame(list1, list0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("141ce0d4:16ecf4848ab:-7e3f", uidIdentifier0.toString());
      
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestDatabaseObject();
      arrayList0.add((IDatabaseObjectInfo) null);
      arrayList0.add((IDatabaseObjectInfo) null);
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(arrayList0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)14;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      dBCopyPlugin0.getDestSession();
      LinkedBlockingQueue<TableInfo> linkedBlockingQueue0 = new LinkedBlockingQueue<TableInfo>();
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>(linkedBlockingQueue0);
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertEquals(2, list1.size());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      assertEquals("141ce0d4:16ecf4848ab:-7e72", uidIdentifier0.toString());
      
      uidIdentifier0.setString("]h8*");
      uidIdentifier0.setString((String) null);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("]h8*", (Icon) null);
      DatabaseObjectType.createNewDatabaseObjectType("]h8*");
      boolean boolean0 = DBUtil.typesAreEquivalent(1947, 47);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getWebSite();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "getdate", (String) null, 578, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-4311), (-2), 93, (-140), "eEG^DY';fmz{L.0", "S", (-402), 203, "org.apache.log4j.LogManager");
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.getSourceSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(578, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[$6 #l");
      String string0 = "lCS[P,s";
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      stack0.forEach(consumer0);
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[9];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) foreignKeyInfo0;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) foreignKeyInfo0;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) foreignKeyInfo0;
      iDatabaseObjectInfoArray0[3] = (IDatabaseObjectInfo) foreignKeyInfo0;
      iDatabaseObjectInfoArray0[4] = (IDatabaseObjectInfo) foreignKeyInfo0;
      iDatabaseObjectInfoArray0[5] = (IDatabaseObjectInfo) foreignKeyInfo0;
      iDatabaseObjectInfoArray0[6] = (IDatabaseObjectInfo) foreignKeyInfo0;
      iDatabaseObjectInfoArray0[7] = (IDatabaseObjectInfo) foreignKeyInfo0;
      iDatabaseObjectInfoArray0[8] = (IDatabaseObjectInfo) foreignKeyInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo$MockitoMock$1430260248 cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer1);
      Vector<ITableInfo> vector1 = new Vector<ITableInfo>();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[1];
      DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.createFolder(evoSuiteFile0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall(" )");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("", "CREATE TABLE ", " ( ", "[$6 #l", 2002, "H]PEm [_Dj{x?RLa}P!", 2004, 1896, 118, 2002, "0", "vlg", (-767), (-767), "vlg");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TABLE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATABASE_TYPE_DBO;
      databaseObjectType1.getIcon();
      ImageIcon imageIcon0 = new ImageIcon("0");
      DatabaseObjectType.createNewDatabaseObjectType("[+XVjEnQ><@t>.k]", (Icon) imageIcon0);
      DatabaseObjectType.createNewDatabaseObjectType("Mk9ObRw(xK");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      DatabaseObjectType.createNewDatabaseObjectType("Ra");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("?:<!nr.%;_ H`%j5A", " NOT NULL", " NOT NULL", "", 2004, "http://www.squirrelsql.org", 1896, (-4613), 2002, (-4613), "[$6 #l", (String) null, (-868), 2002, "[$6 #l");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TABLE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATABASE_TYPE_DBO;
      Icon icon0 = databaseObjectType1.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("Ra", icon0);
      DatabaseObjectType.createNewDatabaseObjectType(">VdWs6*O3R");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteMenuEnabled(true);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      schemaInfo0.getSQLDatabaseMetaData();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("L ", " and table_schema = ? ", "WMeLlF!1c]tzY", "", 1753, "", 3, 0, 3, 3, " s", "mF$", 5, 16, "mF$");
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("FyM0!ZB4Y6=B[Ww7FQ=", " ( ", "@+F-P&X2`Q`7Qae;R", (String) null, (-460), (String) null, (-128), 208, (-1167), (-128), " ( ", " ( ", (-1167), (-460), "0");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-31);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-17);
      byteArray0[6] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getWebSite();
      dBCopyPlugin0.setSourceSession((ISession) null);
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "$listget(", ".r08w`", "0", (-7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "CREATE TABLE ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(")", "=}xEC3x~IpEN[/J", "x),JL'RG,+Y", ",aBT=~<`>;B-", (-1073741822), "a!5<^>.", (-2820), (-1648), (-3), (-4325), "\u0004:=kvqc|jL$L", "x),JL'RG,+Y", 2001, 1987, "}y?\"ja'Eb$kuB?0");
      int int0 = DBUtil.replaceDistinctDataType((-1648), tableColumnInfo0, (ISession) null);
      assertEquals((-1648), int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" ALTER COLUMN ", "Y>@xg-~", "org.apache.commons.cli.UnrecognizedOptionException", "locale", (-2), ",D]guxV(f [ c", (-2), 2147483645, 2147483645, (-1204), "Y>@xg-~", "}y?\"ja'Eb$kuB?0", 13, 4636, "select count(*) from ");
      int int0 = DBUtil.replaceDistinctDataType(2004, tableColumnInfo0, (ISession) null);
      assertEquals(2004, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a$0U>u");
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("^Wuu", "CJZu(=Ce,qe}Zk=wLS", "^Wuu", foreignKeyInfo0, dBCopyPlugin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-93);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "ALTER SEQUENCE $sequenceName$ $restartWith$ $startValue$ $incrementBy$ $incrementValue$ ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getSourceDatabaseObjects();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Vector<ITableInfo> vector0 = new Vector<ITableInfo>(arrayList0);
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList(arrayList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      uidIdentifier0.setString("max");
      uidIdentifier0.setString("max");
      uidIdentifier0.setString("ZMB{?3,;c<z%a8K:");
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, "Hou2Zr[.+", "blob(2000000000)", "ZMB{?3,;c<z%a8K:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.USER;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getLeafIcon();
      DatabaseObjectType.createNewDatabaseObjectType("x:N)C", icon0);
      databaseObjectType2.getIcon();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Icon icon1 = defaultTreeCellRenderer1.getClosedIcon();
      DatabaseObjectType.createNewDatabaseObjectType("V_L", icon1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "CREATE TABLE ", "http://www.squirrelsql.org", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("c$2m&u2\u0007zGI", "c$2m&u2\u0007zGI", "Ec~O.XSQMYUp-T", (ISession) null, true, (-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "";
      DBUtil.setLastStatement("");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string1 = " CHAR(10) )";
      int int0 = 0;
      String string2 = "org.jfree.data.category.CategoryToPieDataset";
      int int1 = 0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "clob");
      String string3 = "\\\\Ao@8I-=(o";
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      URI uRI0 = MockURI.aFileURI;
      URI uRI1 = MockURI.normalize(uRI0);
      fileWrapperFactoryImpl0.create(uRI1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      dBCopyPlugin0.getSourceSession();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "*76{-t{q}", (String) null, "en&$}y", (-845));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      sQLAlias0.setDriverProperties(sQLDriverPropertyCollection0);
      sQLAlias0.getDriverPropertiesClone();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "date_trunc");
      DatabaseObjectType.createNewDatabaseObjectType("v\"Cwb|");
      boolean boolean0 = DBUtil.typesAreEquivalent(47, 47);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.DATABASE_TYPE_DBO;
      Icon icon0 = databaseObjectType0.getIcon();
      DatabaseObjectType.createNewDatabaseObjectType("ALTER SEQUENCE $sequenceName$ $restartWith$ $startValue$ $incrementBy$ $incrementValue$ ", icon0);
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      boolean boolean0 = DBUtil.typesAreEquivalent((-460), 65535);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      URI uRI0 = MockURI.aFileURI;
      MockURI.normalize(uRI0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0TH5jM&P~Y8fE;<");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-73);
      byteArray0[3] = (byte)51;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*76{-t{q}");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDatabaseAliasesFile();
      applicationFileWrappersImpl0.getUserSQLHistoryFile();
      applicationFileWrappersImpl0.getUpdateDirectory();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl0);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "*76{-t{q}");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate((ISQLConnection) null, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setRecordDelayMillis(4L);
      dBCopyPreferenceBean0.setUseFileCaching(false);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      String string0 = "";
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DBUtil.setLastStatementValues("^XW[");
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",D]guxV(f [ c");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getDestSession();
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DBUtil.getLastStatementValues();
      DBUtil dBUtil0 = new DBUtil();
      String string0 = "6=Opp;N^Z?IlHp";
      String string1 = "U$M<P1oYkal";
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SESSION;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      schemaInfo0.getSQLDatabaseMetaData();
      DatabaseObjectInfo databaseObjectInfo0 = null;
      try {
        databaseObjectInfo0 = new DatabaseObjectInfo((String) null, "6=Opp;N^Z?IlHp", "U$M<P1oYkal", databaseObjectType0, (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      uidIdentifier0.setString((String) null);
      uidIdentifier0.setString((String) null);
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-6));
      SQLAlias sQLAlias0 = new SQLAlias(integerIdentifier0);
      sQLAlias0.getDriverPropertiesClone();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "?b-,^4Qskw+~?>#Sg", "i;~NoqfC\"oZe=``zf", "J23F*izt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
