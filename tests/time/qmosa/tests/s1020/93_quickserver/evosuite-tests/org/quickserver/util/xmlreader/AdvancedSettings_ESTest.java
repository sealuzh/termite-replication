/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:40:48 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7195332320069796
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-1209));
      advancedSettings0.setMaxThreadsForNioWrite((-1209));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setByteBufferSize((-1209));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize((-1209));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize((-1209));
      advancedSettings0.toXML("e");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog((-2599));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1209));
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesLatency((-1523));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("H0 6LYhX?fW");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // H0 6LYhX?fW
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.772471211737346
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency(1531);
      advancedSettings0.setClientSocketSendBufferSize((-505));
      advancedSettings0.setPerformancePreferencesBandwidth((-614));
      advancedSettings0.setClientIdentifier("4Ku>+Ggk");
      advancedSettings0.setByteBufferSize(1531);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setByteBufferSize((-505));
      advancedSettings0.setMaxThreadsForNioWrite(1300);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-614));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1509));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML("9J `uBV7 lW");
      advancedSettings0.setPerformancePreferencesBandwidth(1531);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals(1531, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.323921794922607
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.toXML("#tc");
      assertEquals(1, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7403440760878386
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize((-2261));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(2300);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings1.setByteBufferSize(3812);
      advancedSettings1.setClientSocketReceiveBufferSize((-341));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.setByteBufferSize(3500);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite((-2425));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-2425), int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6808419904356446
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(380);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setByteBufferSize(380);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(829);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(380);
      advancedSettings0.setCharset("");
      advancedSettings0.toXML("e");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesConnectionTime(829);
      advancedSettings0.setClientSocketReceiveBufferSize(380);
      advancedSettings0.setClientSocketSendBufferSize((-1756));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("e<advanced-settings>\ne\t<charset>ISO-8859-1</charset>\ne\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\ne\t<byte-buffer-size>10</byte-buffer-size>\ne\t<backlog>0</backlog>\ne\t<socket-linger>-1</socket-linger>\ne\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\ne\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\ne\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\ne\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\ne\t<performance-preferences-connection-time>829</performance-preferences-connection-time>\ne\t<performance-preferences-latency>380</performance-preferences-latency>\ne\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\ne\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\ne\t<client-socket-send-buffer-size>380</client-socket-send-buffer-size>\ne</advanced-settings>\n");
      assertEquals(829, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7911998103932194
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setQSObjectPoolMaker("");
      String string1 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("", string1);
      
      advancedSettings0.setClientIdentifier("");
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4212849951383646
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("AE/|Cy");
      advancedSettings0.setClientSocketSendBufferSize((-3604));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog(0);
      advancedSettings0.getCharset();
      advancedSettings0.getBacklog();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-1108));
      advancedSettings0.setClientSocketSendBufferSize((-126));
      assertEquals((-126), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.653648117951997
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("p'\u0003{^rsozg(T.Z8q`");
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setCharset((String) null);
      String string0 = advancedSettings0.toXML("p'\u0003{^rsozg(T.Z8q`");
      advancedSettings0.setClientSocketTrafficClass(string0);
      advancedSettings0.toXML((String) null);
      advancedSettings0.toXML("");
      advancedSettings0.setSocketLinger(4396);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setQSObjectPoolMaker("ErBM=C%+tO");
      advancedSettings0.setClientIdentifier("^>=|^D6q8E ");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketSendBufferSize(1);
      assertEquals("^>=|^D6q8E ", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.38615474653985
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(27);
      advancedSettings1.setByteBufferSize((-2425));
      advancedSettings0.setClientSocketReceiveBufferSize((-956));
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("E");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // E
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.775696246856522
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-505));
      advancedSettings0.setClientIdentifier("4Ku>+Ggk");
      advancedSettings0.setByteBufferSize(1531);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setByteBufferSize((-505));
      advancedSettings0.setMaxThreadsForNioWrite(1300);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-614));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1509));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML("9J `uBV7 lW");
      advancedSettings0.setPerformancePreferencesBandwidth(1531);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.008925238667177
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.setMaxThreadsForNioWrite(14);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-2231));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize(1);
      advancedSettings1.setByteBufferSize((-1874));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(2387);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getBacklog();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(2387, advancedSettings0.getSocketLinger());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(2412);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getBacklog();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(2412, advancedSettings0.getSocketLinger());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-2599));
      advancedSettings0.setClientSocketSendBufferSize((-510));
      assertEquals((-510), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.643298688975032
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("Iv6?tOR=cD'");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.toXML((String) null);
      advancedSettings0.setQSObjectPoolMaker("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class>Iv6?tOR=cD'</client-socket-traffic-class>\n</advanced-settings>\n");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency((-3640));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("x");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker("Iv6?tOR=cD'");
      advancedSettings0.setQSObjectPoolMaker("x");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getCharset();
      assertEquals("x", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4882967972644554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(10);
      advancedSettings0.setClientSocketSendBufferSize(3814);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTrafficClass("");
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings2.setClientSocketTcpNoDelay(false);
      advancedSettings2.setClientSocketReceiveBufferSize(1667);
      advancedSettings2.toXML("");
      assertEquals(1667, advancedSettings2.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.6965627682877518
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(13);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setByteBufferSize(13);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(829);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(13);
      advancedSettings0.toXML("e");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog((-2599));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesConnectionTime(829);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setCharset("");
      assertEquals(13, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.647826624623992
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketReceiveBufferSize(3634);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings1.setCharset("");
      advancedSettings1.setPerformancePreferencesLatency((-1));
      advancedSettings1.setClientSocketReceiveBufferSize((-1523));
      advancedSettings0.setClientSocketSendBufferSize(0);
      assertEquals(3634, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.576455224378034
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(3812);
      advancedSettings0.setByteBufferSize((-2425));
      advancedSettings0.setClientSocketReceiveBufferSize((-825));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setBacklog((-2425));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("</client-sonket-traffic-class>\n");
      advancedSettings0.setPerformancePreferencesLatency((-2425));
      advancedSettings0.setClientSocketReceiveBufferSize(3812);
      advancedSettings0.setClientSocketSendBufferSize((-2060));
      advancedSettings0.toXML("<K");
      assertEquals("</client-sonket-traffic-class>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setBacklog(1893);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(1893, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientSocketSendBufferSize((-1));
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientIdentifier("");
      boolean boolean0 = advancedSettings1.getClientSocketTcpNoDelay();
      assertEquals((-1), advancedSettings1.getClientSocketSendBufferSize());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.8119504731463656
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(380);
      advancedSettings0.setMaxThreadsForNioWrite(380);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setByteBufferSize(380);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime(829);
      advancedSettings0.setByteBufferSize(380);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(380);
      advancedSettings0.toXML("e");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setCharset("");
      advancedSettings0.setBacklog((-2599));
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesConnectionTime(829);
      advancedSettings0.setPerformancePreferencesLatency((-1523));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-1), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.438808048849822
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(27);
      advancedSettings1.setByteBufferSize((-2425));
      advancedSettings1.setClientSocketReceiveBufferSize((-1757));
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(27);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.toXML("");
      assertEquals(27, advancedSettings1.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(27);
      advancedSettings0.setByteBufferSize((-2425));
      advancedSettings0.setClientSocketReceiveBufferSize((-1757));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(27);
      assertEquals(27, advancedSettings0.getClientSocketSendBufferSize());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      assertEquals((-1), advancedSettings1.getSocketLinger());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(27);
      advancedSettings0.setByteBufferSize((-2425));
      advancedSettings0.setClientSocketReceiveBufferSize((-1757));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(27);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize((-510));
      assertEquals((-510), advancedSettings1.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(639);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(639, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(2801);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTrafficClass("");
      advancedSettings2.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientSocketReceiveBufferSize(2801);
      assertEquals(2801, advancedSettings1.getClientSocketSendBufferSize());
      
      advancedSettings2.getClientSocketTrafficClass();
      assertEquals(65536, advancedSettings2.getByteBufferSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4273916305367944
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(3812);
      advancedSettings0.setSocketLinger(0);
      advancedSettings1.setByteBufferSize((-2425));
      advancedSettings1.setClientSocketReceiveBufferSize(3812);
      advancedSettings1.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-2425));
      advancedSettings1.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(1134);
      assertEquals(1134, advancedSettings1.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4840387820081857
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(27);
      advancedSettings1.setByteBufferSize((-2425));
      advancedSettings1.setClientSocketReceiveBufferSize((-1757));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize((-4510));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(3151);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketSendBufferSize();
      advancedSettings0.toXML("l>>G](C>1;8}4Vf");
      assertEquals((-4510), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5786000152695845
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(0);
      advancedSettings1.setClientIdentifier("p\"=9$7++qF+c");
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.getByteBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings1.setBacklog(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.setByteBufferSize(65536);
      advancedSettings1.setClientSocketReceiveBufferSize((-2599));
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setBacklog(2805);
      assertEquals(2805, advancedSettings2.getBacklog());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.setMaxThreadsForNioWrite(14);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setByteBufferSize((-2425));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(1134);
      advancedSettings0.setByteBufferSize((-510));
      advancedSettings0.setClientSocketReceiveBufferSize(14);
      advancedSettings0.setClientSocketSendBufferSize(65536);
      assertEquals(65536, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.62971272033669
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(0);
      advancedSettings1.setClientSocketSendBufferSize(27);
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.setByteBufferSize((-2425));
      advancedSettings1.setPerformancePreferencesBandwidth((-2425));
      advancedSettings1.setClientSocketReceiveBufferSize((-1757));
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setClientSocketReceiveBufferSize((-1757));
      advancedSettings1.setClientSocketSendBufferSize(3);
      assertEquals(3, advancedSettings1.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.690499702627806
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize(0);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.getByteBufferSize();
      advancedSettings1.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(1574);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setClientIdentifier("</debug-non-blocking-mode>\n");
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings1.setClientSocketSendBufferSize(0);
      assertEquals(65536, advancedSettings1.getClientSocketReceiveBufferSize());
  }
}
