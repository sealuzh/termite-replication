/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:49:06 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.Proxy;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      QuickServer quickServer0 = new QuickServer("C6");
      quickServer0.getBindAddr();
      FileSystemHandling.shouldAllThrowIOExceptions();
      quickServer0.setTimeout((-670));
      theClient0.setServer(quickServer0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      quickServer0.getClientCount();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis((-659L));
      theClient0.getSocketChannel();
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getClientObjectHandler();
      System.setCurrentTimeMillis(0L);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1982462795335826
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, (byte[]) null);
      TheClient theClient0 = new TheClient();
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.setTimeoutMsg("");
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.toString();
      theClient0.getSocketChannel();
      theClient0.getTimeoutMsg();
      System.setCurrentTimeMillis((-1329L));
      theClient0.getClientObjectHandler();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "^.r5O");
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocket();
      theClient0.getTimeoutMsg();
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      defaultClientEventHandler0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getClientEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1995756248310236
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTryMsg("");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "no socket");
      theClient0.getClientEventHandler();
      theClient0.setTimeoutMsg("no socket");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getAuthenticator();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.getTimeoutMsg();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getSocket();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.getTimeoutMsg();
      theClient0.getTimeoutMsg();
      theClient0.toString();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientEventHandler();
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getServer();
      theClient0.getSocketChannel();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.196422294125466
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocket();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.getSocketChannel();
      //  // Unstable assertion: assertEquals("<ClientHandler-Pool#-1-ID:58>", nonBlockingClientHandler0.getName());
      
      byte[] byteArray0 = new byte[1];
      NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
      byteArray0[0] = (byte)54;
      theClient0.getClientAuthenticationHandler();
      theClient0.setMaxConnectionMsg("");
      theClient0.getCommunicationLogging();
      TheClient theClient1 = new TheClient();
      theClient0.getTimeout();
      theClient0.getAuthenticator();
      TheClient theClient2 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient2.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient2.setTrusted(false);
      theClient2.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getTimeout();
      MockSocket mockSocket0 = new MockSocket();
      theClient2.setSocket(mockSocket0);
      theClient2.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getMaxConnectionMsg();
      //  // Unstable assertion: assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      int int0 = theClient0.getTimeout();
      assertEquals(0, int0);
      
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      TheClient theClient1 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientCommandHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTry((-32));
      theClient0.getMaxAuthTry();
      theClient0.getClientObjectHandler();
      assertEquals((-32), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.toString();
      theClient0.getClientObjectHandler();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 9876);
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3203928312357034
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("JeYHA+D9|S/>gHWr>m)");
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocket();
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.getSocketChannel();
      byte[] byteArray0 = new byte[2];
      NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
      byteArray0[0] = (byte)54;
      byteArray0[1] = (byte)10;
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEvent();
      theClient0.toString();
      theClient0.setTrusted(true);
      theClient0.getTimeoutMsg();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientBinaryHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSocketChannel();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.19741190322987
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      blockingClientHandler0.getClientData();
      theClient0.setTimeout((-1520));
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTryMsg("#$31");
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientExtendedEventHandler();
      assertEquals((-1520), theClient0.getTimeout());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.toString();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getAuthenticator();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "Can't get in blocking mode!");
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientData();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setCommunicationLogging(false);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.getCommunicationLogging();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      theClient0.setMaxAuthTry(5);
      theClient0.toString();
      TheClient theClient1 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient1.getClientAuthenticationHandler();
      theClient0.getMaxAuthTry();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientAuthenticationHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getTimeoutMsg();
      assertEquals(5, theClient0.getMaxAuthTry());
      
      TheClient theClient2 = new TheClient();
      theClient2.getClientEventHandler();
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getSocket();
      theClient0.toString();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      nonBlockingClientHandler0.getSocketChannel();
      byte[] byteArray0 = new byte[2];
      NonBlockingClientHandler.setWakeupSelectorAfterRegisterWrite(false);
      byteArray0[0] = (byte)54;
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      byteArray0[1] = (byte)10;
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((byte)10);
      commandHandler0.closingConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#10-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientObjectHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientEvent();
      TheClient theClient1 = new TheClient();
      theClient1.setClientEvent((ClientEvent) null);
      theClient1.getClientObjectHandler();
      theClient0.getClientCommandHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.193764486816496
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setLastAsked("|`#-nl");
      byte[] byteArray0 = new byte[0];
      data0.setPassword(byteArray0);
      data0.setUsername("fN@j9Un\"YDZTUT");
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)50;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      data0.setPassword(byteArray1);
      theClient0.setTimeout((-3466));
      theClient0.setClientData(data0);
      theClient0.getAuthenticator();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.toString();
      theClient0.getClientData();
      theClient0.toString();
      assertEquals((-3466), theClient0.getTimeout());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      data0.setLastAsked("W`#-nl");
      byte[] byteArray0 = new byte[0];
      data0.setPassword(byteArray0);
      data0.setUsername("wN%@j9Un\"YDZTUTV");
      theClient0.setTimeout((-3466));
      theClient0.setClientData(data0);
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getTimeout();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      assertEquals((-3466), theClient0.getTimeout());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Data data0 = new Data();
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("]u");
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7874335778425303
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(false);
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeout(1439);
      theClient0.getClientObjectHandler();
      theClient0.setTrusted(false);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setTrusted(true);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getTimeout();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientCommandHandler();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientCommandHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1919211688441456
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("FjzHBBfCqSWS");
      theClient0.getClientCommandHandler();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.setTrusted(false);
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientWriteHandler();
      theClient0.getCommunicationLogging();
      theClient0.getClientAuthenticationHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setMaxConnectionMsg("1*fbp- HKD9:]Nprk)");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1*fbp- HKD9:]Nprk)");
      theClient0.getMaxAuthTryMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      defaultClientEventHandler0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getClientEventHandler();
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.26147761112867
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientEvent();
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      TheClient theClient2 = new TheClient();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient2.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.setClientCommandHandler((ClientCommandHandler) null);
      TheClient theClient3 = new TheClient();
      theClient3.setTimeoutMsg("{TheClient ");
      theClient3.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      int int0 = theClient2.getTimeout();
      assertEquals(0, int0);
      
      theClient2.getClientExtendedEventHandler();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient2.setClientObjectHandler((ClientObjectHandler) null);
      TheClient theClient4 = new TheClient();
      theClient2.getClientData();
      theClient2.getClientCommandHandler();
      theClient3.getClientBinaryHandler();
      assertFalse(theClient3.getTrusted());
  }
}
