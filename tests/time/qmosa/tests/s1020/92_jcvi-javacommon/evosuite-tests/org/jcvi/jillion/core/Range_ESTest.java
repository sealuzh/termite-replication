/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 05:00:48 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8579147134243703
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.ofLength(319L);
      Range.Builder range_Builder0 = new Range.Builder(319L, 1596L);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.contractEnd(319L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      Range.of(9223372036854775807L);
      Range.of(1L);
      range0.getBegin();
      range0.spliterator();
      Range.of(1596L, 1596L);
      range1.startsBefore(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-851L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7186315257820235
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-9223372036854775808L), 9223372036854775807L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem2);
      Range range1 = Range.of((-1287L));
      // Undeclared exception!
      try { 
        range1.split((-7053L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.9178506146656353
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1795L);
      Range range1 = Range.of(range_CoordinateSystem0, 1795L, 1795L);
      Range.ofLength(132L);
      range0.getEnd();
      range1.getEnd();
      Range range2 = Range.of(484L);
      range2.getBegin();
      range0.spliterator();
      Range range3 = Range.of(1795L, 2147483647L);
      range1.startsBefore(range3);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range4 = Range.ofLength(2147483647L);
      range4.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-9223372034707296529L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372034707296529 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.046660999351775
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-721L);
      range_Builder1.expandBegin(2147483647L);
      range_Builder0.expandEnd((-721L));
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range1.complement(range0);
      Range range2 = Range.of(65535L);
      range2.spliterator();
      range1.endsBefore(range2);
      Range.CoordinateSystem.values();
      Range.ofLength(2147483647L);
      range_CoordinateSystem0.getAbbreviatedName();
      // Undeclared exception!
      try { 
        range0.split((-32894L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.9248300453444624
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder((-250L), 319L);
      range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854771486L;
      Range range0 = Range.of(319L, 9223372036854771486L);
      range0.getEnd(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(1335L);
      List<Range> list0 = range1.split(928L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.745641540075397
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(133L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-3374L);
      Range range1 = Range.of((-3374L));
      Range range2 = Range.of(range_CoordinateSystem0, (-3374L), 1L);
      range0.getEnd();
      range2.getEnd();
      Range range3 = Range.of(2147483647L);
      range1.getBegin();
      range3.spliterator();
      // Undeclared exception!
      try { 
        Range.of((-1L), (-563L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.907006160756332
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of(132L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2074L);
      range1.getEnd();
      range0.getEnd();
      Range.of(4294967295L);
      range1.getBegin();
      range0.spliterator();
      Range range2 = Range.of((-2073L), 4294967295L);
      range0.startsBefore(range1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.ofLength(255L);
      range2.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6994424954634426
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 4693L);
      Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("4FcSH-{qaIPA&<", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 4FcSH-{qaIPA&< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.018557722272261
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(829L);
      Range.Builder range_Builder0 = new Range.Builder((-1080L), 32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1080L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(32768L, long0);
      
      long long1 = range1.getBegin(range_CoordinateSystem0);
      assertEquals((-1080L), long1);
      
      Range range2 = Range.of((-1080L));
      Range range3 = Range.of((-851L));
      long long2 = range0.getBegin();
      assertFalse(range0.isEmpty());
      assertEquals(829L, long2);
      
      range3.spliterator();
      Range range4 = Range.of((-1080L), (-1L));
      range1.startsBefore(range2);
      Range.CoordinateSystem.values();
      Range range5 = Range.ofLength(32766L);
      assertFalse(range5.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder(4294967295L);
      range_Builder2.expandEnd(32768L);
      range_Builder2.shift(32768L);
      range4.equals(range3);
      assertFalse(range4.equals((Object)range1));
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6981522809287055
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3304L, 3304L);
      range0.getBegin();
      range0.spliterator();
      Range range1 = Range.of(255L, 3304L);
      range1.startsBefore(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(3304L);
      range0.startsBefore(range1);
      Object object0 = new Object();
      range2.equals("end of file after only %d bytes read (expected %d)");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.994644867411608
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of((-1739L), (-1739L));
      range0.spliterator();
      Range range1 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.startsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem1, 1L, 9223372036854775581L);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 2434L, 2434L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder3.expandBegin(4294967293L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.ofLength(2015L);
      Object object2 = new Object();
      range2.equals("[ -1738 .. -1738 ]/RB");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1738 .. -1738 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1738 .. -1738 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.507498411921403
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range range1 = Range.of(927L);
      range0.getBegin(range_CoordinateSystem0);
      range1.split(9223372036854775807L);
      // Undeclared exception!
      try { 
        range1.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.810770744559765
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-1029L), 232L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 232L, 3977L);
      Range range2 = range0.intersection(range1);
      range0.endsBefore(range2);
      long long0 = range2.getLength();
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.split(1L);
      assertFalse(list0.contains(range0));
      assertTrue(list0.contains(range2));
      assertEquals(1262, list0.size());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.194585631262512
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder((-1080L), 32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractEnd((-1080L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range1.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of((-1080L));
      List<Range> list0 = range2.split(387L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      range_Builder1.shift(702L);
      Range range3 = Range.ofLength(32767L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range3.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 32767L, 702L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.375079608169741
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(484L);
      range0.getBegin();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(2147483647L);
      Range.of(2147483647L);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.7853662526114853
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of((-3640L));
      Range.of((-3640L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of((-3640L), (-3639L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      range2.getEnd();
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.164237568218569
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(2147483648L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem1);
      Iterator<Long> iterator0 = range1.iterator();
      Range.Builder range_Builder1 = new Range.Builder();
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder2 = range_Builder0.expandBegin(2147483648L);
      range0.split(1817L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      Range.Builder range_Builder4 = range_Builder3.contractEnd(1817L);
      range_Builder2.contractEnd(46L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.parseRange("[ 2147483647 .. 2147483647 ]/0B", range_CoordinateSystem2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder5 = new Range.Builder(range2);
      range_Builder4.copy();
      range_Builder2.contractEnd((-2301L));
      range_Builder1.shift((-3058L));
      Long long1 = new Long(2147483648L);
      boolean boolean0 = range0.equals(iterator0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.176381087703167
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of(829L);
      Range.Builder range_Builder0 = new Range.Builder((-1080L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem2);
      assertEquals(830L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem3);
      Range range1 = Range.of((-559L));
      List<Range> list0 = range0.split(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      Range range2 = Range.parseRange("[ 830 .. 830 ]/RB");
      linkedList0.add(range2);
      assertEquals(2, linkedList0.size());
      
      range0.complementFrom(list0);
      Range range3 = Range.ofLength(0L);
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range1.intersects(range3);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.807142963365571
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-2073L), 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 3977L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      range0.endsBefore(range1);
      long long0 = range1.getLength();
      assertEquals(3977L, long0);
      
      List<Range> list0 = range0.split(949L);
      assertEquals(3, list0.size());
      assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.0148708406873235
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      range_Builder0.contractBegin((-128L));
      range_Builder0.shift((-128L));
      range_Builder0.contractBegin(0L);
      range_Builder0.expandBegin((-721L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-721L), (-721L));
      range0.equals("");
      Range range1 = Range.of((-1016L));
      List<Range> list0 = range0.split(9223372036854743041L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      linkedList0.add(range1);
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.ofLength((-4403L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4646764801087673
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      Range range1 = range_Builder0.build();
      range1.intersects(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_Builder1.expandBegin((-4266L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.943724358210734
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder1.expandBegin(2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range1.equals(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range1.split(3000L);
      range0.complementFrom(list0);
      String string0 = "k<HyV,0sP";
      // Undeclared exception!
      try { 
        Range.parseRange("k<HyV,0sP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse k<HyV,0sP into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6241326044993967
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(32767L, 32767L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 32768L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.ofLength(27877L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3726094321778204
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.of(0L);
      Range.ofLength(0L);
      Range.of(4294967295L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8383677649297074
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-32768L), (-520L));
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 1649L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8460196353955216
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      range1.equals(range2);
      Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 1840L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1L);
      range_Builder1.copy();
      range2.toString();
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4374L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9361032381285157
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 768L, 2147483647L);
      range2.getEnd();
      range1.getEnd();
      Range.of((-9223372036854771437L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 2147483646L, 2147483647L);
      range3.getBegin();
      range3.spliterator();
      Range range4 = Range.of(1L, 2147483646L);
      range4.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("can not remove from Range", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not remove from Range into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.875154959570289
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(1795L);
      Range range1 = Range.of(range_CoordinateSystem0, 1795L, 1795L);
      range0.getEnd();
      range1.getEnd();
      Range range2 = Range.of(484L);
      range2.getBegin();
      range0.spliterator();
      Range range3 = Range.of(1795L, 2147483647L);
      range1.startsBefore(range3);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range4 = Range.ofLength(2147483647L);
      range4.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.235126691864284
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(132L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2074L);
      range1.getEnd();
      range0.getEnd();
      Range range2 = Range.of(4294967295L);
      range1.getBegin();
      range0.spliterator();
      Range range3 = Range.of((-2073L), 4294967295L);
      range0.startsBefore(range1);
      Range.CoordinateSystem.values();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range4 = Range.of(132L, 2074L);
      linkedList0.add(range4);
      List<Range> list0 = range3.complementFrom(linkedList0);
      range0.getBegin(range_CoordinateSystem0);
      List<Range> list1 = range0.split(4294967295L);
      range4.complementFrom(list1);
      Range range5 = Range.ofLength(4294967295L);
      range5.complementFrom(list0);
      Range.of(726L);
      List<Range> list2 = new LinkedList<Range>();
      range2.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.build();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.5742009450025236
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 4370L;
      Range range0 = Range.of(4370L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.getBegin();
      Range range1 = Range.ofLength(4294967295L);
      range0.intersects(range1);
      long long1 = 1649L;
      Range range2 = Range.ofLength(1649L);
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-405L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.0662684199601244
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = (-1739L);
      Range range0 = Range.of((-1739L), (-1739L));
      range0.spliterator();
      Range range1 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 32767L;
      Range range2 = Range.of(range_CoordinateSystem0, (-5L), 32767L);
      List<Range> list0 = range2.split(32767L);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(32767L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1368104275695665
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(0L);
      range0.getEnd(range_CoordinateSystem0);
      long long0 = range0.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4041600224184285
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of((-128L));
      Range.Comparators.values();
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      assertTrue(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.158660253898957
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of(829L);
      Range.Builder range_Builder0 = new Range.Builder((-1080L), 32767L);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractEnd((-1080L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      long long0 = range1.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of((-1080L));
      range0.split(4073L);
      long long1 = range2.getBegin(range_CoordinateSystem0);
      assertEquals((-1080L), long1);
      
      range_Builder0.shift(32768L);
      Range range3 = Range.ofLength(34928L);
      long long2 = range2.getEnd();
      assertTrue(long2 == long0);
      
      List<Range> list0 = range0.complement(range3);
      assertTrue(list0.isEmpty());
      
      Range range4 = Range.of(range_CoordinateSystem0, (-1931L), 34928L);
      assertFalse(range4.isEmpty());
      
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.0633604734420885
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.of(4370L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of((-405L));
      Range range2 = Range.of(range_CoordinateSystem0, (-405L), 4323L);
      range2.getEnd();
      range2.getEnd();
      range0.intersection(range1);
      Range.of(2147483647L);
      range2.getBegin();
      range0.spliterator();
      Range range3 = Range.of((-405L), (-405L));
      range3.startsBefore(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.ofLength(4323L);
      range2.equals(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("can not remove from Range");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.can not remove from Range
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.ofLength(32767L);
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2073L);
      long long1 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, (-2073L), 0L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.660054189320949
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-1892L));
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      range1.intersects(range0);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.split((-1892L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.6912275937566483
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of((-3640L));
      Range range1 = Range.of((-3640L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of((-3640L), (-3639L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range range3 = Range.of((-3639L), (-3639L));
      range3.intersects(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.032191056574829
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-32768L), (-32768L));
      range2.getBegin();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      Range range3 = Range.ofLength(1487L);
      range3.intersects(range1);
      range0.startsBefore(range1);
      Range.ofLength(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(1487L, 1562L);
      range_Builder0.expandBegin(2147483647L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.7899721216047766
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.intersects(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_Builder1.expandBegin((-4266L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 3772L, 3772L);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.9144686166597684
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of(4370L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of((-405L));
      Range range1 = Range.of(range_CoordinateSystem0, (-405L), 4323L);
      range1.getEnd();
      range1.getEnd();
      Range range2 = Range.of(2147483647L);
      range1.getBegin();
      range0.spliterator();
      Range range3 = Range.of((-405L), (-405L));
      range3.startsBefore(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.ofLength(4323L);
      range2.equals(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("can not remove from Range");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.can not remove from Range
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.0092054463894815
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L, 9995L);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem2);
      //  // Unstable assertion: assertEquals(9994L, long0);
      
      range1.getBegin(range_CoordinateSystem0);
      Range range2 = Range.of(927L);
      List<Range> list0 = range1.split(9223372036854771438L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      linkedList0.add(range1);
      List<Range> list1 = range2.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      range0.getBegin(range_CoordinateSystem1);
      List<Range> list2 = range2.split(9223372036854775807L);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range2.complementFrom(linkedList1);
      range2.complementFrom(list2);
      List<Range> list3 = range2.complement(range0);
      List<Range> list4 = range2.complementFrom(linkedList1);
      //  // Unstable assertion: assertTrue(list4.equals((Object)list3));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.688089190571641
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of(4370L);
      Object object0 = new Object();
      range0.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 4323L, 4370L);
      range0.spliterator();
      Range range1 = Range.of(4370L, 4370L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("can not remove from Range", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not remove from Range into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.8574124435509036
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of((-2073L), 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 3977L);
      Range range2 = range0.intersection(range1);
      range0.endsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      boolean boolean0 = range1.endsBefore(range0);
      boolean boolean1 = range2.intersects(range0);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem2);
      assertEquals(3977L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.820851553474407
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of(132L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2074L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-915L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 106L, 845L);
      List<Range> list0 = range2.complement(range0);
      assertEquals(2, list0.size());
      
      Range.of(181L);
      range0.spliterator();
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range range3 = Range.ofLength(615L);
      List<Range> list1 = range3.split(615L);
      assertTrue(list1.contains(range3));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.0561091528952034
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.4422291424304086
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      range_Builder0.contractBegin((-128L));
      range_Builder0.shift((-128L));
      range_Builder0.contractBegin(0L);
      long long1 = (-721L);
      range_Builder0.expandBegin((-721L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-721L), (-721L));
      String string0 = "";
      range0.equals("");
      // Undeclared exception!
      try { 
        Range.parseRange("[/AJIkVv WPzb?pEPw", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [/AJIkVv WPzb?pEPw into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.101880542941702
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      range1.equals(range2);
      Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 1840L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1L);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_Builder1.expandBegin((-26L));
      Range range3 = Range.of(range_CoordinateSystem1, (-26L), 4070L);
      range3.spliterator();
      Range.Builder range_Builder2 = range_Builder1.contractEnd(1L);
      range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder();
      long long0 = (-2181L);
      range_Builder2.contractBegin((-2181L));
      range2.endsBefore(range0);
      range0.isEmpty();
      range2.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.5123548294273754
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(319L);
      Range range1 = Range.of(range_CoordinateSystem0, 319L, 319L);
      range0.endsBefore(range1);
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(319L);
      // Undeclared exception!
      try { 
        range2.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4362444909164767
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1892L);
      range_Builder0.shift((-1892L));
      range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.expandBegin((-2095L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3918895575297667
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = 271L;
      long long1 = 1219L;
      Range range0 = Range.of(271L, 1219L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.7063758021852906
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range0.endsBefore(range1);
      Range range3 = Range.of((-128L));
      boolean boolean1 = range2.endsBefore(range3);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range3.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.8247201557353465
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1912L), 0L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder1.shift(0L);
      range_Builder1.contractBegin(0L);
      range0.getBegin();
      range_Builder1.expandEnd(0L);
      range_Builder1.expandEnd(0L);
      range_Builder1.contractEnd(0L);
      Range range1 = range0.asRange();
      range_CoordinateSystem0.toString();
      range1.endsBefore(range0);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-1912L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.866334047846107
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(4370L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(4370L, 4370L);
      range0.complement(range1);
      range1.endsBefore(range0);
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(2147483647L);
      range2.intersection(range1);
      range2.split(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4096L, (-3892L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.622297794748807
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.ofLength(0L);
      range1.intersection(range0);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1L, (-2270L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.010618366316659
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      long long0 = 829L;
      Range range0 = Range.of(829L);
      Range.Builder range_Builder0 = new Range.Builder((-1080L), 32767L);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      range1.getBegin();
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Range.of((-176L), 32768L);
      long long1 = 3977L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 32768L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.7372345553769595
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(319L);
      Range range1 = Range.of(range_CoordinateSystem0, 319L, 319L);
      range1.complement(range0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.7499608397319806
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range2.isSubRangeOf(range0);
      range2.equals(range_CoordinateSystem0);
      range2.endsBefore(range1);
      long long0 = 3000L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1130L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2909525839675
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 4370L;
      Range range0 = Range.of(4370L);
      Object object0 = new Object();
      range0.equals(object0);
      long long1 = (-159L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-4049L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.766648172694964
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      range_Builder0.build();
      range_Builder0.copy();
      Range range1 = Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = 132L;
      Range.ofLength(2147483647L);
      range0.getEnd();
      range1.getEnd();
      Range range2 = Range.of(126L);
      // Undeclared exception!
      try { 
        range2.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=4.039853459004135
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.intersects(range0);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      range1.split(2147483647L);
      range1.getBegin(range_CoordinateSystem0);
      range_Builder0.shift(520L);
      Range range2 = Range.ofLength(151L);
      range2.getEnd();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 520L, 151L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.9627027934055956
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long long0 = 319L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder((-4464L), 319L);
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.getBegin();
      Range range1 = Range.of((-1867L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      long long1 = (-759L);
      // Undeclared exception!
      try { 
        Range.of((-759L), (-4464L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.013533869101138
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.of(1817L, 1817L);
      List<Range> list0 = range0.split(1817L);
      range0.complementFrom(list0);
      Range range1 = Range.ofLength(0L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(1817L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_Builder0.copy();
      range_Builder0.copy();
      Range.ofLength(1818L);
      range0.startsBefore(range1);
      Range.ofLength(1818L);
      long long0 = 9223372036854771438L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(9223372036854771438L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.9609104377021063
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin((-128L));
      range_Builder0.shift((-128L));
      range_Builder0.contractBegin((-45L));
      range_Builder0.expandBegin((-721L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-721L), (-721L));
      range0.equals("");
      Range range1 = Range.of(range_CoordinateSystem0, (-721L), (-128L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range1.complementFrom(linkedList0);
      range_Builder1.copy();
      Range.of(65535L);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      // Undeclared exception!
      try { 
        Range.of((-45L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.7757931076762232
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3977L, 3977L);
      range0.intersection(range1);
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split((-4584L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.3735266294226887
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = null;
      range0.isSubRangeOf(range0);
      Range.ofLength(9995L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9995L, (-2726L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.7748125958231284
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.of(829L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 32767L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2631L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1794L, (-4008L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.7295360354950686
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long long0 = 1L;
      Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 1840L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1L);
      range_Builder1.copy();
      long long1 = (-26L);
      range_Builder1.expandBegin((-26L));
      Range range0 = Range.of((-26L), 1L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(1840L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.9813341790554198
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-721L);
      range_Builder1.expandBegin(2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range1.complement(range0);
      Range range2 = Range.of(65535L);
      range2.spliterator();
      range1.endsBefore(range2);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.ofLength((-1955L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=4.016616388262977
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.of((-1739L), (-1739L));
      range0.spliterator();
      Range range1 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      range0.getLength();
      range1.isSubRangeOf(range0);
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 255L, (-9223372036854775808L));
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.build();
      range_Builder0.copy();
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder3.expandBegin((-1115L));
      Range.CoordinateSystem.values();
      Range.ofLength(1L);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Range range3 = range2.asRange();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.545906792128278
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 4693L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.split(9223372036854771438L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-2147483648L), 9223372036854771438L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.45948079962219
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.of(271L, 1219L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1220L, long0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.7514028239539248
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.of(4370L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 4323L;
      Range range0 = Range.of((-405L));
      Range range1 = Range.of(range_CoordinateSystem0, (-405L), 4323L);
      range1.getEnd();
      range1.getEnd();
      range1.split(4370L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1728L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.9992464071970337
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.of(4370L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((-405L));
      range1.getEnd(range_CoordinateSystem0);
      Range range2 = Range.of(range_CoordinateSystem0, (-405L), 4323L);
      range2.getEnd();
      range2.getEnd();
      Range.of(2147483647L);
      range2.getBegin();
      range0.spliterator();
      Range range3 = Range.of((-405L), (-405L));
      range3.startsBefore(range0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Range.ofLength(4323L);
      Range.Builder range_Builder0 = new Range.Builder(4370L);
      range_Builder0.shift(4323L);
      // Undeclared exception!
      try { 
        range3.split((-922L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.2019506338289605
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.of(1L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.826272976017503
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range range0 = Range.of((-3640L), (-3640L));
      Range.of((-3640L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-3639L), (-3640L));
      range1.getEnd();
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.8395258628416222
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4584L), (-4584L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 3977L, 3977L);
      range1.complement(range0);
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem2);
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split((-4584L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3612557937284095
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.of(0L);
      Range.of((-128L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6312852725069362
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.of(1L);
      Range range0 = Range.of((-1080L), (-1L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.978550989206892
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range1.intersection(range0);
      range1.equals(range2);
      long long1 = 1840L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 1840L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1L);
      range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = (-26L);
      range_Builder1.expandBegin((-26L));
      Range range3 = Range.of(range_CoordinateSystem1, (-26L), (-26L));
      range0.spliterator();
      Range.Builder range_Builder2 = new Range.Builder(range3);
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(1840L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.6761642475795373
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder0.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder2.expandBegin((-9223372036854775808L));
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.ofLength(128L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(".1x E%ab/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators..1x E%ab/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.830146602566092
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range range0 = Range.of(1817L);
      range0.split(1817L);
      List<Range> list0 = new LinkedList<Range>();
      Range range1 = Range.ofLength(0L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift(0L);
      range_Builder0.expandEnd(1817L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-4464L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      long long0 = 732L;
      Range.Builder range_Builder0 = new Range.Builder(732L, 732L);
      long long1 = 4363L;
      range_Builder0.expandBegin(4363L);
      range_Builder0.contractBegin(4363L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(732L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.718438276769689
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-32768L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-32768L));
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.contractEnd((-1546L));
      range_Builder1.copy();
      range_Builder1.contractEnd(0L);
      Range range0 = Range.of(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder1.shift((-32768L));
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2074L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.5720017307249643
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift(0L);
      range_Builder0.copy();
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
