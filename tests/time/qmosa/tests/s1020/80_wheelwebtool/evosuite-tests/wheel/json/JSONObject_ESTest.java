/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 06:41:52 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9736489231972635
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = new Boolean("{");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      JSONObject jSONObject1 = jSONObject0.append("{", "[C:");
      jSONObject1.remove("{");
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.putOpt("9@[,qqosh1A@", short0);
      jSONObject0.optString("9@[,qqosh1A@");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7405117043237692
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("isparseLong", 3);
      long long1 = jSONObject0.optLong("isparseLong");
      assertEquals(2, jSONObject0.length());
      assertEquals(3L, long1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7405117043237692
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("", (-18651756));
      long long1 = jSONObject0.optLong("");
      assertEquals(2, jSONObject0.length());
      assertEquals((-18651756L), long1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6417347121875214
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      jSONObject0.put("false", (double) 675);
      Object object0 = jSONObject0.opt("false");
      assertEquals(675.0, object0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put("false", false);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.keys();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("gethighestOneBit", (Collection) null);
      jSONObject0.has("gethighestOneBit");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject1 = jSONObject0.put("", (Map) hashMap0);
      String string0 = jSONObject1.getString("");
      assertNotNull(string0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5228146795137603
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put("", (-18651756));
      long long1 = jSONObject1.getLong("");
      assertEquals(2, jSONObject0.length());
      assertEquals((-18651756L), long1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.putOpt("", short0);
      jSONObject0.getDouble("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(71.30832F);
      String string0 = JSONObject.valueToString(float0, (-1888), (-1888));
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7879677305228177
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString(34, (-1477));
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject("false", stringArray0);
      String string0 = jSONObject0.toString(0, 38);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.testValidity(jSONArray0);
      assertEquals(0, jSONArray0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.remove("");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = JSONObject.quote("r");
      assertEquals("\"r\"", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)125);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, short0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("", true);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>(45);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      hashMap1.put((Long) null, (String) null);
      try { 
        jSONObject0.put((String) null, (Map) hashMap1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9002560512685369
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) 132);
      JSONObject jSONObject1 = jSONObject0.put("dou", (Object) float0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("Expected a',' or>']'", 0L);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("Ca5J/ZVG&1Qj", (-1L));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("", 65009L);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("!X.~", 0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put(".pb}sSXN\"m`", 0.0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1839637727244874
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.put("_YwD[-j-", (-1546.2095864187609));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      try { 
        jSONObject0.put(stringArray0[1], (double) 675);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = jSONObject0.optString("", "-3804.7599737939695");
      assertEquals(1, jSONObject0.length());
      assertEquals("-3804.7599737939695", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      long long1 = jSONObject0.optLong("isparseLong", (-254L));
      assertEquals((-254L), long1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6792706702716655
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      long long0 = jSONObject0.optLong((String) null, (long) 63802);
      assertEquals(1, jSONObject0.length());
      assertEquals(63802L, long0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("", (long) 0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optJSONObject("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optJSONArray("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Long long0 = new Long((-1888));
      JSONObject jSONObject0 = new JSONObject(long0);
      double double0 = jSONObject0.optDouble((String) null, (double) (short)93);
      assertEquals(1, jSONObject0.length());
      assertEquals(93.0, double0, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble(".%086", 0.0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble("", (-1.0));
      assertEquals(3, jSONObject0.length());
      assertEquals((-1.0), double1, 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6423651354584372
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertEquals(3, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.740511704323769
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HashMap<Double, Integer> hashMap0 = new HashMap<Double, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("wheel.json.JSONObject@0000000001");
      assertNull(object0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Integer integer0 = new Integer((-2298));
      String string0 = JSONObject.numberToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5751765904639272
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.488507861129921
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.getInt("x!1z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x!1z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("r(w6[U%62zMuj%^R+ ", stringArray0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Byte, String> hashMap0 = new HashMap<Byte, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("kBg|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kBg|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("Ca5J/ZVG&?Vj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ca5J/ZVG&?Vj\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = JSONObject.doubleToString(92);
      assertEquals("92", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Byte byte0 = new Byte((byte)10);
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      try { 
        jSONObject0.append((String) null, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7205917863027957
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("", jSONObject0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject0, 47, 34);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0105003990773773
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      // Undeclared exception!
      jSONObject1.toString(3065, 34);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9874270743171156
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      Integer integer0 = new Integer((-732));
      Short.toUnsignedInt((short) (-450));
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject(double0);
      String string1 = "%cRE6Yo:";
      JSONObject jSONObject2 = jSONObject1.putOpt("%cRE6Yo:", jSONObject0);
      jSONObject0.append("", jSONObject2);
      Boolean boolean0 = new Boolean("istoHexString");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 15;
      // Undeclared exception!
      jSONObject0.toString((-732), 57);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9515272251612923
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("%cRE6Yo:", jSONObject0);
      jSONObject0.append("", jSONObject1);
      // Undeclared exception!
      jSONObject0.toString(92);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Integer integer0 = new Integer((-2298));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      hashMap0.put((Boolean) null, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        jSONObject0.toString((-2298));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1554L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 277);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer(0);
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap0.put(boolean0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Boolean cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5751765904639272
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject0.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("Expected a',' or ']'");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Expected a',' or ']'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[6];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4134301526721704
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("%cRE6Yo:", jSONObject0);
      StringWriter stringWriter0 = new StringWriter(1239);
      // Undeclared exception!
      jSONObject0.write(stringWriter0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0, 59, 41);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, 65086, 1239);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.748557014082381
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.toString();
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.8228804629889481
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "!X.~");
      StringWriter stringWriter0 = new StringWriter(34);
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7244762067315986
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject", object0);
      StringWriter stringWriter0 = new StringWriter(1900);
      Writer writer0 = jSONObject1.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.9511349745937174
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("", (-18651756));
      jSONObject0.toString(218, 218);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONArray0.put(65086);
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONArray2.length());
      assertNotSame(jSONArray2, jSONArray1);
      assertNotNull(jSONArray2);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer(1533);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("E?p?@H+B3lCN(( T", (Object) null);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.4216010062582942
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "par");
      try { 
        jSONObject0.getJSONArray("/jGK]-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/jGK]-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.8717814824679821
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5309089754520375
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer(1533);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getJSONObject("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.981102200701706
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("{\n                                                              \"java.lang.String@0000000003\": java.lang.Boolean@0000000004,\n                                                              \"java.lang.String@0000000005\": java.lang.Boolean@0000000006,\n                                                              \"java.lang.String@0000000007\": \"java.lang.Class@0000000008\"\n}");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 731);
      assertEquals(731, int0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7099562292895305
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      Short short0 = new Short((short)1226);
      String[] stringArray0 = JSONObject.getNames((Object) short0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Object) null);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.2446725381717776
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Long long0 = new Long((-1888));
      JSONObject jSONObject0 = new JSONObject(long0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.append("~Ew*./7E)^(L, =", "wheel.json.JSONObject@0000000001");
      String string0 = jSONObject0.optString("~Ew*./7E)^(L, =", "Expected a ':' after a key");
      assertNotNull(string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optJSONObject("getreverseBytes");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("gethighestOneBit", (Collection) null);
      jSONObject0.optJSONArray("gethighestOneBit");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.0304783786945726
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject(double0);
      jSONObject1.put("%cRE6Yo:", (long) 65086);
      jSONObject1.toString(92);
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONArray0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      String[] stringArray0 = JSONObject.getNames((Object) hashMap0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("gethighestOneBit", 92);
      long long0 = jSONObject0.getLong("gethighestOneBit");
      assertEquals(4, jSONObject0.length());
      assertEquals(92L, long0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("gethighestOneBit", (Collection) null);
      try { 
        jSONObject1.getJSONObject("gethighestOneBit");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gethighestOneBit\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4280648236309732
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("%cRE6Yo:", jSONObject0);
      try { 
        jSONObject1.getJSONArray("%cRE6Yo:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"%cRE6Yo:\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.6354502583387052
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put("", (-18651756));
      int int0 = jSONObject1.optInt("", (-1547));
      assertEquals(2, jSONObject0.length());
      assertEquals((-18651756), int0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7041112757296575
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("gethighestOneBit", (Collection) null);
      int int0 = jSONObject1.optInt("gethighestOneBit", (-3138));
      assertEquals(4, jSONObject0.length());
      assertEquals((-3138), int0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("{\n                                                                                                                                                                                                                                                                                                                                                     \"java.lang.String@0000000003\": \"java.lang.Class@0000000004\",\n                                                                                                                                                                                                                                                                                                                                                     \"java.lang.String@0000000006\": [\"java.lang.String@0000000008\"]\n}", 42);
      double double0 = jSONObject1.getDouble("{\n                                                                                                                                                                                                                                                                                                                                                     \"java.lang.String@0000000003\": \"java.lang.Class@0000000004\",\n                                                                                                                                                                                                                                                                                                                                                     \"java.lang.String@0000000006\": [\"java.lang.String@0000000008\"]\n}");
      assertEquals(42.0, double0, 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.7613004648865633
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.append("", "");
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.776053131855733
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("gethighestOneBit", (Collection) null);
      long long0 = jSONObject0.optLong("gethighestOneBit");
      assertEquals(4, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1440.9102671));
      assertEquals("-1440.9102671", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.455500877075017
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.put("", (Collection) null);
      jSONObject0.append("", double0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.0307167560996358
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Integer integer0 = new Integer(0);
      JSONObject jSONObject0 = new JSONObject((Object) "!X.~");
      JSONObject jSONObject1 = jSONObject0.append("!X.~", integer0);
      jSONObject1.toString(34);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5086597717181076
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt("", double0);
      try { 
        jSONObject0.append("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.2995530335744938
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("%i", "%i");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5086597717181076
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", double0);
      Byte byte0 = new Byte((byte)69);
      jSONObject1.accumulate("", byte0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("getnotifyAll", (Map) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.8467820899048084
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.5751765904639274
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long((-1049L));
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.put("", (-18651756));
      boolean boolean0 = jSONObject0.isNull("");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.271899083808096
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Float float0 = new Float(1816.438F);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      int int0 = jSONObject0.optInt("&bc`7");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.6414480415035768
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Long long0 = new Long((-1888));
      JSONObject jSONObject0 = new JSONObject(long0);
      boolean boolean0 = jSONObject0.optBoolean("java.lang.Float@0000000001");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      boolean boolean0 = jSONObject0.optBoolean("Y<LaU)", true);
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Short short0 = new Short((short) (-527));
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = jSONObject0.optString("9@[,qqosh1A@");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "!X.~");
      boolean boolean0 = jSONObject0.isNull("!X.~");
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}[!6C<-\"zhvT-;kke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }[!6C<-\"zhvT-;kke
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.4795008699302592
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Boolean boolean0 = new Boolean("{");
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getString("getrotateRight");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getrotateRight\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.4218956404837546
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      Byte byte0 = new Byte((byte)69);
      jSONObject1.accumulate("", byte0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Long long0 = new Long((-1888));
      JSONObject jSONObject0 = new JSONObject(long0);
      double double0 = jSONObject0.optDouble("null");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }
}
