/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 04:40:23 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.485404791652622
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.clone();
      StringReader stringReader0 = new StringReader("'o(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution4);
      jSTerm0.spliterator();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5821786017607478
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-3), (-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = (-3);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.clone();
      StringReader stringReader1 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      jSTerm0.addAll((Collection) jSTerm1);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.spliterator();
      System.setCurrentTimeMillis((-1323L));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.166383818782194
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.clone();
      jSTerm1.equals(jSTerm2);
      jSTerm2.spliterator();
      System.setCurrentTimeMillis(0L);
      jSTerm2.call();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.353511189579294
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      Integer integer0 = new Integer((-461));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("S(+)N L1:tUhp,d?:5*");
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.containsAll(jSTerm1);
      jSTerm1.isGround();
      jSTerm1.call();
      jSTerm1.clone();
      jSTerm0.equals(jSTerm1);
      jSTerm0.spliterator();
      System.setCurrentTimeMillis((-672L));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.48335613608284
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Integer integer0 = new Integer(92);
      jSTerm0.addElement(integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.clone();
      StringReader stringReader0 = new StringReader("Q0w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.addAll((Collection) jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.matches(jSTerm1, jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3534517375545656
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.clone();
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      UnaryOperator.identity();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.530942686095444
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.containsAll(jSTerm0);
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.clone();
      jSTerm2.addAll((Collection) jSSubstitution0);
      assertEquals(1, jSTerm0.size());
      
      jSTerm2.toStr();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSTerm jSTerm4 = jSTerm3.cloneT();
      assertTrue(jSTerm4.isFunction());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9715503473033111
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSSubstitution0);
      Integer integer0 = new Integer(92);
      jSTerm1.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.634642394194257
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Integer integer0 = new Integer(92);
      jSTerm0.addElement(integer0);
      jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution1);
      jSSubstitution0.add((Object) jSSubstitution0);
      JSJshopVars.backquote = (-143);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.addAll((Collection) jSSubstitution1);
      JSTerm jSTerm3 = jSTerm2.call();
      assertFalse(jSTerm3.isConstant());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
      
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm4.isFunction());
      
      jSTerm0.spliterator();
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      boolean boolean0 = jSTerm5.isFunction();
      assertFalse(jSTerm5.isEval());
      assertTrue(boolean0);
      assertNotSame(jSTerm3, jSTerm5);
      
      jSTerm1.isEval();
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6303900145704424
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Object object1 = new Object();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.containsAll(jSTerm0);
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("('!OS1~S7z{)bQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.403099575120513
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(92);
      jSTerm0.addElement(integer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.containsAll(jSSubstitution1);
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.clone();
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.531290747867608
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      Object object0 = jSTerm0.clone();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.addElement(object0);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm2.addAll((Collection) jSTerm0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Object> function0 = (Function<Integer, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ?>) function0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function4 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) function3);
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.664137839392251
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Cbb[;2-K+830A");
      StringReader stringReader1 = new StringReader("?Znd`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-2202), (-3));
      streamTokenizer0.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8771735963924034
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      jSTerm2.isEmpty();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm4.matches(jSTerm2);
      JSTerm jSTerm5 = jSTerm0.call();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm5, jSSubstitution0);
      jSSubstitution1.stream();
      JSTerm jSTerm6 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm6.isFunction());
      
      JSTerm jSTerm7 = new JSTerm();
      JSTerm jSTerm8 = jSTerm5.standardizerTerm();
      assertTrue(jSTerm8.isFunction());
      assertFalse(jSTerm8.isEval());
      
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm0, jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution2);
      assertNotSame(jSTerm2, jSTerm6);
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSSubstitution2.fail());
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm5, jSTerm8);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.589546352830298
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.isGround();
      jSTerm0.matches(jSTerm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm1.replaceAll(unaryOperator0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.matches(jSTerm0);
      JSTerm jSTerm4 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm4, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.070802378211958
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      Object object0 = jSTerm0.clone();
      jSTerm0.clone();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm1.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.552985392975942
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.containsAll(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.clone();
      jSTerm0.addAll((Collection) jSTerm2);
      jSTerm2.toStr();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1157434952314973
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Object object1 = new Object();
      jSTerm0.addElement(object1);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.containsAll(jSTerm1);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm1.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0842160601300908
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.clone();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.isGround();
      System.setCurrentTimeMillis((-1080L));
      System.setCurrentTimeMillis((-1981L));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.300887013435762
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.clone();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm1.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      StringReader stringReader0 = new StringReader("GN&4j");
      Function<Object, JSSubstitution> function0 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ?>) function0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.apply("GN&4j");
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Object> function3 = unaryOperator0.compose((Function<? super Object, ?>) function2);
      assertNotNull(function3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2631002899351245
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm0.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.clone();
      jSTerm1.isGround();
      jSTerm0.print();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Integer, ?>) unaryOperator1);
      UnaryOperator.identity();
      Function<Object, Integer> function0 = null;
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super Object, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Integer integer0 = new Integer(92);
      jSTerm0.addElement(integer0);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("* ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wgdy/x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSTerm0.makeVariable();
      stringReader0.ready();
      stringReader0.skip((-1698L));
      streamTokenizer0.pushBack();
      stringReader0.read();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.compose((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Object> function4 = unaryOperator1.compose((Function<? super Object, ?>) function3);
      assertNotNull(function4);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">Hv{.fb # `j");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader(">Hv{.fb # `j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UnaryOperator.identity();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("(");
      StringReader stringReader1 = new StringReader("2_v(gZv-{x@*11qj[-(");
      UnaryOperator.identity();
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.set((-2), "2_v(gZv-{x@*11qj[-(");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("\bUV@@gbaSRj&");
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5054513218768513
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-3), (-3));
      StringReader stringReader1 = new StringReader("%rv*");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.whitespaceChars((-3), (-3));
      streamTokenizer2.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-3), (-3));
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-3), (-3));
      streamTokenizer1.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      jSTerm1.print();
      System.setCurrentTimeMillis((-3));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7876218136637134
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Vw?>%h)&uCw7*'Pbl");
      StringReader stringReader1 = new StringReader("Vw?>%h)&uCw7*'Pbl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm2.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("[., [Vw?>%h], [nil]]", jSTerm3.toString());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.487556307437838
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.exclamation = 4465;
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = (-96);
      jSTerm0.matches(jSTerm1);
      jSTerm1.makeFunction();
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(jSTerm1.isFunction());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.401986450193788
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      jSTerm0.clone();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm1.addAll((Collection) jSTerm0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wgdy/x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(50, 1558);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars((-4), (-3));
      streamTokenizer4.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6966654998085944
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.whitespaceChars(40, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("d8w6kPAF8hRD5=d]Z(i");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.iterator();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = new StringReader("d8w6kPAF8hRD5=d]Z(i");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Object> function3 = unaryOperator2.compose((Function<? super Object, ?>) unaryOperator0);
      Function<Object, Object> function4 = unaryOperator2.compose((Function<? super Object, ?>) function2);
      assertNotSame(function4, function3);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnaryOperator.identity();
      String string0 = "GN&?j";
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.72402019279716
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wgdy/x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(1, 1);
      streamTokenizer0.nval = 8.858282436715239;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("wgdy/x");
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.matches((JSPredicateForm) jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm0, jSSubstitution2);
      assertEquals(1, jSTerm2.capacity());
      
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution2);
      assertNotSame(jSSubstitution2, jSSubstitution3);
      assertFalse(jSTerm3.isFunction());
      
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm5.isVariable());
      
      JSSubstitution jSSubstitution4 = jSTerm5.matches(jSTerm4);
      assertFalse(jSTerm5.isEval());
      assertNotSame(jSTerm0, jSTerm5);
      assertNotSame(jSTerm0, jSTerm1);
      assertTrue(jSTerm5.isConstant());
      assertTrue(jSSubstitution4.fail());
      assertEquals("[%%%]", jSTerm0.toString());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("* ");
      StringReader stringReader1 = new StringReader("* ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      StringReader stringReader2 = new StringReader("RT.jo_4\"jw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("* ");
      StringReader stringReader1 = new StringReader("* ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.lowerCaseMode(false);
      stringReader1.close();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.4352828580214512
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-3), (-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = (-3);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.spliterator();
      System.setCurrentTimeMillis((-3));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.compose((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) function1);
      jSTerm2.isVariable();
      System.setCurrentTimeMillis((-461L));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">Hv{.fb # `j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      char[] charArray0 = new char[3];
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isConstant();
      charArray0[0] = '6';
      charArray0[1] = '5';
      charArray0[2] = '*';
      stringReader0.reset();
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-3), (-505));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7490906203903507
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSParserError");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'Q';
      charArray0[2] = 'l';
      charArray0[3] = 'g';
      charArray0[4] = 'L';
      stringReader0.read(charArray0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(4, stringBuffer0.length());
      
      jSTerm0.isFunction();
      jSTerm1.isConstant();
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Object object1 = new Object();
      jSTerm0.addElement(object1);
      jSTerm0.containsAll(jSTerm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm0.toStr();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.250400258002746
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wgdy/x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(1, 32);
      streamTokenizer0.nval = 8.858282436715239;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.toStr();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      // Undeclared exception!
      try { 
        unaryOperator0.compose((Function<? super Object, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-3), (-3));
      StringReader stringReader1 = new StringReader("S");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars((-3), (-3));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-1981L));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3300157644647532
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-3), (-3));
      StringReader stringReader1 = new StringReader("S");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars((-3), (-3));
      streamTokenizer2.slashSlashComments(false);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("S(+)N L1:tUhp,d?:5*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StringReader stringReader1 = new StringReader("S");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.whitespaceChars(207, 119);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.whitespaceChars(58, (-1230));
      StringReader stringReader2 = new StringReader("S");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      streamTokenizer4.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      System.setCurrentTimeMillis((-1080L));
      System.setCurrentTimeMillis((-1981L));
      System.setCurrentTimeMillis((-1981L));
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4514518291945904
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = (-80);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.609523027911126
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm2.isEmpty();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5214859213560517
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      jSTerm0.addElement(object0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeConstant();
      jSTerm1.containsAll(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      jSTerm0.addAll((Collection) jSTerm2);
      jSTerm3.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'1b zsVISL8an");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("(");
      StringReader stringReader1 = new StringReader("2_v(gZv-{x@*11qj[-(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator1.compose((Function<? super Object, ? extends Integer>) function1);
      unaryOperator1.compose((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ?>) function2);
      unaryOperator0.compose((Function<? super Object, ?>) function3);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
