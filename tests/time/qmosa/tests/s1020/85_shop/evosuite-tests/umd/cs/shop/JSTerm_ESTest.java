/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 06:36:57 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(pMp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1935496040981333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      StringReader stringReader0 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      stringReader1.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader2 = new StringReader("`P%u(:8|c)clOP>>");
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader4 = new StringReader("Reading Predicate");
      streamTokenizer0.quoteChar(37);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader5 = new StringReader(")m*D");
      stringReader4.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StringReader stringReader6 = new StringReader("?[\"");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader6);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1687771717920876
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      StringReader stringReader4 = new StringReader(")m*D");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      StringReader stringReader5 = new StringReader(")m*D");
      streamTokenizer0.quoteChar(37);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader6 = new StringReader(")m*D");
      stringReader6.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader6);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches(jSTerm2);
      System.setCurrentTimeMillis((-1067L));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(3602);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("(0Mp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function.identity();
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function0.compose((Function<? super String, ? extends Integer>) function7);
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) function6);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function9 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function9);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function10);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function11 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function9);
      Function<Object, Integer> function12 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function11);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function7);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      function2.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function4.compose((Function<? super Object, ?>) function5);
      function3.compose((Function<? super Object, ?>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      UnaryOperator.identity();
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function9);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9559838465843624
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2512714238537517
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSJshopVars.rightPar = 43;
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.equals(jSTerm0);
      stringReader0.ready();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm2.equals(jSTerm1);
      jSTerm2.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.setSize(41);
      JSJshopVars.astherisk = (-1930);
      JSJshopVars.verticalL = (-1930);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSTerm1;
      jSTerm0.toArray(objectArray0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      JSJshopVars.leftBrac = (-1930);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/1717557253 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5977295736436044
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, JSSubstitution> function3 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function4 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function5 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElement(jSSubstitution1);
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      Function.identity();
      jSTerm0.call();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function5);
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.lessT = 125;
      jSTerm0.add((Object) function2);
      jSTerm4.replaceAll(unaryOperator0);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0317671113505356
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function8.apply(function7);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%b}2^X;{XgRKv`8G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8982053397041498
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Object object0 = new Object();
      function2.apply(object0);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object1 = jSTerm0.clone();
      jSTerm0.add(object1);
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar(32);
      StringReader stringReader1 = new StringReader("ZXic.PhnwE");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
      jSTerm0.print();
      assertEquals("[[], [Expecting]]", jSTerm0.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0837660374856477
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      String string0 = "umd.cs.shop.JSUtil";
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSUtil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.remove((Object) null);
      jSTerm1.isConstant();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0330001999799117
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, JSSubstitution> function2 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function2);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.isFunction();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.177913269211706
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isConstant();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm1.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1375031130414013
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function0.compose((Function<? super String, ? extends Integer>) function7);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm0.setSize(1732);
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.equals(jSTerm2);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.parseNumbers();
      jSSubstitution0.add((Object) "o]|b");
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2502602786175907
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eo");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      JSJshopVars.rightBrac = 449;
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.clear();
      JSJshopVars.leftBrac = 449;
      jSTerm2.removeAllElements();
      jSTerm1.isEval();
      jSTerm1.print();
      jSTerm1.toStr();
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Integer, String> function3 = function0.andThen((Function<? super Integer, ? extends String>) function2);
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function4);
      Integer integer0 = new Integer(14);
      function3.apply(integer0);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      function0.compose((Function<? super String, ? extends Integer>) function6);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function3);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.setSize(64);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9911388966130941
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function2 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(anyInt());
      Function<Integer, String> function3 = unaryOperator1.andThen((Function<? super Integer, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      function4.compose((Function<? super Integer, ?>) unaryOperator0);
      Function.identity();
      function0.andThen((Function<? super Integer, ? extends String>) function4);
      Integer integer0 = new Integer((-1608));
      function3.apply(integer0);
      Function.identity();
      Function<Object, JSSubstitution> function5 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function6).apply(any());
      Function<Object, Integer> function7 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Integer integer1 = new Integer(32);
      function7.apply(integer1);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function8);
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) function4);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0523204822256043
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm2);
      JSJshopVars.rightPar = 43;
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.equals(jSTerm0);
      jSTerm1.equals(jSTerm1);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm3.equals(jSTerm2);
      jSTerm3.isGround();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function5 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<JSSubstitution, Integer> function6 = (Function<JSSubstitution, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function6);
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      Function<JSSubstitution, Integer> function7 = (Function<JSSubstitution, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function7);
      Integer integer0 = new Integer((-48));
      function4.apply(integer0);
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      Function<Object, JSTerm> function11 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function12 = unaryOperator0.andThen((Function<? super Object, ? extends JSTerm>) function11);
      unaryOperator0.compose((Function<? super Integer, ?>) function12);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      Function.identity();
      Function<String, Integer> function13 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function0.compose((Function<? super String, ? extends Integer>) function13);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertEquals("[., [Predicateform.print(], [nil]]", jSTerm1.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.180945560561596
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      StringReader stringReader4 = new StringReader(")m*D");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      StringReader stringReader5 = new StringReader(")m*D");
      streamTokenizer0.quoteChar(37);
      StringReader stringReader6 = new StringReader(")m*D");
      stringReader6.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader6);
      jSTerm0.parseList(streamTokenizer2);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.toStr();
      assertEquals("[%%%]", jSTerm0.toString());
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.08676875496392
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      StringReader stringReader4 = new StringReader(")m*D");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      StringReader stringReader5 = new StringReader(")m*D");
      streamTokenizer0.quoteChar(37);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader6 = new StringReader(")m*D");
      jSTerm0.isGround();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader6);
      jSTerm0.parseList(streamTokenizer2);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals("[%%%]", jSTerm2.toString());
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3617383667707696
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "o]|b");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.removeAll(jSSubstitution0);
      streamTokenizer0.quoteChar((-1));
      jSTerm0.equals(jSTerm0);
      jSTerm0.isFunction();
      jSTerm1.removeAll(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.toStr();
      JSJshopVars.leftBrac = (-912);
      jSTerm0.equals(jSTerm2);
      jSTerm2.isGround();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      assertEquals("[%%%]", jSTerm0.toString());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.202609824697066
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      StringReader stringReader4 = new StringReader(")m*D");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      StringReader stringReader5 = new StringReader(")m*D");
      streamTokenizer0.quoteChar(37);
      StringReader stringReader6 = new StringReader(")m*D");
      stringReader6.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader6);
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis((-2441L));
      boolean boolean0 = jSTerm0.equals(jSTerm3);
      assertTrue(jSTerm0.isVariable());
      assertEquals("[%%%]", jSTerm3.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5302716109183208
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      StringReader stringReader4 = new StringReader(")m*D");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      StringReader stringReader5 = new StringReader(")m*D");
      streamTokenizer0.quoteChar(37);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader6 = new StringReader(")m*D");
      stringReader6.ready();
      stringReader6.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader6);
      jSTerm0.parseList(streamTokenizer2);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer2);
      jSTerm2.matches(jSTerm3);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0168325557927025
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm2.isGround();
      jSTerm2.equals(jSTerm0);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.180945560561596
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader3 = new StringReader(")m*D");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader(")m*D");
      streamTokenizer0.quoteChar(37);
      streamTokenizer0.eolIsSignificant(true);
      StringReader stringReader5 = new StringReader(")m*D");
      stringReader5.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader5);
      jSTerm0.parseList(streamTokenizer2);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.print();
      assertFalse(jSTerm0.isConstant());
      assertEquals("[%%%]", jSTerm2.toString());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7274635571421673
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function5 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<JSSubstitution, Integer> function6 = (Function<JSSubstitution, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function6);
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      Function<JSSubstitution, Integer> function7 = (Function<JSSubstitution, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function7);
      Integer integer0 = new Integer((-48));
      function4.apply(integer0);
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      function0.compose((Function<? super String, ? extends Integer>) function10);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) integer0);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8438614379613667
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "o]|b");
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9254081650860664
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      jSTerm0.call();
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.parseNumbers();
      jSSubstitution0.add((Object) "o]|b");
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1403895206310386
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function5 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      Integer integer0 = new Integer((-39));
      function4.apply(integer0);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      function0.compose((Function<? super String, ? extends Integer>) function8);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer1 = new Integer(1188);
      jSTerm0.add((Object) integer1);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm4.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm5.isEval());
      assertTrue(jSTerm5.isFunction());
      
      System.setCurrentTimeMillis(1188);
      boolean boolean0 = jSTerm2.equals(jSTerm3);
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm3.isConstant());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.1403895206310386
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function5 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<JSSubstitution, Integer> function6 = (Function<JSSubstitution, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function6);
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      Function<JSSubstitution, Integer> function7 = (Function<JSSubstitution, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super JSSubstitution, ? extends Integer>) function7);
      Integer integer0 = new Integer((-48));
      function4.apply(integer0);
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      function0.compose((Function<? super String, ? extends Integer>) function10);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) integer0);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(2962L);
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.203299020486301
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      function0.compose((Function<? super String, ? extends Integer>) function6);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function2);
      jSTerm0.replaceAll(unaryOperator1);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches(jSTerm2);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9512595041439564
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSJshopVars.rightPar = 43;
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isGround();
      jSTerm1.isGround();
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3077310467626386
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function5 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      function3.andThen((Function<? super String, ? extends String>) function2);
      Integer integer0 = new Integer((-39));
      function4.apply(integer0);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function.identity();
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      function0.compose((Function<? super String, ? extends Integer>) function8);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer1 = new Integer(1188);
      jSTerm0.add((Object) integer1);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm3.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      unaryOperator0.compose((Function<? super Integer, ?>) unaryOperator0);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) function4);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$46/715919256 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(" Expected (");
      jSTerm0.add((Object) stringReader0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.toStr();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "h=kD;CS*G'1kt/f^c";
      StringReader stringReader0 = new StringReader("h=kD;CS*G'1kt/f^c");
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis((-524L));
      String string0 = "A";
      StringReader stringReader0 = new StringReader("A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.minus = (-1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSSubstitution0.removeAll(jSTerm2);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm4.matches((JSPredicateForm) jSTerm0);
      JSTerm jSTerm5 = jSTerm0.standardizerTerm();
      jSTerm3.standardizerTerm();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm2;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[3] = (Object) jSSubstitution1;
      objectArray0[4] = (Object) jSSubstitution0;
      // Undeclared exception!
      try { 
        jSTerm5.remove((-3792));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3792
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function5 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Object> function6 = unaryOperator0.compose((Function<? super Integer, ?>) function5);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function4);
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) function6);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$47/2014785961 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'1b zs!VINSL8an");
      UnaryOperator.identity();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("%)[ _QrUkwonjil`");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader3 = new StringReader("] ");
      StringReader stringReader4 = new StringReader("'1b zs!VINSL8an");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader5 = new StringReader("xfv");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function3 = Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      UnaryOperator.identity();
      Function<Integer, String> function5 = function4.compose((Function<? super Integer, ?>) unaryOperator2);
      Function.identity();
      Function.identity();
      function1.compose((Function<? super String, ?>) function3);
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function5);
      unaryOperator2.apply(function5);
      Function<Integer, Integer> function6 = Function.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function6);
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function7);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function.identity();
      function6.compose((Function<? super String, ? extends Integer>) function8);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("+aAo>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'1b zs!VINSL8an");
      UnaryOperator.identity();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("%)[ _QrUkwonjil`");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader3 = new StringReader("%)[ _QrUkwonjil`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader(">l_");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.minus = 111;
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSSubstitution0.removeElementAt(6182);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6182 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("%%%");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9561874676604516
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      jSTerm0.isGround();
      jSTerm0.standardizerTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      streamTokenizer0.pushBack();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      System.setCurrentTimeMillis((-3705L));
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("o]|b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.plus = 370;
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.leftBrac = (-1439);
      stringReader0.reset();
      JSJshopVars.apostrophe = (-1);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Integer, String> function1 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function1);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      function2.andThen((Function<? super String, ?>) unaryOperator2);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function7 = function5.compose((Function<? super Object, ?>) function6);
      function2.compose((Function<? super Object, ?>) function7);
      Function<Object, String> function8 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function8);
      Function.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function4);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function10 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function9);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function10);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      Function<Object, Integer> function11 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function10);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      UnaryOperator.identity();
      Function<Object, Integer> function12 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function11);
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function12);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm0.replaceAll(unaryOperator1);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5684419540128833
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("o]|b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSTerm0.retainAll(linkedList0);
      JSJshopVars.leftBrac = 43;
      UnaryOperator.identity();
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = 'e';
      charArray0[2] = 'v';
      charArray0[3] = 'g';
      charArray0[4] = ';';
      charArray0[5] = '\\';
      charArray0[6] = 'y';
      charArray0[7] = ']';
      charArray0[8] = 'f';
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wgdy/x");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(1, 32);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isGround();
      jSTerm1.isGround();
      StringReader stringReader1 = new StringReader("LoB\"=q8^gDI1");
      StringReader stringReader2 = new StringReader("wgdy/x");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2240978714293633
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      function0.andThen((Function<? super Integer, ?>) unaryOperator0);
      Integer integer0 = new Integer((-4440));
      function0.apply(integer0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function5).apply(any());
      Function<Object, Integer> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function8.apply(function7);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      StringReader stringReader0 = new StringReader("o]|b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm2);
      assertFalse(jSSubstitution1.fail());
      
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm4.isConstant());
      assertFalse(jSTerm4.isVariable());
      assertFalse(jSTerm4.isEval());
      assertEquals(1, jSTerm2.size());
      assertNotSame(jSTerm4, jSTerm2);
      assertFalse(jSTerm4.isFunction());
      assertNotSame(jSTerm2, jSTerm0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.349792396172401
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      function2.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function5.andThen((Function<? super String, ? extends Integer>) function7);
      Function.identity();
      function4.compose((Function<? super Object, ?>) function5);
      function3.compose((Function<? super Object, ?>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, JSSubstitution> function10 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      function9.andThen((Function<? super Integer, ? extends JSSubstitution>) function10);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
      UnaryOperator.identity();
      Function<Object, Integer> function13 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
      Function<Object, Integer> function14 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function13);
      Function.identity();
      function11.andThen((Function<? super Integer, ?>) function14);
      StringReader stringReader0 = new StringReader("K");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.interrogation = (-1);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5367224694372192
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o]|B Eo k;");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.equals((Object)jSTerm0));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h=kD;CS*G'1kt/f^c");
      UnaryOperator.identity();
      StringReader stringReader1 = new StringReader("1o\"I.LQ7*yj=oMp(zsH");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader2 = new StringReader("Yoz7i*");
      StringReader stringReader3 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader3.close();
      StringReader stringReader4 = new StringReader("%%%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis((-2095L));
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.2510486588729868
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Integer, String> function4 = function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function5 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function5);
      Integer integer0 = new Integer(14);
      function4.apply(integer0);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function0.compose((Function<? super String, ? extends Integer>) function7);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function4);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      assertTrue(jSTerm4.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm5 = jSTerm3.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm5.isFunction());
      
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
      assertNotSame(jSTerm3, jSTerm5);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      function0.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, JSSubstitution> function4 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Integer, ?>) function4);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("'L) ?!;E|h");
      StringReader stringReader1 = new StringReader("'L) ?!;E|h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("o]|b");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0905994737794786
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h=kD;CS*G'1kt/f^c");
      UnaryOperator.identity();
      StringReader stringReader1 = new StringReader("1o\"I.LQ7*yj=oMp(zsH");
      StringReader stringReader2 = new StringReader("k\u0006fE");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader3 = new StringReader("Yoz7i*");
      StringReader stringReader4 = new StringReader("1o\"I.LQ7*yj=oMp(zsH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader5 = new StringReader("%%%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'1b zs!VINSL8an");
      UnaryOperator.identity();
      StringReader stringReader1 = new StringReader("6s!");
      JSJshopVars.rightBrac = 330;
      StringReader stringReader2 = new StringReader("6s!");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader3 = new StringReader("6s!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StringReader stringReader4 = new StringReader(">l_");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      jSTerm0.isVariable();
      System.setCurrentTimeMillis(330);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0523204822256043
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("Expecting ')' for term.");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm2);
      JSJshopVars.rightPar = 43;
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.equals(jSTerm0);
      jSTerm3.isConstant();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.equals(jSTerm1);
      jSTerm0.isGround();
      jSTerm3.equals(jSTerm2);
      jSTerm1.isEmpty();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8080457195839967
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSUtil");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.ttype = (-557);
      jSTerm1.isConstant();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        jSTerm1.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSJshopVars.leftBrac = 43;
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = 'e';
      charArray0[2] = 'v';
      charArray0[3] = 'g';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(unaryOperator0);
      jSTerm0.isFunction();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0679759122939765
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      unaryOperator0.apply(jSTerm0);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.remove((Object) jSSubstitution1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) unaryOperator1);
      jSTerm1.toStr();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader0 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader2 = new StringReader("'fr(w6[U%62zMuj%^");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'1b zs!VINSL8an");
      UnaryOperator.identity();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("%)[ _QrUkwonjil`");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader3 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader4 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader5 = new StringReader("C0=`");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      function2.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      function4.compose((Function<? super Object, ?>) function5);
      function3.compose((Function<? super Object, ?>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      Function<Object, Integer> function8 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      UnaryOperator.identity();
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function9);
      jSTerm0.replaceAll(unaryOperator0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function.identity();
      function2.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function6);
      function5.andThen((Function<? super String, ? extends Integer>) function7);
      Function.identity();
      function4.compose((Function<? super Object, ?>) function5);
      function3.compose((Function<? super Object, ?>) function5);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function4);
      Function.identity();
      unaryOperator0.compose((Function<? super Integer, ?>) function3);
      Function<Object, Integer> function8 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function8);
      Function<Object, Integer> function10 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function9);
      Function<Object, Integer> function11 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function10);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function11);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function11);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.0854684353173742
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("W>ZW/A$PV$8o5mc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader1 = new StringReader("%)[ _QrUkwonjil`");
      StringReader stringReader2 = new StringReader("W>ZW/A$PV$8o5mc");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader3 = new StringReader("`P%u(:8|c)clOP>>");
      StringReader stringReader4 = new StringReader(")m*D");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      StringReader stringReader5 = new StringReader(")m*D");
      streamTokenizer0.quoteChar(37);
      streamTokenizer0.eolIsSignificant(true);
      stringReader0.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader5);
      jSTerm0.parseList(streamTokenizer2);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<JSTerm> predicate2 = predicate0.or(predicate1);
      Predicate<JSTerm> predicate3 = predicate2.negate();
      Predicate<JSTerm> predicate4 = predicate3.and(predicate3);
      jSTerm0.removeIf(predicate4);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isEval();
      Object object0 = new Object();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      assertTrue(jSSubstitution3.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
