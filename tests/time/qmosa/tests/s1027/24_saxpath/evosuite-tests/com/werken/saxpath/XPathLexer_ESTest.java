/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:12:31 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.162842998752378
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.number();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      xPathLexer1.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.setPreviousToken((Token) null);
      XPathLexer xPathLexer4 = new XPathLexer("g6K=x|[-");
      xPathLexer4.not();
      xPathLexer2.number();
      xPathLexer4.dots();
      xPathLexer0.getXPath();
      xPathLexer4.operatorName();
      xPathLexer3.consume((-1755));
      XPathLexer xPathLexer5 = new XPathLexer(")M1wH9m/");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer4.plus();
      XPathLexer xPathLexer6 = new XPathLexer("Wo");
      xPathLexer6.setXPath("Wo");
      xPathLexer3.consume();
      assertFalse(xPathLexer3.equals((Object)xPathLexer4));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9366248779004525
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("V3uda", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("]", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("Um", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token4);
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("s", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      xPathLexer2.star();
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer2.currentPosition();
      Token token8 = xPathLexer0.dots();
      assertEquals("Q", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("6$V3uda]UmsQ)C]M");
      xPathLexer1.getPreviousToken();
      xPathLexer1.consume();
      Token token9 = xPathLexer3.at();
      assertEquals("6", token9.getTokenText());
      
      xPathLexer2.or();
      Token token10 = xPathLexer3.notEquals();
      assertEquals(22, token10.getTokenType());
      assertEquals("$V", token10.getTokenText());
      
      Token token11 = xPathLexer1.identifier();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals(2, token12.getTokenType());
      assertEquals(")", token12.getTokenText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.006917174873786
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.dollar();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.LA(0);
      xPathLexer0.comma();
      xPathLexer0.div();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-522));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.02737952663686
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      Token token1 = xPathLexer0.number();
      xPathLexer1.literal();
      xPathLexer2.identifier();
      xPathLexer0.operatorName();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.nextToken();
      xPathLexer2.setXPath(") (");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer1.consume();
      assertFalse(xPathLexer1.equals((Object)xPathLexer2));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9741452429485127
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer1.notEquals();
      assertEquals("co", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer2.nextToken();
      Token token2 = xPathLexer2.slashes();
      assertEquals("c", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer2.doubleColon();
      assertEquals("3S", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.or();
      Token token4 = xPathLexer3.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer2.leftBracket();
      assertEquals("W", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      xPathLexer3.mod();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token6 = xPathLexer4.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer5.relationalOperator();
      xPathLexer5.operatorName();
      Token token7 = xPathLexer5.star();
      assertEquals("-", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      xPathLexer3.leftParen();
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      assertEquals("m", token8.getTokenText());
      
      xPathLexer5.setXPath("-c3SWw(k+Vh],");
      Token token9 = xPathLexer4.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals(".werken.saxpath.XPathLexer", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer5.minus();
      assertEquals("-", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9418966171711163
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.not();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("=uH0\"TWasY?dqH$+5\"");
      xPathLexer1.at();
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("$", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals("u", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer1.not();
      assertEquals("H", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.star();
      assertEquals("V", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("3", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("=uH0\"TWasY?dqH$+5\"");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer2.identifierOrOperatorName();
      assertNotNull(token9);
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals("=u", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("H", token12.getTokenText());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.238405810813686
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("$V", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("3", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("u", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals("da", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token8);
      Token token9 = xPathLexer0.number();
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      xPathLexer2.identifier();
      xPathLexer0.operatorName();
      xPathLexer1.setPreviousToken(token9);
      assertEquals(30, token9.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer2.setXPath(") (");
      Token token11 = xPathLexer2.pipe();
      assertEquals(")", token11.getTokenText());
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer2.identifierOrOperatorName();
      assertEquals("", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.731567908552469
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer1.nextToken();
      xPathLexer2.slashes();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.minus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.not();
      xPathLexer2.nextToken();
      xPathLexer1.plus();
      xPathLexer3.dollar();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token0 = xPathLexer7.and();
      assertNull(token0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.927051974875216
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.not();
      assertEquals("m", token2.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.at();
      assertEquals("r", token3.getTokenText());
      
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("en.saxpath.XPathLexer", token4.getTokenText());
      
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer1.mod();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("HRc2=J7|ktM0d$yZ8(");
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer1.operatorName();
      Token token7 = xPathLexer2.star();
      assertEquals("H", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      xPathLexer3.leftParen();
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer2.setXPath("^I^.a<");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer2.identifierOrOperatorName();
      assertEquals("", token10.getTokenText());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2812943677077673
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      Token token0 = xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-3955));
      XPathLexer xPathLexer1 = new XPathLexer("k9ct8EUG5");
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.0775448694492624
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("n", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("`", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.star();
      assertEquals("J", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("7", token6.getTokenText());
      
      xPathLexer0.setXPath("");
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.826927732637131
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("&", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("(", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals(3, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.dollar();
      assertEquals("_", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightBracket();
      String string0 = token4.toString();
      assertEquals("[ (4) ()", string0);
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token4);
      char char0 = xPathLexer0.LA(0);
      assertEquals('d', char0);
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      assertEquals(".", token6.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals(".", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      Token token8 = xPathLexer0.notEquals();
      assertEquals("zq", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals("", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.nextToken();
      assertEquals((-1), token10.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.001877078841872
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.and();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.nextToken();
      xPathLexer1.leftBracket();
      xPathLexer1.mod();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer2.operatorName();
      xPathLexer1.star();
      xPathLexer0.consume((-3325));
      XPathLexer xPathLexer3 = new XPathLexer(" 4");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.plus();
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer3.consume();
      assertFalse(xPathLexer3.equals((Object)xPathLexer1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0228424965503917
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.setXPath(";N~z&fk($/.[*Ki0");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer1.pipe();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.setPreviousToken((Token) null);
      xPathLexer2.not();
      xPathLexer1.number();
      xPathLexer2.dots();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-3955));
      XPathLexer xPathLexer4 = new XPathLexer("-");
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6178434822702248
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("3SWw", token2.getTokenText());
      assertNotNull(token2);
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("k", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("V", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token6 = xPathLexer0.at();
      assertEquals(",", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer1.or();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer1.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0521148774311135
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("");
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9633875764279884
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("3SWw", token1.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("co", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("-c3SWw(k+Vh],");
      Token token3 = xPathLexer2.nextToken();
      assertEquals("-", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer2.slashes();
      assertEquals("c", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer2.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("3S", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.operatorName();
      Token token6 = xPathLexer6.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token7 = xPathLexer0.star();
      assertEquals("V", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      xPathLexer3.leftParen();
      Token token8 = xPathLexer5.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer6.setXPath("cv{I_");
      Token token9 = xPathLexer8.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer5.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1971923535355207
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.not();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("6$", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("]", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("=uH0\"TWasY?dqH$+5\"");
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("m", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      xPathLexer2.setXPath("");
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer3.identifierOrOperatorName();
      Token token9 = xPathLexer2.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.999714652744598
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer1.rightBracket();
      xPathLexer1.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      Token token1 = xPathLexer0.dots();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.getXPath();
      xPathLexer1.consume(53);
      xPathLexer2.identifier();
      Token token2 = xPathLexer1.nextToken();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9395877325882
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.whitespace();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer1.identifier();
      xPathLexer2.dots();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.938101437114052
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals("k", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightBracket();
      String string0 = token3.toString();
      assertEquals("[ (4) (u)", string0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token3);
      char char0 = xPathLexer0.LA(0);
      assertEquals('', char0);
      
      xPathLexer0.getXPath();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("d", token5.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(".A", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      assertEquals(".zq", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(21, token8.getTokenType());
      assertEquals("=", token8.getTokenText());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("Y", token10.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5069690524165842
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("k", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.at();
      assertEquals("V", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("h]", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(32, token7.getTokenType());
      assertEquals(",", token7.getTokenText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5087689142045158
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.setXPath("1");
      Token token2 = xPathLexer0.number();
      assertEquals("1", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.identifier();
      Token token3 = xPathLexer0.identifier();
      assertEquals("", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9504628944523714
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("c", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.at();
      assertEquals("V", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("h", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.identifier();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6799394847745615
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightBracket();
      String string0 = token3.toString();
      assertEquals("[ (4) (u)", string0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.LA(0);
      xPathLexer0.getXPath();
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer1.div();
      Token token6 = xPathLexer0.dots();
      assertEquals(14, token6.getTokenType());
      assertEquals("A.", token6.getTokenText());
      
      xPathLexer1.leftBracket();
      xPathLexer1.or();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.setXPath("bu3");
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('S');
      Token token8 = xPathLexer0.leftBracket();
      assertEquals("b", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      boolean boolean1 = xPathLexer0.hasMoreChars();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.438182571269074
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("4<`n^u9!h%GJ}}k:m?");
      Token token0 = xPathLexer1.star();
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer1.leftBracket();
      assertEquals("<", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer1.currentPosition();
      Token token4 = xPathLexer1.dots();
      assertEquals("`", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.and();
      int int0 = xPathLexer1.endPosition();
      assertEquals(18, int0);
      
      Token token5 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("n", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.leftParen();
      assertEquals(1, token8.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.064836214980367
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.currentPosition();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("yU[lPT_@D\"jx]bQwB");
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8269369688243433
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightBracket();
      String string0 = token3.toString();
      assertEquals("[ (4) (u)", string0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      char char0 = xPathLexer0.LA(0);
      assertEquals('', char0);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("d", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("A", token6.getTokenText());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.at();
      assertEquals(".", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals("z", token8.getTokenText());
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.consume(100);
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      xPathLexer0.plus();
      xPathLexer0.consume();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9297169681851232
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.star();
      assertEquals("k", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.not();
      assertEquals(",", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.relationalOperator();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("*9IZAM/>?a<q");
      Token token5 = xPathLexer2.at();
      assertEquals("*", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer("*9IZAM/>?a<q");
      Token token6 = xPathLexer3.notEquals();
      assertEquals("*9", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.identifier();
      Token token7 = xPathLexer2.nextToken();
      assertEquals("9", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7602406057198183
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.currentPosition();
      xPathLexer0.consume((-2229));
      xPathLexer0.isIdentifierStartChar('}');
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9572965296305156
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.notEquals();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(22, token1.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.dots();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      int int0 = xPathLexer1.currentPosition();
      assertEquals(0, int0);
      
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.and();
      xPathLexer1.endPosition();
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer1.getPreviousToken();
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer2.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.leftParen();
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9882125313038461
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("4", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("g", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("B", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("E", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-F hg]O%!%%y'}");
      Token token6 = xPathLexer1.minus();
      assertEquals("", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("CnsiGn6_-QXn_+E+");
      xPathLexer1.or();
      Token token8 = xPathLexer2.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer4.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer3.nextToken();
      assertEquals((-1), token10.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9146376272321222
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.setXPath(";N~z&fk($/.[*Ki0");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer(";N~z&fk($/.[*Ki0");
      xPathLexer1.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer1.at();
      xPathLexer1.setXPath("");
      xPathLexer1.pipe();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2121650602775007
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6295473175023303
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.setXPath("]:mr/g\"Rt");
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.isIdentifierChar('#');
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token8);
      assertEquals(2, token8.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7466790414616877
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.consume((-798));
      xPathLexer0.consume(118);
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.currentPosition();
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.838332233350314
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.literal();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.950114608371609
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      xPathLexer0.dots();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.938726760077971
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.not();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.endPosition();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.number();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.slashes();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer0.pipe();
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
      
      xPathLexer0.div();
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      
      Token token14 = xPathLexer0.slashes();
      assertEquals(11, token14.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token15 = xPathLexer0.number();
      assertEquals(30, token15.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.735477886208832
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.mod();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token1 = xPathLexer0.notEquals();
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.getXPath();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      char char0 = xPathLexer0.LA(21);
      assertEquals('\uFFFF', char0);
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
      
      xPathLexer0.notEquals();
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0308813328543254
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.notEquals();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.consume(3);
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      xPathLexer0.consume();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.identifier();
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4828840681018747
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.consume(12);
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.mod();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.698962702933681
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("1");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.at();
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer1.or();
      Token token3 = xPathLexer2.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7087576198230314
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      xPathLexer0.consume(0);
      xPathLexer0.minus();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.leftParen();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.literal();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.dollar();
      xPathLexer0.consume(2256);
      xPathLexer0.literal();
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.currentPosition();
      xPathLexer0.minus();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.74723108709746
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1813581687064856
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")");
      xPathLexer0.leftParen();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.874306430348744
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("W", token3.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("(k", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(5, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("@]7w<~&A");
      xPathLexer2.or();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals("V", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      xPathLexer1.plus();
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals("h", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("-c3SWw(k+Vh],");
      Token token10 = xPathLexer3.notEquals();
      assertEquals("-c", token10.getTokenText());
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1169669460772225
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.number();
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("yU[lPT_@D\"jx]bQwB");
      Token token11 = xPathLexer0.equals();
      assertEquals("y", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals("U[", token12.getTokenText());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      
      xPathLexer0.mod();
      Token token14 = xPathLexer0.slashes();
      assertEquals("T", token14.getTokenText());
      
      xPathLexer0.or();
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
      assertEquals("_", token15.getTokenText());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('!');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0935259727646365
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.notEquals();
      xPathLexer2.identifier();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer1.dollar();
      assertFalse(token2.equals((Object)token0));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0164521815631153
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3928));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9611695468203147
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer2.nextToken();
      xPathLexer2.slashes();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer1.dots();
      xPathLexer3.getXPath();
      xPathLexer5.consume((-3955));
      xPathLexer0.identifierOrOperatorName();
      xPathLexer4.plus();
      XPathLexer xPathLexer6 = new XPathLexer(" 4");
      xPathLexer2.consume();
      assertFalse(xPathLexer2.equals((Object)xPathLexer3));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3337932053404358
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("d", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals("B", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.number();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3665530571105595
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("&(k_ud.A.zq=YFi(");
      Token token0 = xPathLexer1.nextToken();
      assertEquals("&(k_ud.A.zq=YFi(", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer1.or();
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("&(", token2.getTokenText());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("k_ud.A.zq", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("(", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9604081708045142
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      Token token0 = xPathLexer0.plus();
      assertEquals("`", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("d", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("d", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("B", token3.getTokenText());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.or();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.mod();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.leftParen();
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.or();
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
      
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8726358986783274
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('g');
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("9k6p~aLy?");
      xPathLexer1.plus();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer1.notEquals();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.441195401861501
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      Token token0 = xPathLexer0.plus();
      assertEquals("`", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("d", token1.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("B", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.minus();
      assertEquals("x", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("`ddBBx");
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('2');
      xPathLexer0.identifier();
      Token token6 = xPathLexer1.at();
      assertEquals("`", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer1.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      boolean boolean1 = xPathLexer1.isIdentifierChar('2');
      assertFalse(boolean1 == boolean0);
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.setXPath("`ddBBx");
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("`d", token9.getTokenText());
      
      Token token10 = xPathLexer1.rightParen();
      assertEquals(2, token10.getTokenType());
      assertEquals("d", token10.getTokenText());
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      XPathLexer xPathLexer2 = new XPathLexer("Zrt z_Eub8rE[nFE*");
      xPathLexer2.setPreviousToken(token4);
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.div();
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.050135907568589
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.dollar();
      assertEquals("w", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.hasMoreChars();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("4", token1.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("B", token2.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.at();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("[", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(16, token5.getTokenType());
      assertEquals("@", token5.getTokenText());
      
      char char0 = xPathLexer1.LA(21);
      assertEquals('\uFFFF', char0);
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar(':');
      assertFalse(boolean0);
      
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals("n`", token8.getTokenText());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.960592698684506
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      xPathLexer0.plus();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("d", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("B", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.leftBracket();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer1.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer0.equals();
      char char0 = xPathLexer0.LA(21);
      assertEquals('\uFFFF', char0);
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('\uFFFF');
      assertFalse(boolean0);
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      xPathLexer1.notEquals();
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6914476774294624
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.div();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8043250021351929
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.not();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-3955));
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.4944949240749117
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9777010528528403
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("w", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("gB", token2.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.or();
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer2.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("E", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.7873690788471501
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.at();
      assertEquals("(", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("k", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.leftParen();
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("V", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals("h", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-F hg]O%!%%y'}");
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.at();
      assertEquals(16, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("E5JY");
      xPathLexer5.or();
      Token token9 = xPathLexer5.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("E5", token9.getTokenText());
      
      xPathLexer4.identifier();
      Token token10 = xPathLexer0.nextToken();
      assertEquals("]", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9600756422865795
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("d", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("d", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("B", token3.getTokenText());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer0.identifier();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.674081563915184
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.7964541000247065
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("cqrc`U u^;WK}!X");
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.slashes();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.6296911815698865
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.or();
      xPathLexer1.not();
      xPathLexer1.slashes();
      xPathLexer2.plus();
      xPathLexer0.dollar();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }
}
