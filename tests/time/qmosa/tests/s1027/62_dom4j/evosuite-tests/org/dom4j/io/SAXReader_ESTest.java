/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:27:33 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.353110605213824
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.notationDecl(" [DocumentType: ", "^+", "4WVg");
      xMLFilterImpl1.unparsedEntityDecl(" Nof document ", ">nYE'&", "", "5");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locatorImpl1.setColumnNumber(1824);
      SAXParseException sAXParseException0 = new SAXParseException("C(oA2<6", locatorImpl1);
      StringReader stringReader0 = new StringReader("C(oA2<6");
      stringReader0.skip((-149L));
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      try { 
        sAXReader1.read((Reader) stringReader0, " Nof document ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.494366543619266
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      sAXReader0.removeHandler((String) null);
      MockURL.getHttpExample();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/features/use-locator2", locatorImpl0);
      MockException mockException0 = new MockException(sAXParseException0);
      MockException mockException1 = new MockException((String) null);
      SAXParseException sAXParseException1 = new SAXParseException("[UN9qy|7hZ30%", "http://xml.org/sax/features/use-locator2", (String) null, 310, 92, mockException1);
      sAXReader0.getDocumentFactory();
      StringReader stringReader0 = new StringReader("Gz{S*cnu[g");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.notationDecl(" [DocumentType: ", "^+", "4WVg");
      xMLFilterImpl1.unparsedEntityDecl(" Nof document ", ">nYE'&", "", "5");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.dom4j.bean.BeanDocumentFactory");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("C(oA2<6", locatorImpl1);
      StringReader stringReader0 = new StringReader("C(oA2<6");
      stringReader0.skip((-149L));
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("http://xml.org/sax/properties/declaration-handler", "Attribute is already in use", "file://", "");
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.getDocumentFactory();
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/Validation not supported for XMLReader: 0http:/xml.org/sax/handlers/LexicalHandler");
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      Namespace namespace0 = new Namespace("//home/ubuntu/termite/projects/62_dom4j/:E|?H7}3aw@0:E|?H7}3aw@", "//home/ubuntu/termite/projects/62_dom4j/:E|?H7}3aw@0:E|?H7}3aw@");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createQName("/pZ|#@/", namespace0);
      DOMDocument dOMDocument0 = new DOMDocument();
      dOMDocument0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler((XMLReader) null);
      String string0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.560876281103376
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader0.read((InputStream) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      String string0 = "org.dom4j.VisitorSuppoht";
      MockFile mockFile0 = new MockFile("J'{{r>si;iG![|N");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setWritable(true);
      MockFile mockFile2 = new MockFile("");
      File file0 = MockFile.createTempFile("org.jaxen.saxpath.XPathReader", "zNWYV-WId$ipH!;Au");
      MockFile mockFile3 = new MockFile(file0, "J'{{r>si;iG![|N");
      try { 
        sAXReader0.read((File) mockFile3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3895530195104047
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("R ");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createCDATA("R ");
      defaultDocumentFactory0.getQNames();
      defaultDocumentFactory0.createProcessingInstruction("B", "B");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      xMLFilterImpl1.endPrefixMapping("R ");
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.createDefaultEntityResolver("R ");
      try { 
        sAXReader1.read("B");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/B (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/B (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.468114758861102
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.endDocument();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      xMLFilterImpl0.getParent();
      try { 
        sAXReader0.read((InputStream) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile.createTempFile("org.dom4j.VisitorSuppoht", "org.dom4j.VisitorSuppoht", (File) mockFile1);
      Namespace namespace0 = new Namespace("", "");
      QName qName0 = new QName("", namespace0);
      sAXReader0.removeHandler("g]G[,\"6`");
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("D4");
      MockFile mockFile0 = new MockFile("D4");
      StringReader stringReader0 = new StringReader("D4");
      stringReader0.mark(4438);
      StringReader stringReader1 = new StringReader("D4");
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLReader0, defaultHandler2_0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4897182683864876
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "kh,#O";
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, 12);
      pruningElementStack0.getDispatchHandler();
      InputSource inputSource0 = new InputSource("");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3536274010794567
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.setSystemId((String) null);
      locatorImpl0.getSystemId();
      SAXParseException sAXParseException0 = new SAXParseException("3J/?8", locatorImpl0);
      xMLFilterImpl0.warning(sAXParseException0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      String string0 = "file://";
      sAXReader0.removeHandler("file://");
      sAXReader0.getEncoding();
      ElementStack elementStack0 = new ElementStack(62);
      xMLFilterImpl0.setDocumentLocator(locatorImpl0);
      Element[] elementArray0 = new Element[0];
      elementStack0.stack = elementArray0;
      elementStack0.getDispatchHandler();
      InputSource inputSource0 = new InputSource("V[~T3v>1z968DWt+h7-");
      sAXReader0.isIncludeExternalDTDDeclarations();
      inputSource0.setEncoding("m tgM%7%U$:nDJ[h|");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@41444c2f Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@41444c2f Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      MockFile mockFile0 = new MockFile("42$C");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile.createTempFile("\"+7:=gmYph#a$", "42$C", (File) mockFile1);
      sAXReader0.getXMLReader();
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.removeHandler("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport0/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport");
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      defaultDocumentFactory0.createQName("//home/ubuntu/termite/projects/62_domj/a~dVJg\nB2s?!>/org.domj.tree.FlweightEntity0org.dom4j.util.NonLazyElement", "(dtg},\"p$:[", "");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.getHandler("(dtg},\"p$:[");
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.removeHandler("/");
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName("1.G|R~ECVHvc)jplr", "1.G|R~ECVHvc)jplr", "/");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/";
      stringArray0[1] = "1.G|R~ECVHvc)jplr";
      stringArray0[2] = "1.G|R~ECVHvc)jplr";
      stringArray0[3] = "1.G|R~ECVHvc)jplr";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.addHandler("1.G|R~ECVHvc)jplr", (ElementHandler) null);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      documentFactory0.createQName((String) null, (String) null, "file://");
      sAXReader0.setDefaultHandler((ElementHandler) null);
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader0.isMergeAdjacentText();
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      SAXReader sAXReader2 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader2.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.createXMLReader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.2407560846182575
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Expected one of '.', '..', '@', '*', <QName>");
      sAXReader_SAXEntityResolver0.resolveEntity("Expected one of '.', '..', '@', '*', <QName>", "Expected one of '.', '..', '@', '*', <QName>");
      sAXReader_SAXEntityResolver0.resolveEntity("Expected one of '.', '..', '@', '*', <QName>", "Validation not supported for XMLReader: ");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.392762460308578
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.isStringInternEnabled();
      sAXReader0.setIgnoreComments(false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "}wWTOO5;xa}$#");
      sAXReader0.isIgnoreComments();
      String string0 = "K:0%RH";
      StringReader stringReader0 = new StringReader("K:0%RH");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "";
      InputSource inputSource0 = new InputSource("");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap");
      sAXReader_SAXEntityResolver0.resolveEntity("EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap", "#W?1H 30MTg/m>)l");
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setValidation(true);
      sAXReader0.isStripWhitespaceText();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.getEntityResolver();
      sAXReader0.getXMLFilter();
      sAXReader0.isIncludeExternalDTDDeclarations();
      MockFile mockFile0 = new MockFile("n`");
      mockFile0.setExecutable(true, false);
      mockFile0.setExecutable(false);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("g.'rpU[vN6WJ{_");
      stringReader0.close();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setMergeAdjacentText(false);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 1730);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      String string0 = "";
      sAXReader0.removeHandler("");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      Namespace namespace0 = new Namespace("ProcessingInstruction", "ProcessingInstruction");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      defaultDocumentFactory1.createQName("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/D9%?xUF9Vm~nlm8/x:+)r'exr0/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport", namespace0);
      sAXReader0.removeHandler("");
      try { 
        sAXReader0.setXMLReaderClassName("ProcessingInstruction");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ProcessingInstruction not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      String string0 = " [DocumentType: ";
      xMLFilterImpl1.notationDecl("+", " [DocumentType: ", "4WVg");
      xMLFilterImpl0.unparsedEntityDecl(" of document ", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/Validation not supported for XMLReader: 0http:/xml.org/sax/handlers/LexicalHandler", " PUBLIC \"", "http://xml.org/sax/features/namespaces");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      sAXReader0.setErrorHandler(defaultHandler2_0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9248862457686378
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      MockFile mockFile0 = new MockFile("");
      sAXReader0.resetHandlers();
      String string0 = null;
      DefaultDocument defaultDocument0 = new DefaultDocument((String) null);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.getErrorHandler();
      sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler((ErrorHandler) null);
      MockThrowable mockThrowable0 = new MockThrowable("");
      MockException mockException0 = new MockException(mockThrowable0);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, "//tmp/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport0.tmp", "d%/$8oWZ", 30, 7, mockException0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("R ");
      sAXReader_SAXEntityResolver0.resolveEntity("R ", "R ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      defaultHandler2_0.resolveEntity("NWL2*}?oEHp", "}'R;LJ", "R ", "");
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.removeHandler((String) null);
      MockURL.getHttpExample();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException("http://xml.org/sax/features/use-locator2", locatorImpl0);
      MockException mockException0 = new MockException(sAXParseException0);
      MockException mockException1 = new MockException((String) null);
      SAXParseException sAXParseException1 = new SAXParseException("[UN9qy|7hZ30%", "http://xml.org/sax/features/use-locator2", (String) null, 310, 92, mockException1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport0.tmp1#=", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport0.tmp1#=' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createCDATA("5wxQ82<4XP`F!,&A]");
      defaultDocumentFactory0.createProcessingInstruction("}", "}");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.setStripWhitespaceText(false);
      defaultDocumentFactory0.createCDATA("");
      String string0 = " of document ";
      sAXReader0.removeHandler(" of document ");
      try { 
        sAXReader0.setProperty("jgBCRt`s|6g", "jgBCRt`s|6g");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'jgBCRt`s|6g' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile.createTempFile("org.dom4j.VisitorSuppoht", "org.dom4j.VisitorSuppoht", (File) mockFile1);
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.getErrorHandler();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockThrowable mockThrowable0 = new MockThrowable((String) null);
      MockException mockException0 = new MockException(mockThrowable0);
      mockException0.getMessage();
      SAXParseException sAXParseException0 = new SAXParseException("org.dom4j.VisitorSuppoht", (String) null, "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/D9%?xUF9Vm~nlm8/x:+)r'exr0/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport", 92, 7, mockException0);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, sAXParseException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "*wg2t");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("*wg2t");
      sAXReader_SAXEntityResolver0.resolveEntity("*wg2t", "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.isValidating();
      sAXReader0.getXMLFilter();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 13, 13);
      try { 
        sAXReader0.setProperty("t1m=JDj", byteArrayInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 't1m=JDj' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.getXMLFilter();
      int int0 = 0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "quot";
      stringArray0[2] = "OX";
      stringArray0[3] = "quot";
      stringArray0[4] = "quot";
      stringArray0[5] = "OX";
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0, (-1127));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.45111416832257
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("org.dom4j.VisitorSuppoht", "org.dom4j.VisitorSuppoht", (File) mockFile1);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3594545031847076
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("&JqsMci}_;7hh\"&Xd");
      stringReader0.close();
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/a~dVJg\nB2s?!>/org.dom4j.tree.FlyweightEntity0org.dom4j.util.NonLazyElement");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//home/ubuntu/termite/projects/62_dom4j/a~dVJg\nB2s?!>/org.dom4j.tree.FlyweightEntity0org.dom4j.util.NonLazyElement");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.getEncoding();
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport";
      Namespace namespace0 = Namespace.get("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/Validation not supported for XMLReader: 0http:/xml.org/sax/handlers/LexicalHandler");
      defaultDocumentFactory0.createQName("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport", namespace0);
      sAXReader0.removeHandler("YfJK X&|`;N~z&fk($/");
      sAXReader0.getErrorHandler();
      ErrorHandler errorHandler0 = null;
      try { 
        sAXReader0.setXMLReaderClassName("_]92Yh,]w");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class _]92Yh,]w not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.402059343699743
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/a~dVJg\nB2s?!>/org.dom4j.tree.FlyweightEntity0org.dom4j.util.NonLazyElement");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//home/ubuntu/termite/projects/62_dom4j/a~dVJg\nB2s?!>/org.dom4j.tree.FlyweightEntity0org.dom4j.util.NonLazyElement");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      sAXReader0.isMergeAdjacentText();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      ElementStack elementStack0 = new ElementStack();
      MockFile mockFile0 = new MockFile("N~");
      MockFile.createTempFile("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSuppoht0org.dom4j.VisitorSuppoht", "L5.&gs65<OGqFF(", (File) mockFile0);
      File file0 = MockFile.createTempFile("//tmp/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport0.tmp", "#=");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"//HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/A~DVJG
         // B2S?!>/ORG.DOM4J.TREE.FLYWEIGHTENTITY0ORG.DOM4J.UTIL.NONLAZYELEMENT\". Nested exception: Invalid encoding name \"//HOME/UBUNTU/TERMITE/PROJECTS/62_DOM4J/A~DVJG
         // B2S?!>/ORG.DOM4J.TREE.FLYWEIGHTENTITY0ORG.DOM4J.UTIL.NONLAZYELEMENT\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8222426725455083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity("http://xml.org/sax/properties/declaration-handler", "Attribute is already in use", "file://", "");
      SAXReader sAXReader1 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader1.setProperty("http://xml.org/sax/properties/declaration-handler", defaultHandler2_0);
      sAXReader1.setDocumentFactory(documentFactory0);
      sAXReader0.removeHandler("Ol.h3.k41594");
      sAXReader1.createContentHandler(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      sAXReader1.configureReader(xMLFilterImpl0, defaultHandler2_0);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3720491019563554
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.notationDecl("+", " [DocumentType: ", "4WVg");
      MockFile mockFile0 = new MockFile(";mR$9nY<xJ", " [DocumentType: ");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      xMLFilterImpl0.notationDecl(" [DocumentType: ", "n\"NoX=z=u0tDUf", "4WVg");
      xMLFilterImpl1.unparsedEntityDecl("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/D9%?xUF9Vm~nlm8/x:+)r'exr0/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport", "nZ0n>wKA->Mx", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/Validation not supported for XMLReader: 0http:/xml.org/sax/handlers/LexicalHandler", ";mR$9nY<xJ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.resolveEntity(",kf", "//tmp/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport0.tmp", "Unhandled operator in createMultiplicativeExpr(): ", "Kf)*ilj#");
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_1);
      sAXReader1.setIgnoreComments(false);
      try { 
        sAXReader1.setFeature("Z-`wMZ1>v~!5+dMV%0", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Z-`wMZ1>v~!5+dMV%0' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.notationDecl("+", " [DocumentType: ", "4WVg");
      xMLFilterImpl0.setContentHandler(xMLFilterImpl1);
      xMLFilterImpl0.unparsedEntityDecl(" of document ", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/Validation not supported for XMLReader: 0http:/xml.org/sax/handlers/LexicalHandler", " PUBLIC \"", "http://xml.org/sax/features/namespaces");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.setLineNumber((-1606));
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      SAXParseException sAXParseException0 = new SAXParseException("", locatorImpl1);
      StringReader stringReader0 = new StringReader("");
      long long0 = (-149L);
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("g.'rpU[vN6WJ{_");
      StringReader stringReader1 = new StringReader("g.'rpU[vN6WJ{_");
      stringReader1.close();
      try { 
        sAXReader0.read((Reader) stringReader0, "_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/_ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
          String string0 = "4WVg";
          xMLFilterImpl1.notationDecl("+", " [DocumentType: ", "4WVg");
          MockFile mockFile0 = new MockFile(";mR$9nY<xJ", " [DocumentType: ");
          MockFile mockFile1 = new MockFile(mockFile0, " of document ");
          URL uRL0 = MockURL.getHttpExample();
          String string1 = null;
          SAXReader sAXReader1 = new SAXReader((String) null);
          try { 
            sAXReader1.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor143.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor143.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.notationDecl("+", " [DocumentType: ", "4WVg");
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl0);
      String string0 = "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport0.tmp1#=";
      xMLFilterImpl2.unparsedEntityDecl(" PUBLIC \"", "//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport0.tmp1#=", " PUBLIC \"", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/Validation not supported for XMLReader: 0http:/xml.org/sax/handlers/LexicalHandler");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      String string1 = "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/Validation not supported for XMLReader: 0http:/xml.org/sax/handlers/LexicalHandler";
      SAXParseException sAXParseException0 = new SAXParseException("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport/Validation not supported for XMLReader: 0http:/xml.org/sax/handlers/LexicalHandler", locatorImpl0);
      defaultHandler2_0.warning(sAXParseException0);
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.resolveEntity(" [DocumentType: ", (String) null, "org.dom4j.tree.DefaultCDATA", " [DocumentType: ");
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1, true);
      XMLFilterImpl xMLFilterImpl4 = new XMLFilterImpl();
      try { 
        sAXReader1.configureReader(xMLFilterImpl4, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@30af9a1d Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.679983198025875
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getErrorHandler();
      sAXReader0.removeHandler("");
      MockFile mockFile0 = new MockFile("");
      String string0 = "";
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile.createTempFile("org.dom4j.VisitorSuppoht", "org.dom4j.VisitorSuppoht", (File) mockFile1);
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      sAXReader0.getXMLReader();
      sAXReader0.getErrorHandler();
      sAXReader0.isStripWhitespaceText();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader1.setFeature("", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.isIncludeInternalDTDDeclarations();
      String string0 = "3Ln>bZ7f;%";
      try { 
        sAXReader0.setFeature("3Ln>bZ7f;%", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '3Ln>bZ7f;%' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "http://xml.org/sax/features/use-locator2";
      DOMDocument dOMDocument0 = new DOMDocument("http://xml.org/sax/features/use-locator2");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.notationDecl("+", " [DocumentType: ", "4WVg");
      MockFile mockFile0 = new MockFile(";mR$9nY<xJ", " [DocumentType: ");
      MockFile mockFile1 = new MockFile(mockFile0, " of document ");
      mockFile1.setWritable(false);
      MockFile.createTempFile("K.Ft1fYgzxe6b", (String) null, (File) mockFile0);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createQName("\" ", "//home/ubuntu/termite/projects/62_dom4j/a~dVJg\nB2s?!>/org.dom4j.tree.FlyweightEntity0org.dom4j.util.NonLazyElement", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.getHandler("//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport");
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.isStringInternEnabled();
      StringReader stringReader0 = new StringReader("K:0%RH");
      sAXReader0.addHandler("Invalid node type. Cannot add node: ", (ElementHandler) null);
      sAXReader0.isStringInternEnabled();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.startDocument();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.removeHandler("Invalid node type. Cannot add node: ");
      sAXReader0.createContentHandler(xMLFilterImpl0);
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "5wxQ82<4XP`F!,&A]";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("5wxQ82<4XP`F!,&A]");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class 5wxQ82<4XP`F!,&A] not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "5wxQ82<4XP`F!,&A]";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("5wxQ82<4XP`F!,&A]", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class 5wxQ82<4XP`F!,&A] not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
