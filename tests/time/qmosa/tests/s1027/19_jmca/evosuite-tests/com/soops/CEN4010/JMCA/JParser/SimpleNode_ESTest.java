/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:48:59 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2453029452149065
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)98;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte) (-120);
      byteArray0[7] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(35);
      SimpleNode simpleNode1 = new SimpleNode((byte) (-71));
      simpleNode0.setIdentifier("<<");
      simpleNode0.parent = (Node) simpleNode1;
      simpleNode0.jjtAddChild(simpleNode1, 35);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      StringWriter stringWriter0 = new StringWriter(35);
      simpleNode0.setIdentifier("JF");
      stringWriter0.flush();
      simpleNode0.dump("{", stringWriter0);
      JavaParser javaParser0 = new JavaParser("JF");
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 35);
      SimpleNode simpleNode3 = new SimpleNode(3331);
      // Undeclared exception!
      try { 
        simpleNode3.toString("c&n/f_h-\"qgJRVH(T/Q");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3331
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      SimpleNode simpleNode1 = new SimpleNode(10);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode1.identifiers = simpleNode0.identifiers;
      StringWriter stringWriter0 = new StringWriter(10);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      simpleNode1.identifiers = null;
      String string0 = "Z";
      // Undeclared exception!
      try { 
        simpleNode1.setIdentifier("Z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2193011580428146
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 10;
      SimpleNode simpleNode0 = new SimpleNode(10);
      String string0 = "Jk";
      simpleNode0.jjtAddChild(simpleNode0, 10);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      StringWriter stringWriter0 = new StringWriter(10);
      simpleNode0.setIdentifier("{");
      stringWriter0.flush();
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      String string1 = "\"";
      simpleNode0.dump(string1, stringWriter1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1520449397393326
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("Jk");
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 6);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("c&n/f_h-\"qgJRVH(T/Q");
      Predicate.isEqual((Object) null);
      Predicate.isEqual((Object) null);
      UnaryOperator.identity();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringWriter0.flush();
      SimpleNode simpleNode1 = new SimpleNode(15);
      simpleNode1.dump((String) null, stringWriter0);
      JavaParser javaParser0 = new JavaParser("$&-}#\u0006x\"AU#^ZZ");
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, (-3780));
      simpleNode1.jjtAddChild(simpleNode2, 6);
      simpleNode1.jjtAddChild(simpleNode2, 1541);
      SimpleNode simpleNode3 = new SimpleNode((-205));
      simpleNode1.jjtGetChild(6);
      SimpleNode simpleNode4 = new SimpleNode(1541);
      simpleNode3.jjtGetNumChildren();
      SimpleNode simpleNode5 = new SimpleNode((-2028695777));
      simpleNode1.jjtAddChild((Node) null, 0);
      assertEquals(1542, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5890216965316935
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(22);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtAddChild((Node) null, 6);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<String> predicate4 = predicate0.or(predicate3);
      predicate1.or(predicate2);
      predicate2.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      predicate4.negate();
      Predicate<String> predicate6 = predicate5.negate();
      Predicate<String> predicate7 = predicate5.and(predicate1);
      Predicate<String> predicate8 = predicate6.or(predicate7);
      Predicate<String> predicate9 = predicate8.negate();
      predicate9.and(predicate6);
      stringWriter0.append((CharSequence) "c&n/f_h-\"qgJRVH(T/Q", 6, 6);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tulW.Wf");
      StringWriter stringWriter1 = stringWriter0.append('&');
      stringWriter1.write((String) null);
      simpleNode0.dump("Z", stringWriter1);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.toString();
      simpleNode0.jjtAddChild((Node) null, 7);
      assertEquals(8, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.7860468484695322
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      SimpleNode simpleNode1 = new SimpleNode(8);
      simpleNode1.setIdentifier(">>");
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "}");
      stringWriter0.flush();
      simpleNode1.setIdentifier("}");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump("FQ[", stringWriter1);
      simpleNode1.dump("BlockStatement", stringWriter1);
      assertEquals("}<EnumDeclaration>\n  <identifier>*rshft</identifier>\n</EnumDeclaration>\n", stringWriter1.toString());
      assertEquals("}<EnumDeclaration>\n  <identifier>*rshft</identifier>\n</EnumDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(6);
      Node[] nodeArray0 = new Node[21];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      String string0 = "axKB`ddBBx^_<U<C&e#";
      // Undeclared exception!
      try { 
        simpleNode0.dump("axKB`ddBBx^_<U<C&e#", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2405224421065282
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      simpleNode0.toString("<Cf!@T");
      simpleNode0.parent = null;
      SimpleNode simpleNode1 = new SimpleNode(10);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter();
      simpleNode1.setIdentifier(";");
      char[] charArray0 = new char[8];
      charArray0[5] = '~';
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      charArray0[1] = 'w';
      simpleNode1.setIdentifier("\"@\"");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      simpleNode0.dump(";", stringWriter1);
      assertEquals("<EnumConstant>\n  <identifier>\"@\"</identifier>\n</EnumConstant>\n", stringWriter1.toString());
      
      simpleNode1.toString();
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant : ; : \"@\"", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0783934585517456
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleNode0.setIdentifier("}");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      simpleNode0.toString();
      byteArray0[0] = (byte)7;
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "}");
      Predicate<Object> predicate2 = predicate1.negate();
      Object object0 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object0);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate4.and(predicate1);
      Predicate<String> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate7.negate();
      Predicate<Object> predicate10 = predicate5.or(predicate2);
      Predicate.isEqual((Object) "EnumDeclaration : }");
      predicate0.test("<");
      predicate10.test(predicate8);
      Predicate<String> predicate11 = predicate8.and(predicate2);
      Predicate<String> predicate12 = predicate0.or(predicate11);
      predicate2.and(predicate6);
      predicate12.and(predicate9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter0 = new StringWriter((byte)7);
      simpleNode0.setIdentifier("<=");
      simpleNode0.dump("rk49/n-", stringWriter0);
      assertEquals("<EnumDeclaration>\n  <identifier>*le</identifier>\n</EnumDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.087302357535235
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter0 = new StringWriter();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "G}%QFMQ#ER7)*#:-");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "<Cf!@TEnumConstant");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<String> predicate6 = predicate0.or(predicate2);
      predicate5.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate7.and(predicate2);
      Predicate<String> predicate9 = predicate6.and(predicate3);
      Predicate<String> predicate10 = predicate0.negate();
      Predicate<String> predicate11 = predicate0.negate();
      Predicate<String> predicate12 = predicate10.and(predicate9);
      Predicate<String> predicate13 = predicate11.or(predicate5);
      Predicate.isEqual((Object) predicate13);
      predicate12.and(predicate8);
      Predicate<String> predicate14 = Predicate.isEqual((Object) simpleNode0);
      Predicate<String> predicate15 = predicate14.negate();
      predicate12.negate();
      predicate10.negate();
      predicate14.negate();
      predicate15.and(predicate2);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = new StringWriter(10);
      stringWriter1.close();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "<Cf!@TEnumConstant");
      simpleNode0.dump("B]Tbc1", stringWriter2);
      assertEquals("<Cf!@TEnumConstant<EnumConstant>\n  <identifier>*gt</identifier>\n</EnumConstant>\n", stringWriter2.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant : >", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3397771104125353
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      simpleNode0.setIdentifier("");
      StringWriter stringWriter0 = new StringWriter();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "mvG}%QFMQ#ER7)*#:-");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "<|f!@TEnmCon[tant");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate1.and(predicate4);
      Predicate<String> predicate6 = predicate0.or(predicate3);
      predicate2.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate0.and(predicate2);
      Predicate<String> predicate9 = predicate7.and(predicate1);
      Predicate<String> predicate10 = predicate9.negate();
      Predicate<String> predicate11 = predicate6.negate();
      Predicate<String> predicate12 = predicate8.and(predicate9);
      Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate13 = predicate6.or(predicate1);
      predicate12.or(predicate10);
      Predicate.isEqual((Object) predicate12);
      Predicate<String> predicate14 = predicate10.and(predicate5);
      predicate12.negate();
      predicate11.negate();
      predicate9.negate();
      predicate13.negate();
      predicate14.negate();
      predicate6.and(predicate1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter1 = new StringWriter(10);
      stringWriter0.close();
      stringWriter1.append((CharSequence) "mvG}%QFMQ#ER7)*#:-");
      simpleNode0.dump("L1pNh", stringWriter0);
      assertEquals("<EnumConstant>\n</EnumConstant>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("EnumConstant : ", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.9456645463488123
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UnaryOperator.identity();
      StringWriter stringWriter0 = new StringWriter();
      JavaParser javaParser0 = new JavaParser("}Td=$G,f]\"&e.9E[D^");
      int int0 = (-1794261505);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1794261505));
      SimpleNode simpleNode1 = new SimpleNode((-1794261505));
      simpleNode0.jjtGetNumChildren();
      simpleNode1.jjtAddChild(simpleNode1, 0);
      simpleNode0.jjtGetNumChildren();
      Node node0 = simpleNode1.jjtGetChild(0);
      // Undeclared exception!
      try { 
        simpleNode1.jjtAddChild(node0, (-1794261505));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1794261505
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-715));
      simpleNode0.id = (-715);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("EnumDeclaration");
      simpleNode0.jjtAddChild((Node) null, 6);
      simpleNode0.jjtAddChild((Node) null, 6);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetChild(1);
      assertEquals(7, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8120939218445867
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      simpleNode0.setIdentifier("}");
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)7;
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "}");
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<String> predicate4 = predicate0.or(predicate3);
      predicate1.negate();
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate4.and(predicate3);
      predicate6.negate();
      Predicate<String> predicate7 = predicate5.negate();
      predicate7.and(predicate4);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) " : ");
      stringWriter1.flush();
      simpleNode0.setIdentifier("\"@\"");
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      simpleNode0.dump(" : ", stringWriter2);
      assertEquals("<EnumDeclaration>\n  <identifier>\"@\"</identifier>\n</EnumDeclaration>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-715));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("EnumDeclaration");
      simpleNode0.jjtAddChild((Node) null, 6);
      simpleNode0.jjtAddChild((Node) null, 6);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 63);
      assertEquals(64, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4649419270564863
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      SimpleNode simpleNode1 = new SimpleNode(10);
      simpleNode1.jjtAddChild((Node) null, 10);
      ArrayList<String> arrayList0 = simpleNode1.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode1.identifiers = simpleNode0.identifiers;
      StringWriter stringWriter0 = new StringWriter(10);
      stringWriter0.flush();
      simpleNode1.dump("Z", stringWriter0);
      JavaParser javaParser0 = new JavaParser("Z");
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 4);
      SimpleNode simpleNode3 = new SimpleNode((-1794261505));
      // Undeclared exception!
      try { 
        simpleNode2.jjtGetChild((-1794261505));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      Node node0 = simpleNode0.parent;
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = null;
      nodeArray0[2] = null;
      Node[] nodeArray1 = new Node[4];
      nodeArray1[0] = null;
      nodeArray1[1] = null;
      nodeArray1[2] = (Node) simpleNode0;
      nodeArray1[3] = null;
      simpleNode0.children = nodeArray1;
      nodeArray0[3] = null;
      nodeArray0[4] = null;
      nodeArray0[5] = null;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode0.jjtAddChild((Node) null, 6);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(1589);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1589
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-715));
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      String string0 = "axKB`ddBBx^_<U<C&e#";
      // Undeclared exception!
      try { 
        simpleNode0.dump("axKB`ddBBx^_<U<C&e#", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-715));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Writer writer0 = null;
      arrayList0.add("axKB`ddBBx^_<U<C&e#");
      // Undeclared exception!
      try { 
        simpleNode0.dump(" ~{", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(34);
      Node node0 = simpleNode0.parent;
      simpleNode0.jjtSetParent((Node) null);
      simpleNode0.toString();
      simpleNode0.jjtClose();
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1434));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtSetParent((Node) null);
      StringReader stringReader0 = new StringReader("PrimaryPrefix");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      try { 
        javaParser0.SynchronizedStatement();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 1.  Encountered: PrimaryPrefix
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      simpleNode0.jjtOpen();
      simpleNode0.jjtGetParent();
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3342298951481277
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(10);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.jjtAddChild(simpleNode0, 10);
      simpleNode0.jjtAddChild(simpleNode0, 6);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-69);
      byteArray0[1] = (byte)107;
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)50;
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)77;
      byteArray0[7] = (byte) (-33);
      byteArray0[8] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleNode simpleNode1 = new SimpleNode((byte)28);
      simpleNode0.jjtAddChild(simpleNode1, 50);
      simpleNode1.jjtAddChild((Node) null, (byte)50);
      StringWriter stringWriter1 = new StringWriter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = simpleNode1.jjtGetNumChildren();
      assertEquals(51, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4118090007716961
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-715));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.jjtAddChild(simpleNode0, 6);
      simpleNode0.jjtAddChild(simpleNode0, 6);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtAddChild(simpleNode0, 6);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(7, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)96;
      byteArray0[1] = (byte) (-59);
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)27;
      byteArray0[4] = (byte) (-39);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JavaParser javaParser0 = new JavaParser("F<M>GsVA");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 34);
      Node node0 = simpleNode0.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 2769);
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2769
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-1);
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      String string0 = simpleNode0.toString();
      assertEquals("PackageDeclaration", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      String string0 = simpleNode0.toString("{");
      assertEquals("{PackageDeclaration", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-715);
      SimpleNode simpleNode0 = new SimpleNode((-715));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("EnumDeclaration");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      Node node0 = null;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-715));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -715
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null, 1);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      SimpleNode simpleNode1 = new SimpleNode((-1304));
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1304));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.441708468383044
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ExplicitConstructorInvocation");
      stringReader0.markSupported();
      JavaParser javaParser0 = new JavaParser(stringReader0);
      javaParser0.RelationalExpression();
      char[] charArray0 = new char[26];
      charArray0[0] = 't';
      charArray0[1] = '}';
      charArray0[2] = 'i';
      charArray0[3] = 'r';
      charArray0[4] = 'k';
      charArray0[5] = 'D';
      charArray0[6] = '\"';
      try { 
        stringReader0.read(charArray0, 45, (-348));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }
}
