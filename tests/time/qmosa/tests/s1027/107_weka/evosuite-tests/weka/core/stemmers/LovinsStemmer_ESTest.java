/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:12:38 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.634467627837606
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ex");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("olv");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.669677335496344
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ex");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("lovinsstemmerix");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "weka.core.stemmers.lovinsstemmer";
      stringArray0[1] = "ex";
      stringArray0[2] = "lovinsstemmerix";
      stringArray0[3] = "lovinsstemmerix";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "lovinsstemmeric";
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5608815205227304
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Ross Quinlan");
      lovinsStemmer0.stem("X5 RMRybu`NXsg-");
      lovinsStemmer0.stemString("her");
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("An article from a journal or magazine.");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "proceed";
      stringArray0[1] = "An article from a journal or magazine.";
      stringArray0[2] = "her";
      lovinsStemmer1.stemString("ros quinlan");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem("enertix");
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.66847950999588
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString(")]TK.,:B2,7Dp\"Z{5o");
      lovinsStemmer0.stemString("T@j}v[#`\"Lle6Y?");
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmeruad");
      assertEquals("wek.cor.stemmer.lovinsstemmeruas", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("T@j}v[#`\"Lle6Y?");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("}");
      String string1 = lovinsStemmer1.stemString("z]}G[/c+J<Hrb['");
      assertEquals("z]}g[/c+j<hrb['", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stem("mer");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "AE";
      stringArray0[1] = "z]}g[/c+j<hrb['";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("ability");
      assertEquals("abil", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer3.stemString("E,");
      assertEquals("e,", string4);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.63049499721283
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("doublax");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("a report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("a report publ by a school or other institut, usu number within a ser.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("f7qdex");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6811860947895336
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("Array-Dimensions of 'new String[3][4][]': ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "array-dimensions of 'new string[3][4][]': ";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[4] = "&b9-qv:^oypcet";
      stringArray1[5] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("otide");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("H !kEuP[\"[Ly07");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.stemString("&b9-qv:^oypcet");
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer2.getRevision();
      assertEquals("8034", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8531628225067334
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("s'Olq1{_PpP%");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("s'Olq1{_PpP%");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("R");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stem(")]tjJK~:+{yD");
      String string0 = lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.stemString("s'olq1{_pp%");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6499634557185092
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("&%XK");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "end";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("A book with an explicit publisher.");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("IM$(]5,Is\"<oh}8MuM");
      assertEquals("im$(]5,is\"<oh}8m", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("bQ<p~1cqv_vbkP!2Y");
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      String string4 = lovinsStemmer1.stem("im$(]5,is\"<oh}8m");
      assertEquals("im$(]5,is\"<oh}8m", string4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6777278557941424
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ental");
      lovinsStemmer0.stem("$Revision:");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.stemString("Mjh5b=:Ml1.B(k");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("Mjh5b=:Ml1.B(k");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("ISBN13");
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8446357778132103
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("%2Mlu*&0=6jBk");
      lovinsStemmer0.stemString("z]}G[/c+J<Hrb['");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("erid");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("}OGO[KaRweD1<372");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5513287835274536
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Can't add obje]t to itself!");
      assertEquals("can't ad obj]t to itself!", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("URL");
      lovinsStemmer0.stem("~xY=e5UlW5?SAj");
      lovinsStemmer1.stemString("URL");
      String string1 = lovinsStemmer1.stemString("url");
      assertEquals("url", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5713954641519599
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("`)\u0000J1zef");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer3.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      assertEquals("usu th addr of th publish or other typ of institut. for major publ hous, van leun recommen om th inform entir. for smal publish, on th other hand, you can help th reader by giv th compl addr.", string2);
      
      lovinsStemmer3.stem("vad");
      String string3 = lovinsStemmer1.stemString("vad");
      assertEquals("vas", string3);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.getTechnicalInformation();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string4 = lovinsStemmer6.stem("vas");
      assertEquals("va", string4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6896088621990162
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("h");
      String string0 = lovinsStemmer0.stemString("z]}G[/c+J<Hrb['");
      assertEquals("z]}g[/c+j<hrb['", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("z]}g[/c+j<hrb['");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%2Mlu*&0=6jBk";
      stringArray0[1] = "z]}g[/c+j<hrb['";
      stringArray0[2] = "z]}g[/c+j<hrb['";
      stringArray0[3] = "h";
      stringArray0[4] = "h";
      stringArray0[5] = "%2Mlu*&0=6jBk";
      stringArray0[6] = "h";
      stringArray0[7] = "z]}g[/c+j<hrb['";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stemString("vad");
      assertEquals("vas", string2);
      
      lovinsStemmer1.stem("%2Mlu*&0=6jBk");
      String string3 = lovinsStemmer0.stemString("elity");
      assertEquals("el", string3);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      String string4 = lovinsStemmer0.stem("B'R.9(L!{or[}< ");
      assertEquals("b'r.9(l!{or[}< ", string4);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6490483953397908
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("PROCEEDINGS");
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("lid");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("P");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka.core.stemmers.lovinsstemmer";
      stringArray0[1] = "NKLS";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "PROCEEDINGS";
      stringArray0[4] = "proceed";
      stringArray0[5] = "lid";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "lis";
      stringArray0[8] = "PROCEEDINGS";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("[mwe|@r#FV");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6310614362770328
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("pex");
      assertEquals("pic", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("@Zw3--");
      assertEquals("@zw3--", string2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7262360481957084
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Ross Quinlan");
      lovinsStemmer0.stemString("%u");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "Ie{ckPK5H+";
      stringArray0[2] = "%u";
      stringArray0[3] = "Ross Quinlan";
      stringArray0[4] = "Ross Quinlan";
      stringArray0[5] = "Ie{ckPK5H+";
      stringArray0[6] = "ros quinlan";
      stringArray0[7] = "ros quinlan";
      stringArray0[8] = "entlud";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("Ie{ckPK5H+");
      lovinsStemmer1.stem("entyz");
      lovinsStemmer0.stemString("g]qRD");
      lovinsStemmer0.stemString("%?lc%_NMOrQ6%(V");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6315841563380142
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pex");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("|T[B[E%X\b==");
      lovinsStemmer0.stem("pex");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("enertlid");
      String string1 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6975384651731713
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("m?0bht1");
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The Library of Congress Call Number. I've also seen this as lib-congress.");
      lovinsStemmer0.stem("bex");
      String string1 = lovinsStemmer0.stemString("yt");
      assertEquals("yt", string1);
      
      lovinsStemmer0.stem("/egre'`:lbj!y?%vtert");
      lovinsStemmer0.stem("/egre'`:lbj!y?%vtvad");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8034";
      stringArray0[1] = "/egre'`:lbj!y?%vtert";
      stringArray0[2] = "3'CQ-!xF3G";
      stringArray0[3] = "/egre'`:lbj!y?%vtert";
      stringArray0[4] = "3'CQ-!xF3G";
      stringArray0[5] = "yt";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.stemString("q'+2|3o^(RFtH");
      assertEquals("q'+2|3o^(rfth", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer0.stemString("The Library of Congress Call Number. I've also seen this as lib-congress.");
      assertEquals("th libr of congres cal number. i'v als seen th as lib-congres.", string4);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.765019832842749
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("_&k");
      lovinsStemmer0.stemString("_&k");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ex");
      lovinsStemmer0.stem("q4flux");
      lovinsStemmer0.stemString("q4fbex");
      String string0 = lovinsStemmer0.stem("ex");
      assertEquals("ex", string0);
      
      String string1 = lovinsStemmer0.stemString("_&k");
      assertEquals("_&k", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("q4flux");
      assertEquals("q4fluc", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string4 = lovinsStemmer2.stem("q4fbex");
      assertEquals("q4fbic", string4);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.688929128793562
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("Array-Dimensions of 'new String[3][4][]': ");
      lovinsStemmer1.stemString("anctex");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "&b9-qv:^oypcet";
      stringArray0[1] = "Array-Dimensions of 'new String[3][4][]': ";
      stringArray0[2] = "anctex";
      stringArray0[3] = "";
      stringArray0[4] = "anctic";
      stringArray0[5] = "";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[7] = "&b9-qv:^oypcet";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = "";
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[2] = "array-dimensions of 'new string[3][4][]': ";
      stringArray1[3] = "&b9-qv:^oypcet";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5930744061811946
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("&%XK");
      lovinsStemmer0.stemString("end");
      lovinsStemmer0.stemString("key");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("end");
      lovinsStemmer0.stem("ens");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("key");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7783404232401203
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "UE3J/?";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("The authors affiliation.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("rGHg#H)");
      lovinsStemmer0.stemString("cid");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.641475258601204
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Can't add obje]t to itself!");
      assertEquals("can't ad obj]t to itself!", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("URL");
      lovinsStemmer0.stemString("lovinsstemmerond");
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "can't ad obj]t to itself!";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "url";
      stringArray0[4] = "lovinsstemmercid";
      stringArray0[5] = "An article from a journal or magazine.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "An article from a journal or magazine.";
      stringArray0[8] = "";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5667340353940415
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("%2Mlu*&0=6jBk");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("%2mlu*&0=6jbk");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("F4btv1-A3d@,8}o^");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/eGRe'`:lBj!y?%VT";
      stringArray0[1] = "8034";
      stringArray0[2] = "%2mlu*&0=6jbk";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "*";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer1.stem("/egre'`:lbj!y?%vtrud");
      assertEquals("/egre'`:lbj!y?%vtrus", string2);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("T~fOz\"AT'R<g?6jm!L");
      String string3 = lovinsStemmer0.stem("$fI*#x9B_Vgsc");
      assertEquals("$fi*#x9b_vgsc", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5930972774678518
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("oypcetet");
      lovinsStemmer0.stemString("oypcetes");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("oypcetpand");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("R<n=BCE");
      assertEquals("r<n=bc", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oypcetet";
      stringArray0[1] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[2] = "lid";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "oypcetpand";
      stringArray0[5] = "cid";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer2.stemString("oypcetet");
      assertEquals("oypcetes", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6598382007513757
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "price";
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString(")]tjJK~:+{yD");
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.getRevision();
      String string3 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string4 = lovinsStemmer1.stemString("8034");
      assertTrue(string4.equals((Object)string2));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6298994472729864
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Ross Quinlan");
      assertEquals("ros quinlan", string0);
      
      lovinsStemmer0.stemString("%u");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("fully");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.toString();
      assertFalse(string3.equals((Object)string2));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6290627128199375
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("A5V`^jclc%VlgNn");
      assertEquals("a5v`^jclc%vlgn", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7165913742562418
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "%2Mlu*&0=6jBk";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString(")]TK.,:B2,7Dp\"Z{5o");
      lovinsStemmer0.stemString("z]}G[/c+J<Hrb['");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString(")]TK.,:B2,7Dp\"Z{5o");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("z]}G[/c+J<Hrb['");
      String string1 = "E,";
      lovinsStemmer0.stemString("E,");
      lovinsStemmer0.stemString("ongDP(WEczz");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6793997962577039
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("h");
      lovinsStemmer0.stemString("z]}G[/c+J<Hrb['");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("S\"}kIy^,'I8aee}4$H");
      assertEquals("s\"}kiy^,'i8ae}4$h", string0);
      
      lovinsStemmer0.stem("s\"}kiy^,'i8ae}4$h");
      lovinsStemmer0.stemString("M=Wx.Cg~n3M+4}2^");
      lovinsStemmer0.stem("j2");
      String string1 = lovinsStemmer0.stemString("`twll~.c#nvqsbex");
      assertEquals("`twl~.c#nvqsbic", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`twl~.c#nvqsbic";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("s\"}kiy^,'i8ae}4$h");
      assertEquals("s\"}kiy^,'i8}4$h", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("%2Mlu*&0=6jBk");
      String string4 = lovinsStemmer0.stem("z]}g[/c+j<hrb['");
      assertEquals("z]}g[/c+j<hrb['", string4);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7001490910150174
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Can't add obje]t to itself!");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ionend");
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Can't add obje]t to itself!";
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5717569771462199
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("PROCEEDINGS");
      lovinsStemmer0.stemString("PROCEEDINGS");
      lovinsStemmer0.stemString("NKLS");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "NKLS";
      stringArray0[1] = "proceed";
      stringArray0[2] = "nkl";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "nkl";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[7] = "proceed";
      stringArray0[8] = "PROCEEDINGS";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5417506001844792
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      lovinsStemmer1.stemString("yz");
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.stemString("`)\u0000J1zef");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The price of the document.";
      stringArray0[1] = "An article from a journal or magazine.";
      stringArray0[2] = "`)\u0000j1zef";
      stringArray0[3] = "yz";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer4.stemString("yz");
      assertEquals("yz", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.665978385342711
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("3'CQ-!x@Fh3G");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("`kOr>}&OX/N(D/SDVW");
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "3'CQ-!x@Fh3G";
      stringArray0[1] = "";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "`kOr>}&OX/N(D/SDVW";
      lovinsStemmer0.stemString("3'CQ-!x@Fh3G");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("");
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.711393198730971
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Y<f1XME)S&H3#omZ<5";
      stringArray0[2] = " ";
      stringArray0[3] = "Y<f1XME)S&H3#omZ<5";
      stringArray0[4] = "&2{0yNR^MvLUnjr&A6";
      stringArray0[5] = "efully";
      stringArray0[6] = "0~g(iQ";
      stringArray0[7] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("16]w<2#$kNO&c~K)Ad");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5057755771107997
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A{s\"QWJ*,zG:V}f0";
      stringArray0[1] = "-!PZ=o(,#y)";
      stringArray0[2] = "ross d)ll*ntex";
      stringArray0[3] = "LTfK4}qV.";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("}%I");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      stringArray0[4] = "ross d)ll*nmit";
      stringArray0[5] = ",D<seVEwRTL4AvgA\"_";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("LTfK4}qV.");
      lovinsStemmer0.stem("ross d)ll*nex");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6636387383827471
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "yish";
      stringArray1[1] = "C";
      stringArray1[2] = " ";
      stringArray1[3] = "efully";
      stringArray1[4] = "Y<f1XME)S&H3#omZ<5";
      stringArray1[5] = "Y<f1XME)S&H3#omZ<5";
      stringArray1[6] = "D6mi{:@D;'`\"#*'";
      stringArray1[7] = " ";
      LovinsStemmer.main(stringArray1);
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("A hyperlink to a resource.");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }
}
