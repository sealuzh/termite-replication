/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:00:19 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.ZeroR;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.BallTree;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.435083906664397
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.getCapabilities();
      jRip0.toString();
      jRip0.setOptions(stringArray0);
      jRip0.setDebug(true);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip1.getSeed();
      jRip_RipperRule0.size();
      jRip0.setSeed(1710L);
      BayesNet bayesNet0 = new BayesNet();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        jRip1.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1.0E-12;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_NominalAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("S[", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      attribute0.copy();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      attribute0.setStringValue((String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("");
      Instances instances0 = new Instances("relational", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, (-2427));
      Locale locale0 = Locale.ITALY;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd((Attribute) null);
      try { 
        jRip_RipperRule0.grow(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      Instances instances3 = new Instances(instances1, 2, (-1732));
      Locale locale0 = Locale.ITALY;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 269.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = 269.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(269.0, doubleArray0);
      instances3.add((Instance) denseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances3, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.788490352562607
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      JRip jRip0 = new JRip();
      jRip0.checkErrorRateTipText();
      Attribute attribute0 = new Attribute("", 69);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.accuRate = (-1581.3);
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 3;
      intArray0[3] = 4;
      intArray0[4] = 69;
      intArray0[3] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, intArray0, 3);
      binarySparseInstance0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "relational");
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      jRip_NumericAntd0.covers(binarySparseInstance1);
      jRip_NumericAntd0.copy();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@end");
      jRip_NominalAntd0.covers(binarySparseInstance1);
      jRip0.toString();
      DecisionTable decisionTable0 = new DecisionTable();
      jRip_NumericAntd0.att = attribute0;
      decisionTable0.getOptions();
      Instances instances0 = decisionTable0.m_dtInstances;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = (-350.82403);
      jRip_NominalAntd0.getAttrValue();
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setOptimizations(21);
      jRip0.setUsePruning(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "weka/core/Capabilities.props";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = "weka/core/Capabilities.props";
      stringArray0[6] = "weka/core/Capabilities.props";
      stringArray0[7] = "weka/core/Capabilities.props";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.enumerateMeasures();
      Utils.SMALL = (-2004.97);
      jRip0.listOptions();
      jRip0.optimizationsTipText();
      jRip0.seedTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka/core/Capabilities.props", arrayList0, 21);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8083167236611075
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.getCapabilities();
      jRip0.toString();
      jRip0.setSeed(120L);
      jRip0.optimizationsTipText();
      jRip0.globalInfo();
      jRip0.getRevision();
      jRip0.setOptions(stringArray0);
      jRip0.getDebug();
      jRip0.globalInfo();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "J=WwBfvANA15`");
      jRip0.enumerateMeasures();
      Instances instances0 = null;
      JRip jRip1 = new JRip();
      try { 
        jRip1.rulesetForOneClass(2296.75, (Instances) null, 2296.75, 2296.75);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.classifiers.trees.DecisionStump";
      stringArray0[3] = "weka.classifiers.trees.DecisionStump";
      stringArray0[2] = "weka.classifiers.trees.DecisionStump";
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      stringArray0[3] = "weka.classifiers.trees.DecisionStump";
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Utils.log2 = 1947.433193;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      Environment environment0 = new Environment();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("weka.classifiers.trees.DecisionStump", list0, (-2078));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2414456828156455
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      jRip_NominalAntd0.copy();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      Instances instances3 = new Instances(instances1, 118, (-1732));
      Locale locale0 = Locale.ITALY;
      try { 
        jRip0.rulesetForOneClass((-818.43473481), instances1, 2296.75, 2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      double double0 = (-737.14);
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2215523079930732
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      Attribute attribute1 = new Attribute(",6y0(QI\"l82*rt", instances0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAccuRate();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptimizations();
      JRip jRip1 = new JRip();
      String string0 = "n7";
      StringReader stringReader0 = new StringReader("Q6tf#5IzC>oD");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[Q6tf#5IzC>oD], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      AbstractClassifier.makeCopies(jRip0, 80);
      jRip0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8118";
      stringArray0[1] = "8118";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.value = 2526.9824016274692;
      jRip0.listOptions();
      jRip_NumericAntd0.getMaxInfoGain();
      jRip_NumericAntd0.getSplitPoint();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      BallTree ballTree0 = new BallTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 1204.864066;
      int[] intArray0 = new int[7];
      jRip_RipperRule0.size();
      int int0 = (-52);
      intArray0[0] = (-52);
      intArray0[1] = 114;
      intArray0[2] = 95;
      intArray0[3] = (-2279);
      intArray0[4] = (-1103);
      intArray0[5] = 78;
      intArray0[6] = 455;
      StringReader stringReader0 = new StringReader(" | ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 95);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[|], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.875908119293929
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      NaiveBayes naiveBayes1 = new NaiveBayes();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      stringArray0[3] = "NC";
      AbstractClassifier.runClassifier(naiveBayes1, stringArray0);
      Attribute attribute0 = new Attribute("NC", 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("integer");
      Instances instances0 = new Instances("date", arrayList0, 0);
      Instances instances1 = new Instances(instances0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip_NominalAntd0.splitData(instances0, 3364.09, (-1060.853138116));
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.prune(instances0, false);
      jRip_RipperRule0.toString(attribute0);
      try { 
        jRip0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6817888352168695
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("numeric", arrayList0, 1);
      Instances instances1 = new Instances(instances0, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip_NominalAntd0.splitData(instances0, 0.0, 1);
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.prune(instances1, true);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.9640520110318143
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("p", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      Attribute attribute1 = (Attribute)attribute0.copy();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      attribute0.setStringValue((String) null);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      jRip0.globalInfo();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 1);
      binarySparseInstance0.copy();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "KS1m+RwQf9wvtx");
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      jRip_NumericAntd1.covers(binarySparseInstance0);
      jRip_NumericAntd1.copy();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip0.toString();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, (-1.0), 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      jRip0.setCheckErrorRate(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
      
      String string1 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string1);
      
      jRip0.getTechnicalInformation();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Whether pruning is performed.", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9164055708047496
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.setFolds((-2990));
      String[] stringArray0 = jRip0.getOptions();
      jRip0.getCapabilities();
      jRip0.toString();
      jRip0.setOptions(stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("JRIP: No model built yet.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("S)/v5G", arrayList0, 3);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 3);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-269));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip jRip1 = new JRip();
      boolean boolean1 = jRip0.getCheckErrorRate();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertTrue(boolean1 == boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip0.listOptions();
      jRip0.enumerateMeasures();
      jRip0.setCheckErrorRate(true);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.939792811164566
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "\tSet number of folds for REP\n\tOne fold is used as pruning set.\n\t(default 3)";
      stringArray0[3] = "NC";
      stringArray0[4] = "";
      stringArray0[5] = "\tSet number of folds for REP\n\tOne fold is used as pruning set.\n\t(default 3)";
      stringArray0[6] = "\tSet number of folds for REP\n\tOne fold is used as pruning set.\n\t(default 3)";
      stringArray0[7] = "E";
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      AbstractClassifier.makeCopy(jRip0);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getConsequent();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo((-1.0));
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      jRip0.minNoTipText();
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.makeCopy(zeroR0);
      jRip0.setDebug(false);
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      jRip0.getUsePruning();
      StringReader stringReader0 = new StringReader("\tWhether NOT use pruning\n\t(default: use pruning)");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 3);
      bufferedReader0.mark(3);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      jRip0.enumerateMeasures();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) arrayList1);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      jRip0.checkErrorRateTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(4918.758208554);
      jRip0.getSeed();
      jRip_RipperRule0.size();
      BayesNet bayesNet0 = new BayesNet();
      jRip0.setSeed(100L);
      BayesNet bayesNet1 = new BayesNet();
      Instances instances0 = bayesNet1.m_Instances;
      Properties properties0 = new Properties();
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null, 79, 79);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      jRip0.setDebug(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip0.getSeed();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      jRip0.setSeed((-218L));
      BayesNet bayesNet0 = new BayesNet();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      protectedProperties2.keySet();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      JRip jRip1 = new JRip();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties2);
      JRip jRip2 = new JRip();
      // Undeclared exception!
      try { 
        jRip2.getMeasure("Should never happen: dl in building stage NaN or infinite!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should never happen: dl in building stage NaN or infinite! not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.usePruningTipText();
      ClassOrder classOrder0 = new ClassOrder();
      JRip.NominalAntd jRip_NominalAntd0 = null;
      try {
        jRip_NominalAntd0 = jRip0.new NominalAntd((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("S[", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      Attribute attribute1 = (Attribute)attribute0.copy();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      attribute0.setStringValue((String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add((String) null);
      Instances instances0 = new Instances("relational", arrayList0, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      attribute1.addRelation(instances1);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances2 = decisionTable0.m_theInstances;
      jRip0.usePruningTipText();
      jRip0.foldsTipText();
      // Undeclared exception!
      try { 
        instances1.addAll(0, (Collection<? extends Instance>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4728278948924696
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      jRip0.setOptions((String[]) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("", linkedList0, 9);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.add("@attribute");
      Instances instances0 = new Instances("o1\"wOAk\"CU\"4D?Y3/G", arrayList0, 255);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      inputMappedClassifier0.setTrim(true);
      inputMappedClassifier0.getModelHeader(instances0);
      jRip_RipperRule0.copy();
      Instances instances1 = new Instances(instances0, 3);
      Locale locale0 = Locale.ITALY;
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      try { 
        jRip_RipperRule0.grow(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.939792811164566
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      AbstractClassifier.makeCopy(jRip0);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getConsequent();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo((-1.0));
      jRip0.setUsePruning(true);
      jRip0.getUsePruning();
      jRip0.minNoTipText();
      AbstractClassifier.makeCopy(jRip0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jRip0.setDebug(false);
      String string0 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.getFolds();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(3202.1735);
      assertEquals(3202.1735, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      linkedList0.add("\tWhether NOT use pruning\n\t(default: use pruning)");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      linkedList0.offerLast("$_D~m~?");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.dataset();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances2, 0, 2);
      jRip0.toString();
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(80);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.540448551364985
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      jRip0.getOptions();
      jRip0.getCapabilities();
      jRip0.toString();
      long long0 = 120L;
      jRip0.setSeed(120L);
      jRip0.optimizationsTipText();
      jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-1106));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.covers(binarySparseInstance0);
      JRip jRip2 = new JRip();
      // Undeclared exception!
      try { 
        jRip2.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      BallTree ballTree0 = new BallTree();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      int[] intArray0 = new int[7];
      intArray0[0] = (-52);
      intArray0[1] = 114;
      intArray0[2] = 95;
      intArray0[3] = (-2279);
      intArray0[4] = (-1103);
      intArray0[5] = 64;
      intArray0[6] = 455;
      jRip0.setSeed(0L);
      StringReader stringReader0 = new StringReader(" | ");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 95);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0);
      Instances instances0 = null;
      try {
        instances0 = new Instances(bufferedReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[|], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 0.0;
      double double0 = jRip0.getMinNo();
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.064396240310271
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = jRip0.getOptions();
      jRip0.getCapabilities();
      jRip0.setOptions(stringArray0);
      jRip0.setDebug(true);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip0.getDebug();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("4v2l4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4v2l4 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      Instances instances3 = new Instances(instances1, 2, (-1732));
      Locale locale0 = Locale.ITALY;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances3, 925.942746577432, 4);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      jRip0.setMinNo((-1310.1942));
      jRip0.optimizationsTipText();
      jRip0.getCapabilities();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", list0, 83);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip jRip1 = new JRip();
      jRip1.getSeed();
      jRip0.setCheckErrorRate(true);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals((-1310.1942), jRip0.getMinNo(), 0.01);
      assertEquals("weka/core/Capabilities.props <= NaN", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("numeric", arrayList0, 1);
      Instances instances1 = new Instances(instances0, 4);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      jRip_NominalAntd0.splitData(instances1, 289.2655084, 0.0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(sparseInstance1);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0E-12;
      DenseInstance denseInstance0 = new DenseInstance(2, doubleArray0);
      instances0.add((Instance) binarySparseInstance3);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances1, false);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("8118", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.globalInfo();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      jRip0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[2] = null;
      stringArray0[4] = string0;
      stringArray0[6] = "\tThe complexity constant C. (default 1)";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("2GQX-Nvl", arrayList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 459.33;
      doubleArray0[1] = (double) 0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "UDbV%Jl|uNL5^";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals("8118", string0);
      
      Enumeration enumeration0 = new AlphabeticTokenizer();
      double double0 = jRip_NumericAntd1.getMaxInfoGain();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string1 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals("2GQX-Nvl <= NaN", string1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      
      String string2 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string2);
      
      String string3 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string3);
      
      jRip0.listOptions();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }
}
