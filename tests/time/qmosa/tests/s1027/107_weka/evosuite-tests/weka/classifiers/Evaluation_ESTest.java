/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:52:28 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.RandomForest;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;
import weka.estimators.PoissonEstimator;
import weka.estimators.UnivariateKernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.320051914151843
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix1);
      evaluation1.weightedMatthewsCorrelation();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".cost";
      stringArray0[2] = ".cost";
      stringArray0[3] = "Empty\n";
      evaluation0.getDiscardPredictions();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation1.weightedFMeasure();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-2.0);
      // Undeclared exception!
      try { 
        evaluation1.updateMargins((double[]) null, (-2700), Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6188613730237393
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-856);
      intArray0[1] = (-856);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-856));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      evaluation0.getRevision();
      evaluation0.falsePositiveRate((-856));
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      evaluation0.equals(checkOptionHandler0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString("tDZUq2*[W,sg0l");
      evaluation0.addNumericTrainClass((-848.130358867), (-856));
      evaluation1.SFMeanSchemeEntropy();
      double double0 = evaluation0.totalCost();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.881301718722805
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      evaluation0.weightedTruePositiveRate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation1.falsePositiveRate((-2));
      LWL lWL0 = new LWL();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 4;
      intArray0[2] = 5;
      intArray0[3] = 1009;
      intArray0[4] = 34;
      intArray0[5] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1114383320));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      evaluation0.equals(sparseInstance0);
      evaluation1.priorEntropy();
      String string0 = evaluation0.toMatrixString("j&r");
      String string1 = Evaluation.makeOptionString(costSensitiveClassifier0, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6523761377507835
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      evaluation0.areaUnderPRC(1468);
      doubleArray0[0] = (double) (-872);
      int[] intArray0 = new int[7];
      intArray0[0] = (-872);
      intArray0[1] = (-872);
      intArray0[2] = (-872);
      intArray0[3] = (-872);
      intArray0[4] = (-872);
      intArray0[6] = (-872);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-872));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(6);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      MockRandom mockRandom0 = new MockRandom((-1L));
      double double0 = evaluation0.trueNegativeRate(2809);
      double double1 = evaluation0.matthewsCorrelationCoefficient(23);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5889892065499676
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "-x <number of folds>\n";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[4] = "   * @param instanceInfo the format of the data to convert\n";
      stringArray0[5] = "   * @param instanceInfo the format of the data to convert\n";
      KStar kStar0 = new KStar();
      Capabilities capabilities0 = kStar0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumNominal(1664);
      double double1 = evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.falsePositiveRate(3041);
      String string0 = evaluation1.toClassDetailsString("MultiScheme selection using");
      assertEquals("MultiScheme selection using\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\n                 0        0        0          0       0          0     ?         ?         class3\n                 0        0        0          0       0          0     ?         ?         class4\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.kappa();
      double double2 = evaluation1.unweightedMicroFmeasure();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.693666544602024
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[6];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(stringArray0);
      instances0.parallelStream();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      checkOptionHandler0.doTests();
      evaluation0.equals(checkOptionHandler0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.weightedTruePositiveRate();
      evaluation0.toMatrixString(".arff");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double2 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.meanAbsoluteError();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7109553467522836
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities1 = decisionTable0.getCapabilities();
      capabilities0.or(capabilities1);
      testInstances1.generate();
      testInstances1.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.meanPriorAbsoluteError();
      evaluation0.getClassPriors();
      double double1 = evaluation0.numTruePositives((-891));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numTrueNegatives(13);
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.addNumericTrainClass((-1), (-2));
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8093018738837694
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = new Instances(instances0, (-2));
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_MaxTarget = (double) (-2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1671.244195003844);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (-1671.244195003844);
      doubleArray0[5] = (double) (-2);
      int[] intArray0 = new int[2];
      intArray0[0] = (-2);
      intArray0[1] = (-2);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.weightedFalsePositiveRate();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double2 = evaluation1.falsePositiveRate((-2));
      assertTrue(evaluation1.equals((Object)evaluation0));
      
      LWL lWL0 = new LWL();
      evaluation0.equals(lWL0);
      double double3 = evaluation1.priorEntropy();
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.areaUnderROC(9);
      assertNotEquals(double5, double2, 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0883345837790173
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[2] = "-x <number of folds>\n";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[4] = "   * @param instanceInfo the format of the data to convert\n";
      stringArray0[3] = "   * @param instanceInfo the format of the data to convert\n";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.setDiscardPredictions(true);
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertTrue(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9941211590640602
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      RandomForest randomForest0 = new RandomForest();
      String string0 = Evaluation.getGlobalInfo(randomForest0);
      assertEquals("\nSynopsis for weka.classifiers.trees.RandomForest:\n\nClass for constructing a forest of random trees.\n\nFor more information see: \n\nLeo Breiman (2001). Random Forests. Machine Learning. 45(1):5-32.", string0);
      
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.rootMeanSquaredError();
      double double0 = evaluation0.meanPriorAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances0, costMatrix0);
      double double1 = evaluation2.falsePositiveRate(114);
      assertNotEquals(double1, double0, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      boolean boolean0 = evaluation1.equals(evaluation3);
      assertEquals(0.0, evaluation3.SFPriorEntropy(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8155119904727597
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_WithClass;
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.falsePositiveRate(11);
      double double2 = evaluation0.unweightedMicroFmeasure();
      evaluation0.correct();
      double double3 = evaluation0.rootMeanSquaredError();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.weightedFalsePositiveRate();
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5017309783022856
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3638);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderPRC();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.toMatrixString((String) null);
      evaluation0.unclassified();
      evaluation0.numFalsePositives(3638);
      try { 
        evaluation0.evaluateModel((Classifier) bayesNet0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      BayesNet bayesNet0 = new BayesNet();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = null;
      DenseInstance denseInstance0 = new DenseInstance((-3948), (double[]) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1710738641403378
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      RandomForest randomForest0 = new RandomForest();
      Evaluation.getGlobalInfo(randomForest0);
      M5Rules m5Rules0 = new M5Rules();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-1.0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1592720529128537
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-872);
      int[] intArray0 = new int[7];
      intArray0[0] = (-872);
      intArray0[1] = (-872);
      intArray0[2] = (-872);
      intArray0[3] = (-872);
      intArray0[4] = (-872);
      intArray0[6] = (-872);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-872));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.SFPriorEntropy();
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5228839099881344
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "-x <number of folds>\n";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[4] = "   * @param instanceInfo the format of the data to convert\n";
      stringArray0[5] = "   * @param instanceInfo the format of the data to convert\n";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = Double.NaN;
      evaluation1.toMatrixString();
      doubleArray0[7] = 4.9E-324;
      doubleArray0[8] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(4.9E-324, doubleArray0);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7468078808562155
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[4] = ".arff";
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      DenseInstance denseInstance0 = new DenseInstance(1631);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      Attribute attribute0 = new Attribute("getRevision");
      instances1.deleteWithMissing(attribute0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = ".bsi";
      stringArray1[1] = "@relation";
      evaluation0.updateMargins(doubleArray0, 1, (-1763.2272008461));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.getDiscardPredictions();
      evaluation1.weightedTruePositiveRate();
      Evaluation.main(stringArray0);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.134163907688782
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(stringArray0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      DenseInstance denseInstance0 = new DenseInstance(3);
      Attribute attribute0 = new Attribute("<!-- options-start -->");
      instances0.deleteWithMissing(attribute0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[8] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 3;
      doubleArray0[2] = (double) 2;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[6] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1, 2.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 750
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.145521305093102
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3638);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderPRC();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation1 = new Evaluation(instances0);
      textDirectoryLoader0.listOptions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumDate((-1524));
      testInstances0.listOptions();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      testInstances0.setNumNominal(3638);
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation2.falsePositiveRate((-2));
      String string0 = evaluation2.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation2.kappa();
      assertEquals(Double.NaN, evaluation2.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5017309783022856
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("graphType");
      double double0 = evaluation0.unclassified();
      assertEquals(0.0, double0, 0.01);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "graphType\n   <-- classified as\n";
      objectArray0[2] = (Object) textDirectoryLoader0;
      evaluation0.getDiscardPredictions();
      double double1 = evaluation0.precision(120);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numFalsePositives(3170);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-872);
      int[] intArray0 = new int[7];
      intArray0[0] = (-872);
      intArray0[1] = (-872);
      intArray0[2] = (-872);
      intArray0[3] = (-872);
      intArray0[4] = (-872);
      intArray0[6] = (-872);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-872));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(6);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      MockRandom mockRandom0 = new MockRandom((-1L));
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce((double) 6, (Instance) sparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderROC();
      Instance instance0 = null;
      Evaluation evaluation1 = new Evaluation(instances0);
      textDirectoryLoader1.listOptions();
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = '';
      charArray0[2] = '@';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(447, charArray0, (-872));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.068927605047197
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3638);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderROC();
      textDirectoryLoader0.listOptions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCapabilities();
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.pctCorrect();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.toClassDetailsString(".arff");
      String string0 = evaluation0.toClassDetailsString("RFjZ;kc B,]<E");
      assertEquals("RFjZ;kc B,]<E\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2805620953433214
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      RandomForest randomForest0 = new RandomForest();
      String string0 = Evaluation.getGlobalInfo(randomForest0);
      assertEquals("\nSynopsis for weka.classifiers.trees.RandomForest:\n\nClass for constructing a forest of random trees.\n\nFor more information see: \n\nLeo Breiman (2001). Random Forests. Machine Learning. 45(1):5-32.", string0);
      
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      SMOreg sMOreg0 = new SMOreg();
      double double0 = evaluation0.rootMeanSquaredError();
      evaluation0.setDiscardPredictions(false);
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(double1, double0, 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-872);
      int[] intArray0 = new int[7];
      intArray0[0] = (-872);
      intArray0[1] = (-872);
      intArray0[2] = (-872);
      intArray0[3] = (-872);
      intArray0[4] = (-872);
      intArray0[6] = (-872);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-872));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      M5Rules m5Rules0 = new M5Rules();
      M5Rules m5Rules1 = new M5Rules();
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.SFPriorEntropy();
      try { 
        Evaluation.handleCostOption("@data", (-872));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[6] = "@data";
      stringArray0[4] = ".arff";
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      DenseInstance denseInstance0 = new DenseInstance(1631);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      String[] stringArray1 = new String[3];
      stringArray1[0] = ".bsi";
      stringArray1[1] = "@relation";
      stringArray1[2] = "@relation";
      DenseInstance.main(stringArray1);
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, ".bsi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4013297376603298
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3638);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderPRC();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '';
      charArray0[1] = '@';
      charArray0[2] = 'T';
      charArray0[3] = 'k';
      evaluation1.num2ShortID(2726, charArray0, 2726);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) bayesNet0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.541034073792663
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "-x <number of folds>\n";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[4] = "   * @param instanceInfo the format of the data to convert\n";
      stringArray0[5] = "   * @param instanceInfo the format of the data to convert\n";
      TestInstances testInstances0 = new TestInstances();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      Capabilities capabilities0 = poissonEstimator0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.meanPriorAbsoluteError();
      evaluation0.getClassPriors();
      evaluation0.numTruePositives(2042);
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double3, 0.01);
      
      String string0 = evaluation0.toMatrixString("[|c{v24::z");
      assertEquals("[|c{v24::z\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3992593442855883
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main((String[]) null);
      Evaluation.main((String[]) null);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      evaluation0.equals(instances0);
      double double0 = evaluation0.m_SumKBInfo;
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.toMatrixString(".arff");
      LogitBoost logitBoost0 = new LogitBoost();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "kn0D8");
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7055793529108447
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tSets index of class attribute (default: last).\n";
      stringArray0[6] = "\tSets index of class attribute (default: last).\n";
      DenseInstance denseInstance0 = new DenseInstance(4.9E-324, (double[]) null);
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader2.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.weightedTruePositiveRate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double1 = evaluation0.falsePositiveRate(3);
      assertEquals(0.0, double1, 0.01);
      
      LWL lWL0 = new LWL();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      evaluation0.equals(randomCommittee0);
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-872);
      int[] intArray0 = new int[7];
      intArray0[0] = (-872);
      intArray0[1] = (-872);
      intArray0[2] = (-872);
      intArray0[3] = (-872);
      intArray0[4] = (-872);
      intArray0[6] = (-872);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-872));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      MockRandom mockRandom0 = new MockRandom((-1L));
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) adaBoostM1_0, instances0, 6, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.397980361433392
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[2] = ".arff";
      stringArray0[6] = "@data";
      stringArray0[4] = ".arff";
      double double0 = evaluation0.falsePositiveRate(14);
      assertEquals(0.0, double0, 0.01);
      
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      textDirectoryLoader0.getDataSet();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "9Sa";
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5017309783022856
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[6];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(stringArray0);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      evaluation0.equals(optionHandlerJavadoc0);
      double double0 = evaluation0.m_SumKBInfo;
      evaluation0.weightedTruePositiveRate();
      evaluation0.toMatrixString((String) null);
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7124131045294035
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      textDirectoryLoader0.setOutputFilename(false);
      String string0 = evaluation2.toCumulativeMarginDistributionString();
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
      assertEquals(" -1       0    \n", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.585609857777895
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "-x <number of folds>\n";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[4] = "%";
      stringArray0[5] = "globalInfo";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      poissonEstimator0.getCapabilities();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = filteredClassifier0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances2.generate();
      testInstances2.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.meanPriorAbsoluteError();
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(4, doubleArray0.length);
      
      double double1 = evaluation0.numTruePositives((-2));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.numTrueNegatives(1004);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3638);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderPRC();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderROC();
      evaluation0.getDiscardPredictions();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-decimals <num>";
      stringArray0[1] = "main";
      stringArray0[2] = "numExecutionSlotsTipText";
      stringArray0[3] = "B$s4i:PsHSl:";
      stringArray0[4] = "YE\",CZ&Rp";
      stringArray0[5] = "  F-Measure  MCC    ROC Area  PRC Area  Class\n";
      stringArray0[6] = "graphType";
      stringArray0[7] = "weka.classifiers.functions.supportVector.CachedKernel";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4265720818784797
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      MockFile mockFile0 = new MockFile(file0, "");
      textDirectoryLoader0.setSource((File) mockFile0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, true);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances1);
      String string0 = Evaluation.getGlobalInfo(costSensitiveClassifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.CostSensitiveClassifier:\n\nA metaclassifier that makes its base classifier cost-sensitive. Two methods can be used to introduce cost-sensitivity: reweighting training instances according to the total cost assigned to each class; or predicting the class with minimum expected misclassification cost (rather than the most likely class). Performance can often be improved by using a Bagged classifier to improve the probability estimates of the base classifier.", string0);
      
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.meanPriorAbsoluteError();
      double double2 = evaluation0.falsePositiveRate(17);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      String string1 = evaluation0.toSummaryString("@relation", false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string1);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9354046201849306
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ars");
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.m_MarginCounts;
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[1] = (-872);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-872));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.95;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(6, (char[]) null, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-decimals <num>";
      stringArray0[1] = "main";
      stringArray0[2] = "numExecutionSlotsTipText";
      stringArray0[3] = "B$s4i:PsHSl:";
      stringArray0[4] = "YE\",CZ&Rp";
      stringArray0[5] = "  F-Measure  MCC    ROC Area  PRC Area  Class\n";
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.294040482837154
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3638);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.weightedAreaUnderPRC();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.weightedAreaUnderROC();
      Evaluation evaluation1 = new Evaluation(instances0);
      textDirectoryLoader0.listOptions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Capabilities capabilities0 = serializedClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumDate((-1524));
      testInstances0.listOptions();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.meanPriorAbsoluteError();
      evaluation2.falsePositiveRate((-2));
      evaluation1.toSummaryString("RFjZ;kc B,]<E", true);
      String string0 = evaluation2.toClassDetailsString("@data");
      assertEquals("@data\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.weightedFalseNegativeRate();
      double double2 = evaluation2.sizeOfPredictedRegions();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.067108447700206
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ars");
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(true);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        CostMatrix.parseMatlab("getClass");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.63832342673744
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation2 = new Evaluation(instances1);
      double double0 = evaluation2.falsePositiveRate((-2005497621));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation0.getClassPriors();
      evaluation3.numTruePositives((-1624863064));
      double double1 = evaluation3.weightedTrueNegativeRate();
      assertEquals(0.0, evaluation3.unclassified(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1133905679419227
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toMatrixString(".arff");
      evaluation0.unclassified();
      Logistic logistic0 = new Logistic();
      logistic0.getTechnicalInformation();
      Stacking stacking0 = new Stacking();
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) stacking0;
      Object object1 = new Object();
      objectArray0[2] = object1;
      objectArray0[3] = (Object) logistic0;
      objectArray0[4] = (Object) evaluation1;
      try { 
        evaluation0.evaluateModel((Classifier) stacking0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.274842682442605
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\tSets index of class attribute (default: last).\n";
      stringArray0[1] = "\tSets index of class attribute (default: last).\n";
      stringArray0[2] = "\tSets index of class attribute (default: last).\n";
      stringArray0[4] = ".arff";
      Evaluation evaluation1 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = evaluation1.m_PriorEstimator;
      evaluation0.m_PriorEstimator = null;
      stringArray0[5] = "@relation";
      stringArray0[6] = "\tSets index of class attribute (default: last).\n";
      stringArray0[7] = ".arff";
      Evaluation.main(stringArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      evaluation1.pctIncorrect();
      int int0 = 1631;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 1631, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1631
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      MockFile mockFile0 = new MockFile(file0, "");
      textDirectoryLoader0.setSource((File) mockFile0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      MockRandom mockRandom0 = new MockRandom((-1L));
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      int[] intArray0 = new int[2];
      intArray0[0] = (-872);
      intArray0[1] = (-872);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-872));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      evaluation0.getRevision();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance2);
      binarySparseInstance0.toStringMaxDecimalDigits(516);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        evaluation0.evaluateModelOnce((Classifier) bayesNet0, (Instance) sparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.272539375087381
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "-x <number of folds>\n";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[4] = "   * @param instanceInfo the format of the data to convert\n";
      stringArray0[5] = "   * @param instanceInfo the format of the data to convert\n";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3.823749672917);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 4.9E-324;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.9E-324, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.272539375087381
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "-x <number of folds>\n";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[4] = "   * @param instanceInfo the format of the data to convert\n";
      stringArray0[5] = "   * @param instanceInfo the format of the data to convert\n";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3.823749672917);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-872);
      int[] intArray0 = new int[7];
      intArray0[0] = (-872);
      intArray0[1] = (-872);
      intArray0[2] = (-872);
      intArray0[3] = (-872);
      intArray0[4] = (-872);
      intArray0[6] = (-872);
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0, intArray0, (-872));
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(6);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      double[] doubleArray1 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray1, sparseInstance2, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.0011441405939667
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ConfLevel;
      assertEquals(0.95, double0, 0.01);
      
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.994353300719145
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-872);
      BayesNet bayesNet0 = new BayesNet();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      evaluation0.getDiscardPredictions();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ",Sets index of clasC attribute (default: last).\n";
      stringArray0[1] = ",Sets index of clasC attribute (default: last).\n";
      MockRandom mockRandom0 = new MockRandom((-1L));
      try { 
        evaluation0.crossValidateModel(".bsi", instances0, (-3948), stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .bsi
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      int int0 = (-1964);
      String string0 = null;
      Evaluation.handleCostOption((String) null, (-1964));
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.7823419481182454
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[1] = "globalInfo";
      stringArray0[2] = "-x <number of folds>\n";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[4] = "   * @param instanceInfo the format of the data to convert\n";
      stringArray0[5] = "   * @param instanceInfo the format of the data to convert\n";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double1 = evaluation0.falsePositiveRate(1);
      LWL lWL0 = new LWL();
      evaluation0.equals(lWL0);
      double double2 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double2, 0.01);
      
      double double3 = evaluation0.numFalsePositives((-1));
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1348273170997567
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "()?[,^7h";
      stringArray0[1] = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[2] = "";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.listOptions();
      int int0 = (-430);
      evaluation0.falsePositiveRate((-430));
      evaluation0.errorRate();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.3127191813662296
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Instances instances0 = textDirectoryLoader0.getStructure();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom(3638);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDataSet();
      double double1 = evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.toMatrixString((String) null);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4337282645773417
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Evaluation.handleCostOption("", 34);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".cost";
      stringArray0[1] = ".cost";
      stringArray0[2] = ".cost";
      stringArray0[3] = ".cost";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.falsePositiveRate((-2468));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.equals((Object) null);
      String string0 = evaluation0.toMatrixString("@relation");
      assertEquals("@relation\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      evaluation0.addNumericTrainClass(3080.782773163585, 34);
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      MockFile mockFile0 = new MockFile(file0, "");
      textDirectoryLoader0.setSource((File) mockFile0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      MockRandom mockRandom0 = new MockRandom((-1L));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1L);
      doubleArray0[1] = (double) (-1L);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4610216807762866
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".bsi";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      evaluation0.weightedTruePositiveRate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.falsePositiveRate(118);
      LWL lWL0 = new LWL();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2222.7270476);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-2222.7270476);
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-2222.7270476), doubleArray0);
      try { 
        coverTree0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%";
      stringArray0[2] = "-x <number of folds>i";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[4] = "   * @param instanceInfo the format of the data to convert\n";
      stringArray0[5] = "   * @param instanceInfo the format of the data to convert\n";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      DenseInstance denseInstance0 = new DenseInstance(1631);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce((double[]) null, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7015126544715486
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Evaluation.handleCostOption("", 34);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".cost";
      stringArray0[1] = ".cost";
      stringArray0[2] = ".cost";
      stringArray0[3] = ".cost";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      Evaluation.main(stringArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.listOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = Evaluation.MIN_SF_PROB;
      double double1 = evaluation0.meanPriorAbsoluteError();
      double double2 = evaluation0.falsePositiveRate(8);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String[] stringArray0 = new String[1];
      Evaluation.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ConverterUtils.DataSource.read((InputStream) null);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%,", arrayList0, 2000);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances.forCapabilities(capabilities0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      BayesNet bayesNet0 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      int[] intArray0 = new int[3];
      intArray0[0] = 3638;
      intArray0[1] = 3638;
      intArray0[2] = 3638;
      SparseInstance sparseInstance0 = new SparseInstance(1631.0, doubleArray0, intArray0, 3638);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      CostMatrix costMatrix0 = new CostMatrix(6);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }
}
