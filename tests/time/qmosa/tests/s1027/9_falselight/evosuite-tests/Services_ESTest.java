/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:57:43 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      System.setCurrentTimeMillis((-1092L));
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1883L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(102L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(894L);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, " octets\n");
      System.setCurrentTimeMillis((-2231L));
      System.setCurrentTimeMillis((-1492L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
      EvoSuiteURL evoSuiteURL1 = new EvoSuiteURL("http://:0");
      NetworkHandling.createRemoteTextFile(evoSuiteURL1, "");
      Services.testHTTP("", 0);
      System.setCurrentTimeMillis((-313L));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "** Ereur g\u00E9n\u00E9r\u00E9e : ");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 1331);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 1331);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.861445611758169
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3((String) null, (-3739));
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.reset();
      Services services0 = new Services();
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", 0);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("#[G@~k]\"YP5IADNc", 2642);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:2159");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, ".\n****");
      services_HTTP_Result1.toString();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("", 0);
      services_HTTP_Result0.reset();
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS("", 2159);
      assertTrue(services_HTTP_Result2.works);
      assertEquals(7, services_HTTP_Result2.page_weight);
      
      services_SIMPLE_Result1.reset();
      services_HTTP_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("", 7);
      Services.SIMPLE_Result services_SIMPLE_Result3 = Services.testPOP3("r322[Sg\"}wx]T|lU)X", 2159);
      services_SIMPLE_Result3.toString();
      String string0 = services_HTTP_Result1.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: #[G@~k]\"YP5IADNc) **.\n****", string0);
      
      Services.SIMPLE_Result services_SIMPLE_Result4 = new Services.SIMPLE_Result();
      assertFalse(services_SIMPLE_Result4.works);
      assertEquals(0L, services_SIMPLE_Result4.time);
      
      services_SIMPLE_Result2.toString();
      assertFalse(services_SIMPLE_Result2.works);
      assertEquals(0L, services_SIMPLE_Result2.time);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6881336682453103
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      services_SIMPLE_Result0.reset();
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testPOP3("", (-3739));
      services_SIMPLE_Result1.reset();
      services_SIMPLE_Result0.reset();
      Services services0 = new Services();
      services_SIMPLE_Result1.works = false;
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", (-3739));
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://:2159");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 2159);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      services_SIMPLE_Result0.works = false;
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-3739) **.\n****", string0);
      
      services_SIMPLE_Result1.time = 0L;
      Services.testPOP3("**URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-3739) **", 2159);
      services_SIMPLE_Result0.works = false;
      services_HTTP_Result0.reset();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("", 2159);
      assertTrue(services_HTTP_Result1.works);
      
      services_SIMPLE_Result0.reset();
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      services_HTTP_Result0.reset();
      services_SIMPLE_Result1.toString();
      services_HTTP_Result0.toString();
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testPOP3("", (-3516));
      services_SIMPLE_Result2.toString();
      String string1 = services_SIMPLE_Result2.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-3516**.\n****", string1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, 1);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0L, services_HTTP_Result0.time);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP((String) null, (-958));
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      System.setCurrentTimeMillis((-1092L));
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1883L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(102L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(894L);
      System.setCurrentTimeMillis((-2231L));
      System.setCurrentTimeMillis((-1492L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(0L);
      Services.testHTTP((String) null, (-777));
      System.setCurrentTimeMillis(894L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("k^waid", 1686);
      services_HTTP_Result0.page_weight = 0;
      services_HTTP_Result0.time = (long) 1686;
      services_HTTP_Result0.page_weight = 0;
      services_HTTP_Result0.reset();
      services_HTTP_Result0.reset();
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      
      Services.HTTP_Result services_HTTP_Result1 = new Services.HTTP_Result();
      assertEquals(0, services_HTTP_Result1.code);
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertEquals(0L, services_HTTP_Result1.time);
      assertFalse(services_HTTP_Result1.works);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0921965331237558
  */
  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("", (-2460));
      assertEquals(0, services_HTTP_Result0.code);
      
      services_HTTP_Result0.code = (-2460);
      services_HTTP_Result0.code = (-2460);
      services_HTTP_Result0.toString();
      services_HTTP_Result0.Error = "i60 0{Etp\"@t6\"m";
      services_HTTP_Result0.toString();
      services_HTTP_Result0.time = 1L;
      System.setCurrentTimeMillis(1L);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("", 0);
      services_HTTP_Result1.code = (-2460);
      System.setCurrentTimeMillis((-477L));
      Services.testHTTPS("i60 0{Etp\"@t6\"m", 0);
      System.setCurrentTimeMillis(0L);
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP("", 1);
      assertFalse(services_HTTP_Result2.works);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("fJv=T*4XNpvOrtHJb", (-2361));
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
  }
}
