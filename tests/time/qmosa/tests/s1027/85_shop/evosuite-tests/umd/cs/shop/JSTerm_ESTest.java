/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:04:07 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5178486848283965
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "k(";
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = (-4);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = (-4);
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.makeFunction();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm3, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.868681430847445
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read();
      jSTerm1.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm2.isVariable();
      jSTerm1.makeFunction();
      jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      jSTerm0.iterator();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm2.call();
      stringReader0.read();
      jSTerm4.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.whitespaceChars(58, 2847);
      JSTerm jSTerm5 = new JSTerm();
      Object object0 = jSTerm4.clone();
      jSTerm1.add(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm5.sort(comparator0);
      jSTerm5.iterator();
      JSTerm jSTerm6 = new JSTerm();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm6.sort(comparator1);
      jSTerm1.isGround();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm1.standardizerTerm();
      assertEquals("[K-0U, [K-0U]]", jSTerm1.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6802731352785183
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      stringReader0.skip((-3102L));
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isConstant());
      
      stringReader0.read();
      streamTokenizer0.ordinaryChar(50);
      jSTerm1.makeFunction();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm1.cloneT();
      jSTerm1.print();
      jSTerm0.equals(jSTerm0);
      jSTerm0.standardizerTerm();
      jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm1.isFunction();
      assertFalse(jSTerm1.isConstant());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.549101946496494
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      stringReader0.reset();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.equals(jSTerm3);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.size();
      // Undeclared exception!
      try { 
        jSTerm3.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.cloneT();
      StringReader stringReader1 = new StringReader("wnt");
      stringReader1.read();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.610946634948891
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSJshopVars.verticalL = (-3);
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.460685998915806
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5209746451886317
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      char[] charArray0 = new char[8];
      stringReader0.reset();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.isEval();
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8663982228940017
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read();
      jSTerm1.equals(jSTerm0);
      jSTerm1.makeVariable();
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm0.removeElement((Object) null);
      jSTerm1.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7228905556184393
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read();
      jSTerm0.removeElement("K-0U 2:'Cb");
      jSTerm0.isVariable();
      char[] charArray0 = new char[8];
      charArray0[0] = 'I';
      charArray0[1] = 'E';
      charArray0[2] = 'g';
      charArray0[3] = 'h';
      charArray0[4] = 'w';
      charArray0[5] = 'A';
      charArray0[6] = ' ';
      charArray0[7] = '!';
      stringReader0.read(charArray0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm2.isVariable();
      jSTerm1.makeFunction();
      jSTerm3.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0038191970412034
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 0;
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '*';
      charArray0[2] = '*';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm2.print();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = jSTerm1.call();
      jSTerm5.matches(jSTerm0);
      jSTerm4.makeConstant();
      jSTerm4.makeFunction();
      jSTerm6.isConstant();
      jSTerm0.toStr();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6017410201958757
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "k(";
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = (-4);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = (-4);
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.makeFunction();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm3, jSSubstitution1);
      jSTerm1.iterator();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.828386923075825
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qn-Fc{I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(58);
      streamTokenizer0.ordinaryChar((-71));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.makeFunction();
      Object object0 = new Object();
      jSTerm0.removeElement(object0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      jSTerm2.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm1.applySubstitutionT((JSSubstitution) null);
      jSTerm2.call();
      stringReader0.read();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1602470458914973
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[3] = ' ';
      charArray0[4] = '1';
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      stringReader0.ready();
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9733105032891465
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.interrogation = 32;
      stringReader0.read();
      jSTerm1.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm2.isVariable();
      jSTerm1.makeFunction();
      jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      jSTerm0.iterator();
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm2.call();
      stringReader0.read();
      jSTerm4.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.whitespaceChars(58, 2847);
      JSTerm jSTerm5 = new JSTerm();
      Object object0 = jSTerm4.clone();
      jSTerm1.add(object0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm5.sort(comparator0);
      jSTerm5.iterator();
      JSTerm jSTerm6 = new JSTerm();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm6.sort(comparator1);
      jSTerm1.isGround();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm5.matches(jSTerm4);
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.460685998915806
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 16;
      streamTokenizer0.ttype = 16;
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.removeElement(jSTerm0);
      char char0 = 'h';
      char char1 = ' ';
      jSTerm1.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.101810982756062
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 0;
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '*';
      charArray0[2] = '*';
      stringReader0.read(charArray0);
      jSTerm0.cloneT();
      jSTerm2.print();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.makeConstant();
      JSTerm jSTerm5 = jSTerm3.standardizerTerm();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      jSTerm5.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8874919731290047
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      Object object0 = new Object();
      jSTerm1.removeElement(stringReader0);
      jSTerm0.isVariable();
      jSTerm2.call();
      jSTerm0.removeElement((Object) null);
      jSTerm1.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution0);
      jSTerm2.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm2.makeFunction();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7728084501374015
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "k(");
      stringReader0.read(charBuffer0);
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 0;
      stringReader0.reset();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip(457L);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4964099124557793
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qn-Fc{I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(58);
      streamTokenizer0.ordinaryChar((-71));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.makeFunction();
      Object object0 = new Object();
      jSTerm0.removeElement(object0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.isVariable();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm1.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm3, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.04076543981964
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("member");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.leftPar = (-1);
      jSTerm1.print();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0848199057753525
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSJshopVars.semicolon = (-4);
      JSJshopVars.verticalL = (-3);
      stringReader0.read();
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.095039567872388
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("member");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.leftBrac = 40;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSJshopVars.colon = 40;
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer0);
      jSSubstitution0.removeAll(jSTerm0);
      System.setCurrentTimeMillis(1939L);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "Line : ";
      streamTokenizer0.whitespaceChars(2037, 2037);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%feL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "%feL";
      streamTokenizer0.whitespaceChars(2037, 2037);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars(2037, (-1467));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[%feL]", jSTerm1.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6035188611370366
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read();
      streamTokenizer0.ordinaryChar(50);
      jSTerm1.makeFunction();
      stringReader0.skip(50);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.print();
      jSTerm0.equals(jSTerm0);
      jSTerm0.standardizerTerm();
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("floor");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-1780L));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.28932050033739
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[2] = 'Z';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeEval(false);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.remove((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.containsAll(jSSubstitution2);
      JSTerm jSTerm4 = jSTerm1.call();
      jSTerm4.cloneT();
      jSTerm3.cloneT();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6288922115877589
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%feL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "%feL";
      streamTokenizer0.whitespaceChars(2037, 2037);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.whitespaceChars(2037, 2037);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4514518291945904
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.retainAll(jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.065303984575403
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 0;
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm1.matches(jSTerm3, jSSubstitution0);
      char[] charArray0 = new char[3];
      charArray0[0] = '$';
      charArray0[1] = '*';
      charArray0[2] = '*';
      stringReader0.read(charArray0);
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm2.print();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.makeConstant();
      JSTerm jSTerm6 = jSTerm3.standardizerTerm();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort(comparator0);
      boolean boolean0 = jSTerm6.isGround();
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution2 = jSTerm6.matches(jSTerm4);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSSubstitution2.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.877326478085802
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(407);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = ' ';
      jSTerm0.iterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.call();
      stringReader0.read(charArray0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.standarizerPredicateForm();
      jSTerm0.isGround();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      jSTerm3.removeIf(predicate3);
      JSJshopVars.apostrophe = 1;
      jSTerm2.isGround();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm4.toStr();
      System.setCurrentTimeMillis(0);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm5.removeElementAt(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.745553125052466
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      stringReader0.reset();
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm1.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2919166873259322
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      stringReader0.reset();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      JSTerm jSTerm3 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.46307548517626
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.removeElement(jSTerm0);
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5689972262084213
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = (-4);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = null;
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9401690517473154
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("call ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2819511397932635
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.iterator();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("G3@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.6453491911092177
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("kNP[{(Mr%Aojz`SeSy");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashStarComments(true);
      jSTerm0.removeElement(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.firstElement();
      jSSubstitution0.add((Object) "%%%");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.coma = (-1);
      jSTerm0.matches(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm1.print();
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.call();
      int int0 = (-4833);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.elementAt((-978));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4818087473014083
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read();
      streamTokenizer0.ordinaryChar(50);
      jSTerm1.makeFunction();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm1.print();
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertEquals(32, streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6723332424356903
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qn-Fc{I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(58);
      streamTokenizer0.ordinaryChar((-71));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      Object object0 = new Object();
      jSTerm0.removeElement(object0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.remove(object0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      UnaryOperator.identity();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      jSTerm2.cloneT();
      jSTerm3.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.8718772616517487
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(407);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      char[] charArray0 = new char[8];
      charArray0[0] = 'x';
      charArray0[1] = 'h';
      charArray0[2] = 'h';
      charArray0[3] = ' ';
      jSTerm0.iterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.call();
      stringReader0.read(charArray0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm1.standarizerPredicateForm();
      jSTerm0.isGround();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.and(predicate0);
      JSTerm jSTerm5 = jSTerm4.cloneT();
      jSTerm0.print();
      jSTerm5.equals(jSTerm2);
      JSTerm jSTerm6 = jSTerm5.standardizerTerm();
      jSTerm6.standardizerTerm();
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm4.isConstant());
  }
}
