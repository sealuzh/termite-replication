/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:21:17 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7560836273833575
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 511, 1050);
      JSONObject.quote("");
      Float float0 = new Float((double) 86);
      Double double0 = new Double(473.929376996);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Boolean.valueOf("getreverseBytes");
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5864654725357172
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "lo");
      String string0 = "getlowestOneBit";
      jSONObject0.optDouble("getlowestOneBit", 0.0);
      Double double0 = new Double(366.99301234);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("gettoBinaryString", (Map) hashMap0);
      int int0 = (-11);
      // Undeclared exception!
      jSONObject0.toString(4989, (-11));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7456749096593818
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 97;
      JSONObject.valueToString(hashMap0);
      JSONObject.getNames(jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      JSONObject jSONObject1 = jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      jSONObject0.optString("{}", "{}");
      Float float0 = new Float((-817.1178349618637));
      Double double0 = new Double(97);
      JSONObject jSONObject2 = jSONObject0.append("{}", double0);
      Double double1 = new Double((-3860.3562));
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject3 = jSONObject1.putOpt("{}", boolean0);
      Object object0 = JSONObject.NULL;
      jSONObject3.put("isreverseBytes", object0);
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      jSONObject2.put("$(fr+dE", (Map) hashMap0);
      Boolean.valueOf("r604Zfh");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject(88);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[88] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.667102635851632
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)1985);
      Short.compare((short)0, (short)1664);
      Integer integer0 = new Integer((short)210);
      Short.compare((short)0, (short)210);
      JSONObject.numberToString(short0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Short@0000000001");
      jSONObject0.remove("/lmyvcRAc8vD~2Gr");
      StringWriter stringWriter0 = new StringWriter(39);
      jSONObject0.write(stringWriter0);
      stringWriter0.close();
      jSONObject0.toString();
      jSONObject0.toString();
      jSONObject0.write(stringWriter0);
      try { 
        jSONObject0.getInt("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.090041603282631
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Byte byte0 = new Byte((byte)13);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Byte.toUnsignedLong((byte)77);
      Byte.toUnsignedLong((byte)104);
      jSONObject0.putOpt("#sp?wh", (Object) null);
      String string0 = "null";
      try { 
        jSONObject0.getDouble("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.127402511406422
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) "lo");
      Double double0 = new Double((-61.34474699100441));
      JSONObject jSONObject1 = jSONObject0.put("z-t:E|?H7}3aw@o!0", (Object) double0);
      jSONObject1.keys();
      JSONObject jSONObject2 = new JSONObject(object0);
      Object object1 = JSONObject.NULL;
      jSONObject1.opt((String) null);
      try { 
        jSONObject2.getDouble("issubstring");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issubstring\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.344192776183032
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"\"";
      stringArray0[1] = "Expected '";
      stringArray0[2] = "Expected '";
      stringArray0[3] = "";
      stringArray0[4] = "Expected '";
      stringArray0[5] = "";
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(10);
      jSONArray0.write(stringWriter0);
      jSONObject0.opt((String) null);
      long long1 = jSONObject0.optLong("!H7]E:#r?FmtY");
      assertEquals(0L, long1);
      assertEquals(1, jSONObject0.length());
      
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.53803334746517
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(97, 97);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Byte.toUnsignedInt((byte)6);
      Byte.toUnsignedInt((byte)108);
      Byte.toUnsignedInt((byte)102);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[7];
      jSONObject0.optInt("OruQ", (int) (byte)108);
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "OruQ";
      stringArray0[3] = "{}";
      stringArray0[4] = "OruQ";
      stringArray0[5] = "OruQ";
      stringArray0[6] = "{}";
      JSONObject jSONObject1 = new JSONObject(object0, stringArray0);
      String string0 = "";
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      jSONObject2.keys();
      try { 
        jSONObject2.getBoolean("low");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"low\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2470188280842054
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(97, 97);
      JSONObject.getNames(jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      jSONObject0.optString("{}", "{}");
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "$(fr+dE");
      JSONObject jSONObject2 = new JSONObject("{}");
      String string0 = jSONObject0.toString(1322);
      jSONObject1.put("{}", false);
      jSONObject0.keys();
      jSONObject0.putOpt("{}", hashMap0);
      jSONObject2.optBoolean(string0, false);
      JSONObject jSONObject3 = jSONObject0.put("#-,7:4sm-Zg'Fhym@2", (Map) hashMap0);
      jSONObject3.put("{}", (double) 1322);
      jSONObject1.optDouble("].DoJB", 0.0);
      jSONObject0.optDouble("].DoJB");
      jSONObject2.optLong("$(fr+dE", (-996L));
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.005154853485851
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      int int0 = (-2756);
      JSONObject.valueToString(object0, (-2756), 814);
      String string0 = "vc)j";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.544163142254022
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long long1 = new Long(31L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$DZ|VIYy";
      stringArray0[1] = "XA`0>CubW;";
      stringArray0[2] = "&>lB,C$6El3s";
      stringArray0[2] = "XA`0>CubW;";
      stringArray0[4] = "u;^EC!\"HF[kU$<un!D";
      JSONObject jSONObject1 = new JSONObject("&>lB,C$6El3s", stringArray0);
      JSONObject.quote("&>lB,C$6El3s");
      Object object0 = new Object();
      jSONObject0.isNull("XA`0>CubW;");
      Short short0 = new Short((short)8448);
      jSONObject1.append("u;^EC!\"HF[kU$<un!D", short0);
      JSONObject jSONObject2 = jSONObject1.putOpt("cmV~dXP+&GlJ$@Z", jSONObject1);
      jSONObject1.remove("koLcG{rM2W|Ij");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject2.put("nll", (Map) hashMap0);
      double double0 = jSONObject2.optDouble("].oJB", (double) 0L);
      assertEquals(3, jSONObject2.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6238316700497566
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      int int0 = (-2914);
      jSONObject0.toString((-2914));
      String string0 = " JSONObect text must begin with '{'";
      jSONObject0.optLong(" JSONObect text must begin with '{'");
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONTokener jSONTokener0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1589399154675832
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      long long1 = (-1L);
      Long.compare(31L, (-1L));
      Long long2 = new Long((-1L));
      String[] stringArray0 = new String[6];
      stringArray0[1] = "u;^EC!\"HF[kU$<un!D";
      stringArray0[2] = "M8$DZ|VIYy";
      stringArray0[3] = "u;^EC!\"HF[kU$<un!D";
      stringArray0[4] = "M8$DZ|VIYy";
      stringArray0[5] = "null";
      JSONObject jSONObject1 = new JSONObject((Object) jSONObject0, stringArray0);
      JSONObject.quote(stringArray0[0]);
      Object object0 = new Object();
      String string0 = "Expected '";
      jSONObject0.isNull("Expected '");
      JSONTokener jSONTokener0 = new JSONTokener("M8$DZ|VIYy");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of M8$DZ|VIYy
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4880412921627475
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "y=Jkm]R\"";
      JSONObject.valueToString("y=Jkm]R\"");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("\"java.lang.String@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"java.lang.String@0000000001\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.735954350137567
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "lo";
      JSONObject jSONObject0 = new JSONObject((Object) "lo");
      jSONObject0.optDouble("ishighestOneBit", 0.0);
      Double double0 = new Double((-61.34474699100441));
      int int0 = (-11);
      jSONObject0.toString((-11), 58);
      String string1 = null;
      jSONObject0.optBoolean((String) null, false);
      String string2 = "#-,7:4sm-Zg'Fhym@2";
      String string3 = "\\t";
      HashMap<Float, JSONArray> hashMap0 = new HashMap<Float, JSONArray>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6027565263374606
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 97, 97);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONArray0.toJSONObject(jSONArray0);
      jSONObject0.optString("{}", "{}");
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "$(fr+dE");
      jSONObject1.put("{}", (Map) hashMap0);
      jSONObject0.toString(1345);
      JSONObject.valueToString(jSONArray0, 97, (-2312));
      Short short0 = new Short((short) (-1573));
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.481947719976289
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0, 97, 97);
      JSONObject.getNames(jSONObject0);
      String string0 = "$(fr+dE";
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONArray0.toJSONObject(jSONArray0);
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "$(fr+dE");
      jSONObject1.put("{}", (Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt("{}", object0);
      jSONObject0.put("{}", (Map) hashMap0);
      try { 
        jSONObject1.get("T\"H!rN7p,>t;KO3jWO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"T\\\"H!rN7p,>t;KO3jWO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.315209711659621
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      String[] stringArray0 = new String[2];
      Byte.toUnsignedInt((byte)94);
      stringArray0[1] = "true";
      Byte.toUnsignedInt((byte)94);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      jSONObject0.keys();
      jSONObject0.put("7.6", (Collection) null);
      JSONObject.numberToString(byte0);
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ',' or ']'");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Expected a ',' or ']'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1180710322538077
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "lo");
      jSONObject0.optDouble("getlowestOneBit", 0.0);
      Double double0 = new Double(366.99301234);
      JSONObject jSONObject1 = jSONObject0.put("null", (Object) "lo");
      jSONObject1.keys();
      Integer integer0 = new Integer(1774);
      JSONObject jSONObject2 = new JSONObject(integer0);
      Object object0 = JSONObject.NULL;
      jSONObject2.opt("F;fDPtb*Kg|");
      try { 
        jSONObject1.getDouble("z-t:E|?H7}3aw@o!0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z-t:E|?H7}3aw@o!0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9979241572978543
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("lo", 0.0);
      assertEquals(0.0, double0, 0.01);
      
      jSONObject0.put("08ZE#,bN9d[", (Object) null);
      jSONObject0.keys();
      assertEquals(0, jSONObject0.length());
      
      JSONObject jSONObject1 = new JSONObject((Object) "08ZE#,bN9d[");
      Object object0 = JSONObject.NULL;
      jSONObject1.opt("08ZE#,bN9d[");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.725653969022657
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(97, 97);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      jSONObject0.optString("{}", "{}");
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "$(fr+dE");
      jSONObject1.put("{}", (Map) hashMap0);
      jSONObject0.toString(1345);
      jSONObject0.keys();
      jSONObject0.optString("{}");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.963400136777652
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(97, 97);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("{}", (Collection) linkedList0);
      jSONObject1.put("{}", false);
      jSONObject1.optDouble("tojA+[74*E|es:cPF!", (double) 97);
      jSONObject0.optString("{}", "{}");
      hashMap0.clear();
      try { 
        jSONObject0.append("{}", "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[{}] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2060509192674385
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "&>lB,C$6El3s";
      Long long0 = new Long(0L);
      Float.sum((-65.02726F), 1.0F);
      Long long1 = new Long(0L);
      Object object0 = new Object();
      JSONObject.valueToString(object0, 5, 1299);
      Byte byte0 = new Byte((byte)103);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(65, 65);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(505.910336552);
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.086192296922937
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(97, 97);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("{}", (Collection) linkedList0);
      jSONObject0.optString("{}", "{}");
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject1.put("wheel.json.JSONArray@0000000003", (Map) hashMap0);
      jSONObject0.toString(1345);
      jSONObject0.putOpt("wheel.json.JSONArray@0000000003", hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("#-,7:4sm-Zg'Fhym@2", (Map) hashMap0);
      jSONObject2.optInt("{}");
      jSONObject0.getJSONObject("#-,7:4sm-Zg'Fhym@2");
      jSONObject1.optLong("J[", (long) 1345);
      try { 
        jSONObject0.getInt("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.71599557444697
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long long1 = new Long(0L);
      jSONObject0.optBoolean("false", true);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$D2|VIYy";
      stringArray0[1] = "";
      stringArray0[2] = "&>lB,C$6El3s";
      stringArray0[3] = "";
      stringArray0[4] = "u;^EC!\"HF[kU$<un!D";
      JSONObject jSONObject1 = new JSONObject("&>lB,C$6El3s", stringArray0);
      jSONObject1.toString();
      Object object0 = new Object();
      jSONObject0.isNull("&>lB,C$6El3s");
      JSONObject jSONObject2 = jSONObject1.putOpt("cmV~dXP+&GlJ$@Z", jSONObject1);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject2.put("null", (Map) hashMap0);
      double double0 = jSONObject2.optDouble("].DoJB", (double) 0L);
      assertEquals(2, jSONObject2.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.2331299660365693
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$DZ|VIYy";
      stringArray0[1] = "";
      jSONObject0.append("VwFm<!moK5Txu", "");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.putOpt("", jSONObject1);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject0.put("LT<3G#uSY", (Map) hashMap0);
      assertEquals(4, jSONObject0.length());
      
      JSONObject jSONObject2 = new JSONObject((Object) "getmax");
      double double0 = jSONObject1.optDouble("isnotify", (-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JdT2qgRm";
      stringArray0[1] = "oclBK_:";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "oclBK_:";
      stringArray0[5] = "";
      stringArray0[7] = "low";
      stringArray0[8] = "oclBK_:";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      long long0 = jSONObject0.optLong("low", (-29L));
      assertEquals((-29L), long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.189243010241702
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.toString(97, 97);
      assertEquals("{}", string0);
      
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
      
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      jSONObject0.optString("{}", "{}");
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "$(fr+dE");
      JSONObject jSONObject2 = jSONObject1.put("{}", (Map) hashMap0);
      String string1 = jSONObject0.toString(1322);
      jSONObject1.put("{}", false);
      jSONObject0.keys();
      jSONObject0.putOpt("{}", hashMap0);
      jSONObject2.optBoolean(string1, false);
      assertFalse(string1.equals((Object)string0));
      
      JSONObject jSONObject3 = jSONObject0.put("#-,7:4sm-Zg'Fhym@2", (Map) hashMap0);
      jSONObject3.put("{}", (double) 1322);
      jSONObject1.optDouble("].DoJB", 0.0);
      jSONObject0.optDouble("].DoJB");
      long long0 = jSONObject2.optLong("$(fr+dE", (-996L));
      assertEquals((-996L), long0);
      
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.042598705121374
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optInt("");
      JSONObject jSONObject2 = jSONObject0.put("jo", 123);
      jSONObject2.getString("jo");
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7475191829289005
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Object object0 = new Object();
      Long long1 = new Long(31L);
      JSONObject.valueToString(jSONObject0, 794, 145);
      Integer.getInteger("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", 145);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(794);
      jSONArray0.write(stringWriter0);
      jSONObject0.write(stringWriter0);
      jSONObject0.optLong("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}", 0L);
      boolean boolean0 = jSONObject0.isNull("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      assertTrue(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "oclBK_:";
      Float float0 = new Float(1064.90912);
      JSONObject.doubleToString(Double.NaN);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      stringArray0[1] = "true";
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = jSONObject0.optString(">T|9bQ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3162657043705326
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = "O,bu";
      JSONObject.getNames((Object) "O,bu");
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 3239;
      JSONObject.valueToString(jSONArray0, 47, 3239);
      jSONArray0.toJSONObject((JSONArray) null);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8236758320303297
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "xZ4'i,n6!");
      jSONObject0.toString(3);
      Object object0 = new Object();
      Long long0 = new Long(3);
      JSONObject.valueToString("{\n   \"java.lang.String@0000000004\": [\n      java.lang.Byte@0000000030,\n      java.lang.Byte@0000000031,\n      java.lang.Byte@0000000032,\n      java.lang.Byte@0000000033,\n      java.lang.Byte@0000000034,\n      java.lang.Byte@0000000035,\n      java.lang.Byte@0000000036,\n      java.lang.Byte@0000000037,\n      java.lang.Byte@0000000038,\n      java.lang.Byte@0000000039\n   ],\n   \"java.lang.String@0000000027\": \"java.lang.Class@0000000028\",\n   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", 92, 3);
      Integer.getInteger("xZ4'i,n6!", 92);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(1897);
      Writer writer0 = jSONArray0.write(stringWriter0);
      jSONObject0.write(writer0);
      jSONObject0.optLong("Cs~;i3FZ1:mPFuMg7", 1503L);
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.271649924870593
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      Byte.toUnsignedInt((byte)94);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("8K^>", (long) (byte)94);
      Byte byte1 = new Byte((byte) (-86));
      Long long0 = new Long(1740L);
      JSONObject.valueToString(long0, (byte)94, (byte)94);
      long long1 = jSONObject1.optLong("di><\"2", 722L);
      assertEquals(1, jSONObject0.length());
      assertEquals(722L, long1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7434917826501217
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(97, 97);
      JSONObject.getNames(jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      jSONObject0.optString("{}", "{}");
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "$(fr+dE");
      jSONObject1.put("{}", (Map) hashMap0);
      String string0 = jSONObject0.toString(1345);
      jSONObject1.put("{}", false);
      jSONObject0.keys();
      jSONObject0.putOpt("{}", hashMap0);
      try { 
        jSONObject0.getLong(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\njava.lang.String@0000000005\\\": {},\\njava.lang.String@0000000003\\\": []\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.optInt("");
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Float float0 = new Float(2538.197583665);
      String string0 = JSONObject.doubleToString((-2002));
      assertEquals("-2002", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7950476532792985
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject((Object) "3");
      jSONObject0.optDouble("ishighestOneBit", 0.0);
      Object object1 = JSONObject.NULL;
      jSONObject0.isNull("] is not a JSONArray.");
      Object object2 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "] is not a JSONArray.";
      stringArray0[1] = "ishighestOneBit";
      stringArray0[2] = "ishighestOneBit";
      stringArray0[3] = "'lb";
      JSONObject jSONObject1 = new JSONObject(object2, stringArray0);
      JSONObject jSONObject2 = jSONObject0.putOpt("e\u0005jdNi?", object2);
      jSONObject1.toString((-858), (-858));
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.optDouble("'lb", 0.0);
      jSONObject1.optDouble("getparseFloat");
      jSONObject0.optLong((String) null, (-1L));
      int int0 = jSONObject0.optInt("ishighestOneBit");
      jSONObject2.optInt("{}");
      assertEquals(4, jSONObject0.length());
      
      jSONObject1.optLong("69`/`s@i#8j");
      int int1 = jSONObject1.length();
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oclBK_:";
      Float float0 = new Float(1064.90912);
      Double double0 = new Double(1896.0159409729774);
      StringWriter stringWriter0 = new StringWriter(43);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Boolean boolean0 = new Boolean("oclBK_:");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.502723687933451
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "\\xZ4'i,n6!";
      JSONObject jSONObject0 = new JSONObject((Object) "xZ4'i,n6!");
      int int0 = 3;
      jSONObject0.toString(3);
      try { 
        jSONObject0.get("{\n   \"java.lang.String@0000000004\": [\n      java.lang.Byte@0000000030,\n      java.lang.Byte@0000000031,\n      java.lang.Byte@0000000032,\n      java.lang.Byte@0000000033,\n      java.lang.Byte@0000000034,\n      java.lang.Byte@0000000035,\n      java.lang.Byte@0000000036,\n      java.lang.Byte@0000000037,\n      java.lang.Byte@0000000038,\n      java.lang.Byte@0000000039\n   ],\n   \"java.lang.String@0000000027\": \"java.lang.Class@0000000028\",\n   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n   \\\"java.lang.String@0000000004\\\": [\\n      java.lang.Byte@0000000030,\\n      java.lang.Byte@0000000031,\\n      java.lang.Byte@0000000032,\\n      java.lang.Byte@0000000033,\\n      java.lang.Byte@0000000034,\\n      java.lang.Byte@0000000035,\\n      java.lang.Byte@0000000036,\\n      java.lang.Byte@0000000037,\\n      java.lang.Byte@0000000038,\\n      java.lang.Byte@0000000039\\n   ],\\n   \\\"java.lang.String@0000000027\\\": \\\"java.lang.Class@0000000028\\\",\\n   \\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.177273954261508
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "M8$D2|VIYy");
      JSONObject jSONObject2 = jSONObject0.put("", true);
      jSONObject1.accumulate("7~h$hUSSg/y", "7~h$hUSSg/y");
      jSONObject2.put(",\n", (-1344));
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Float float0 = new Float(0.0);
      int int0 = 1275;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5513112986456012
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "xZ4'i,n6!");
      int int0 = 3;
      jSONObject0.toString(3);
      Object object0 = new Object();
      double double0 = (-1105.8);
      Float float0 = new Float((-1105.8));
      String string0 = null;
      try { 
        jSONObject0.append((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-118));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Z-X%2$Q@:w}$VFa\"0 ";
      stringArray0[4] = "JSON does not allow non-finite numbers.";
      stringArray0[5] = "000";
      stringArray0[6] = "";
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0, 12, (byte) (-118));
      assertNotNull(string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.715394102511612
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "\\xZ4'i,n6!";
      JSONObject jSONObject0 = new JSONObject((Object) "xZ4'i,n6!");
      jSONObject0.toString(3);
      Integer integer0 = new Integer(70);
      jSONObject0.append("jo", integer0);
      Long long0 = new Long(3);
      jSONObject0.put("m^8a", true);
      JSONObject.valueToString("{\n   \"java.lang.String@0000000004\": [\n      java.lang.Byte@0000000030,\n      java.lang.Byte@0000000031,\n      java.lang.Byte@0000000032,\n      java.lang.Byte@0000000033,\n      java.lang.Byte@0000000034,\n      java.lang.Byte@0000000035,\n      java.lang.Byte@0000000036,\n      java.lang.Byte@0000000037,\n      java.lang.Byte@0000000038,\n      java.lang.Byte@0000000039\n   ],\n   \"java.lang.String@0000000027\": \"java.lang.Class@0000000028\",\n   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}", 92, 3);
      Integer.getInteger("xZ4'i,n6!", 92);
      String string1 = "000";
      jSONObject0.put("/h.Fj8U=>v'RCs'od", 3);
      try { 
        jSONObject0.getJSONObject("000");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"000\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9883648303455947
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expcteda ':' afer a key", false);
      Float float0 = new Float((double) 86);
      jSONObject1.append("IIS%),YwzW0^)k|3vps", float0);
      Double double0 = new Double(473.929376996);
      jSONObject0.putOpt("Expcteda ':' afer a key", double0);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      Boolean.valueOf("getreverseBytes");
      JSONObject jSONObject2 = new JSONObject();
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.532184493130278
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("<t+q9?leoHkT");
      jSONTokener0.next(0);
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      double double0 = jSONObject0.optDouble("Wsn!*g<495foZb1(cp");
      assertEquals(Double.NaN, double0, 0.01);
      
      Byte byte0 = new Byte((byte) (-32));
      long long0 = jSONObject0.optLong("] is not a number.", (long) (byte) (-86));
      assertEquals((-86L), long0);
      
      Short short0 = new Short((short)34);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Wsn!*g<495foZb1(cp";
      stringArray0[2] = "";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "";
      JSONObject jSONObject1 = new JSONObject(jSONTokener0, stringArray0);
      String string0 = JSONObject.valueToString(jSONObject1, 46, 34);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6507328119204008
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject((Object) "lo");
      Integer.getInteger("", 92);
      String string0 = "\\u";
      JSONObject.quote(string0);
      Double double0 = new Double(92);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1922687166742043
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-1319L));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      jSONObject0.toString();
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject1 = jSONObject0.putOpt("to", "&>lB,C$6El3s");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject2 = jSONObject0.put("M8$DZ|VIYy", (Map) hashMap0);
      jSONObject0.toString(35, (-11));
      jSONObject1.optBoolean("to", false);
      JSONObject jSONObject3 = jSONObject2.put("\t", (Map) hashMap0);
      jSONObject2.put("{\n                        \"java.lang.String@0000000002\": \"java.lang.String@0000000003\",\n                        \"java.lang.String@0000000005\": {}\n}", (double) (-1319L));
      jSONObject3.optDouble("77ifT9 9CE]{tkclW", 679.4597785271);
      jSONObject2.optDouble("{x$}WA");
      jSONObject1.optLong("#-,7:4sm-Zg'Fhym@2", 1070L);
      int int0 = jSONObject1.optInt("{x$}WA");
      assertEquals(4, jSONObject1.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.583141748207673
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      assertEquals(1, jSONObject0.length());
      
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$D2|VIYy";
      stringArray0[1] = "";
      stringArray0[2] = "&>lB,C$6El3s";
      stringArray0[3] = "";
      stringArray0[4] = "u;^EC!\"HF[kU$<un!D";
      Float.sum(0L, 0.0F);
      String string0 = JSONObject.valueToString((Object) null, 102, 102);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      short short0 = (short)0;
      Short short1 = new Short((short)0);
      short short2 = (short)210;
      Short.toUnsignedInt((short)1985);
      Short.compare((short)0, (short)1664);
      Short.toUnsignedLong((short)210);
      Short.compare((short)0, (short)210);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EBfs9w:rOc&&,!%q";
      stringArray0[1] = "{Y}";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = "";
      stringArray0[6] = "";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.108335652604384
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("WHt5IFG ");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "WHt5IFG ";
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject("000", stringArray0);
      jSONObject0.put("JSON does not allow non-finite numbers.", (-3520));
      LinkedList<Boolean> linkedList0 = new LinkedList<Boolean>();
      jSONObject0.put("000", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONObject("Xo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Xo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.039423676846218
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("max", (-4402.4737622221055));
      jSONObject0.optDouble("ishighestOneBit", (-4402.4737622221055));
      JSONObject jSONObject1 = new JSONObject((Object) "ishighestOneBit");
      jSONObject0.opt("xo3E!^UO");
      String string0 = "`0pAa}";
      try { 
        jSONObject0.getDouble("`0pAa}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"`0pAa}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6872593473350865
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "'";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "_B?$b'4^U_Cy.";
      stringArray0[8] = "T";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.has((String) null);
      jSONObject0.optJSONArray("@pk>%eG");
      jSONObject0.names();
      jSONObject0.put(",:]}/\"[{;=#", 4373);
      try { 
        Integer.decode("getparseUnsignedLong");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"getparseUnsignedLong\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Byte byte0 = new Byte((byte)94);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      Byte.toUnsignedInt((byte)94);
      Byte.toUnsignedInt((byte)108);
      String string0 = "true";
      stringArray0[1] = "true";
      Byte.toUnsignedInt((byte)94);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      String string1 = "";
      jSONObject0.keys();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9955921311891074
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "&>lB,C$6El3s";
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "M8$D2|VIYy");
      boolean boolean0 = jSONObject1.isNull(",\n");
      assertTrue(boolean0);
      
      double double1 = jSONObject1.optDouble("M8$D2|VIYy", (double) 0L);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = jSONObject1.optDouble("&>lB,C$6El3s");
      assertEquals(Double.NaN, double2, 0.01);
      
      jSONObject1.optLong((String) null, (-996L));
      assertEquals(3, jSONObject1.length());
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate(",\n", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4782675783451467
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte.toUnsignedInt((byte) (-56));
      Byte.toUnsignedInt((byte)13);
      Byte.toUnsignedInt((byte)73);
      Long long0 = new Long(213L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "Expcteda ':' afer a key";
      stringArray0[3] = "true";
      stringArray0[4] = "Expcteda ':' afer a key";
      JSONObject jSONObject1 = new JSONObject(long0, stringArray0);
      String string0 = "S^ra-<H^(";
      try { 
        jSONObject0.getBoolean("S^ra-<H^(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S^ra-<H^(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "false";
      stringArray0[1] = ".";
      stringArray0[2] = "rot";
      stringArray0[3] = "] not found.";
      stringArray0[4] = "|rk";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0359432497154195
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String[] stringArray0 = new String[6];
      Long.min(31L, (-2499L));
      stringArray0[0] = "\"\"";
      stringArray0[2] = "Expected '";
      stringArray0[3] = "false";
      stringArray0[4] = stringArray0[1];
      stringArray0[5] = "";
      StringWriter stringWriter0 = new StringWriter(10);
      long long1 = jSONObject0.optLong("tr", (long) 10);
      assertEquals(1, jSONObject0.length());
      assertEquals(10L, long1);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = 1L;
      Long long1 = new Long(1L);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8423943585863412
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expcteda ':' afer a key";
      jSONObject0.put("Expcteda ':' afer a key", false);
      try { 
        jSONObject0.getJSONArray("Expcteda ':' afer a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expcteda ':' afer a key\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5266399744832115
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum(894.8F, 894.8F);
      String string0 = JSONObject.valueToString(float0, 1275, 1275);
      assertNotNull(string0);
      
      Short short0 = new Short((short)2);
      Long long0 = new Long((short) (-1573));
      JSONObject.testValidity(long0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0);
      Integer.getInteger("E,'s~G&^j^V", 71);
      String string0 = "\\u";
      JSONObject.quote("gSJ'U\"LkRg:T<;8l^");
      Double double0 = new Double(0.0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.998587878542509
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-12));
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      Long long0 = Long.valueOf((long) (byte) (-12));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = "";
      String string1 = "JSONArray[";
      try { 
        Long.parseUnsignedLong("JSONArray[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JSONArray[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("WHt5IFG ");
      String[] stringArray0 = new String[11];
      stringArray0[0] = "WHt5IFG ";
      stringArray0[1] = "WHt5IFG ";
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject("000", stringArray0);
      try { 
        jSONObject0.getLong("WHt5IFG ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"WHt5IFG \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.8595625334445338
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject(74);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "tr";
      stringArray0[1] = ",9o8TD19F?3X";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.3538760657723725
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "^d$";
      String string0 = "i";
      Object object1 = new Object();
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      String string1 = "Substring bounds error";
      jSONObject0.has("Substring bounds error");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optJSONArray("^d$");
      Byte byte0 = new Byte((byte)10);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1478409965466247
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      String string0 = "$~Q$3Z_Shu*6zSyjF_";
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      try { 
        jSONObject0.put((String) null, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "^d$";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      String string0 = "wheel.json.JSONObject$Null";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "_B?$b'4^U_Cy.";
      stringArray0[8] = "T";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.isNull("J1ze");
      String string1 = "XXscyvq hX9z75fr";
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.0730213571597247
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Double double0 = new Double((-61.34474699100441));
      JSONObject jSONObject0 = new JSONObject(object0);
      Object object1 = JSONObject.NULL;
      jSONObject0.optInt("lo", 57);
      try { 
        jSONObject0.getDouble("R=ZAlF4[.=yVn/0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"R=ZAlF4[.=yVn/0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.1450064205112582
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\"\"";
      stringArray0[1] = "Expected '";
      stringArray0[3] = "";
      stringArray0[4] = "Expected '";
      stringArray0[5] = "";
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optLong("rot", 275L);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer(6);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "e]2>OX%xT7Es^";
      stringArray0[1] = "=@9";
      stringArray0[2] = "A JSONObject text must end with '}'";
      stringArray0[3] = "fo";
      stringArray0[4] = "wyK4k,";
      String string0 = "\\u";
      stringArray0[5] = string0;
      stringArray0[6] = "%4KIh";
      stringArray0[7] = "*Mh?=";
      stringArray0[8] = "Rc7;c|YO<-'";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      long long0 = jSONObject0.optLong("fo");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)1985);
      Short.compare((short)0, (short)1664);
      Integer integer0 = new Integer((short)210);
      Short.compare((short)0, (short)210);
      JSONObject.numberToString(short0);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 159;
      jSONArray0.put(159, 0.0);
      JSONArray jSONArray1 = jSONArray0.put((long) (short)210);
      String string0 = "OD`fJ/ Fls(C";
      try { 
        jSONArray1.getJSONObject((short)0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] is not a JSONObject.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.369019417226755
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "oclBK_:";
      Float float0 = new Float(1064.90912);
      JSONObject.doubleToString(1064.90912);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("oclBK_:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of oclBK_:
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-118));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      JSONTokener jSONTokener0 = new JSONTokener("jT\u0001.&H<wpz;L]@");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of jT\u0001.&H<wpz;L]@
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
