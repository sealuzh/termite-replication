/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 09:47:26 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URISyntaxException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5808695107218527
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      player0.setJoinOK(player0, true);
      player0.getX();
      byte[] byteArray0 = player0.pack();
      player0.setY(0.0F);
      player0.getPictureId();
      Player player1 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player0.boss = (Party) player1;
      player1.next = (Party) player0;
      player0.getMoney();
      player0.setDead();
      player1.pack();
      player0.unpack(byteArray0);
      player0.setMoney((-264));
      player1.setDead();
      player1.setMoney(0.0F);
      player0.isJoinOK(player1, false);
      Player player2 = new Player(823, "", "", 270, (short)4919);
      player1.pack();
      player0.pack();
      player0.getY();
      player1.toString();
      float float0 = player0.getMoney();
      assertTrue(player0.isDead());
      assertEquals((-264.0F), float0, 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.469736490702675
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-4010), "", (-4010));
      player0.getX();
      Player player1 = new Player((-3096), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-3096));
      byte[] byteArray0 = player1.pack();
      player0.gangStrength();
      player0.setMoney(0.1F);
      player1.add(player0);
      player1.setY(1060.9F);
      player1.setX(0.0F);
      player0.setConnected(false);
      player0.gangStrength();
      player0.setJoinOK(player1, false);
      player1.getStrength();
      player0.getTimeOfDeath();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F=wYXo\"rcbJpv9+n>N");
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream1);
      player1.type();
      Player player2 = new Player((-19958), "_ciA2e&=rM", "i!aWx;R#]", 5);
      assertFalse(player2.isDead());
      
      player2.setDead((long) (short)4919, false);
      Player player3 = new Player();
      boolean boolean0 = player3.isJoinOK(player2, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-84);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-11);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(4, byteArrayInputStream0.available());
      
      player1.type();
      Player player2 = new Player(3038, ")ni%#pl1)", "a", (byte)1);
      player2.isJoinOK(player0, false);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5709723142263474
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.getX();
      player0.pack();
      player0.setMoney(0.2F);
      player1.add(player0);
      player0.setDead();
      player1.setY(0.0F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      player0.setX((-8.628523F));
      player1.setConnected(true);
      int int0 = Packable.GAME_EVENT;
      player1.setJoinOK(player0, false);
      player1.getStrength();
      player1.getTimeOfDeath();
      player0.setDead((long) 1, false);
      player1.isJoinOK(player0, false);
      player0.reset(false);
      Player player2 = new Player(1, (String) null, (String) null, (short)4919);
      player2.setZ(0.2F);
      Player player3 = new Player((short)4919, (String) null, "", 1);
      player3.getIP();
      player0.pack();
      assertEquals(0.2F, player0.getMoney(), 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.267203623279233
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((-4010), "", (-4010));
      player0.getX();
      Player player1 = new Player((-3096), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-3096));
      player1.pack();
      player0.gangStrength();
      player0.setMoney(0.1F);
      player1.add(player0);
      player1.setY(1060.9F);
      player1.setX(0.0F);
      player0.setConnected(false);
      player0.gangStrength();
      player0.setJoinOK(player1, false);
      player1.getStrength();
      player0.getTimeOfDeath();
      player0.setDead((long) 1, false);
      player0.isJoinOK(player1, true);
      Player player2 = new Player();
      player2.getStrength();
      player0.pack();
      player0.pack();
      player1.isJoinOK(player2, true);
      player0.getMoney();
      assertEquals(1L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4703116992157614
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(false);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      player0.getX();
      player0.pack();
      player0.gangStrength();
      player0.setMoney(0.0F);
      player1.add(player0);
      player1.setY(0.0F);
      player0.setX(10.0F);
      player1.setConnected(false);
      player1.gangStrength();
      player1.setJoinOK(player0, false);
      player1.getStrength();
      player1.getTimeOfDeath();
      Player player2 = new Player((short)4919, "\"eEy3!CCC5", "", 1, (-112));
      player1.pack();
      player2.pack();
      boolean boolean0 = player1.isConnected();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4351234461507145
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-4010), "", (-4010));
      player0.getX();
      Player player1 = new Player((-3096), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", (-3096));
      player1.pack();
      player0.gangStrength();
      player0.setMoney(0.1F);
      player1.add(player0);
      player1.setY(1060.9F);
      player1.setX(0.0F);
      player0.setConnected(false);
      player0.gangStrength();
      player0.setJoinOK(player1, false);
      player1.getStrength();
      player0.getTimeOfDeath();
      player0.setDead((long) 1, false);
      player0.isJoinOK(player1, true);
      player1.reset(false);
      player0.setJoinOK(player1, false);
      player0.getStrength();
      player1.getTimeOfDeath();
      player1.setDead((long) (-3096), false);
      player0.getTimeOfDeath();
      player0.isJoinOK(player1, false);
      player1.pack();
      player1.setMoney(0.0F);
      Player player2 = new Player();
      player2.setDead();
      player1.getStrength();
      player1.getX();
      float float0 = player1.getZ();
      assertTrue(player1.isDead());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((-1), "", 1);
      player0.isJoinOK(player1, false);
      player0.reset(false);
      Player player2 = new Player(1, (String) null, "91=(yMyfh><N>O&|", (-2154));
      player2.setZ((-1477.147F));
      player1.setDead((long) (-2154));
      player1.getTimeOfDeath();
      try { 
        MockURI.URI("", "", "eu6", (-2154), "", (String) null, (String) null);
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: ://@eu6:-2154
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.554836992562314
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.getX();
      player0.pack();
      player0.gangStrength();
      player0.setMoney(0.0F);
      player1.add(player0);
      player1.setY(0.0F);
      player0.setX(10.0F);
      player1.setDead(1392409296320L);
      player1.setConnected(true);
      player1.gangStrength();
      player1.getSubparty();
      player1.setJoinOK(player0, false);
      player1.getStrength();
      player1.getTimeOfDeath();
      player0.setDead((long) 1, false);
      player0.isBoss();
      player0.reset(false);
      Player player2 = new Player(1, (String) null, (String) null, (short)4919);
      player2.setZ(0.2F);
      player2.setDead((long) (-264));
      assertEquals((-264L), player2.getTimeOfDeath());
      
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.563143854799521
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.getX();
      player0.pack();
      player0.gangStrength();
      player0.setMoney(0.0F);
      player1.add(player0);
      player1.setY(0.0F);
      player0.setX(10.0F);
      player1.setConnected(true);
      player1.gangStrength();
      player1.setJoinOK(player0, false);
      player1.getStrength();
      player1.getTimeOfDeath();
      player0.setDead((long) 1, false);
      player1.isJoinOK(player0, false);
      player0.reset(false);
      Player player2 = new Player(1, (String) null, (String) null, (short)4919);
      player2.setZ(0.2F);
      player2.setDead((long) (-264));
      float float0 = player0.getZ();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5711652526789814
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      player0.setJoinOK(player0, true);
      player0.getX();
      byte[] byteArray0 = player0.pack();
      player0.setY(0.0F);
      player0.getPictureId();
      Player player1 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player1.next = (Party) player0;
      player0.getMoney();
      player0.setDead();
      player1.pack();
      player1.setX((-723));
      player0.unpack(byteArray0);
      player0.setMoney((-264));
      player1.setDead();
      player1.setMoney(0.0F);
      player0.isJoinOK(player1, false);
      player0.type();
      player1.reset(false);
      player0.setZ(5);
      player1.setDead((long) (-264));
      System.setCurrentTimeMillis((-264));
      int int0 = player0.type();
      assertTrue(player0.isDead());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player(2, "91=(yMyfh><N>O&|", "", 5, 0);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(2, "91=(yMyfh><N>O&|", "", 5, 0);
      player0.pack();
      player0.getName();
      assertEquals(5, player0.getPictureId());
      assertEquals("91=(yMyfh><N>O&|", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, player0.getStrength());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3486282611708154
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(823, "joIzD}}h 8F]4", "itu[]vCbAK#_", 823, 0);
      byte[] byteArray0 = player0.pack();
      player0.gangStrength();
      Player player1 = new Player(823, "qzVXe", "qzVXe", (-580), 1148);
      player1.setDead(0L);
      player1.gangStrength();
      player1.setMoney(0);
      player0.add(player1);
      player0.setY((-1370.4F));
      player1.setX(10.0F);
      player0.unpack(byteArray0);
      Player player2 = new Player(1148, "qzVXe", 4);
      player2.pack();
      player0.add(player2);
      player0.isDead();
      player1.isDead();
      player0.getPictureId();
      assertEquals(0.0F, player0.getY(), 0.01F);
      
      player1.getTimeOfDeath();
      assertEquals((-580), player1.getPictureId());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<H^(kS=`AQdaUYG %");
      Player player0 = new Player(1863);
      player0.getMoney();
      player0.getSubparty();
      player0.getX();
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      System.setCurrentTimeMillis((-1297L));
      player0.getZ();
      player0.gangStrength();
      player0.getZ();
      player0.getX();
      player0.toString();
      player0.toString();
      float float0 = player0.getZ();
      assertFalse(player0.isConnected());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(4, "", 4919);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      sequenceInputStream1.available();
      byteArray0[1] = (byte) (-57);
      sequenceInputStream0.read(byteArray0, 64, 4919);
      sequenceInputStream1.mark(4);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream2.close();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream2);
      player0.pack();
      player0.toString();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(4919, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(5, "", 0);
      Player player1 = new Player((short)4919, "+gRG9pZ", "", 27203);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player1.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(0, (String) null, (String) null, 0);
      player0.setDead();
      player0.getName();
      player0.getX();
      player0.gangStrength();
      Party party0 = player0.gangBoss();
      Party party1 = player0.gangBoss();
      party0.remove(party1);
      player0.add(party0);
      player0.getPictureId();
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.470571912590729
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(823, "joIzD}}h 8F]4", "itu[]vCbAK#_", 823, 0);
      player0.pack();
      Player player1 = new Player(823, "qzVXe", "qzVXe", (-580), 1148);
      player1.setDead(0L);
      player1.gangStrength();
      player1.setMoney(0);
      player0.add(player1);
      player0.setY((-1370.4F));
      player1.setX(10.0F);
      player1.id = 1;
      player0.id = 1;
      player1.setConnected(false);
      player1.gangStrength();
      player0.setJoinOK(player1, false);
      player0.getStrength();
      player1.isJoinOK(player0, false);
      player0.reset(false);
      assertEquals((-1370.4F), player0.getY(), 0.01F);
      
      Player player2 = new Player((-580), "qzVXe", "qzVXe", (-3584));
      player1.setZ(0.2F);
      Player player3 = new Player();
      player3.setDead((long) (short)4919);
      assertEquals(1, player3.getStrength());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((-264));
      player0.reset(true);
      player0.getY();
      player0.setJoinOK(player0, true);
      player0.getX();
      player0.pack();
      player0.setY(0.0F);
      player0.getPictureId();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileInputStream", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(2, "", (-564));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark((-2846));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-564), player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.240555505820405
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      Player player1 = new Player(0, "", "JO GA48a", 1);
      player0.remove(player1);
      player0.prev = (Party) player1;
      player0.reset(true);
      player0.getY();
      Player player2 = new Player((-264), "", "", 0, (-264));
      player0.setJoinOK(player2, true);
      player0.getX();
      player0.pack();
      player0.gangStrength();
      player0.setMoney(0.0F);
      player2.add(player0);
      player2.setY(0.0F);
      player0.setX(10.0F);
      player2.setConnected(true);
      player2.gangStrength();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player(1, "", "l#+9$)", 1);
      Party party0 = new Party(1);
      player0.prev = party0;
      party0.id = 5;
      player0.getPictureId();
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = player0.getPictureId();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(1, int0);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(4, "", 4919);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)1;
      sequenceInputStream1.available();
      byteArray0[1] = (byte) (-57);
      sequenceInputStream0.read(byteArray0, 64, 4919);
      sequenceInputStream1.mark(4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream2.close();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream2);
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = player0.type();
      assertEquals(5, int0);
      
      String string0 = player0.getIP();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", string0);
      assertTrue(player0.isConnected());
      assertEquals(4919, player0.getPictureId());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0.0.0.0");
      int int0 = 1407;
      String string0 = "&ak'";
      Player player0 = new Player(1407, "&ak'", "&ak'", 1407, 1407);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player0.id = 1407;
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5379711673960834
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      player0.setJoinOK(player0, true);
      player0.getX();
      byte[] byteArray0 = player0.pack();
      player0.setY(0.0F);
      player0.getPictureId();
      Player player1 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player0.boss = (Party) player1;
      player1.next = (Party) player0;
      player0.getMoney();
      player0.setDead();
      player1.pack();
      player0.unpack(byteArray0);
      player0.setMoney((-264));
      player1.setDead();
      player1.setMoney(0.0F);
      player0.isJoinOK(player1, false);
      player0.type();
      player1.isJoinOK(player0, true);
      player0.reset(true);
      player1.setZ((short)4919);
      player0.setDead((long) (-723));
      float float0 = player1.getZ();
      assertTrue(player1.isDead());
      assertEquals(4919.0F, float0, 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(false);
      float float0 = player0.getY();
      assertEquals(0.0F, float0, 0.01F);
      
      Player player1 = new Player();
      player0.setJoinOK(player1, false);
      float float1 = player0.getX();
      assertEquals(10.0F, float1, 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals((-264), player0.getPictureId());
      
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark((short)4919);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      sequenceInputStream0.close();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream1);
      boolean boolean0 = player1.unpack(dataInputStream1);
      assertEquals("Player-1", player1.toString());
      assertEquals(0, player1.getPictureId());
      assertEquals("0.0.0.0", player1.getIP());
      assertFalse(boolean0);
      assertTrue(player1.isConnected());
      assertEquals(1, player1.getStrength());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.53815381579791
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      player0.setJoinOK(player0, true);
      player0.getX();
      byte[] byteArray0 = player0.pack();
      player0.setY(0.0F);
      player0.getPictureId();
      Player player1 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player0.boss = (Party) player1;
      player1.next = (Party) player0;
      player0.getMoney();
      player0.setDead();
      player1.pack();
      player0.unpack(byteArray0);
      player0.setMoney((-264));
      player1.setDead();
      player1.setMoney(0.0F);
      player0.isJoinOK(player1, false);
      player0.type();
      player1.setX(0.1F);
      player1.isJoinOK(player0, true);
      player1.reset(true);
      player0.setZ(855.009F);
      player1.setDead(15000L);
      System.setCurrentTimeMillis((-264));
      float float0 = player0.getX();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(0, (String) null, 0);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(3, "d'", "d'", 3, 413);
      float float0 = player0.getZ();
      assertEquals(3, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertFalse(player0.isDead());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(413, player0.getStrength());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(3);
      String string0 = player0.getName();
      assertEquals("Player3", string0);
      
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = player0.getZ();
      assertEquals(float1, float0, 0.01F);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.getY();
      Player player1 = new Player();
      player0.getX();
      byte[] byteArray0 = player0.pack();
      player0.setZ(10.0F);
      player1.unpack(byteArray0);
      player0.pack();
      player1.add(player0);
      player0.isDead();
      Player player2 = new Player((short)4919);
      player0.getPictureId();
      long long0 = player1.getTimeOfDeath();
      assertEquals((-8), player1.getId());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.857186997743457
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((-4019), "state.Party", "#QtS5V=n@3O", 0, 0);
      player0.setDead((-1L));
      player0.setDead();
      player0.setDead((-836L));
      Player player1 = new Player((-650), "state.Party", "state.Party", (-664), (short)4919);
      player0.prev = (Party) player1;
      player0.type();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)1;
      player0.gangStrength();
      byteArray0[5] = (byte)44;
      player0.unpack(byteArray0);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[1] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.getName());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.362042155790716
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      Player player1 = new Player(0, "", "JO GA48a", 1);
      player0.reset(true);
      player0.getY();
      Player player2 = new Player();
      player0.setJoinOK(player2, true);
      player0.getX();
      player0.pack();
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      player0.setMoney(0.0F);
      player2.add(player0);
      player2.setY(0.0F);
      player0.setX(10.0F);
      player2.setConnected(true);
      int int1 = player2.gangStrength();
      assertEquals(2, int1);
      
      Player player3 = new Player(32514, "JO GA48a", "", 2);
      player0.setZ(2337.754F);
      assertEquals((-264), player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      
      Player player4 = new Player((-1215));
      player2.getIP();
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(0, player2.getPictureId());
      assertTrue(player2.isConnected());
      assertEquals("Player-1", player2.toString());
      assertEquals(0.0F, player2.getY(), 0.01F);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((-4010), "", (-4010));
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Player player1 = new Player((-4010));
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals("0.0.0.0", player1.getIP());
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertTrue(player1.isConnected());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(1, player1.getStrength());
      assertEquals((-4010), player0.getPictureId());
      assertEquals("Player-4010", player1.getName());
      assertEquals(0, player1.getPictureId());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((-4010), "", (-4010));
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      player0.unpack(byteArray0);
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-4010), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(0, "`S|p=S7.62S_%FknE", "H", (-691), (-3051));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)1;
      player0.unpack(byteArray0);
      assertEquals((-691), player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals((-3051), player0.getStrength());
      assertEquals("`S|p=S7.62S_%FknE", player0.getIP());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      System.setCurrentTimeMillis((byte) (-70));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Player player0 = new Player(1, "0.0.0.0", "0.0.0.0", (byte) (-70), 1);
      player0.setMoney((-945.34F));
      Player player1 = new Player(192, "0.0.0.0", "0.0.0.0", 253);
      player0.isJoinOK(player1, false);
      player0.type();
      Player player2 = new Player((-1336), "gui.ModuleBrowserDialog$ModuleFilter", (-3));
      player0.setJoinOK(player2, false);
      assertEquals((-945.34F), player0.getMoney(), 0.01F);
      
      player2.getName();
      float float0 = player1.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((-1574));
      player0.setY((-1574));
      player0.getMoney();
      float float0 = player0.getX();
      assertEquals((-1574.0F), player0.getY(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6282478391175554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      player0.setJoinOK(player0, true);
      player0.getX();
      byte[] byteArray0 = player0.pack();
      player0.setY(0.0F);
      player0.getPictureId();
      Player player1 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player0.boss = (Party) player1;
      player1.next = (Party) player0;
      player0.getMoney();
      player0.setDead();
      player1.pack();
      player0.unpack(byteArray0);
      player0.setMoney((-264));
      player1.setDead((-2094L), true);
      player1.isJoinOK(player0, true);
      player0.reset(true);
      Player player2 = new Player((-264), "", "", (short)4919);
      player1.setZ(0.0F);
      player1.setDead((long) (-264));
      assertTrue(player1.isDead());
      
      float float0 = player2.getZ();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Player player0 = new Player((-4010));
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark((-4010));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      sequenceInputStream0.close();
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.setDead(2026L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((-750), ")xv^{", ")xv^{", (-750));
      Party party0 = new Party();
      party0.next = (Party) player0;
      int int0 = player0.gangStrength();
      party0.id = 4892;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-78);
      byteArray0[1] = (byte)35;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-15);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-11);
      player0.head = party0;
      player0.head = party0;
      player0.head.boss = player0.head;
      player0.head.id = 1390;
      player0.head.head = player0.head;
      player0.getStrength();
      player0.isConnected();
      int int1 = player0.getStrength();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      System.setCurrentTimeMillis((-3615L));
      boolean boolean0 = player0.isConnected();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(boolean0);
      assertFalse(player0.isDead());
      assertEquals((-750), player0.getPictureId());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      Player player0 = new Player((-414), "0.0.0.0", "tDqv{@|ns)>n", 1, (byte) (-70));
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertEquals((-70), player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(boolean0);
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getPictureId());
      assertFalse(player0.isDead());
  }
}
