/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:21:53 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.693346696783388
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.ofLength(2122L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2122L, 2122L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2122L, 2122L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range0.getEnd();
      Range range3 = Range.ofLength(2122L);
      long long0 = range3.getEnd(range_CoordinateSystem0);
      assertEquals(2122L, long0);
      
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(range1.isEmpty());
      
      boolean boolean1 = range2.intersects(range3);
      assertFalse(boolean1 == boolean0);
      
      List<Range> list0 = range2.split(3555L);
      assertTrue(list0.contains(range2));
      
      String string0 = range0.toString();
      assertEquals("[ 0 .. 2121 ]/0B", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=4.059985493019063
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of(748L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Iterator<Long> iterator0 = range0.iterator();
      Range range1 = Range.of(range_CoordinateSystem0, (-2044L), 748L);
      Long long0 = new Long(748L);
      range1.equals(iterator0);
      range0.getEnd();
      Range range2 = Range.ofLength(1L);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range.of((-32768L));
      range3.iterator();
      Range range4 = Range.of((-32768L));
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer1);
      range4.equals("");
      // Undeclared exception!
      try { 
        Range.parseRange("SB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.1324987145789756
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(9223372034707292161L, 9223372034707292161L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      range1.equals("pJ9a0u})ve?=7B?Q");
      range0.getEnd();
      Range.ofLength(9223372034707292161L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(9223372036854775807L);
      range3.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem2);
      Range range4 = Range.ofLength(1635L);
      Range.ofLength(65534L);
      Range range5 = Range.of(0L, 9223372034707292161L);
      range5.complement(range4);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("pJ9a0u})ve?=7B?Q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.pJ9a0u})ve?=7B?Q
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.887088503937364
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of((-3189L), (-3189L));
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 305L;
      Range.of(range_CoordinateSystem1, (-3189L), 305L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, (-3189L), (-2177L));
      range0.equals(range1);
      range0.getEnd();
      Range range2 = Range.ofLength(407L);
      // Undeclared exception!
      try { 
        range2.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6199664954483044
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(9223372034707292672L);
      long long0 = (-882L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-651L), 1109L);
      range0.getBegin();
      range0.toString();
      long long1 = (-9223372036854773389L);
      // Undeclared exception!
      try { 
        Range.of(9223372034707292672L, (-9223372036854773389L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773389 would make range [9223372034707292672 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.850598003124899
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(2147483647L);
      range1.iterator();
      Range.ofLength(2147483647L);
      Object object0 = new Object();
      long long0 = (-269L);
      long long1 = 32767L;
      Range.of((-269L), 32767L);
      // Undeclared exception!
      try { 
        Range.ofLength((-684L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.744217514087203
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of((-1230L));
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, (-1230L), 1824L);
      range1.equals((Object) null);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.101496746489238
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(748L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, 748L, 748L);
      range1.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(748L, 748L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(748L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 127L, 127L);
      range1.spliterator();
      range_Builder1.expandBegin(2886L);
      Range range3 = range0.intersection(range1);
      range0.endsBefore(range2);
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      boolean boolean0 = range2.isEmpty();
      List<Range> list0 = range1.complement(range3);
      assertTrue(list0.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem1, (-1140L), 1L);
      range_Builder3.expandBegin(2886L);
      Range range4 = Range.ofLength(255L);
      Range range5 = range_Builder2.build();
      boolean boolean1 = range3.endsBefore(range4);
      assertFalse(boolean1 == boolean0);
      assertSame(range3, range5);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.064103259513564
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of(2147483647L);
      range2.iterator();
      Range range3 = Range.ofLength(2147483647L);
      Object object0 = new Object();
      range3.equals(object0);
      range2.getEnd();
      Range.ofLength(2147483647L);
      range1.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      range2.iterator();
      Range.of((-3595L));
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object1 = new Object();
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8443279635095133
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-546L), 0L);
      range_Builder0.expandEnd((-832L));
      range_Builder0.expandEnd(9223372034707292161L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      Range range0 = range_Builder1.build();
      range0.getLength();
      Range.of((-832L));
      range_Builder0.copy();
      range_Builder1.contractBegin(255L);
      range_Builder0.expandEnd(2068L);
      Range range1 = Range.of(4578L, 9223372034707292161L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.788562803813501
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range.of(1515L);
      Range range1 = Range.of((-1771L));
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1771L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.902279823050755
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range_Builder0.expandEnd(2147483647L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      range2.spliterator();
      range_Builder0.expandBegin(2147483647L);
      Range range3 = range2.intersection(range0);
      range2.endsBefore(range3);
      range0.getLength();
      range2.isEmpty();
      range1.complement(range3);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandBegin(255L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3188L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8858361411552362
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1652L, 1652L);
      boolean boolean0 = range0.intersects(range0);
      List<Range> list0 = range0.complement(range0);
      assertTrue(list0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandBegin(1652L);
      Range range1 = Range.ofLength(65534L);
      Range range2 = range_Builder0.build();
      boolean boolean1 = range1.endsBefore(range2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.816435303436544
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.of(748L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range range1 = Range.of(range_CoordinateSystem0, 748L, 748L);
      range0.equals("");
      range0.getEnd();
      Range range2 = Range.ofLength(1636L);
      Range range3 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      range3.iterator();
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Object object0 = new Object();
      range2.equals(object0);
      // Undeclared exception!
      try { 
        Range.parseRange("RB", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.073522214886451
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3788L), (-874L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 1L, 4099L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4099L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem3.getAbbreviatedName();
      Range range2 = Range.of((-3788L));
      range_Builder1.copy();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.ofLength(9223372034707292162L);
      Range range3 = range_Builder1.build();
      Range range4 = Range.parseRange("[ 1 .. 4098 ]/0B", range_CoordinateSystem2);
      range3.equals(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-3788L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.6965775323534302
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1515L);
      Range range2 = Range.of((-1771L));
      boolean boolean0 = range0.endsBefore(range2);
      assertFalse(boolean0);
      assertNotSame(range2, range0);
      
      range_Builder1.expandEnd(9223372034707292667L);
      Range range3 = Range.of(4605L, 4605L);
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.805011283978833
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1308L, 1308L);
      range_Builder0.expandEnd(1308L);
      Range range0 = Range.ofLength(1308L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1308L, 1308L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range2 = range0.asRange();
      Range.of(9223372036854775386L);
      String string0 = range2.toString();
      assertEquals("[ 0 .. 1307 ]/0B", string0);
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.Comparators.values();
      boolean boolean1 = range2.startsBefore(range1);
      assertTrue(boolean1);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.742846228513303
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-882L), (-882L));
      range0.getBegin();
      range0.toString();
      Range range1 = Range.of((-1578L), 1307L);
      range1.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder((-1578L), 65535L);
      range1.toString();
      range0.isSubRangeOf(range1);
      Range range2 = range_Builder0.build();
      range1.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-1578L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.543935476755012
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1652L, 1652L);
      Range range1 = Range.ofLength(1652L);
      boolean boolean0 = range0.intersects(range1);
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Comparators.values();
      Range range2 = Range.ofLength(4886L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.125182994735192
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1771L));
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder0.expandEnd(295L);
      Range.of((-824L), (-824L));
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(2770L);
      range2.complementFrom(list0);
      range2.isSubRangeOf(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.723294268331922
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3788L), (-874L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      long long0 = 4294967295L;
      range_Builder0.expandBegin((-3788L));
      Range range1 = Range.ofLength(4294967295L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.137986757182113
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of(2147483647L);
      range2.iterator();
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range1.equals(range3);
      range3.getEnd();
      Range.ofLength(3517L);
      Range range4 = Range.of((-73L));
      range4.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      range3.iterator();
      Range.of(255L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0808360831049293
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("bitset can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.bitset can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7171443915329077
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = (-1771L);
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2419L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.489347514470684
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem.values();
      long long0 = 2724L;
      Range.ofLength(9223372036854775098L);
      long long1 = (-275L);
      Range.of(2724L, 9223372036854775098L);
      // Undeclared exception!
      try { 
        Range.ofLength((-275L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.68281349861153
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      range_Builder0.build();
      Range range0 = Range.of((-1771L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      Range range1 = Range.of((-1L), 4578L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.852863636721967
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1308L, 1308L);
      range_Builder0.expandEnd(1308L);
      range_Builder0.expandEnd(1308L);
      Range range0 = Range.of(1308L, 1308L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range range1 = range_Builder1.build();
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 1308 .. 1307 ]/0B", string0);
      
      Range range2 = Range.parseRange("[ 1308 .. 1308 ]/0B");
      boolean boolean0 = range0.isSubRangeOf(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = Range.ofLength(1308L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range range4 = range1.intersection(range0);
      Range range5 = range4.asRange();
      //  // Unstable assertion: assertTrue(range5.equals((Object)range2));
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      //  // Unstable assertion: assertNotSame(range5, range2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.9545066457189084
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      long long0 = 0L;
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1771L));
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range range2 = Range.of(295L, 295L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.855119167291136
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = (-3788L);
      Range.Builder range_Builder0 = new Range.Builder((-874L), (-874L));
      Range range0 = Range.of(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 4099L);
      range_Builder0.expandEnd(4099L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.toString(range_CoordinateSystem1);
      Range range2 = range1.asRange();
      range2.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      Range.of((-3788L));
      Range.of(2940L);
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-2273L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.83279242345849
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = (-1771L);
      Range.Builder range_Builder0 = new Range.Builder((-1771L), (-1771L));
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1771L), 2419L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long1 = 4294967295L;
      long long2 = 2051L;
      Range range1 = Range.ofLength(2051L);
      Range range2 = Range.of((-1771L));
      range0.intersects(range2);
      range1.split(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("j8dO<C]EIEEes", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse j8dO<C]EIEEes into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.003050835198948
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775103L, 9223372036854775103L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(748L);
      range_Builder1.shift(748L);
      Range range0 = range_Builder0.build();
      Range.of(748L);
      Range.Builder range_Builder2 = range_Builder1.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder2.contractBegin((-2177L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder4.expandEnd(9223372036854775103L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 949L;
      long long1 = 255L;
      // Undeclared exception!
      try { 
        Range.of(255L, (-1840L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.8166092643244784
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range range0 = range_Builder1.build();
      range0.split(65535L);
      range_Builder1.expandBegin(4294967295L);
      Range range1 = Range.ofLength(65535L);
      Range range2 = range_Builder1.build();
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7608226443895068
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1652L, 1652L);
      Range range1 = Range.ofLength(1652L);
      range0.intersects(range1);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.693009768480223
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range_Builder0.expandEnd(2147483647L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(2147483647L);
      range1.getBegin(range_CoordinateSystem1);
      range_Builder1.contractBegin(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem2);
      range_Builder1.expandBegin((-1416L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4148083414282135
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = (-874L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-3788L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3788L), (-874L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-3788L), (-3788L));
      range0.toString(range_CoordinateSystem0);
      range_Builder0.expandEnd((-3788L));
      long long2 = 9223372034707292669L;
      // Undeclared exception!
      try { 
        Range.of(9223372034707292669L, 355L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.612587776213588
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      long long0 = 305L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483648L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.524980745472123
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder0.build();
      range_Builder0.expandBegin((-1281L));
      range_Builder0.expandBegin((-1281L));
      range_Builder2.contractEnd((-1281L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.982792281207509
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      range2.spliterator();
      range_Builder0.expandBegin(4294967294L);
      Range range3 = range1.intersection(range0);
      Range range4 = Range.of(2147483647L, 9223372034707292658L);
      range4.endsBefore(range3);
      range3.getLength();
      range4.isEmpty();
      range2.complement(range4);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder1.expandBegin(255L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3188L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.6602147180245312
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range range0 = range_Builder1.build();
      range_Builder1.expandBegin(4294967295L);
      Range range1 = Range.ofLength(65535L);
      range0.intersects(range1);
      boolean boolean0 = range1.startsBefore(range0);
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      
      List<Range> list0 = range0.split(65535L);
      assertSame(range0, range1);
      assertTrue(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.5822708650499675
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.of(748L);
      Range.Builder range_Builder0 = new Range.Builder(600L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(748L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder1.copy();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.7970175221065774
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1652L, 1652L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.ofLength(1652L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 1652 ]/SB", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7613626405024996
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = 65535L;
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range range0 = range_Builder1.build();
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.072489151310252
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1771L));
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder0.expandEnd(295L);
      Range.of(295L, 295L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range_Builder0.build();
      Range.Builder range_Builder3 = range_Builder2.expandBegin(0L);
      Range range2 = Range.ofLength(1679L);
      range_Builder3.build();
      Range range3 = Range.of((-4084L), 1771L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3891188032707174
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.090366241195325
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2419L);
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1771L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.4315720400064844
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.equals(range0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-3554L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.070969727032303
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of((-3189L), (-3189L));
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals((-3188L), long0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-3189L), 305L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-3189L), (-2177L));
      boolean boolean0 = range0.equals(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      range0.getEnd();
      Range range3 = Range.ofLength(407L);
      Range range4 = range0.intersection(range2);
      boolean boolean1 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertFalse(boolean1);
      
      Range range5 = Range.ofLength(305L);
      Range range6 = range3.intersection(range2);
      //  // Unstable assertion: assertFalse(range6.isEmpty());
      //  // Unstable assertion: assertNotSame(range3, range5);
      
      range4.asRange();
      //  // Unstable assertion: assertSame(range4, range0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=4.098389584082525
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1771L));
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      long long0 = 295L;
      range_Builder0.expandEnd(295L);
      Range range2 = Range.of(295L, 295L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Object object0 = new Object();
      range1.equals(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Tj5:)BXfHR", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Tj5:)BXfHR into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.053868500161691
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2374L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.endsBefore(range1);
      range0.getLength();
      range0.isEmpty();
      range1.complement(range0);
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder1.expandBegin(0L);
      Range.ofLength(1772L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.876550451200318
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range range0 = range_Builder1.build();
      range0.split(24L);
      range_Builder1.expandBegin(4294967295L);
      Range range1 = Range.ofLength(65535L);
      range0.intersects(range1);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of((-1732L), (-2238L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.4381228045860563
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = 4294967295L;
      Range.ofLength(4294967295L);
      Range.of(4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.383886947583248
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 1648L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.929241599675961
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(748L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range.of(range_CoordinateSystem0, 748L, 748L);
      range0.equals("");
      range0.getEnd();
      Range range1 = Range.ofLength(748L);
      range1.intersection(range0);
      Range.of(748L);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.ofLength(2886L);
      long long0 = (-254L);
      // Undeclared exception!
      try { 
        Range.ofLength((-254L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.966623308602816
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2721L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(2721L, long0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, 305L, 2721L);
      Range range2 = Range.of(range_CoordinateSystem0, (-709L), 4098L);
      range1.equals((Object) null);
      range0.getEnd();
      Range.ofLength(4098L);
      Range range3 = range0.intersection(range2);
      boolean boolean0 = range3.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range range4 = Range.ofLength(2237L);
      range4.intersection(range2);
      Range range5 = range0.asRange();
      assertSame(range5, range3);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.621309786855263
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3788L), (-874L));
      Range.of(2147483646L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 1L, 4099L);
      range_Builder0.expandEnd(4099L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range1 = range0.asRange();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.intersects(range1);
      range1.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("[ 1 .. 4098 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.[ 1 .. 4098 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.7154578302334804
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      range0.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(0L);
      range1.getLength();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.005511979037234
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of(748L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-128L));
      range_Builder1.expandEnd(4294967295L);
      range_Builder1.shift(748L);
      range_Builder1.build();
      Range range1 = Range.of((-128L));
      range_Builder1.copy();
      Range.Builder range_Builder2 = new Range.Builder(748L, 4294967295L);
      range_Builder2.contractBegin(0L);
      range_Builder2.expandEnd(2637L);
      Range range2 = Range.of(0L, 2637L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=4.106126025945949
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.of(9223372034707292161L, 9223372034707292161L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      range1.equals("pJ9a0u})ve?=7B?Q");
      range0.getEnd();
      Range range2 = Range.ofLength(9223372034707292161L);
      Range range3 = range0.intersection(range1);
      Range range4 = Range.of(9223372036854775807L);
      range4.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.intersects(range3);
      range3.getBegin(range_CoordinateSystem2);
      Range.ofLength(1635L);
      range0.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("me' FXJM{P", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse me' FXJM{P into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.9854444831240006
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = (-3189L);
      Range range0 = Range.of((-3189L), (-3189L));
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(2420L);
      range_Builder0.expandEnd(2420L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder0.build();
      range_Builder1.expandBegin((-710L));
      Range.ofLength(2420L);
      Range range1 = range_Builder1.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range0.endsBefore(range1);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.2421120474624945
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = 748L;
      Range range0 = Range.of(748L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6806345041014326
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-882L), (-882L));
      range0.getBegin();
      Range.of((-1578L), 1307L);
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("length must beW>= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.length must beW>= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.782582426759734
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Range range1 = Range.of((-1771L));
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      Range range2 = Range.of((-1L), 4578L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.759801950494674
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2419L);
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      Range range0 = Range.of((-1L), 4578L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.728429718070412
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.build();
      range_Builder1.expandBegin(4294967295L);
      Range range0 = Range.ofLength(65535L);
      Range range1 = range_Builder1.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.711896131609609
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1308L, 1308L);
      range_Builder0.expandBegin(1308L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1308L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = Range.ofLength(1308L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1308L, 1308L);
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder2.build();
      range_Builder1.expandBegin((-711L));
      Range.ofLength(1308L);
      Range range2 = range_Builder1.build();
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.556593938869672
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(3152L, 3152L);
      Range.Builder range_Builder1 = range_Builder0.shift(3152L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L, 3152L);
      range0.isSubRangeOf(range1);
      long long0 = 2049L;
      Range.Builder range_Builder2 = range_Builder1.shift(2049L);
      Range range2 = range_Builder2.build();
      range2.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2419L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), (-2003L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.8256831259401975
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = range_Builder0.shift((-1771L));
      range_Builder0.build();
      Range.of(1515L);
      Range range0 = Range.of(1201L);
      range_Builder0.copy();
      range_Builder2.contractBegin((-9223372034707292313L));
      range_Builder1.expandEnd(1515L);
      Range range1 = Range.of((-9223372034707292313L), (-9223372034707292313L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.6758562319330443
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 3933L);
      range_Builder1.build();
      Range.of(3933L);
      range_Builder1.copy();
      range_Builder1.contractBegin(988L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.expandEnd((-128L));
      // Undeclared exception!
      try { 
        Range.of((-1771L), 9223372036854775727L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=4.030906574319832
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1771L));
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder0.expandEnd(295L);
      Range.of((-824L), (-824L));
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range range2 = Range.ofLength(2770L);
      range2.isSubRangeOf(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.772663466390638
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder1.build();
      Range.of(65535L);
      range_Builder0.copy();
      range_Builder1.contractBegin((-32768L));
      range_Builder1.expandEnd((-1014L));
      // Undeclared exception!
      try { 
        Range.of(4578L, 1758L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.411853734928079
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.of((-3189L), (-3189L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-2494L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2494L), (-3189L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.0840133560770506
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = range0.getLength();
      assertEquals(2147483647L, long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.508300899800223
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 3459L);
      Range range0 = range_Builder0.build();
      Range.Comparators.values();
      Range range1 = Range.ofLength(9223372034707292666L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.776963292967871
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      range_Builder0.build();
      Range.of((-1771L));
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(4294967295L);
      // Undeclared exception!
      try { 
        Range.of((-1771L), (-3554L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.of((-1578L), (-1413L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }
}
