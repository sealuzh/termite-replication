/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:20:56 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindApplet;
import freemind.main.FreeMindMain;
import freemind.modes.browsemode.BrowseMode;
import java.awt.Component;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.util.Vector;
import javax.help.HelpSet;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;
import javax.swing.JTree;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Controller.getCommonJColorChooser();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      BrowseMode browseMode0 = new BrowseMode();
      browseMode0.getController();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JMenu jMenu0 = new JMenu();
      jMenu0.getItem(2038);
      JMenuItem jMenuItem0 = jMenu0.add((JMenuItem) jCheckBoxMenuItem0);
      JMenuItem jMenuItem1 = new JMenuItem("Browse");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jMenuItem1.invalidate();
      jCheckBoxMenuItem0.setSelected(true);
      menuSelectionManager0.isComponentPartOfCurrentMenu((Component) null);
      int int0 = 18;
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[8];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[2] = (MenuElement) jMenuItem1;
      menuElementArray0[3] = (MenuElement) jMenuItem1;
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[3] = (MenuElement) null;
      menuElementArray0[7] = (MenuElement) jCheckBoxMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 2038, 2038, 18, 2038, '-', menuElementArray0, menuSelectionManager0);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(menuKeyEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JMenu cannot be cast to java.awt.Window
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      BrowseMode browseMode0 = new BrowseMode();
      browseMode0.getController();
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrowseMode browseMode0 = new BrowseMode();
      browseMode0.getController();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JMenu jMenu0 = new JMenu();
      jMenu0.getItem(2038);
      JMenuItem jMenuItem0 = jMenu0.add((JMenuItem) jCheckBoxMenuItem0);
      JMenuItem jMenuItem1 = new JMenuItem("Browse");
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jMenuItem1.invalidate();
      jCheckBoxMenuItem0.setSelected(true);
      menuSelectionManager0.isComponentPartOfCurrentMenu((Component) null);
      int int0 = 12;
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[8];
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[2] = (MenuElement) jMenuItem1;
      menuElementArray0[3] = (MenuElement) jMenuItem1;
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[6] = (MenuElement) null;
      menuElementArray0[7] = (MenuElement) jCheckBoxMenuItem0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 2038, 2038, 12, 2038, '-', menuElementArray0, menuSelectionManager0);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(menuKeyEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JMenu cannot be cast to java.awt.Window
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Controller.getPropertyChangeListeners();
      HelpSet helpSet0 = new HelpSet();
      MockURL.getFileExample();
      Vector<JSeparator> vector0 = new Vector<JSeparator>();
      JTree jTree0 = new JTree(vector0);
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Controller.Closer controller_Closer0 = new Controller.Closer();
      String string0 = "bmhDfrP|-&i";
      Dialog dialog0 = null;
      try {
        dialog0 = new Dialog((Frame) null, "bmhDfrP|-&i");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
