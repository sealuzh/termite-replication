/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:22:55 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.text.AttributedCharacterIterator;
import java.util.Date;
import java.util.Hashtable;
import java.util.Map;
import javax.swing.AbstractButton;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JToolTip;
import javax.swing.event.AncestorListener;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.svggen.ImageHandlerJPEGEncoder;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFResourceContext;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.templates.ElemVariable;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.323294601727607
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser0.setIgnoreRepaint(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1738, 1738, (-2077), 1738, 'M');
      String string0 = AbstractButton.MNEMONIC_CHANGED_PROPERTY;
      keyEvent0.setKeyCode(1738);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser0.getMinSelectableDate();
      Date date1 = jDayChooser1.setMinSelectableDate(date0);
      Date date2 = jDayChooser1.setMinSelectableDate(date1);
      assertSame(date2, date0);
      
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getInputMap();
      jDayChooser1.setYearChooser(jYearChooser0);
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent1 = new KeyEvent(jYearChooser0, (-1191), 0L, 924, 3459, 'M');
      jDayChooser1.keyTyped(keyEvent0);
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.133789948455545
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.updateUI();
      jDayChooser0.setAlwaysFireDayProperty(false);
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser0.setIgnoreRepaint(true);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.CHAR_INDEX;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (-2716), "day");
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.206376530182932
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 100;
      jDayChooser0.setMonth(100);
      jDayChooser0.setDebugGraphicsOptions(100);
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      jToolTip0.setBounds(100, 100, 100, (-312));
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.isDayBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = null;
      try {
        date0 = new MockDate("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "jpegImage";
      int int0 = 2170;
      jDayChooser0.setYear(2170);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemVariable elemVariable0 = new ElemVariable();
      ImageHandlerJPEGEncoder imageHandlerJPEGEncoder0 = null;
      try {
        imageHandlerJPEGEncoder0 = new ImageHandlerJPEGEncoder("#)U`)s@SFI3tIH'Z", "14");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // imageDir does not exist
         //
         verifyException("org.apache.batik.svggen.AbstractImageHandlerEncoder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Metal");
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getBaselineResizeBehavior();
      int int0 = (-1833);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.doLayout();
      int int1 = 119;
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 210, "day", 119);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2308216109542167
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getToolkit();
      jDayChooser0.grabFocus();
      jDayChooser0.setDebugGraphicsOptions(218);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser0.decorationBackgroundVisible = true;
      jDayChooser0.setMaxDayCharacters(284);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDay();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      jDayChooser0.setDecorationBackgroundVisible(false);
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Graphics graphics0 = null;
      jDayChooser0.print((Graphics) null);
      int int0 = (-1538);
      jDayChooser0.drawDays();
      int int1 = 0;
      jDayChooser0.repaint((-1538), 2216, 0, 0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2216);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2216
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.205701626502847
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = true;
      jDayChooser0.requestFocus(true);
      jDayChooser0.setMonth(100);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setDebugGraphicsOptions(100);
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      jDayChooser0.init();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      jToolTip0.getComponent();
      jDayChooser0.initDecorations();
      JComponent.getDefaultLocale();
      jDayChooser0.setFocus();
      char char0 = 'h';
      int int0 = (-2817);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jToolTip0, 100, (-1L), 1068, 7, 'h', (-2817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.254485192625149
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getToolkit();
      jDayChooser0.grabFocus();
      int int0 = 100;
      jDayChooser0.setDebugGraphicsOptions(100);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setDoubleBuffered(true);
      jDayChooser0.setMaxDayCharacters(210);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.isDecorationBordersVisible();
      jDayChooser0.getDay();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 38);
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%Q";
      stringArray0[1] = "jpegImage";
      stringArray0[1] = "jpegImage";
      stringArray0[1] = "jpegImage";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      jDayChooser_DecoratorButton0.getInsets();
      jDayChooser_DecoratorButton0.isFocusable();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      // Undeclared exception!
      try { 
        defaultTreeCellRenderer0.setVerticalTextPosition(979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // verticalTextPosition
         //
         verifyException("javax.swing.JLabel", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      int int0 = 2;
      jDayChooser0.addListeners(2);
      int int1 = (-1977);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1977));
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      int int2 = 9660;
      Color color0 = new Color(9660);
      int int3 = (-3001);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      color0.getRGBComponents(floatArray0);
      floatArray0[1] = (-178.878F);
      try { 
        ICC_Profile.getInstance("org.apache.xpath.functions.FuncStartsWith");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file org.apache.xpath.functions.FuncStartsWith
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.206376530182932
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      int int0 = 3061;
      jDayChooser0.setMonth(3061);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDebugGraphicsOptions(3061);
      jDayChooser0.createToolTip();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getContainerListeners();
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(90, color0.getGreen());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.208349809527159
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser0.setIgnoreRepaint(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1738, 1738, (-2077), 1738, 'M');
      String string0 = AbstractButton.MNEMONIC_CHANGED_PROPERTY;
      keyEvent0.setKeyCode(1738);
      keyEvent0.consume();
      jDayChooser0.keyReleased(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2077), 'M', 'M', 1738, 1738, (-2077));
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      KeyEvent.getExtendedKeyCodeForChar((-2077));
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FontInfo fontInfo0 = new FontInfo();
      PDFDocument pDFDocument0 = new PDFDocument("day");
      PDFResourceContext pDFResourceContext0 = new PDFResourceContext((PDFResources) null);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, fontInfo0, pDFDocument0, pDFResourceContext0, "org.apache.log4j.HTMLLayout", "", (-2077));
      fontInfo0.getMetricsFor("gw4I");
      PDFGraphics2D pDFGraphics2D1 = null;
      try {
        pDFGraphics2D1 = new PDFGraphics2D(pDFGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getForeground();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-893.312F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1702.274F);
      floatArray0[3] = 0.0F;
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getLocale();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jPanel0.doLayout();
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 8596);
      focusEvent0.paramString();
      // Undeclared exception!
      try { 
        jPanel0.setComponentZOrder(jDayChooser0, 8596);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getSelectedDay();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.240376821376041
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 100;
      jDayChooser0.setMonth(100);
      jDayChooser0.setDebugGraphicsOptions(100);
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      jToolTip0.setBounds(100, 100, 100, (-312));
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      JDayChooser jDayChooser1 = (JDayChooser)jToolTip0.getComponent();
      jDayChooser0.initDecorations();
      JComponent.getDefaultLocale();
      jDayChooser0.setFocus();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.getBackground();
      jDayChooser0.getBorder();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-919), "Metal", (-613));
      jDayChooser0.createToolTip();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.VERTICAL_ORIENTATION;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.BASELINE_SHIFT;
      actionEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute1);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      actionEvent0.paramString();
      jDayChooser0.removeAncestorListener(ancestorListener0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3083031123337867
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.transferFocusBackward();
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser0.setIgnoreRepaint(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 1155L, (-2077), 4, 'T');
      String string0 = AbstractButton.MNEMONIC_CHANGED_PROPERTY;
      keyEvent0.setKeyCode((-2077));
      keyEvent0.consume();
      jDayChooser0.keyReleased(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(21, (-1572), (-3075), (-3075), 0, (-5601));
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setWeekdayForeground(color0);
      jDayChooser1.isDayBordersVisible();
      jDayChooser1.isWeekOfYearVisible();
      jDayChooser1.setDayBordersVisible(true);
      jDayChooser1.setDayBordersVisible(true);
      jDayChooser0.getSundayForeground();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.3542580199931558
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser0.setIgnoreRepaint(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1738, 1738, (-2077), 1738, 'M');
      String string0 = AbstractButton.MNEMONIC_CHANGED_PROPERTY;
      keyEvent0.setKeyCode(1738);
      keyEvent0.consume();
      keyEvent0.setSource(jDayChooser0);
      jDayChooser0.keyReleased(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2077), 'M', 'M', 1738, 1738, (-2077));
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isDayBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser();
      Date date0 = jDayChooser1.getMinSelectableDate();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.setMinSelectableDate(date1);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser1.setYearChooser(jYearChooser0);
      jDayChooser1.setDecorationBackgroundColor(color0);
      jDayChooser0.setDecorationBordersVisible(true);
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent((Component) null, (-1191), (-1L), (-1191), 24, 'M');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFont();
      Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      Font.getFont("day");
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 238, 238, 0, 63741, 0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
