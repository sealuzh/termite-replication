/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 10:02:58 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.Proxy;
import java.net.SocketException;
import java.nio.channels.SocketChannel;
import java.util.logging.Level;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.net.server.impl.NonBlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.681095545078155
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.getClientExtendedEventHandler();
      QuickServer quickServer0 = new QuickServer("qZrwN?U\"1*C_T-cW");
      quickServer0.setClientData("qZrwN?U\"1*C_T-cW");
      Level level0 = Level.FINE;
      level0.getLocalizedName();
      quickServer0.setConsoleLoggingLevel(level0);
      theClient0.setServer(quickServer0);
      theClient0.getClientWriteHandler();
      theClient0.setCommunicationLogging(true);
      theClient0.setCommunicationLogging(true);
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientData();
      theClient0.getSocketChannel();
      theClient0.getSocketChannel();
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3210182221049966
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      TheClient theClient1 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.setTimeout((-2258));
      theClient1.getMaxAuthTryMsg();
      theClient0.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientEventHandler();
      theClient1.getClientAuthenticationHandler();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient1.setClientEvent((ClientEvent) null);
      theClient0.getTimeout();
      theClient0.toString();
      theClient1.getClientEvent();
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient1.getSocketChannel();
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket("2aSWjx~I$[", 1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@933f1405
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.193764486816496
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.toString();
      theClient0.setTimeoutMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      theClient0.setTrusted(true);
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry((-2252));
      theClient0.setMaxConnectionMsg("");
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent0);
      SocketChannel.open();
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxConnectionMsg();
      theClient0.getClientEvent();
      theClient0.getSocketChannel();
      theClient0.getClientWriteHandler();
      assertEquals((-2252), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[0] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("Hw>");
      theClient0.getMaxConnectionMsg();
      theClient0.setMaxAuthTryMsg("Hw>");
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocketChannel();
      theClient0.getClientBinaryHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      theClient0.getClientEvent();
      theClient0.getSocketChannel();
      theClient0.getSocket();
      theClient0.getClientData();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientData();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.380937795632014
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout(1857);
      theClient1.getMaxAuthTryMsg();
      theClient1.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.getClientEventHandler();
      theClient0.getClientAuthenticationHandler();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getTimeout();
      theClient0.toString();
      theClient0.getClientEvent();
      ClientEvent clientEvent1 = ClientEvent.MAX_CON;
      theClient1.setClientEvent(clientEvent1);
      theClient1.getSocket();
      theClient1.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTimeout();
      theClient0.getSocket();
      assertEquals(1857, theClient0.getTimeout());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.toString();
      theClient0.setTimeoutMsg("V3uda]UmsQ)C]MVT");
      theClient0.getTimeout();
      theClient0.getClientCommandHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      theClient0.getTimeoutMsg();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      // Undeclared exception!
      try { 
        blockingClientHandler0.getSelectionKey();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Can't get in blocking mode!
         //
         verifyException("org.quickserver.net.server.impl.BlockingClientHandler", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getClientEvent();
      theClient0.getClientAuthenticationHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.53575050789886
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setCommunicationLogging(false);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setMaxAuthTry(1975);
      theClient0.getCommunicationLogging();
      theClient0.getClientCommandHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.toString();
      theClient0.getServer();
      SocketChannel socketChannel0 = SocketChannel.open();
      socketChannel0.getLocalAddress();
      theClient0.getMaxAuthTry();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("9R7|Qu");
      theClient0.setSocketChannel(socketChannel0);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getCommunicationLogging();
      theClient0.setMaxConnectionMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      assertEquals(1975, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.toString();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeout();
      theClient0.getClientCommandHandler();
      theClient0.toString();
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      theClient0.getTimeoutMsg();
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      NonBlockingClientHandler.setWakeupSelectorAfterRegisterRead(false);
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      try { 
        commandHandler0.gotConnected(nonBlockingClientHandler0);
        fail("Expecting exception: SocketException");
      
      } catch(SocketException e) {
         //
         // Connection is no more open!
         //
         verifyException("org.quickserver.net.server.impl.BasicClientHandler", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3815998280716038
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTrusted(true);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTryMsg("-Mll#LON E1");
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientAuthenticationHandler();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setClientEvent(clientEvent0);
      TheClient theClient1 = new TheClient();
      theClient1.getTimeout();
      theClient1.toString();
      theClient1.getClientEvent();
      ClientEvent clientEvent1 = ClientEvent.MAX_CON;
      theClient1.setClientEvent(clientEvent0);
      theClient1.getSocket();
      theClient1.getClientCommandHandler();
      theClient1.getClientExtendedEventHandler();
      TheClient theClient2 = new TheClient();
      theClient2.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient2.getTrusted());
      
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3812808488052557
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      TheClient theClient1 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientBinaryHandler();
      TheClient theClient2 = new TheClient();
      theClient2.getClientWriteHandler();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.setTimeout((-2258));
      theClient0.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientEventHandler();
      theClient1.getClientAuthenticationHandler();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient1.setClientEvent(clientEvent0);
      theClient1.getTimeout();
      theClient1.toString();
      ClientEvent clientEvent1 = theClient1.getClientEvent();
      ClientEvent clientEvent2 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent1);
      theClient0.getSocket();
      theClient1.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTimeout();
      theClient1.getSocket();
      assertEquals((-2258), theClient1.getTimeout());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1919211688441456
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getMaxConnectionMsg();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setServer((QuickServer) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      MockSocket mockSocket0 = null;
      try {
        mockSocket0 = new MockSocket(", Event: ", (-1828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // port out of range:-1828
         //
         verifyException("java.net.InetSocketAddress", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6701173224114383
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setCommunicationLogging(false);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setMaxAuthTry(1975);
      theClient0.getCommunicationLogging();
      theClient0.getClientCommandHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTry(0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxConnectionMsg("MvT>");
      theClient0.getMaxAuthTryMsg();
      theClient0.getTimeoutMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setMaxAuthTryMsg((String) null);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg((String) null);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientExtendedEventHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      theClient0.getClientData();
      assertEquals(0, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.setTrusted(true);
      theClient0.getTrusted();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setTimeout(675);
      theClient0.getTimeoutMsg();
      theClient0.getCommunicationLogging();
      theClient0.setTimeoutMsg("client-data-pool-info");
      CommandHandler commandHandler0 = new CommandHandler();
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler();
      // Undeclared exception!
      try { 
        commandHandler0.handleCommand(nonBlockingClientHandler0, "client-data-pool-info");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.CommandHandler", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      mockSocket0.getInetAddress();
      mockSocket0.getLocalSocketAddress();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientData();
      int int0 = theClient0.getMaxAuthTry();
      theClient0.getClientExtendedEventHandler();
      int int1 = theClient0.getTimeout();
      assertTrue(int1 == int0);
      
      theClient0.getSocket();
      theClient0.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient0.getTimeoutMsg();
      theClient0.getClientAuthenticationHandler();
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4866413644630816
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      TheClient theClient1 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientBinaryHandler();
      TheClient theClient2 = new TheClient();
      theClient2.getClientWriteHandler();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.setTimeout((-2258));
      theClient1.getMaxAuthTryMsg();
      theClient0.getClientAuthenticationHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientEventHandler();
      theClient1.getClientAuthenticationHandler();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient1.setClientEvent(clientEvent0);
      theClient1.getTimeout();
      theClient1.toString();
      theClient1.setMaxAuthTryMsg("");
      theClient0.getClientObjectHandler();
      theClient2.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("");
      theClient1.setCommunicationLogging(true);
      theClient1.getClientExtendedEventHandler();
      theClient1.getMaxAuthTryMsg();
      assertEquals((-2258), theClient1.getTimeout());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      TheClient theClient1 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient1.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getClientBinaryHandler();
      theClient1.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.setTimeout((-2258));
      QuickServer quickServer0 = new QuickServer("1Kw/", 9876);
      quickServer0.setBindAddr("7w<~&AOm4fWH]");
      theClient0.setServer(quickServer0);
      CommandHandler commandHandler0 = new CommandHandler();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte) (-33);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.lostConnection(blockingClientHandler0);
      NonBlockingClientHandler nonBlockingClientHandler0 = new NonBlockingClientHandler(619);
      commandHandler0.lostConnection(nonBlockingClientHandler0);
      NonBlockingClientHandler nonBlockingClientHandler1 = new NonBlockingClientHandler(32);
      // Undeclared exception!
      try { 
        commandHandler0.handleCommand(nonBlockingClientHandler1, "1Kw/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.quickserver.net.qsadmin.CommandHandler", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientCommandHandler();
      defaultClientEventHandler0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientData();
      theClient0.getSocket();
      TheClient theClient1 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setTimeoutMsg("Rpq");
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEventHandler();
      TheClient theClient2 = new TheClient();
      theClient2.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2597682094192684
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientCommandHandler();
      defaultClientEventHandler0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setMaxAuthTry((-2252));
      theClient0.setMaxConnectionMsg("ul;ldWCt_}4f-t.");
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getSocketChannel();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.setTimeout(0);
      TheClient theClient1 = new TheClient();
      theClient0.getClientEventHandler();
      theClient0.getTrusted();
      assertEquals((-2252), theClient0.getMaxAuthTry());
      
      theClient1.getClientData();
      theClient1.getClientAuthenticationHandler();
      assertEquals(0, theClient1.getMaxAuthTry());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setTimeoutMsg("E)8'36 /kmNk).Hu,");
      theClient0.setSocketChannel((SocketChannel) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientWriteHandler();
      TheClient theClient1 = new TheClient();
      TheClient theClient2 = new TheClient();
      theClient2.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient3 = new TheClient();
      boolean boolean0 = theClient3.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getClientWriteHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-116);
      data0.setPassword(byteArray0);
      theClient0.setClientData(data0);
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      assertTrue(theClient0.getTrusted());
  }
}
