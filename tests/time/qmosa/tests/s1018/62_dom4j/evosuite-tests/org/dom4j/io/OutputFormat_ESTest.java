/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:33:25 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4533614109018083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-newlines");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isXHTML();
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat0.setIndent(false);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat2.setXHTML(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmpty-line.e%arAWor";
      stringArray0[1] = "-expandEmpty-nGneSeparator";
      stringArray0[2] = "-expandEmptyrh+VZaC+b";
      stringArray0[3] = "-newlines";
      stringArray0[4] = "-newlines";
      stringArray0[5] = "f?(K#/s|XL[WK,GRIu+";
      stringArray0[6] = "-expandEmpty-nGneSeparator";
      stringArray0[7] = "-expandEmpty-nGneSeparator";
      stringArray0[8] = "-expandEmptyrh+VZaC+b";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat0.setSuppressDeclaration(true);
      assertTrue(outputFormat0.isSuppressDeclaration());
      
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat3.getIndent());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "Invalid attribute quote character (";
      stringArray0[2] = "Ks0 Uh_,SO+1imlFmA";
      stringArray0[3] = "";
      stringArray0[4] = "UTF-8";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Invalid attribute quote character (\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4922756345413966
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "Oy2^T78H_";
      stringArray0[2] = "Oy2^T78H_";
      stringArray0[3] = "Oy2^T78H_";
      OutputFormat outputFormat0 = new OutputFormat("Oy2^T78H_", true);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setPadText(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setExpandEmptyElements(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setIndent("Oy2^T78H_");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals("Oy2^T78H_", outputFormat0.getLineSeparator());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9535817885271314
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "8h~H";
      boolean boolean0 = true;
      OutputFormat outputFormat0 = new OutputFormat("-xhtml\n", true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-xhtml\n";
      stringArray0[1] = "-xhtml\n";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewlines(false);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      
      outputFormat0.setEncoding("");
      outputFormat0.setIndentSize((-4454));
      outputFormat0.setIndentSize((-761));
      outputFormat0.getEncoding();
      outputFormat0.getLineSeparator();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals("", outputFormat0.getEncoding());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.557952151853939
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewlines(false);
      outputFormat0.setTrimText(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isTrimText();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setXHTML(true);
      String[] stringArray0 = new String[10];
      outputFormat0.setNewLineAfterNTags(0);
      stringArray0[0] = "";
      stringArray0[1] = "q*Kya02t7lD=4Q";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "-indent";
      stringArray1[1] = "-indent";
      stringArray1[2] = "-indent";
      stringArray1[3] = "-indent";
      stringArray1[4] = "";
      outputFormat0.setIndentSize(34);
      stringArray1[5] = "q*Kya02t7lD=4Q";
      stringArray1[6] = "-indent";
      stringArray1[7] = "-indent";
      int int0 = outputFormat0.parseOptions(stringArray1, 0);
      assertEquals("-indent", outputFormat0.getIndent());
      assertEquals(4, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.366887813473796
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("M.K+l*bX");
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "-lineSeparator";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "-lineSeparator";
      stringArray0[6] = "-indent";
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("j%NIeI'0e");
      String[] stringArray0 = new String[5];
      stringArray0[4] = "8h~6";
      stringArray0[1] = "-xhtmlf?(K#/s|XL[WK,GRIu+";
      stringArray0[2] = "-xhtmlf?(K#/s|XL[WK,GRIu+";
      stringArray0[3] = "8h~6";
      stringArray0[4] = "-lineSeparator";
      outputFormat0.parseOptions(stringArray0, 424);
      outputFormat0.setEncoding("");
      outputFormat0.getIndent();
      outputFormat0.setEncoding((String) null);
      outputFormat0.setIndent("");
      outputFormat0.parseOptions(stringArray0, 424);
      outputFormat0.setSuppressDeclaration(true);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals("", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.026522790307467
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      outputFormat0.setPadText(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setNewLineAfterNTags((-1994091956));
      outputFormat1.setEncoding("");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat1.getNewLineAfterNTags();
      outputFormat0.setIndentSize(3659);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewlines(false);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, (-2293));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2293
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0103904401323787
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(true);
      outputFormat0.setPadText(false);
      outputFormat0.setXHTML(false);
      outputFormat0.isOmitEncoding();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setEncoding("RsD");
      outputFormat1.setPadText(false);
      outputFormat1.setOmitEncoding(true);
      outputFormat0.setIndent("RsD");
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat1.isOmitEncoding();
      outputFormat1.setXHTML(true);
      outputFormat1.setIndent("RsD");
      assertEquals("RsD", outputFormat1.getIndent());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7769696274740046
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setIndent(false);
      outputFormat0.setEncoding("q*Kya02t7lD=4Q");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewlines(false);
      outputFormat0.setTrimText(false);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isTrimText();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setXHTML(true);
      String[] stringArray0 = new String[8];
      outputFormat0.setNewLineAfterNTags(0);
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "q*Kya02t7lD=4Q";
      stringArray0[4] = "";
      stringArray0[5] = "q*Kya02t7lD=4Q";
      stringArray0[6] = "q*Kya02t7lD=4Q";
      stringArray0[7] = "q*Kya02t7lD=4Q";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setPadText(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isXHTML();
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertEquals("q*Kya02t7lD=4Q", outputFormat0.getEncoding());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2247111441283223
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setXHTML(true);
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize(0);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent("");
      outputFormat0.setTrimText(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.isXHTML();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat0.setNewLineAfterNTags(2);
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[6] = "";
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setLineSeparator("");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setIndentSize(2);
      outputFormat0.isTrimText();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setXHTML(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setPadText(false);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertEquals(2, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0257505895352663
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[10];
      OutputFormat outputFormat0 = new OutputFormat("f?(K#/s|XL[WK,GRIu+", true, (String) null);
      outputFormat0.setPadText(true);
      outputFormat0.setXHTML(true);
      assertEquals("f?(K#/s|XL[WK,GRIu+", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize((-702));
      outputFormat0.getIndent();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setTrimText(true);
      outputFormat0.setIndent((String) null);
      outputFormat1.parseOptions(stringArray0, 13);
      outputFormat1.parseOptions(stringArray0, 1331);
      outputFormat0.setSuppressDeclaration(false);
      boolean boolean0 = outputFormat0.isPadText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.getIndent();
      outputFormat0.setIndent("");
      OutputFormat outputFormat1 = new OutputFormat((String) null, true);
      outputFormat1.setIndent("");
      OutputFormat outputFormat2 = new OutputFormat();
      assertFalse(outputFormat2.isSuppressDeclaration());
      
      outputFormat2.setSuppressDeclaration(true);
      assertTrue(outputFormat2.isSuppressDeclaration());
      
      outputFormat1.setIndent("");
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isNewlines();
      outputFormat0.setSuppressDeclaration(true);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1772054076949647
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("_3N2/.!%:");
      outputFormat0.setIndent("");
      outputFormat0.setPadText(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setLineSeparator("");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(0);
      outputFormat0.getIndent();
      outputFormat0.setIndent("_3N2/.!%:");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent("");
      outputFormat0.getLineSeparator();
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.112646050581686
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("tw^?IRIay[#", true);
      String[] stringArray0 = new String[0];
      outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("tw^?IRIay[#", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      
      String[] stringArray1 = new String[7];
      stringArray1[0] = "tw^?IRIay[#";
      stringArray1[1] = "8h~H";
      stringArray1[2] = "8h~H";
      stringArray1[3] = "-lineSeparator";
      stringArray1[4] = "tw^?IRIay[#";
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      int int0 = outputFormat1.parseOptions(stringArray1, 0);
      assertFalse(outputFormat1.isPadText());
      assertEquals(0, int0);
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals("  ", outputFormat2.getIndent());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertTrue(outputFormat2.isTrimText());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertFalse(outputFormat2.isOmitEncoding());
      assertTrue(outputFormat2.isPadText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("_3N2/.!%:");
      OutputFormat outputFormat1 = new OutputFormat("", true, "[}q{");
      OutputFormat outputFormat2 = new OutputFormat("[}q{", false);
      outputFormat1.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3121670102718244
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "@~\"";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isPadText());
      assertEquals("  ", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      int int0 = outputFormat1.getNewLineAfterNTags();
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isPadText());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals(0, int0);
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isSuppressDeclaration());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9598083393209311
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = "-lineSeparator";
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "8h~6";
      stringArray0[2] = "-lineSeparator";
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator", true);
      outputFormat0.getIndent();
      outputFormat0.setIndent("");
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("Pi<u");
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter(' ');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character ( )
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2310758932103294
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setTrimText(true);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      outputFormat3.setIndent(true);
      outputFormat2.setNewLineAfterDeclaration(true);
      outputFormat2.setXHTML(false);
      outputFormat0.isTrimText();
      outputFormat1.setLineSeparator("`yX@F*Nw7.Vf,>");
      outputFormat0.setNewLineAfterNTags(1562);
      OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isXHTML();
      outputFormat2.setIndent(true);
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat2.isPadText();
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isOmitEncoding();
      assertEquals(1562, outputFormat0.getNewLineAfterNTags());
      
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      assertEquals("\n", outputFormat4.getLineSeparator());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9410699503727393
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("eziKyeLm0L`", false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndent("eziKyeLm0L`");
      outputFormat0.setNewlines(false);
      outputFormat0.setIndent("eziKyeLm0L`");
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setXHTML(true);
      outputFormat0.setPadText(false);
      outputFormat0.setIndentSize(0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-723));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -723
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      stringArray0[2] = "8h~6";
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(stringArray0[1]);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "8h~6";
      stringArray1[1] = "8h~6";
      stringArray1[2] = "rh+VZaC+b";
      stringArray1[3] = "-lineSeparator";
      stringArray1[4] = "8h~6";
      stringArray1[6] = "8h~6";
      stringArray1[7] = "-lineSeparator";
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      outputFormat0.setIndent(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewlines(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.isTrimText();
      boolean boolean0 = true;
      outputFormat0.setXHTML(true);
      String[] stringArray0 = new String[10];
      outputFormat0.setPadText(false);
      stringArray0[2] = "";
      stringArray0[3] = "q*Kya02t7lD=4Q";
      stringArray0[4] = "";
      stringArray0[5] = "q*Kya02t7lD=4Q";
      stringArray0[6] = "q*Kya02t7lD=4Q";
      stringArray0[7] = "q*Kya02t7lD=4Q";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat((String) null, true, "-expandEmpty-nGneSeparator");
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "-expandEmpty-nGneSeparator";
      stringArray0[2] = null;
      stringArray0[3] = "-expandEmpty-nGneSeparator";
      stringArray0[4] = null;
      stringArray0[5] = "-expandEmpty-nGneSeparator";
      stringArray0[6] = "-expandEmpty-nGneSeparator";
      stringArray0[7] = null;
      stringArray0[8] = null;
      outputFormat0.parseOptions(stringArray0, 975);
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.7156338174862886
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSe^arator";
      stringArray0[1] = "Oy2^T78H_";
      stringArray0[2] = "Oy2^T78H_";
      stringArray0[3] = "Oy2^T78H_";
      OutputFormat outputFormat0 = new OutputFormat("Oy2^T78H_", true);
      outputFormat0.parseOptions(stringArray0, 0);
      OutputFormat outputFormat1 = new OutputFormat("-lineSe^arator", true);
      int int0 = outputFormat1.parseOptions(stringArray0, 0);
      assertEquals("-lineSe^arator", outputFormat1.getIndent());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isPadText());
      assertFalse(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isXHTML());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, int0);
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertTrue(outputFormat1.isNewlines());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("tw^?IRIay[#", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "tw^?IRIay[#";
      stringArray0[1] = "8h~H";
      stringArray0[2] = "8h~H";
      stringArray0[3] = "-lineSeparator";
      stringArray0[4] = "tw^?IRIay[#";
      outputFormat0.setIndent("tw^?IRIay[#");
      assertEquals("tw^?IRIay[#", outputFormat0.getIndent());
      
      OutputFormat outputFormat1 = new OutputFormat();
      assertFalse(outputFormat1.isNewlines());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isPadText());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isXHTML());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isOmitEncoding());
      
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "-lineSeparator";
      OutputFormat outputFormat0 = new OutputFormat("j%NIeI'0e", true);
      outputFormat0.getIndent();
      outputFormat0.setIndent("j%NIeI'0e");
      OutputFormat outputFormat1 = new OutputFormat("-lineSeparator", true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "/u^Y#jK";
      outputFormat1.setExpandEmptyElements(true);
      // Undeclared exception!
      try { 
        outputFormat1.parseOptions(stringArray0, (-2045222519));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2045222519
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6266530123885272
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-nGneSeparator", true);
      outputFormat0.setPadText(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isXHTML();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-expandEmptyrh+VZaC+b";
      stringArray0[1] = "-expandEmptyrh+VZaC+b";
      stringArray0[2] = "-expandEmptyrh+VZaC+b";
      stringArray0[3] = "JI*:(mdKi>;f oB)";
      stringArray0[4] = "-expandEmptyrh+VZaC+b";
      stringArray0[1] = "-nGneSeparator";
      outputFormat0.setPadText(false);
      stringArray0[6] = "-lineSeparator";
      stringArray0[7] = "tw^?IRIay[#";
      stringArray0[8] = "-nGneSeparator";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.parseOptions(stringArray0, 176);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setSuppressDeclaration(true);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", true);
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize(0);
      outputFormat0.isNewLineAfterDeclaration();
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("q*Kya02t7lD=4Q");
      outputFormat0.setEncoding("");
      OutputFormat outputFormat1 = new OutputFormat();
      String string0 = OutputFormat.STANDARD_INDENT;
      assertEquals("  ", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml", false);
      assertEquals("-xhtml", outputFormat0.getIndent());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isOmitEncoding());
      
      OutputFormat outputFormat1 = new OutputFormat();
      OutputFormat outputFormat2 = new OutputFormat("-xhtml", false, "-xhtml");
      OutputFormat outputFormat3 = new OutputFormat();
      outputFormat3.setIndent(false);
      outputFormat2.setIndent("-xhtml");
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertEquals("-xhtml", outputFormat2.getIndent());
      assertFalse(outputFormat2.isOmitEncoding());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertFalse(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isXHTML());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isNewlines());
      assertFalse(outputFormat2.isPadText());
      assertEquals("-xhtml", outputFormat2.getEncoding());
      
      outputFormat1.setIndent("-xhtml");
      assertFalse(outputFormat1.isXHTML());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertFalse(outputFormat1.isPadText());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isNewlines());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("OBI", true, "");
      outputFormat0.setIndentSize(1);
      assertEquals(" ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.688514447186191
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("_3N2/.!%:");
      outputFormat0.setIndent("");
      outputFormat0.setPadText(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setLineSeparator("");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(0);
      outputFormat0.getIndent();
      outputFormat0.setIndent("_3N2/.!%:");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "_3N2/.!%:";
      stringArray0[3] = "";
      stringArray0[2] = "";
      stringArray0[5] = "_3N2/.!%:";
      stringArray0[6] = "_3N2/.!%:";
      stringArray0[7] = "";
      stringArray0[8] = "";
      outputFormat0.isSuppressDeclaration();
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals("_3N2/.!%:", outputFormat0.getIndent());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Oy2^T78H_", true);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("Oy2^T78H_", outputFormat0.getIndent());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndentSize((-73));
      assertFalse(outputFormat1.isPadText());
      assertEquals("", outputFormat1.getIndent());
      assertTrue(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals("\n", outputFormat2.getLineSeparator());
      assertEquals(0, outputFormat2.getNewLineAfterNTags());
      assertTrue(outputFormat2.isPadText());
      assertEquals("  ", outputFormat2.getIndent());
      assertEquals("UTF-8", outputFormat2.getEncoding());
      assertFalse(outputFormat2.isOmitEncoding());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isExpandEmptyElements());
      assertFalse(outputFormat2.isSuppressDeclaration());
      assertEquals('\"', outputFormat2.getAttributeQuoteCharacter());
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
      assertTrue(outputFormat2.isNewlines());
      assertFalse(outputFormat2.isXHTML());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("E9`1li6x}+^");
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isTrimText());
      assertEquals("E9`1li6x}+^", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2137026173659393
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "8h~6";
      stringArray0[2] = "8h~6";
      stringArray0[3] = "8h~6";
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setNewLineAfterNTags(0);
      OutputFormat.createCompactFormat();
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("8h~6", outputFormat0.getLineSeparator());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7590479998760498
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("|", true);
      boolean boolean0 = outputFormat0.isXHTML();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(boolean0);
      assertEquals("|", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewlines());
      
      OutputFormat outputFormat1 = new OutputFormat();
      assertFalse(outputFormat1.isTrimText());
      assertFalse(outputFormat1.isNewlines());
      
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat2.isPadText());
      assertTrue(outputFormat2.isTrimText());
      assertFalse(outputFormat2.isNewlines());
      
      OutputFormat outputFormat3 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat3.isNewlines());
      assertEquals("\n", outputFormat3.getLineSeparator());
      assertTrue(outputFormat3.isNewLineAfterDeclaration());
      assertFalse(outputFormat3.isXHTML());
      assertFalse(outputFormat3.isExpandEmptyElements());
      assertTrue(outputFormat3.isTrimText());
      assertFalse(outputFormat3.isSuppressDeclaration());
      assertEquals('\"', outputFormat3.getAttributeQuoteCharacter());
      assertFalse(outputFormat3.isOmitEncoding());
      assertEquals("  ", outputFormat3.getIndent());
      assertTrue(outputFormat3.isPadText());
      assertEquals(0, outputFormat3.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat3.getEncoding());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmllh\tN}nd;kf{");
      outputFormat0.setIndent(true);
      assertEquals("  ", outputFormat0.getIndent());
      
      outputFormat0.setIndent("-xhtmllh\tN}nd;kf{");
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3626867252557675
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-lineSeparator", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f?(K#/s|XL[WK,GRIu+";
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      stringArray0[1] = "f?(K#/s|XL[WK,GRIu+";
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      stringArray0[2] = "\n";
      stringArray0[3] = "-lineSeparator";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "pUp";
      stringArray0[6] = "8NbC'Mf&2-";
      stringArray0[7] = "f?(K#/s|XL[WK,GRIu+";
      outputFormat1.parseOptions(stringArray0, 0);
      outputFormat2.setPadText(false);
      outputFormat2.setSuppressDeclaration(false);
      assertFalse(outputFormat2.isPadText());
      
      boolean boolean0 = outputFormat1.isPadText();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-encoding", false);
      outputFormat0.getIndent();
      outputFormat0.setIndent("lh\tN}nd;kf{");
      OutputFormat outputFormat1 = new OutputFormat("JI*:(m", false);
      outputFormat1.setOmitEncoding(false);
      outputFormat0.setIndent("-omitEncoding");
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat0.setIndent("{w0");
      assertEquals("{w0", outputFormat0.getIndent());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("8h~H");
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("8h~H", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("UTF-8", string0);
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-indentSize");
      boolean boolean0 = outputFormat0.isNewlines();
      assertFalse(boolean0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("-indentSize", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0400432449870047
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "8h~6";
      stringArray0[0] = "8h~6";
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat0.isNewlines());
      
      outputFormat0.setNewlines(true);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("8h~6", true);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('}');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (})
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-lineSeparator", false, "v0@2}?Bh~hw]0c^U&");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("-expandEmpty-lineSeparator", outputFormat0.getIndent());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("j%NIeI'0e", true);
      outputFormat0.setPadText(false);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isXHTML();
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.setIndent(true);
      outputFormat0.setXHTML(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-lineSeparator";
      stringArray0[1] = "-lineSeparator";
      stringArray0[2] = "f?(K#/s|XL[WK,GRIu+";
      stringArray0[3] = "-expandEmptyrh+VZaC+b";
      stringArray0[4] = "Oy2^T78H_";
      stringArray0[5] = "j%NIeI'0e";
      stringArray0[6] = "-lineSeparator";
      stringArray0[7] = "j%NIeI'0e";
      outputFormat1.setSuppressDeclaration(false);
      outputFormat1.setSuppressDeclaration(true);
      outputFormat0.setIndent("-lineSeparator");
      assertEquals("-lineSeparator", outputFormat0.getIndent());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-nGneSeparator", true);
      outputFormat0.setPadText(true);
      outputFormat0.setPadText(true);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.isXHTML();
      OutputFormat outputFormat1 = new OutputFormat();
      outputFormat1.isXHTML();
      OutputFormat outputFormat2 = new OutputFormat();
      outputFormat1.setNewLineAfterDeclaration(true);
      outputFormat1.setSuppressDeclaration(true);
      assertTrue(outputFormat1.isSuppressDeclaration());
      
      outputFormat2.setIndent("");
      assertFalse(outputFormat2.isSuppressDeclaration());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("+[?D(/pS}{C4e:atUV ");
      String string0 = outputFormat0.getLineSeparator();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", string0);
      assertFalse(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("+[?D(/pS}{C4e:atUV ", outputFormat0.getIndent());
  }
}
