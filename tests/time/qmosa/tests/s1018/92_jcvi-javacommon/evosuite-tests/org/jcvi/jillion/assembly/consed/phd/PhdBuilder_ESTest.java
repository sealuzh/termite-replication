/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:43:40 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.083122122960416
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      Chromatogram chromatogram0 = null;
      phdBuilder1.fakePeaks();
      phdBuilder0.fakePeaks();
      PhdBuilder phdBuilder2 = phdBuilder0.peaks((PositionSequence) null);
      // Undeclared exception!
      try { 
        phdBuilder2.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("?0F%", nucleotideSequence0, qualitySequence1);
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("tr7-", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      PositionSequence positionSequence0 = null;
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd((String) null, nucleotideSequence0, (QualitySequence) null, map0, (List<PhdWholeReadItem>) linkedList0);
      List<PhdWholeReadItem> list0 = artificialPhd0.getWholeReadItems();
      List<PhdReadTag> list1 = null;
      DefaultPhd defaultPhd0 = new DefaultPhd((String) null, nucleotideSequence0, (QualitySequence) null, (PositionSequence) null, map0, list0, (List<PhdReadTag>) null);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      DefaultPhd defaultPhd0 = new DefaultPhd("peak spacing must be >0", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4223665577792008
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder2 = phdBuilder0.fakePeaks();
      phdBuilder1.fakePeaks(1723, 463);
      PhdBuilder phdBuilder3 = phdBuilder2.fakePeaks(463, 375);
      assertSame(phdBuilder2, phdBuilder3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      PhdBuilder phdBuilder0 = new PhdBuilder("$G+i#? O91.hygW", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(19, (-919));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      LinkedList<PhdWholeReadItem> linkedList2 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList3 = new LinkedList<PhdReadTag>();
      LinkedList<PhdWholeReadItem> linkedList4 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList5 = new LinkedList<PhdReadTag>();
      LinkedList<PhdReadTag> linkedList6 = new LinkedList<PhdReadTag>();
      linkedList5.toArray();
      Range range0 = Range.of(0L);
      MockDate mockDate0 = new MockDate(66, 1190, 1190, 1662, 1);
      mockDate0.toInstant();
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("i}Lv$UUBu:6~", "bM~", range0, mockDate0, "bM~", "i}Lv$UUBu:6~");
      defaultPhdReadTag0.equals("bM~");
      linkedList5.add((PhdReadTag) defaultPhdReadTag0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      LinkedList<PhdWholeReadItem> linkedList2 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList3 = new LinkedList<PhdReadTag>();
      LinkedList<PhdWholeReadItem> linkedList4 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList5 = new LinkedList<PhdReadTag>();
      LinkedList<PhdReadTag> linkedList6 = new LinkedList<PhdReadTag>();
      Range range0 = Range.of(0L);
      MockDate mockDate0 = new MockDate(66, 1190, 1190, 1662, 1);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag("i}Lv$UUBu:6~", "bM~", range0, mockDate0, "bM~", "i}Lv$UUBu:6~");
      linkedList5.add((PhdReadTag) defaultPhdReadTag0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate3.negate();
      predicate1.test((Object) null);
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate6 = predicate0.and(predicate3);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate7 = predicate5.or(predicate6);
      Predicate<Object> predicate8 = predicate5.and(predicate7);
      Predicate<Object> predicate9 = predicate1.or(predicate3);
      Predicate<Object> predicate10 = predicate9.and(predicate0);
      Object object2 = new Object();
      predicate1.test(object2);
      Predicate<Object> predicate11 = predicate6.and(predicate10);
      predicate8.negate();
      Predicate<Object> predicate12 = predicate9.or(predicate0);
      Object object3 = new Object();
      predicate10.test(object3);
      predicate6.test(object3);
      Object object4 = new Object();
      Predicate<Object> predicate13 = predicate7.negate();
      Predicate<Object> predicate14 = predicate4.and(predicate7);
      Predicate<Object> predicate15 = predicate4.and(predicate13);
      Predicate<Object> predicate16 = predicate15.negate();
      predicate15.negate();
      predicate11.or(predicate12);
      predicate11.negate();
      predicate13.or(predicate14);
      predicate16.and(predicate2);
      Chromatogram chromatogram0 = null;
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("chromatogram can not be null", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      Predicate<Object> predicate6 = predicate3.negate();
      predicate1.test((Object) null);
      Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate7 = predicate0.and(predicate3);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate8 = predicate6.or(predicate7);
      Predicate<Object> predicate9 = predicate6.and(predicate8);
      Predicate<Object> predicate10 = predicate1.or(predicate3);
      Predicate<Object> predicate11 = predicate10.and(predicate0);
      Object object2 = new Object();
      Object object3 = new Object();
      predicate1.test(object3);
      predicate7.and(predicate11);
      predicate9.negate();
      predicate10.or(predicate0);
      Object object4 = new Object();
      predicate11.test(object4);
      predicate7.test(object4);
      predicate5.negate();
      Object object5 = new Object();
      Predicate<Object> predicate12 = predicate8.negate();
      predicate7.or(predicate12);
      predicate0.and(predicate5);
      predicate10.negate();
      predicate9.or(predicate4);
      predicate12.and(predicate2);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("can not remove from Range", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("m", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate6 = predicate0.and(predicate3);
      predicate5.or(predicate6);
      Predicate<Object> predicate7 = predicate1.or(predicate3);
      predicate7.and(predicate0);
      Object object2 = new Object();
      Object object3 = new Object();
      predicate2.test(predicate7);
      Object object4 = new Object();
      Object object5 = new Object();
      predicate3.test(object5);
      predicate5.test((Object) null);
      Predicate<Object> predicate8 = predicate1.negate();
      Object object6 = new Object();
      Predicate<Object> predicate9 = predicate4.or(predicate8);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      predicate11.or(predicate2);
      predicate10.and(predicate1);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("m", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("1|\"`=L?:D%-hOI&>Jc:", nucleotideSequence0, qualitySequence0);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("phd to copy can not be null", nucleotideSequence1, qualitySequence1, (-635));
      Map<String, String> map0 = new HashMap<String, String>();
      PhdBuilder phdBuilder1 = phdBuilder0.comments(map0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>(linkedList0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(linkedList2);
      List<String> list1 = defaultPhdWholeReadItem3.getLines();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(linkedList2);
      LinkedList<PhdReadTag> linkedList3 = new LinkedList<PhdReadTag>();
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[4];
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem5;
      linkedList3.toArray(defaultPhdWholeReadItemArray0);
      LinkedList<PhdWholeReadItem> linkedList4 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList5 = new LinkedList<PhdWholeReadItem>();
      Phd phd0 = phdBuilder0.build();
      assertEquals("[%eozO?54e}JXfX(Y", phd0.getId());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("[%eozO?54e}JXfX(Y", nucleotideSequence0, qualitySequence0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(list1);
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[9];
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[4] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[5] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[6] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[7] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[8] = defaultPhdWholeReadItem0;
      linkedList1.toArray(defaultPhdWholeReadItemArray0);
      LinkedList<PhdWholeReadItem> linkedList2 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList3 = new LinkedList<PhdWholeReadItem>();
      Phd phd0 = phdBuilder0.build();
      assertEquals("[%eozO?54e}JXfX(Y", phd0.getId());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>(linkedList3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) linkedList2, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[8];
      List<String> list2 = defaultPhdWholeReadItem4.getLines();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(list2);
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem5;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem6 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem6;
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem3;
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[4] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[5] = defaultPhdWholeReadItem4;
      defaultPhdWholeReadItemArray0[6] = defaultPhdWholeReadItem1;
      defaultPhdWholeReadItemArray0[7] = defaultPhdWholeReadItem1;
      LinkedList<PhdWholeReadItem> linkedList5 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList6 = new LinkedList<PhdWholeReadItem>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("id can not be null", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      PhdBuilder phdBuilder2 = phdBuilder1.wholeReadItems(linkedList0);
      assertSame(phdBuilder2, phdBuilder1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem6 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem7 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[0];
      linkedList0.toArray(defaultPhdWholeReadItemArray0);
      LinkedList<PhdWholeReadItem> linkedList2 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>(linkedList3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) linkedList2, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[8];
      defaultPhdWholeReadItem2.getLines();
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem1;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem3;
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[4] = defaultPhdWholeReadItem0;
      defaultPhdWholeReadItemArray0[5] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[6] = defaultPhdWholeReadItem1;
      defaultPhdWholeReadItemArray0[7] = defaultPhdWholeReadItem1;
      LinkedList<PhdWholeReadItem> linkedList5 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList6 = new LinkedList<PhdWholeReadItem>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("id can not be null", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      PhdBuilder phdBuilder2 = phdBuilder1.wholeReadItems(linkedList0);
      assertSame(phdBuilder2, phdBuilder0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdReadTag> linkedList1 = new LinkedList<PhdReadTag>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>(linkedList3);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList4, (Collection<String>) linkedList2, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) list0);
      linkedList2.add("org.jcvi.jillion.core.Range$LongRange");
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(linkedList2);
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[8];
      List<String> list2 = defaultPhdWholeReadItem4.getLines();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(list2);
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem5;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem6 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem6;
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem3;
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[4] = defaultPhdWholeReadItem2;
      defaultPhdWholeReadItemArray0[5] = defaultPhdWholeReadItem4;
      defaultPhdWholeReadItemArray0[6] = defaultPhdWholeReadItem1;
      defaultPhdWholeReadItemArray0[7] = defaultPhdWholeReadItem1;
      linkedList1.toArray(defaultPhdWholeReadItemArray0);
      LinkedList<PhdWholeReadItem> linkedList5 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList6 = new LinkedList<PhdWholeReadItem>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("org.jcvi.jillion.core.Range$LongRange", nucleotideSequence0, qualitySequence0, 1746);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
