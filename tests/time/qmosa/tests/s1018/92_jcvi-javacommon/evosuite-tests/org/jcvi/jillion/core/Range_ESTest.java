/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:30:38 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7429783721183005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      long long1 = 65535L;
      Range range0 = Range.of(65535L);
      Range range1 = Range.of(0L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 65535L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.275446395619448
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-362L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775555L, (-362L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -363 would make range [9223372036854775555 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6233969668931714
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-3643L), (-3643L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5561980252981753
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      range1.intersection(range0);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem.values();
      range1.intersects(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.977511362924377
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 0 ]/RB", string0);
      
      range0.spliterator();
      Range range2 = Range.of(9223372036854775807L);
      range2.equals(range_CoordinateSystem0);
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.contains(range1));
      
      Range range3 = Range.of(303L);
      range2.equals(range3);
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.720858890235279
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.ofLength(1777L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.getBegin(range_CoordinateSystem0);
      range0.split(127L);
      range0.iterator();
      range0.split(127L);
      Long long0 = new Long(1776L);
      Range range2 = Range.ofLength(1776L);
      range1.endsBefore(range2);
      range2.spliterator();
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 127L, 9223372036854775331L);
      range_Builder1.expandBegin(4294967295L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.013960510218547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      boolean boolean0 = range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ 1 .. 1 ]/RB", string0);
      
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem3);
      assertEquals(0L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem5 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem5, 0L, 523L);
      List<Range> list0 = range2.split(2147484556L);
      assertTrue(range2.isEmpty());
      assertFalse(list0.contains(range0));
      
      range0.iterator();
      Range range3 = Range.of(range_CoordinateSystem4, 1457L, 9223372036854775807L);
      long long1 = range3.getLength();
      assertEquals(9223372036854774350L, long1);
      
      boolean boolean1 = range3.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      assertFalse(range3.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.839224436381357
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.of(range_CoordinateSystem0, 1777L, 3044L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.getBegin(range_CoordinateSystem0);
      range0.split(127L);
      range0.iterator();
      range0.split(127L);
      Range.of((-32768L));
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7105320302662976
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 3044L;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2257L, 4294967317L);
      Long long1 = new Long(9223372036854774031L);
      Range.of((-3481L));
      range0.equals(range0);
      Range.of(127L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.137577980618577
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      Range range2 = Range.of(4294967295L);
      range2.complement(range1);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.isEmpty());
      
      Range range3 = Range.of(1404L, 1404L);
      Range.of((-1994L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem0);
      assertEquals(4294967295L, long0);
      
      Range.of(range_CoordinateSystem0, (-1013L), 4294967295L);
      range0.split(44L);
      Range.of(9223372036854775807L);
      range0.equals((Object) null);
      Range.CoordinateSystem.values();
      range3.iterator();
      Range.of(3043L);
      long long1 = range0.getLength();
      assertEquals(1L, long1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.051219133737386
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(1L);
      boolean boolean0 = range0.startsBefore(range0);
      range0.intersects(range1);
      List<Range> list0 = range1.complement(range0);
      assertEquals(0, list0.size());
      
      Range range2 = Range.of(1L, 1404L);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem1);
      assertEquals(1L, long0);
      
      boolean boolean1 = range1.intersects(range0);
      assertTrue(boolean1);
      
      Range.of(range_CoordinateSystem0, (-2634L), 127L);
      range1.split(44L);
      Range.of(1L, 32767L);
      boolean boolean2 = range1.isSubRangeOf(range2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.4939973047757413
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.of(range_CoordinateSystem0, 1777L, 2257L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 4294967317L;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.6866159088227244
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      range0.getEnd();
      Range.of(2134L);
      long long0 = (-1142L);
      Range range1 = Range.of((-1142L), 391L);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7490247124003866
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range2 = Range.of((-2147483648L), 2147483647L);
      Range.of((-2147483648L));
      Object object0 = new Object();
      range2.equals(range_CoordinateSystem2);
      Range.CoordinateSystem.values();
      Range.of((-2147483648L));
      String string0 = "uqjxof_='9-p~\"";
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("uqjxof_='9-p~\"", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse uqjxof_='9-p~\" into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.714435279966104
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-70L), 391L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-70L), 52L);
      range0.spliterator();
      range1.forEach(consumer0);
      range1.getBegin(range_CoordinateSystem1);
      long long0 = 127L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 127L, 127L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$EmptyIntRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$EmptyIntRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4928935108115535
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2147483648L);
      long long1 = 2147483647L;
      Range.of((-2147483648L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.794569643125189
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.of(range_CoordinateSystem0, 1777L, 2257L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2257L, 4294967295L);
      Long long0 = new Long(478L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 478L, 478L);
      range2.getBegin(range_CoordinateSystem2);
      Range range3 = Range.of(477L);
      range3.equals(range2);
      range3.endsBefore(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("Sf>:{", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Sf>:{ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.747997344556331
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      long long0 = (-311L);
      Range range0 = Range.of((-311L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.build();
      Long long1 = new Long((-311L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = (-3719L);
      Range range2 = Range.of(range_CoordinateSystem0, (-3719L), 4294967295L);
      Object object0 = new Object();
      range2.equals(object0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4294967295L);
      long long3 = 49L;
      range_Builder1.expandEnd(49L);
      range1.spliterator();
      range_Builder0.expandBegin(1543L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("w=Ny/f(f&^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.w=Ny/f(f&^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=4.005992473487548
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 3044L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.of(range_CoordinateSystem0, 1777L, 2257L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2257L, 4294967317L);
      Long long1 = new Long(9223372036854774031L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 9223372036854774031L, 9223372036854774031L);
      range3.getBegin(range_CoordinateSystem2);
      Range.of((-3481L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem3);
      range1.toString();
      range2.equals(range3);
      Range.ofLength(4294967317L);
      Range.of(127L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.385541818156271
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 3040L, 3040L);
      Long long1 = new Long(3040L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = (-648L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 3040L, (-648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.471240855659932
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      range1.getBegin();
      range0.toString(range_CoordinateSystem0);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-2827L), (-22795L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, 0L, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6941715173158367
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-32768L));
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.630144134978463
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(2147483647L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.9586688429771293
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      range0.toString(range_CoordinateSystem0);
      range1.intersection(range0);
      Range.of(range_CoordinateSystem0, (-1857L), 2147483647L);
      Long long0 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.ofLength(0L);
      Range.parseRange("[ 0 .. 0 ]/RB");
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.8495488809096248
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-826L), 1L);
      Range range1 = Range.of(range_CoordinateSystem0, (-826L), 1L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      range0.split(1L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-826L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2758824409109266
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.506198972775888
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.ofLength(1076L);
      Range range0 = Range.of(1076L, 1076L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7288932711825766
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      Range range2 = Range.of(4294967295L);
      range2.complement(range1);
      range0.intersects(range0);
      Range range3 = Range.of(4294967295L, 4294967295L);
      range3.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.642746544422299
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem2);
      Range range1 = Range.of(3044L);
      long long1 = range1.getEnd();
      assertTrue(long1 == long0);
      
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.36044026245316
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of((-12L));
      range0.getLength();
      Range range1 = Range.of((-12L));
      range0.equals(range1);
      range0.startsBefore(range1);
      range0.getLength();
      Range range2 = null;
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.4295935539815883
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Long long1 = new Long(0L);
      range1.equals(range_Builder1);
      long long2 = 32767L;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("ndb~1#C*?gX!N", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ndb~1#C*?gX!N into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.036980837014788
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(894L);
      range0.endsBefore(range1);
      range1.intersects(range0);
      range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      Range.of(range_CoordinateSystem1, 0L, 0L);
      range2.complement(range0);
      range1.isEmpty();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, 0L, 854L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-128L));
      range_Builder0.expandBegin(1404L);
      range_Builder2.shift(894L);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-1991L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.867025112417704
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-311L));
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder(1086L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      range_Builder1.shift(1144L);
      Range range1 = Range.ofLength(32767L);
      Range range2 = Range.of(6284L, 2147483647L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.646172800757403
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      boolean boolean0 = range1.intersects(range0);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/RB", string0);
      
      range1.equals(range_CoordinateSystem1);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(0L);
      range_Builder0.expandEnd((-989L));
      Spliterator<Long> spliterator0 = range1.spliterator();
      range_Builder0.expandBegin(2147483647L);
      range_Builder2.expandBegin(1155L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem3.toString();
      range1.asRange();
      Long long0 = new Long(2147483647L);
      boolean boolean1 = range0.equals(spliterator0);
      assertFalse(boolean1 == boolean0);
      assertSame(range1, range0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.695044745418461
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 3040L, 3040L);
      Long long0 = new Long(3040L);
      range0.equals((Object) null);
      long long1 = (-648L);
      Range range1 = Range.ofLength(3040L);
      Long long2 = new Long(0L);
      range1.getBegin(range_CoordinateSystem1);
      Object object0 = new Object();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.9101699877948697
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.parseRange("[ 1 .. 1 ]/RB", range_CoordinateSystem0);
      Range range3 = Range.of(range_CoordinateSystem0, (-1857L), 2147483647L);
      Long long1 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem2);
      range3.equals(long1);
      range_Builder0.expandEnd((-1857L));
      range1.isSubRangeOf(range0);
      range2.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 1 .. 1 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 1 .. 1 ]/RB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.041578585390168
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range range0 = range_Builder2.build();
      Range range1 = range_Builder0.build();
      Long long0 = new Long(1L);
      Object object0 = new Object();
      range1.complement(range0);
      range1.intersects(range0);
      Range.of((-1020L), 1L);
      long long1 = (-2893L);
      Range range2 = Range.of((-2893L));
      Object object1 = new Object();
      range2.equals(range1);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.6614124834836215
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.ofLength(4294967291L);
      Range range1 = Range.of(4294967291L, 4294967291L);
      range0.intersects(range1);
      Range.ofLength(4294967291L);
      Range range2 = Range.of(255L, 255L);
      range0.startsBefore(range2);
      range1.toString();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.199366513462942
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.intersects(range0);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 0 ]/RB", string0);
      
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem0, (-1860L), 2147483647L);
      List<Range> list0 = range2.split(2147483647L);
      Range range4 = Range.of(0L, 2147483647L);
      range4.complementFrom(list0);
      range4.complement(range2);
      boolean boolean0 = range4.startsBefore(range1);
      assertFalse(range4.isEmpty());
      assertFalse(boolean0);
      
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem2);
      Range.of((-1860L), 9223372036854769524L);
      Range range5 = range1.intersection(range3);
      assertFalse(range5.isEmpty());
      
      String string1 = range3.toString();
      assertEquals("[ -1861 .. 2147483646 ]/0B", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.30932257367877
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getLength();
      Range range1 = Range.of(0L);
      range0.equals(range1);
      range0.getLength();
      // Undeclared exception!
      try { 
        range1.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.7065824312490276
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3044L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range range0 = range_Builder2.build();
      Range range1 = range_Builder0.build();
      Long long0 = new Long(1L);
      Object object0 = new Object();
      range1.equals(object0);
      range_Builder2.expandEnd(1L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Range.of(3044L);
      // Undeclared exception!
      try { 
        Range.of(3245L, (-1828L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.9312639491605323
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.split(342L);
      List<Range> list1 = range0.complementFrom(list0);
      List<Range> list2 = range1.complement(range0);
      assertTrue(list2.equals((Object)list1));
      
      boolean boolean1 = range0.startsBefore(range1);
      range0.isEmpty();
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertTrue(boolean2 == boolean1);
      
      Range range2 = Range.of(0L, 3499L);
      assertNotSame(range2, range0);
      
      long long0 = range1.getLength();
      assertEquals(0L, long0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.8060604552434105
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of((-1361L), 1081L);
      range0.split(9223372032559808513L);
      range0.spliterator();
      Range.of(1081L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(1082L, long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.8179607428412807
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 1110L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 1110L);
      Range.Builder range_Builder1 = new Range.Builder(1110L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-826L);
      Range range0 = Range.of(range_CoordinateSystem0, (-826L), 1110L);
      Range range1 = Range.of(range_CoordinateSystem0, (-826L), 1110L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      range0.split(1110L);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-826L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4820795232617745
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      long long0 = 1777L;
      Range.of(range_CoordinateSystem0, 1777L, 2257L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(":", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse : into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.967402660963511
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of(3L, 3L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(3L);
      range0.startsBefore(range0);
      range0.intersects(range1);
      Range range2 = Range.of(3L, 3L);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem1);
      Range range3 = Range.of(range_CoordinateSystem0, (-2662L), 127L);
      range1.split(3L);
      Range.of((-1645L));
      range0.equals(range_CoordinateSystem1);
      Range.CoordinateSystem.values();
      Iterator<Long> iterator0 = range3.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.9257738756308354
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of(252L, 252L);
      Range range1 = Range.of(252L, 255L);
      range1.complement(range0);
      Range.of((-3595L));
      List<Range> list0 = range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      range2.complement(range1);
      Range range3 = range1.intersection(range2);
      range3.startsBefore(range0);
      Range.CoordinateSystem.values();
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.ofLength((-3595L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.840215303156459
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range range0 = Range.of((-311L));
      Range range1 = range0.asRange();
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.715435252600168
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.of((-311L));
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder(1086L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      long long0 = 1144L;
      long long1 = 9223372036854775682L;
      range_Builder2.shift(9223372036854775682L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1994L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.639155869798802
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of((-311L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-311L), 2147483647L);
      range0.isSubRangeOf(range1);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 233L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.7355438633100673
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      Range range2 = Range.of(4294967295L);
      range2.complement(range1);
      range0.intersects(range0);
      Range range3 = Range.of(4294967295L, 4294967295L);
      range3.isSubRangeOf(range1);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Z,+(Li0V(iq", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Z,+(Li0V(iq into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.7552388227867683
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-311L), 65535L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      Range range1 = Range.of(2257L);
      range0.equals(spliterator0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        range1.split((-2334L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.738062136699718
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L, 1L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.737910560391578
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = (-32768L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 391L;
      Range range0 = Range.of(range_CoordinateSystem0, (-70L), 391L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-70L), 52L);
      range0.spliterator();
      range1.forEach(consumer0);
      Range.of(range_CoordinateSystem1, (-32768L), 52L);
      long long2 = (-1L);
      Range range2 = Range.of((-1L));
      // Undeclared exception!
      try { 
        range2.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.5779433426234917
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of((-9223372036854775808L), (-9223372036854775808L));
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.8597533873876695
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of(4294967295L);
      Range range2 = Range.of(4294967295L);
      range1.getBegin();
      range2.complement(range1);
      range0.intersects(range0);
      Range.of(4294967295L, 4294967295L);
      Range.of((-1822L));
      Object object0 = new Object();
      range1.equals(object0);
      Range.CoordinateSystem.values();
      long long0 = (-2870L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2870L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.361011327263587
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      assertFalse(range0.isEmpty());
      
      range0.getBegin();
      long long0 = 1081L;
      // Undeclared exception!
      try { 
        range0.split((-448L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.8864986024935213
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      Range range1 = Range.of(range_CoordinateSystem0, 1777L, 2257L);
      range1.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2257L, 4294967317L);
      Long long0 = new Long(9223372036854774031L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 9223372036854774031L, 9223372036854774031L);
      range2.getBegin(range_CoordinateSystem2);
      Range range3 = Range.of((-3481L));
      Range.of((-3481L));
      range3.equals(range_CoordinateSystem2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.7787569766582174
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range range0 = Range.of((-311L));
      Range.Builder range_Builder0 = new Range.Builder(1086L, 2147483666L);
      Range.Builder range_Builder1 = new Range.Builder(2147483666L);
      range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      range_Builder1.shift(1144L);
      Range range1 = Range.ofLength(32774L);
      range1.getLength();
      Range range2 = Range.of((-1604L), 0L);
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5551860126845964
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.of((-955L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-955L), (-955L));
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("~uw{~M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.~uw{~M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.695247562607605
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.of(1L);
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      range_Builder1.build();
      Range range0 = range_Builder1.build();
      Long long1 = new Long(0L);
      range0.equals(long1);
      Range.Builder range_Builder2 = range_Builder0.expandEnd(0L);
      long long2 = 1543L;
      range_Builder2.expandEnd(0L);
      range_Builder2.expandBegin(1543L);
      String string0 = "w=Ny/f(f&^";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("w=Ny/f(f&^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.w=Ny/f(f&^
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.7362593811454716
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      long long0 = 1L;
      Range range0 = Range.ofLength(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.ofLength(1L);
      range1.endsBefore(range0);
      range0.intersects(range1);
      range1.complement(range0);
      long long1 = 1404L;
      Range.of(1L, 1404L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1404L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.530371357724608
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1083L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      long long0 = (-1994L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(1083L);
      long long1 = 1144L;
      long long2 = 9223372036854775682L;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(9223372036854775682L, 1144L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(293L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2115L), 0L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.4578525770984454
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = (-128L);
      Range range0 = Range.of((-128L), (-128L));
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.2469893733010045
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of((-1435L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-1434L), long0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.4594807996221904
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-128L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.build();
      long long1 = 202L;
      range_Builder0.shift(202L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long long0 = (-458L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-458L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.80705093575685
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2165L, 2165L);
      Range range1 = Range.of((-1L), (-1L));
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      Range.of(2134L);
      Range range2 = Range.of((-1142L), 391L);
      assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.4352718511829727
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2020L), (-2020L));
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.shift(265L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.687896584130218
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.of(0L, 0L);
      range0.endsBefore(range0);
      Range range1 = Range.ofLength(0L);
      range1.split(255L);
      List<Range> list0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=4.119764045308192
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.intersects(range0);
      range_Builder0.contractEnd(0L);
      range0.toString(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      Range.of(range_CoordinateSystem0, (-1857L), 2147483647L);
      List<Range> list0 = range2.split(2147483647L);
      Range range3 = Range.of(0L, 2147483647L);
      range3.complementFrom(list0);
      range3.complement(range2);
      range3.startsBefore(range1);
      Range range4 = Range.ofLength(0L);
      range4.isEmpty();
      range1.isSubRangeOf(range2);
      Range.of((-128L), (-128L));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.8041122837459165
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3044L, 3044L);
      long long0 = 2257L;
      Range range1 = Range.ofLength(1777L);
      Range.Builder range_Builder0 = new Range.Builder(2257L);
      range_Builder0.shift(4294967295L);
      Range range2 = Range.ofLength(9223372036854772765L);
      range0.endsBefore(range1);
      range2.intersection(range0);
      Collection<Range> collection0 = null;
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift((-2621L));
      range_Builder1.copy();
      range_Builder0.expandBegin(1777L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.37505951922827
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.of(255L, 255L);
      Range range1 = null;
      range0.getLength();
      range0.split(255L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("7P&ct{-w45_^R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.7P&ct{-w45_^R
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.623442329381331
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = Range.of(255L, 255L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.9875098704207566
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long long0 = (-311L);
      Range range0 = Range.of((-311L));
      Range range1 = Range.of(2147483647L);
      range0.isSubRangeOf(range1);
      Range.ofLength(1L);
      range0.intersection(range1);
      Range.of(1L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("TR%Z2f!<UAa.vkLre", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse TR%Z2f!<UAa.vkLre into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.8787897476523003
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range range0 = Range.of((-311L));
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder(1086L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      range_Builder1.shift(1144L);
      Range range1 = Range.ofLength(32767L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.6684346340521006
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-32768L));
      range0.iterator();
      range0.asRange();
      Range.of((-32768L), 1777L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.8623164630401927
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.of((-311L));
      Range.of((-311L));
      Range.Builder range_Builder0 = new Range.Builder(1086L, 1086L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      range_Builder1.shift(1144L);
      Range.ofLength(32767L);
      // Undeclared exception!
      try { 
        Range.of(6284L, 1086L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2167864663179593
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.ofLength(1L);
      Range.ofLength(1L);
      Range.of(9223372036854774032L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.773888087724831
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.of((-311L));
      Range.of((-311L));
      Range.Builder range_Builder0 = new Range.Builder(1086L, 1086L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.contractBegin((-1994L));
      range_Builder1.expandBegin(1086L);
      range_Builder1.shift(1144L);
      // Undeclared exception!
      try { 
        Range.of(6284L, 1086L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.5082309025206095
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.of((-311L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-2266L));
      range_Builder1.contractEnd((-22775L));
      range_Builder1.contractBegin((-2266L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-311L));
      range_Builder2.contractBegin(755L);
      // Undeclared exception!
      try { 
        Range.ofLength((-22770L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.5605498726878233
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range range0 = Range.of((-32768L), 32767L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }
}
