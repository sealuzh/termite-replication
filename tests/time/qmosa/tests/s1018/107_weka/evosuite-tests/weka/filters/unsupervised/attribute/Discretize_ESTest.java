/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:34:48 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.070594139690144
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      properties0.propertyNames();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\"position\" is date", arrayList0, 70);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      instances0.compactify();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, protectedProperties1);
      arrayList0.add(attribute0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 1;
      intArray0[3] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      String string1 = discretize0.getAttributeIndices();
      assertEquals("first-last", string1);
      
      discretize0.convertInstance(binarySparseInstance0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.010461739532456
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      SparseInstance sparseInstance0 = new SparseInstance(1749.526953238, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(1749.526953238, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("DoNotLoadIfEnvVarNotSet", arrayList0, 70);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("@data", linkedList0, protectedProperties1);
      attribute0.setStringValue("5.0.1");
      arrayList0.add(attribute0);
      instances0.add((Instance) binarySparseInstance1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((-2321));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2321
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[8];
      discretize0.setDesiredWeightOfInstancesPerInterval((-14));
      intArray0[0] = (-14);
      intArray0[1] = (-1);
      intArray0[2] = (-1789569704);
      intArray0[3] = 1599;
      intArray0[4] = 44;
      intArray0[5] = 0;
      intArray0[6] = (-23);
      discretize0.m_UseBinNumbers = true;
      intArray0[7] = 105;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getAttributeIndices();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 105;
      doubleArray1[1] = (double) 105;
      doubleArray1[2] = (double) (-14);
      doubleArray1[3] = (double) (-23);
      doubleArray1[4] = (-4300.4);
      doubleArray1[5] = (double) 105;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = (double) 105;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (double) (-14);
      doubleArray2[3] = (double) 105;
      doubleArray2[4] = (double) (-23);
      doubleArray2[5] = (double) (-14);
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.useBinNumbersTipText();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals((-14.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.150729277953769
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      discretize0.m_IgnoreClass = true;
      doubleArray0[0] = 1749.526953238;
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      discretize0.makeBinaryTipText();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7132389994392954
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.m_FindNumBins = true;
      discretize0.getInvertSelection();
      discretize0.getOptions();
      discretize0.getInvertSelection();
      discretize0.getInvertSelection();
      String[] stringArray0 = new String[2];
      String string0 = "}W>#V\\Fjxi";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2120300308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getAttributeIndices();
      discretize0.setDesiredWeightOfInstancesPerInterval(412.9270009);
      discretize0.setUseEqualFrequency(false);
      discretize0.setBins(2758);
      discretize0.setDesiredWeightOfInstancesPerInterval(412.9270009);
      Filter.makeCopy(discretize0);
      discretize0.m_NumBins = (-1);
      Range range0 = new Range("5]znT:qD");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "5]znT:qD";
      stringArray0[1] = "first-last";
      stringArray0[2] = "first-last";
      stringArray0[3] = "first-last";
      stringArray0[4] = "5]znT:qD";
      stringArray0[5] = "first-last";
      stringArray0[6] = "first-last";
      stringArray0[7] = "5]znT:qD";
      stringArray0[8] = "5]znT:qD";
      Range.main(stringArray0);
      discretize0.m_DiscretizeCols = range0;
      discretize0.useBinNumbersTipText();
      discretize0.getInvertSelection();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getBins();
      // Undeclared exception!
      try { 
        range0.isInRange((-1057));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = false;
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Discretize discretize1 = new Discretize("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)");
      discretize1.getInvertSelection();
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseEqualFrequency());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      properties0.propertyNames();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\"position\" is date", arrayList0, 70);
      Properties properties3 = new Properties();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      instances0.compactify();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, protectedProperties0);
      arrayList0.add(attribute0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0);
      Attribute attribute1 = new Attribute("o[;[VII{u2A0NEW.L", list1, protectedProperties0);
      attribute0.setStringValue("o[;[VII{u2A0NEW.L");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("real");
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at real
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      String[] stringArray0 = new String[7];
      stringArray0[6] = "";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte) (-29);
      byteArray0[3] = (byte)66;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SparseInstance sparseInstance0 = new SparseInstance((-858.9373694105299), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize("");
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2178);
      doubleArray0[1] = 2327.3026870624;
      doubleArray0[2] = (double) (-2178);
      doubleArray0[3] = (double) (-2178);
      doubleArray0[4] = (double) (-2178);
      doubleArray0[5] = (double) (-2178);
      doubleArray0[6] = (double) (-2178);
      doubleArray0[7] = (double) (-2178);
      doubleArray0[8] = 0.0;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(66);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      Enumeration<?> enumeration0 = properties0.propertyNames();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.");
      Attribute attribute0 = new Attribute("\"position\" is date", 1126);
      properties0.remove((Object) fileSystemHandling0, (Object) enumeration0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      Discretize discretize0 = new Discretize("[.-F2");
      String string0 = discretize0.binsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Number of bins.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("hQw");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "hQw";
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(466.16, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-2174.89), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 79);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("i5ZP0/8", (List<String>) null, protectedProperties0);
      arrayList0.add((Attribute) null);
      instances0.add((Instance) sparseInstance1);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'B1of2'", "'B1of2'", protectedProperties0);
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(1);
      Instances instances0 = new Instances("relational", arrayList0, 1);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Attribute attribute1 = new Attribute("'B1of2'", protectedProperties1);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[1];
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getUseEqualFrequency();
      discretize0.getUseBinNumbers();
      MultiFilter multiFilter0 = new MultiFilter();
      String[] stringArray0 = new String[0];
      Filter.runFilter(multiFilter0, stringArray0);
      discretize0.m_DefaultCols = "c y^yn0N?";
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("z5*G>:2P3Dbb", arrayList0, 70);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList2, protectedProperties1);
      attribute0.setStringValue(".arff");
      arrayList0.add(attribute0);
      Discretize discretize1 = new Discretize("ATj90Oh10>");
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseEqualFrequency());
      
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize("inf");
      double[][] doubleArray0 = new double[9][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2343.6511197485;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = 315.886;
      doubleArray1[5] = 364.899535;
      doubleArray1[6] = (-704.6901131857);
      doubleArray1[7] = 2.0;
      doubleArray1[8] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 315.886;
      doubleArray2[1] = 2343.6511197485;
      doubleArray2[2] = 364.899535;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 1153.9276;
      doubleArray2[6] = 2.0;
      doubleArray2[7] = 2343.6511197485;
      doubleArray2[8] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 2343.6511197485;
      doubleArray3[1] = 2.0;
      doubleArray3[2] = 2343.6511197485;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[9];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 2343.6511197485;
      doubleArray4[2] = 1.0;
      doubleArray4[3] = 364.899535;
      doubleArray4[4] = 1.7976931348623157E308;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray4[8] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = 1.7976931348623157E308;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = 2343.6511197485;
      doubleArray5[4] = 1476.66842391;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[2];
      doubleArray6[0] = 1153.9276;
      doubleArray6[1] = (-704.6901131857);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[7];
      doubleArray7[0] = 2343.6511197485;
      doubleArray7[1] = 2343.6511197485;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 1476.66842391;
      doubleArray7[4] = 1.7976931348623157E308;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[5];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = 0.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 1476.66842391;
      doubleArray8[4] = 2343.6511197485;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = 1.7976931348623157E308;
      doubleArray9[1] = 2.0;
      doubleArray9[2] = 2343.6511197485;
      doubleArray9[3] = 315.886;
      doubleArray9[4] = 1.7976931348623157E308;
      doubleArray9[5] = 0.0;
      doubleArray9[6] = 1.7976931348623157E308;
      doubleArray9[7] = 1153.9276;
      doubleArray9[8] = (-704.6901131857);
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(3783);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3783
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("inf");
      double[] doubleArray0 = new double[9];
      discretize0.setAttributeIndices("inf");
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2343.6511197485;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 315.886;
      doubleArray0[5] = 364.899535;
      discretize0.getBinRangesString(34);
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getRevision();
      assertEquals("8964", string0);
      
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getUseEqualFrequency());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.990897403299354
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize(";`~WR>i-4A");
      discretize0.getDesiredWeightOfInstancesPerInterval();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      
      discretize0.getBins();
      assertFalse(discretize0.getFindNumBins());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Make resulting attributes binary.";
      stringArray0[1] = ";`~WR>i-4A";
      stringArray0[2] = "Make resulting attributes binary.";
      stringArray0[3] = "6k\".E>GQ/.?ROZM";
      stringArray0[4] = ";`~WR>i-4A";
      stringArray0[5] = "Make resulting attributes binary.";
      stringArray0[6] = "Make resulting attributes binary.";
      stringArray0[7] = ";`~WR>i-4A";
      stringArray0[8] = ";`~WR>i-4A";
      discretize0.setOptions(stringArray0);
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 1749.526953238;
      SparseInstance sparseInstance0 = new SparseInstance(2968.13, doubleArray0);
      Filter.makeCopy(discretize0);
      discretize0.listOptions();
      discretize0.makeBinaryTipText();
      StringReader stringReader0 = new StringReader("Capabilities: ");
      discretize0.binsTipText();
      StringReader stringReader1 = new StringReader("hdB;[[J#aJ@ix])=oz");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[hdB;[[J#aJ@ix])=oz], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize("inf");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2343.6511197485;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.7976931348623157E308;
      doubleArray0[4] = 315.886;
      Discretize discretize1 = new Discretize("inf");
      discretize0.setOutputFormat();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("SlAt%D8O5;ngl");
      String string0 = discretize0.findNumBinsTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2178);
      doubleArray0[1] = 2327.3026870624;
      doubleArray0[2] = (double) (-2178);
      doubleArray0[3] = (double) (-2178);
      doubleArray0[4] = (double) (-2178);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-2178.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      Discretize discretize0 = new Discretize("Enumerating attributes (leaving out class):");
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance4.setValue((-2178), (double) (-2178));
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.setFindNumBins(true);
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      
      String string1 = discretize0.useBinNumbersTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize("Lm0L`'(%q(7v6{y");
      discretize0.setInvertSelection(false);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[23];
      intArray0[0] = (-47);
      intArray0[1] = (-47);
      Properties properties0 = new Properties();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format("equals ? ", objectArray0);
      Discretize discretize0 = new Discretize("/.w>");
      discretize0.getFindNumBins();
      properties0.store((OutputStream) printStream0, "UNKNOWN");
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("/.w>", "/.w>");
      Discretize discretize1 = new Discretize("real");
      // Undeclared exception!
      try { 
        discretize1.findNumBins(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = false;
      discretize0.useEqualFrequencyTipText();
      StringReader stringReader0 = new StringReader("inf");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[inf], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[8][3];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-2781.0);
      doubleArray1[1] = 4.6;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 919.009569;
      doubleArray1[4] = 2.0;
      doubleArray1[5] = 1515.128616794156;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 919.009569;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = 4.6;
      doubleArray3[1] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 2.0;
      doubleArray4[1] = 919.009569;
      doubleArray4[2] = 2.0;
      doubleArray4[3] = 4.6;
      doubleArray4[4] = 4.6;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[4];
      doubleArray5[0] = 4.6;
      doubleArray5[1] = 2.0;
      doubleArray5[2] = 0.0;
      doubleArray5[3] = 2.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[6];
      doubleArray6[0] = 1515.128616794156;
      doubleArray6[1] = 1515.128616794156;
      doubleArray6[2] = 4.6;
      doubleArray6[3] = 1515.128616794156;
      doubleArray6[4] = 4.6;
      doubleArray6[5] = 4.6;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = 919.009569;
      doubleArray7[1] = 4.6;
      doubleArray7[2] = 2.0;
      doubleArray7[3] = 2.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 4.6;
      doubleArray7[6] = 1515.128616794156;
      doubleArray7[7] = (-2781.0);
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 4.6;
      doubleArray8[1] = 2.0;
      doubleArray8[2] = 0.0;
      doubleArray8[3] = 4.6;
      doubleArray0[7] = doubleArray8;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      String string1 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      String string0 = "*BvZOebTPl~E)bj'Mv";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      discretize0.getBins();
      discretize0.setAttributeIndices("*BvZOebTPl~E)bj'Mv");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Object object0 = new Object();
      SystemInUtil.addInputLine("1\u0006:");
      // Undeclared exception!
      try { 
        protectedProperties2.put(object0, object0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      discretize0.getUseEqualFrequency();
      discretize0.getUseBinNumbers();
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[23];
      intArray0[0] = (-53);
      intArray0[1] = (-53);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, "Y", protectedProperties1);
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints((-2120300308));
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = Locale.getISOCountries();
      discretize0.setOptions(stringArray0);
      String string0 = null;
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("E9a}!]eS:!6')C.C^r");
      discretize0.setDesiredWeightOfInstancesPerInterval(6.7);
      discretize0.getCutPoints(4);
      discretize0.getBinRangesString(531);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1749.526953238;
      doubleArray0[1] = 1749.526953238;
      doubleArray0[2] = 1749.526953238;
      SparseInstance sparseInstance0 = new SparseInstance(1749.526953238, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(219.432879723863, doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance((-2178), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance2);
      discretize0.getBinRangesString(89);
      Discretize discretize1 = new Discretize();
      discretize1.getAttributeIndices();
      discretize1.setBins((-2178));
      assertEquals((-2178), discretize1.getBins());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.262220344048113
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      Discretize discretize1 = new Discretize();
      discretize1.setMakeBinary(false);
      Discretize discretize2 = new Discretize("");
      String[] stringArray0 = discretize2.getOptions();
      discretize2.setIgnoreClass(false);
      discretize2.listOptions();
      Discretize discretize3 = new Discretize();
      discretize3.setOptions(stringArray0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2343.6511197485;
      SparseInstance sparseInstance0 = new SparseInstance((-1548.785089), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      assertEquals(3, binarySparseInstance0.numAttributes());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = false;
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-3));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\"position\" is date";
      int[] intArray0 = new int[23];
      intArray0[0] = (-53);
      intArray0[1] = (-53);
      intArray0[2] = (-1);
      intArray0[3] = 4;
      stringArray0[1] = "Hz}U~*I#qE4w}K";
      Discretize discretize0 = new Discretize("ZQ'/fXGZ*|#\"SN|");
      discretize0.getCapabilities();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7974223420742867
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      Discretize discretize0 = new Discretize("");
      discretize0.m_ClassIndex = 10;
      discretize0.setUseBinNumbers(true);
      discretize0.setBins(304);
      discretize0.getOptions();
      discretize0.m_FindNumBins = true;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(304);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Properties properties0 = new Properties();
      properties0.propertyNames();
      Attribute attribute0 = new Attribute("\"position\" is date", 1126);
      properties0.remove((Object) attribute0, (Object) attribute0);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Discretize discretize0 = new Discretize("/.w>");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2178);
      doubleArray0[1] = 2327.3026870624;
      doubleArray0[2] = (double) (-2178);
      doubleArray0[3] = (double) (-2178);
      doubleArray0[4] = (double) (-2178);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-2178.0), doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SystemInUtil.addInputLine("inf");
      Discretize discretize0 = new Discretize("");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      Discretize.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }
}
