/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:14:12 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      // Undeclared exception!
      try { 
        jRip1.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4082.401653795148;
      doubleArray0[1] = 4082.401653795148;
      doubleArray0[2] = 4082.401653795148;
      doubleArray0[3] = 4082.401653795148;
      doubleArray0[4] = 4082.401653795148;
      doubleArray0[5] = 4082.401653795148;
      doubleArray0[6] = 4082.401653795148;
      doubleArray0[7] = 4082.401653795148;
      DenseInstance denseInstance0 = new DenseInstance(4082.401653795148, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        jRip0.rulesetForOneClass(2458.3098034512136, (Instances) null, 1268.789793352, 4082.401653795148);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2085716838811678
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      Attribute attribute0 = new Attribute((String) null, (String) null, 88);
      Attribute.typeToString(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "real";
      jRip0.setOptions(stringArray0);
      jRip0.setDebug(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("@attribute", arrayList0, 88);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      jRip0.seedTipText();
      Properties properties0 = new Properties();
      assertEquals(0, properties0.size());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      assertFalse(jRip0.getDebug());
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.setDebug(true);
      jRip0.getCheckErrorRate();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      IBk iBk0 = new IBk();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = jRip_RipperRule0.getConsequent();
      assertTrue(jRip0.getDebug());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      Attribute attribute0 = new Attribute((String) null, (String) null, 88);
      Attribute.typeToString(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.setDebug(true);
      jRip0.getCheckErrorRate();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute1 = new Attribute("date", list0, (-1345));
      attribute1.copy("real");
      IBk iBk0 = new IBk();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      MockRandom mockRandom0 = new MockRandom(1);
      CostMatrix costMatrix0 = new CostMatrix(3);
      Attribute.typeToString(2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.getAttr();
      assertFalse(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.size();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("3YcB<SvKOs~3aG", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      boolean boolean0 = jRip0.getDebug();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.020963253824377
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Locale.getISOCountries();
      jRip0.setOptimizations(0);
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      JRip jRip1 = new JRip();
      jRip1.setFolds(0);
      jRip0.getCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(480);
      jRip_RipperRule0.covers((Instance) null);
      Attribute attribute0 = new Attribute("k", 6);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.covers(denseInstance0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(0, jRip0.getOptimizations());
      assertEquals("k = ", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      Instances instances0 = null;
      jRip0.optimizationsTipText();
      JRip jRip1 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3260525146995628
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip0.getOptions();
      int int0 = 0;
      jRip0.setOptimizations(0);
      String string0 = "k";
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Instance instance0 = null;
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      JRip jRip1 = new JRip();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "g(g6@QDg!";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g(g6@QDg!");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Gze3Jj!jxQ[>");
      JRip jRip0 = new JRip();
      double double0 = 339.39384092;
      double[] doubleArray0 = new double[0];
      jRip0.getTechnicalInformation();
      SparseInstance sparseInstance0 = new SparseInstance(339.39384092, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = jRip0.debugTipText();
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("Whether debug information is output to the console.", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.65157089695751
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      Attribute attribute0 = new Attribute((String) null, (String) null, 88);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.setFolds(4200);
      jRip0.getOptions();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute1 = new Attribute("R8{=/7E]s*zD`", (String) null, protectedProperties1);
      Attribute attribute2 = attribute1.copy("weka.classifiers.functions.supportVector.PolyKernel");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      jRip_NominalAntd0.getAttr();
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      StringReader stringReader0 = new StringReader("real");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1288532479826054
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      Attribute attribute0 = new Attribute((String) null, (String) null, 88);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("c@bwZGqDk yg)N\"[`]");
      attribute0.setStringValue("k^Nr");
      jRip0.toString();
      jRip0.checkErrorRateTipText();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      jRip0.getTechnicalInformation();
      jRip_NominalAntd0.getCover();
      JRip jRip1 = new JRip();
      jRip1.toString();
      jRip1.minNoTipText();
      JRip.NumericAntd jRip_NumericAntd1 = jRip1.new NumericAntd(attribute0);
      assertTrue(jRip1.getCheckErrorRate());
      
      jRip_NumericAntd0.copy();
      assertFalse(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getUsePruning();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip0.setMinNo(3);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-3641.208131559047);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[5] = (double) 3;
      Attribute attribute0 = new Attribute("_gfqBn&@H[");
      jRip_RipperRule0.toString(attribute0);
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 3;
      iBk0.pruneToK((Instances) null, doubleArray0, 4993);
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setDebug(true);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1757412430371352
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 1330.6521270881;
      jRip0.getCapabilities();
      jRip0.setCheckErrorRate(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", protectedProperties0);
      Attribute attribute1 = attribute0.copy("The rule covers: ");
      jRip_RipperRule0.toString(attribute1);
      jRip_RipperRule0.hasAntds();
      JRip jRip1 = new JRip();
      jRip1.setDebug(false);
      jRip1.getUsePruning();
      Attribute attribute2 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd1.copy();
      jRip_NominalAntd0.getAccuRate();
      jRip_NominalAntd0.copy();
      jRip_NominalAntd1.getMaxInfoGain();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("integer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // integer not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.copy();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip0.checkErrorRateTipText();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka.classifiers.rules.JRip$NominalAntd");
      jRip_RipperRule0.setConsequent(1603.243);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.minNoTipText();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-2416));
      jRip0.setUsePruning(false);
      AbstractClassifier.makeCopy(jRip0);
      jRip0.toString();
      CoverTree coverTree0 = new CoverTree();
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2722508182689762
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations((-3846));
      String[] stringArray0 = jRip0.getOptions();
      jRip0.toString();
      jRip0.getTechnicalInformation();
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setMinNo((-3846));
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.copy();
      jRip0.getMinNo();
      jRip0.foldsTipText();
      jRip0.globalInfo();
      jRip0.setOptions(stringArray0);
      jRip0.listOptions();
      jRip0.minNoTipText();
      jRip0.setUsePruning(false);
      Attribute attribute0 = new Attribute("b5cM", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      attribute0.copy("gcyrwK =&P=*(E#lu,");
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-3145));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("(useAccuray? ", linkedList0, protectedProperties0);
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute("Vg*U%?t\"^", (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4082.401653795148;
      doubleArray0[1] = 4082.401653795148;
      doubleArray0[2] = 4082.401653795148;
      doubleArray0[3] = 4082.401653795148;
      doubleArray0[4] = 4082.401653795148;
      doubleArray0[5] = 4082.401653795148;
      doubleArray0[6] = 4082.401653795148;
      doubleArray0[7] = 4082.401653795148;
      DenseInstance denseInstance0 = new DenseInstance(4082.401653795148, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(";#1b@RmAu", (List<String>) null);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.201147767668483
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip0.getOptions();
      String[] stringArray1 = new String[3];
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      stringArray1[0] = "k";
      jRip0.setCheckErrorRate(false);
      stringArray1[1] = "Error too large: ";
      stringArray1[2] = "nD5t]=$'3/SqQP;";
      jRip0.setOptions(stringArray1);
      jRip0.setSeed(403L);
      jRip0.getCapabilities();
      jRip0.listOptions();
      jRip0.setFolds(2168);
      assertEquals(2168, jRip0.getFolds());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gQ;etz]");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jRip0.minNoTipText();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9453839199650615
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Locale.getISOCountries();
      jRip0.setOptimizations(0);
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.copy();
      JRip jRip1 = new JRip();
      jRip1.setFolds(0);
      jRip0.getCapabilities();
      DenseInstance denseInstance0 = new DenseInstance(480);
      jRip_RipperRule0.covers((Instance) null);
      Attribute attribute0 = new Attribute("k", 6);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.covers(denseInstance0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9575320075024956
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip0.getOptions();
      jRip0.setOptimizations(0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      JRip jRip1 = new JRip();
      jRip1.setFolds(0);
      DenseInstance denseInstance0 = new DenseInstance(480);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("k", 6);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd1.att = attribute0;
      JRip.NumericAntd jRip_NumericAntd2 = (JRip.NumericAntd)jRip_NumericAntd1.copy();
      jRip_NumericAntd1.covers(denseInstance0);
      jRip_NumericAntd2.copy();
      assertEquals(0, jRip0.getOptimizations());
      
      jRip1.getRevision();
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4074.5499536778566;
      doubleArray0[1] = 4074.5499536778566;
      doubleArray0[2] = 4074.5499536778566;
      doubleArray0[3] = 4074.5499536778566;
      doubleArray0[4] = 4074.5499536778566;
      doubleArray0[5] = 4074.5499536778566;
      DenseInstance denseInstance0 = new DenseInstance(Double.NaN, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) sparseInstance0);
      jRip_RipperRule0.covers(binarySparseInstance1);
      Attribute attribute0 = new Attribute(";#1b@RmAu", (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      decisionTable0.m_ibk = null;
      Instances instances0 = decisionTable0.m_dtInstances;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 1381.615337, 4074.5499536778566);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",d=";
      jRip0.setOptions(stringArray0);
      jRip0.getFolds();
      int[] intArray0 = new int[7];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[2] = 3;
      intArray0[3] = (-364);
      intArray0[4] = 3;
      intArray0[5] = 3;
      intArray0[6] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1857));
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment.getSystemWide();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "real";
      jRip_NumericAntd0.att = attribute0;
      stringArray0[1] = "relational";
      stringArray0[2] = "The number of optimization runs.";
      stringArray0[1] = "";
      stringArray0[4] = "numeric";
      stringArray0[5] = "real";
      stringArray0[6] = "";
      stringArray0[7] = "real";
      stringArray0[8] = "@attribute";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G?nhyL";
      stringArray0[1] = "";
      stringArray0[2] = "}a.;";
      JRip.main(stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("pl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // pl not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("The number of optimization runs.", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte)69;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "Class for building and using a 0-R classifier. Predicts the mean (for a numeric class) or the mode (for a nominal class).";
      stringArray0[2] = "XGjPS)}!h";
      stringArray0[3] = "";
      stringArray0[4] = "VD_bMC";
      stringArray0[5] = "";
      stringArray0[6] = "sI:lP]&1AY>,Y$4";
      jRip0.setOptions(stringArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.setFolds(1654);
      jRip0.getTechnicalInformation();
      assertEquals(1654, jRip0.getFolds());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4082.401653795148;
      doubleArray0[1] = 4082.401653795148;
      doubleArray0[2] = 4082.401653795148;
      doubleArray0[3] = 4082.401653795148;
      doubleArray0[4] = 4082.401653795148;
      doubleArray0[5] = 4082.401653795148;
      doubleArray0[6] = 4082.401653795148;
      doubleArray0[7] = 4082.401653795148;
      DenseInstance denseInstance0 = new DenseInstance(4082.401653795148, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute(";#1b@RmAu", (List<String>) null);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(";#1b@RmAu = ", string0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip0.setMinNo(3);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[2] = (double) 4;
      jRip_RipperRule0.getRevision();
      doubleArray0[3] = (double) 4;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5rl7Xx}X ");
      jRip0.minNoTipText();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[5];
      intArray0[0] = (-66);
      intArray0[1] = (-1489);
      intArray0[2] = 4;
      jRip0.usePruningTipText();
      jRip0.listOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip0.setFolds(4);
      intArray0[3] = (-2534);
      intArray0[4] = 39;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.5, intArray0, (-2534));
      jRip0.setDebug(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        Instances.mergeInstances((Instances) null, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.322242990890039
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Environment.getSystemWide();
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "real";
      jRip_NumericAntd0.att = attribute0;
      stringArray0[1] = "relational";
      stringArray0[2] = "The number of optimization runs.";
      stringArray0[3] = "";
      stringArray0[4] = "numeric";
      stringArray0[5] = "real";
      stringArray0[6] = "";
      stringArray0[7] = "real";
      stringArray0[8] = "@attribute";
      jRip0.setOptions(stringArray0);
      jRip_NumericAntd0.getRevision();
      jRip0.getRevision();
      JRip jRip1 = new JRip();
      jRip1.getOptions();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      Attribute attribute0 = new Attribute("");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      int int0 = 0;
      Attribute attribute0 = new Attribute("outside", list0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttrValue();
      double double0 = 0.0;
      try { 
        CostMatrix.parseMatlab("|ezxT7\tPA");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      jRip_RipperRule0.copy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      jRip0.checkErrorRateTipText();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.813782155210461
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gQ;etz]");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = jRip0.getOptimizations();
      assertEquals(2, int0);
      
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gQ;etz]");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getRevision();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule1.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%.$d|&.'t,p", arrayList0, 0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      Set<String> set0 = environment0.getVariableNames();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      Attribute attribute0 = new Attribute(".bsi", list0, (-1345));
      Attribute attribute1 = attribute0.copy("GE+<WR{O{2mp@AZ5");
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.getSplitPoint();
      instances0.setClass(attribute1);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5373264361585304
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      jRip0.getOptions();
      jRip0.setOptimizations(0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      JRip jRip1 = new JRip();
      jRip1.setFolds(0);
      jRip0.getCapabilities();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      MultiFilter multiFilter0 = new MultiFilter();
      MultiFilter multiFilter1 = new MultiFilter();
      multiFilter1.getFilter(0);
      Filter filter0 = Filter.makeCopy(multiFilter0);
      try { 
        Filter.useFilter((Instances) null, filter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      Attribute attribute0 = new Attribute((String) null, (String) null, 88);
      Attribute.typeToString(1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.setDebug(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 88);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.3823452227303257
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-1.2498678679630089));
      assertEquals((-1.2498678679630089), jRip_RipperRule0.getConsequent(), 0.01);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JRip jRip1 = new JRip();
      jRip1.minNoTipText();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip1.foldsTipText();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.setConsequent((-3641.208131559047));
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      jRip0.setMinNo(3);
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-3641.208131559047);
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 3;
      Attribute attribute0 = new Attribute("_gfqBn&@H[", 1);
      jRip_RipperRule0.toString(attribute0);
      doubleArray0[6] = (double) 4;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 3;
      iBk0.pruneToK((Instances) null, doubleArray0, 5016);
      Instances instances1 = decisionTable0.m_dtInstances;
      Attribute attribute1 = new Attribute("!t_$.\"~}tWUf(");
      Attribute attribute2 = attribute1.copy(".arff");
      jRip_RipperRule0.toString(attribute2);
      MockRandom mockRandom0 = new MockRandom(1);
      jRip0.checkErrorRateTipText();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(29);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }
}
