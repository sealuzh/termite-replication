/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:44:41 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6063065377537362
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "pex";
      stringArray0[1] = "";
      stringArray0[2] = ";cOYq\"_r$";
      stringArray0[3] = "Isw7Let$[MM6UH/ ";
      stringArray0[4] = "6wivrud";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String string1 = lovinsStemmer0.stem("NOTE");
      assertEquals("not", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("pex");
      assertEquals("pic", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6326885322112161
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "ix";
      lovinsStemmer0.stem("ix");
      lovinsStemmer0.stemString("uct");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("uct");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("%KKS~o3>H1%92ktp");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6752614752381179
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[3];
      lovinsStemmer0.stem("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("\tThe file to process.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("ariseret");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stem("p>55");
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6107016990598249
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("PUBLISHER");
      assertEquals("publishes", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("m8E");
      lovinsStemmer0.stem("m8E");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.rud");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.rus", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.rus");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.rus", string3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7849806738016811
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f5`mw:'#?qkpmt$yz";
      stringArray0[1] = "lux";
      stringArray0[2] = "Cg${$";
      stringArray0[3] = "f5`mw:'#?qkpmt$uad";
      stringArray0[4] = "BtOCvDWBYQkQ.";
      stringArray0[5] = "l,h%)Nl(:(HL";
      stringArray0[6] = "e&vuy1=jaY";
      stringArray0[7] = "s@.~)";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stem("f5`mw:'#?qkpmt$ond");
      assertEquals("f5`mw:'#?qkpmt$ons", string0);
      
      String string1 = lovinsStemmer0.stemString("l,h%)Nl(:(HL");
      assertEquals("l,h%)nl(:(hl", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7032013742599599
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ateness");
      lovinsStemmer0.stemString("ateness");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("hf22t1ex");
      lovinsStemmer1.stem("ix");
      lovinsStemmer1.stemString("$Revision: 8080 $");
      lovinsStemmer1.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("ul");
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.714249460403845
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      lovinsStemmer0.getRevision();
      stringArray0[3] = "8034";
      stringArray0[4] = "ementcid";
      stringArray0[5] = "8034";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("8034");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("8034");
      assertTrue(string1.equals((Object)string0));
      
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("1d{8");
      String string2 = lovinsStemmer0.stemString("Quote parse error.");
      assertEquals("quot pars error.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("1d{8");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.678315986331102
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ementcid");
      String[] stringArray0 = new String[9];
      lovinsStemmer0.stem("ert");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("uas");
      lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.stemString("8034");
      String string0 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer3.stem("f`Hw~1])~ZO\u0000");
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer0.stemString("f5`mw:'#?qkpmt$end");
      assertEquals("f5`mw:'#?qkpmt$ens", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6603641033725929
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("CROSSREF");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "crossref";
      stringArray0[3] = "crossref";
      lovinsStemmer0.getRevision();
      stringArray0[4] = "crossref";
      stringArray0[5] = "crossref";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("mCk.\u0002X:jy(");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("e1end");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.669521061078466
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.toString();
      stringArray0[1] = "";
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.yt");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[2];
      stringArray1[0] = "ix";
      stringArray1[1] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ix");
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.776802426824093
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ementcid");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ementcis";
      stringArray0[1] = "ementcid";
      stringArray0[2] = "ementcis";
      lovinsStemmer0.getRevision();
      stringArray0[3] = "],R8";
      stringArray0[4] = "ementcid";
      stringArray0[5] = "ementcis";
      stringArray0[6] = "ementcid";
      stringArray0[7] = "ementcid";
      stringArray0[8] = "ementcid";
      lovinsStemmer0.stemString("&}rF7xpiHol!%z");
      String string0 = lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("chapter");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("ementcid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("bex");
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6452953202962504
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f5`mw:'#?qkpmt$yz";
      stringArray0[1] = "lux";
      stringArray0[2] = "Cg${$";
      stringArray0[3] = "f5`mw:'#?qkpmt$uad";
      stringArray0[4] = "BtOCvDWBYQkQ.";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Cg${$");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("et");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("f5`mw:'#?qkpmt$uad");
      String string0 = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.pex";
      lovinsStemmer2.stemString("f5`mw:'#?qkpmt$uas");
      // Undeclared exception!
      try { 
        lovinsStemmer2.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8424109182767463
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("CROSSREF");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "crossref";
      stringArray0[3] = "crossref";
      lovinsStemmer0.getRevision();
      stringArray0[4] = "crossref";
      stringArray0[5] = "crossref";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("mCk.\u0002X:jy(");
      assertEquals("mck.\u0002x:jy(", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stem("]?C3");
      String string1 = lovinsStemmer1.stemString("wfzdex");
      assertEquals("wfzdic", string1);
      
      String[] stringArray1 = new String[3];
      stringArray1[0] = "f5`mw:'#?qkpmt$ond";
      stringArray1[1] = "f5`mw:'#?qkpmt$ond";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6660420199598278
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ateness");
      lovinsStemmer0.stemString("ateness");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer2.stemString("the international standard book number (10 digits).mit");
      assertEquals("th intern standard book number (10 digit).mis", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6852115606078133
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[4];
      lovinsStemmer0.stem("");
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("ert");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("arizer");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      TechnicalInformation technicalInformation1 = lovinsStemmer3.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.639899301273414
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stem("proceedings");
      assertEquals("proceed", string0);
      
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("_Hf22T1^*3v_;vk");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("proceed");
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.stemString("1PPs{v");
      assertEquals("1p{v", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4901287273329307
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "the international standard book number (10 digits).ax";
      stringArray0[1] = "bic";
      stringArray0[2] = "the international standard book number (10 digits).ax";
      stringArray0[3] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("rudax");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7309248324623243
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("lid");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("");
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6170012665202889
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("proceedings");
      lovinsStemmer0.stemString("proceedings");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("proceedings");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$9n2";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "proceed";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("linguerid");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stem("(4RYM7KB3sW%<7b%");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer3.globalInfo();
      lovinsStemmer4.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7025588039788353
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("tbEeess");
      lovinsStemmer0.stemString("tbEeess");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("ix");
      lovinsStemmer1.stemString("$Revision: 8080 $");
      lovinsStemmer1.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("ul");
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6000297452288286
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("istr");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ister";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("efllux");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("iness");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5758437028216064
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f5`mw:'#?qkpmt$yz";
      stringArray0[1] = "lux";
      stringArray0[2] = "Cg${$";
      stringArray0[3] = "f5`mw:'#?qkpmt$uad";
      stringArray0[4] = "BtOCvDWBYQkQ.";
      stringArray0[5] = "ionalize";
      stringArray0[6] = "e&vuy1=jaY";
      stringArray0[7] = "s@.~)";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stem("f5`mw:'#?qkpmt$ond");
      String string2 = lovinsStemmer0.stemString("ionalize");
      assertEquals("ion", string2);
      
      lovinsStemmer0.stemString("ion");
      String string3 = lovinsStemmer0.stem("lux");
      assertEquals("luc", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7901539848670238
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("istr");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("59");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("59");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "59";
      stringArray0[1] = "59";
      stringArray0[2] = "59";
      stringArray0[3] = "59";
      stringArray0[4] = "59";
      stringArray0[5] = "/88]a&*E,,3";
      stringArray0[6] = "istr";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("59");
      lovinsStemmer0.stem("tic");
      lovinsStemmer0.stemString(":");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("5};y~SLXQ1*");
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5794921273655533
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pmttex");
      lovinsStemmer0.stem("pmttex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("pmttic");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.stemString("pmttic");
      lovinsStemmer0.stem("*_+V`u_");
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("idine");
      lovinsStemmer0.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6382550076455118
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f5`mw:'#?qkpmt$yz";
      stringArray0[1] = "lux";
      stringArray0[2] = "Cg${$";
      stringArray0[3] = "f5`mw:'#?qkpmt$uad";
      stringArray0[4] = "BtOCvDWBYQkQ.";
      stringArray0[5] = "ionalize";
      stringArray0[6] = "e&vuy1=jaY";
      stringArray0[7] = "s@.~)";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("s@.~)");
      lovinsStemmer0.stem("lud");
      String string1 = lovinsStemmer1.stemString("s@.~)");
      assertEquals("s@.~)", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.stem("ance");
      assertEquals("anc", string2);
      
      String string3 = lovinsStemmer2.stem("vad");
      assertEquals("vas", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6498009757985805
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("PUBLISHER");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("m8E");
      lovinsStemmer0.stem("m8E");
      lovinsStemmer0.stemString("PUBLISHER");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.rud");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "c.^nx6%E]G3cs0TO";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("m8E");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("m8");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6615144065502885
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("CROSSREF");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "crossref";
      stringArray0[2] = "crossref";
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("|UL|iGqtHn");
      assertEquals("|ul|igqthn", string1);
      
      lovinsStemmer0.stemString(":");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("\tDisplays this help.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8080yz");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5005533902017567
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("arly");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6699950819837923
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "the international standard book number (10 digits).ax";
      stringArray0[1] = "bic";
      stringArray0[2] = "the international standard book number (10 digits).ax";
      stringArray0[3] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("bic");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("is");
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("hU6fcF");
      String string2 = lovinsStemmer0.stemString("the international standard book number (10 digits).ax");
      assertEquals("th intern standard book number (10 digit).ax", string2);
      
      String string3 = lovinsStemmer0.stemString("ally");
      assertEquals("al", string3);
      
      lovinsStemmer0.stemString("bic");
      String string4 = lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string4);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6929284242722702
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("ize");
      assertEquals("iz", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "iz";
      lovinsStemmer0.getRevision();
      stringArray0[1] = "";
      stringArray0[2] = "(]&A(44+ky&xBN^NM.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("$HY3v#cpYX%Oi^");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("$HY3v#cpYX%Oi^");
      assertEquals("$hy3v#cpyx%oi^", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stem("erid");
      assertEquals("eris", string4);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string5 = lovinsStemmer0.stem("The work's title, typed as explained in the LaTeX book.");
      assertEquals("the work's title, typed as explained in the latex book.", string5);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6479069226440424
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("PUBLISHER");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("m8E");
      lovinsStemmer0.stem("m8E");
      lovinsStemmer0.stemString("PUBLISHER");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString(";/o[_7V");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m8";
      stringArray0[1] = "m8E";
      stringArray0[2] = "publishes";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "m8";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[6] = ";/o[_7V";
      stringArray0[7] = "m8";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("2)14CLCG[~~3DT)D");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("publishes");
      lovinsStemmer0.stem(";/o[_7v");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("`QRg%CN$xumz/e1e");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "2)14clcg[~~3dt)d";
      stringArray1[1] = "m8";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5347998133305705
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[4];
      lovinsStemmer0.stem("w5BILmQv#F{07A]");
      stringArray0[0] = "u7f7Z!e";
      stringArray0[1] = "u7f7Z!e";
      stringArray0[2] = ".U";
      stringArray0[3] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ement");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6466493703669451
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("YEAR");
      lovinsStemmer0.stemString("year");
      lovinsStemmer0.stemString("CONTENTS");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "8034";
      stringArray0[3] = "year";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("],R8");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8056873677724525
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stem(":JR+rDQK'L*=6WIV@#");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("|WL[>");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "/88]a&*E,,3";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(":jr+rdqk'l*=6wiv@#");
      lovinsStemmer0.stem(";|_IYKw^|GE+<WR{O{");
      lovinsStemmer0.stemString(":jr+rdqk'l*=6wiv@#");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6797888294302357
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("CROSSREF");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "crossref";
      stringArray0[3] = "crossref";
      lovinsStemmer0.getRevision();
      stringArray0[4] = "crossref";
      stringArray0[5] = "crossref";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("mCk.\u0002X:jy(");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem(" URL ");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("");
      String string2 = lovinsStemmer0.stem("ialize");
      assertEquals("ial", string2);
      
      String string3 = lovinsStemmer0.stemString("idpand");
      assertEquals("idpans", string3);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6591632225794302
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Z7UUJ2");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "c tl !D=INt<XO$'Y";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray1[1] = "cid";
      stringArray1[2] = "z7uuj2";
      stringArray1[3] = "%8fD_aj|8F";
      stringArray1[4] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("ssrpand");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6397080852942034
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("5 j-aDZ*MoYW");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("KILY6[i9C'K.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("D");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stemString("manual");
      lovinsStemmer0.stem("");
      String string4 = lovinsStemmer0.stemString("D");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ium");
      lovinsStemmer0.stem("The International Standard Book Number (10 digits).");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string5 = lovinsStemmer0.stem("d");
      assertTrue(string5.equals((Object)string4));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6682029773155376
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("CROSSREF");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "crossref";
      stringArray0[3] = "crossref";
      lovinsStemmer0.getRevision();
      stringArray0[4] = "crossref";
      stringArray0[5] = "crossref";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("mCk.\u0002X:jy(");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("crossref");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ental");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7062600711039215
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ementcid");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ementcis";
      stringArray0[1] = "ementcid";
      stringArray0[2] = "ementcis";
      lovinsStemmer0.getRevision();
      stringArray0[3] = "],R8";
      stringArray0[4] = "ementcid";
      stringArray0[5] = "ementcis";
      stringArray0[6] = "ementcid";
      stringArray0[7] = "ementcid";
      stringArray0[8] = "ementcid";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("_Hf22T1^*3v_;vk");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("ementcis");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("eful");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6613670049795615
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("ix");
      lovinsStemmer0.stemString("$Revision: 8080 $");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.58674174621631
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f5`mw:'#?qkpmt$yz";
      stringArray0[1] = "lux";
      stringArray0[2] = "Cg${$";
      stringArray0[3] = "f5`mw:'#?qkpmt$uad";
      stringArray0[4] = "BtOCvDWBYQkQ.";
      stringArray0[5] = "ionalize";
      stringArray0[6] = "e&vuy1=jaY";
      stringArray0[7] = "s@.~)";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = "";
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ert");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6721144977452296
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("proceedings");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("proceedings");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("proceed");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer0.stemString("PROCEEDINGS");
      assertEquals("proceed", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("proceed");
      String string2 = lovinsStemmer0.stemString("3%6FEwln");
      assertEquals("3%6fewln", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7943031020201468
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "f5`mw:'#?qkpmt$yz";
      stringArray0[1] = "lux";
      stringArray0[2] = "Cg${$";
      stringArray0[3] = "f5`mw:'#?qkpmt$uad";
      stringArray0[4] = "BtOCvDWBYQkQ.";
      stringArray0[5] = "ionalize";
      stringArray0[6] = "e&vuy1=jaY";
      stringArray0[7] = "s@.~)";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("f5`mw:'#?qkpmt$ond");
      assertEquals("f5`mw:'#?qkpmt$ons", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("f5`mw:'#?qkpmt$ix");
      assertEquals("f5`mw:'#?qkpmt$ix", string2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6794170576947534
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      stringArray0[0] = ";Z";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      stringArray0[1] = "bicix";
      stringArray0[2] = "arial";
      stringArray0[3] = "!A8lJj";
      stringArray0[4] = "ist";
      stringArray0[5] = "bicdex";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("%pq'PnNn2bb");
      assertEquals("%pq'pnnn2b", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString(" = {");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }
}
