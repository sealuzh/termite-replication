/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:41:02 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8664882210618163
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[5][2];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[2];
      intArray4[0] = 2;
      intArray4[1] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[9];
      intArray5[0] = 1;
      intArray5[1] = 0;
      intArray5[2] = 1;
      intArray5[3] = 1;
      intArray5[4] = 2;
      intArray5[5] = 2;
      intArray5[6] = 2;
      intArray5[7] = 1;
      intArray5[8] = 0;
      intArray0[4] = intArray5;
      resultMatrixGnuPlot0.m_NonSigWins = intArray0;
      resultMatrixGnuPlot0.m_ShowStdDev = true;
      resultMatrixGnuPlot0.m_EnumerateColNames = true;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.128722013184994
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(50, 50);
      resultMatrixGnuPlot0.listOptions();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
      assertEquals(50, resultMatrixSignificance0.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.getDefaultPrintColNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      double[][] doubleArray0 = new double[2][3];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 1;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "pUp";
      stringArray0[2] = "8NbC'Mf&2-";
      resultMatrixGnuPlot0.m_ColNames = stringArray0;
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = (double) 1;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 1;
      doubleArray0[1] = doubleArray2;
      resultMatrixCSV0.m_Mean = doubleArray0;
      resultMatrixCSV0.getRevision();
      assertEquals(1, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.880253061472987
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setMeanWidth(8);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getRowNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.toStringKey();
      assertEquals(8, resultMatrixPlainText0.getMeanWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getRowHidden(40);
      assertEquals(1, resultMatrixCSV0.getColCount());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.9462720870484675
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setMeanWidth(8);
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getRowNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.toStringKey();
      resultMatrixGnuPlot0.getDisplayCol(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(97, 2);
      resultMatrixGnuPlot0.assign(resultMatrixCSV0);
      resultMatrixCSV0.setMeanPrec(1);
      resultMatrixSignificance0.toStringSummary();
      int[] intArray0 = new int[1];
      intArray0[0] = 8;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixCSV0.setPrintColNames(false);
      resultMatrixCSV0.WIN_STRING = "\n4. second col missing\n";
      resultMatrixCSV0.setColNameWidth(2899);
      resultMatrixSignificance0.globalInfo();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.getDisplayName();
      resultMatrixCSV0.removeFilterName("(");
      assertEquals(2899, resultMatrixCSV0.getColNameWidth());
      
      resultMatrixHTML0.m_SignificanceWidth = 2899;
      resultMatrixPlainText0.getRevision();
      resultMatrixHTML0.toStringKey();
      assertEquals(2, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.489526293168699
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int int0 = 1332;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1332, 0);
      resultMatrixLatex0.getRevision();
      int int1 = (-2057);
      resultMatrixLatex0.setStdDevPrec((-2057));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.setMeanPrec(2);
      resultMatrixHTML0.m_EnumerateColNames = false;
      resultMatrixLatex0.setStdDevPrec(1);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6896525944084093
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixLatex0.setMeanWidth(26);
      resultMatrixPlainText0.getRevision();
      resultMatrixHTML0.LEFT_PARENTHESES = null;
      resultMatrixLatex0.toArray();
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixPlainText0.setMeanPrec(5);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.clear();
      resultMatrixHTML0.setMean(1, 23, (-1564.0));
      resultMatrixHTML0.toArray();
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV(1, (-163));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4654425859998854
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(26, 26);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      String string0 = resultMatrixSignificance0.getColName(2);
      assertNotNull(string0);
      assertEquals("(3)", string0);
      
      booleanArray0[2] = true;
      resultMatrixSignificance0.m_StdDevWidth = 97;
      assertEquals(26, resultMatrixSignificance0.getRowCount());
      
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.getDefaultRemoveFilterName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.toStringSummary();
      resultMatrixHTML1.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      boolean boolean0 = resultMatrixCSV0.getRowHidden((-323));
      assertFalse(boolean0);
      
      resultMatrixCSV0.meanWidthTipText();
      resultMatrixCSV0.clearHeader();
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.9138635943491376
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      resultMatrixCSV0.getOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getRowName(68);
      resultMatrixGnuPlot0.assign(resultMatrixLatex0);
      String string0 = resultMatrixGnuPlot0.padString(" y^rtp$^e,", 68);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(" y^rtp$^e,                                                          ", string0);
      
      String string1 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"(1)\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string1);
      
      resultMatrixCSV0.setCount(2, 1.0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setRowName(0, "pMt$x~P;NXt[(mS=");
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertFalse(resultMatrixCSV1.getRemoveFilterName());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4038781764868706
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.setMeanPrec((-2904));
      resultMatrixPlainText0.setMeanPrec(2300);
      resultMatrixHTML0.setMean(102, (-2904), 0);
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV((-709), (-709));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.838027504225569
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.setShowStdDev(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      resultMatrixHTML0.toString();
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.toStringMatrix();
      assertTrue(resultMatrixLatex0.getShowStdDev());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.7413610132793846
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.setMeanPrec(2);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.setMean((-999), 0, 5);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1363, 0);
      // Undeclared exception!
      resultMatrixCSV0.toStringMatrix();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.021495054456028
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringRanking();
      int[] intArray0 = new int[6];
      intArray0[4] = (-109);
      intArray0[1] = 0;
      intArray0[2] = (-109);
      intArray0[3] = 1;
      intArray0[4] = (-2550);
      intArray0[5] = 0;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      int int0 = resultMatrixGnuPlot0.getDefaultMeanWidth();
      assertEquals(0, int0);
      
      String string0 = resultMatrixGnuPlot0.meanPrecTipText();
      assertEquals("The number of decimals after the decimal point for the mean.", string0);
      
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.toStringRanking();
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixGnuPlot0.getRemoveFilterName());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.441113612617862
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setEnumerateColNames(false);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2232;
      resultMatrixPlainText0.m_RemoveFilterName = true;
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      String[][] stringArray0 = new String[2][3];
      String[] stringArray1 = new String[3];
      stringArray1[0] = "(";
      stringArray1[1] = ")";
      stringArray1[2] = ")";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[7];
      stringArray2[0] = "*";
      stringArray2[1] = "(";
      stringArray2[2] = "1fDZpK";
      stringArray2[3] = "*";
      stringArray2[4] = "*";
      stringArray2[5] = "v";
      stringArray2[6] = " ";
      stringArray0[1] = stringArray2;
      int int0 = resultMatrixSignificance0.getColSize(stringArray0, (-507));
      assertEquals(0, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.4925256814604326
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.setStdDevPrec(26);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 175;
      resultMatrixGnuPlot0.setMeanWidth(26);
      resultMatrixGnuPlot0.setShowAverage(false);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.meanWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(3, 46);
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixPlainText0.m_StdDevPrec = 1564;
      resultMatrixPlainText0.toStringRanking();
      resultMatrixPlainText0.getMeanWidth();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      assertEquals(26, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.448361437952288
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      double[][] doubleArray0 = new double[14][7];
      resultMatrixPlainText0.setSignificanceWidth((-720));
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray0[0] = doubleArray1;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.getShowAverage();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      
      resultMatrixHTML0.m_MeanWidth = (-139);
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixPlainText0.globalInfo();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setMeanWidth((-5834));
      resultMatrixLatex0.getRowName(0);
      resultMatrixLatex0.clear();
      resultMatrixHTML0.getColCount();
      resultMatrixLatex0.toStringSummary();
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.530845812442497
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      double[][] doubleArray0 = new double[14][7];
      resultMatrixPlainText0.setSignificanceWidth((-720));
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.getShowAverage();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.m_MeanWidth = (-139);
      resultMatrixHTML0.getDefaultRowNameWidth();
      assertEquals((-139), resultMatrixHTML0.getMeanWidth());
      
      resultMatrixPlainText0.globalInfo();
      assertEquals(1, resultMatrixPlainText0.getColCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(95, 0);
      resultMatrixGnuPlot0.toStringKey();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.meanWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(2, 95);
      Vector<Integer> vector0 = new Vector<Integer>();
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      resultMatrixPlainText2.toStringRanking();
      resultMatrixPlainText1.getMeanWidth();
      resultMatrixGnuPlot1.assign(resultMatrixLatex0);
      resultMatrixPlainText0.getStdDev((-2298), 2667);
      assertEquals(2, resultMatrixPlainText0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.914357420416918
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setPrintRowNames(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      resultMatrixHTML0.toString();
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.toStringMatrix();
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.9421445363573895
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setRowNameWidth(286);
      resultMatrixLatex0.setPrintRowNames(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      resultMatrixHTML0.m_RemoveFilterName = true;
      resultMatrixHTML0.toString();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixLatex0.setPrintRowNames(true);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixLatex0);
      resultMatrixCSV0.getDefaultRowNameWidth();
      assertEquals(286, resultMatrixLatex0.getRowNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.9668637678954295
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearRanking();
      double[] doubleArray0 = new double[1];
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.removeFilterName(" statistically significant improvement or degradation}");
      resultMatrixLatex0.m_Counts = doubleArray0;
      resultMatrixLatex0.getRowName((-3963));
      resultMatrixLatex0.setPrintColNames(true);
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.setColHidden(0, false);
      resultMatrixLatex0.m_StdDev = null;
      resultMatrixLatex0.setCount(0, 0.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = " ";
      stringArray0[2] = " statistically significant improvement or degradation}";
      stringArray0[3] = "$\bullet$";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1699021172713064
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSize((-37), (-37));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4410211484477276
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = "mjXtLzw";
      resultMatrixLatex0.clear();
      resultMatrixLatex0.setMeanWidth(25);
      resultMatrixLatex0.trimString("mjXtLzw", (-1));
      resultMatrixLatex0.setMeanPrec((-1));
      resultMatrixLatex0.getColOrder();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.9289781968174253
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.listOptions();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      resultMatrixCSV0.getOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.getRowName(1489);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      
      resultMatrixGnuPlot0.assign(resultMatrixLatex0);
      String string0 = resultMatrixGnuPlot0.padString("VrM2L<jX?g8", 1);
      assertEquals("V", string0);
      
      String string1 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"(1)\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string1);
      
      resultMatrixCSV0.setCount(93, 68);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowName(40, " ");
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.501837009453917
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3732276359935063
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.setStdDevPrec(26);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[6] = 1;
      intArray0[7] = 175;
      intArray0[4] = 26;
      intArray0[5] = 26;
      intArray0[6] = 0;
      resultMatrixGnuPlot0.m_PrintRowNames = false;
      intArray0[7] = 26;
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.setMeanWidth(26);
      resultMatrixGnuPlot0.setShowAverage(false);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.meanWidthTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.getDefaultPrintColNames();
      Vector<String> vector0 = new Vector<String>();
      resultMatrixHTML0.m_HeaderKeys = vector0;
      resultMatrixHTML0.setMeanPrec(50);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixHTML0.getColCount();
      resultMatrixLatex0.toStringSummary();
      assertEquals(26, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3152739318325937
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[1][8];
      resultMatrixLatex0.setSummary(intArray0, intArray0);
      resultMatrixLatex0.getDefaultPrintColNames();
      resultMatrixLatex0.colNameWidthTipText();
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.281605848690576
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[0];
      resultMatrixLatex0.m_EnumerateColNames = false;
      int[][] intArray2 = new int[5][5];
      intArray2[0] = intArray1;
      intArray2[1] = intArray1;
      intArray2[2] = intArray1;
      intArray2[3] = intArray1;
      intArray2[4] = intArray1;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.282878911530257
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.LEFT_PARENTHESES = "kk}qr}#";
      resultMatrixLatex0.m_CountWidth = 1;
      resultMatrixLatex0.m_PrintColNames = false;
      resultMatrixLatex0.getDefaultMeanWidth();
      resultMatrixLatex0.printColNamesTipText();
      resultMatrixLatex0.getDefaultPrintRowNames();
      resultMatrixLatex0.getDefaultSignificanceWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      assertEquals(1, resultMatrixHTML0.getCountWidth());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixHTML0.m_CountWidth = (-659);
      resultMatrixHTML0.m_RankingDiff = intArray0;
      String string0 = resultMatrixHTML0.toStringKey();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n   <tr><td><b>(1)</b></td><td>col0</td></tr>\n</table>\n", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=4.024318542168408
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(97, 0);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 97;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray0[2] = doubleArray3;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.RIGHT_PARENTHESES = "MZxpBkOSp~";
      resultMatrixPlainText0.m_ColNameWidth = 0;
      String[] stringArray0 = resultMatrixPlainText0.getOptions();
      assertEquals(19, stringArray0.length);
      
      resultMatrixPlainText0.setPrintColNames(true);
      resultMatrixPlainText0.getDefaultRemoveFilterName();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      resultMatrixPlainText0.showStdDevTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.enumerateRowNamesTipText();
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(97, resultMatrixPlainText0.getColCount());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.568923658656565
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      String string0 = resultMatrixSignificance0.padString("  ", 0);
      assertEquals("  ", string0);
      
      int int0 = resultMatrixSignificance0.getStdDevWidth();
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, int0);
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.866574259633797
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      resultMatrixCSV0.getOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.m_StdDevPrec = (-3735);
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      resultMatrixGnuPlot0.getRowName((-3735));
      String string0 = resultMatrixGnuPlot0.padString(" ", (-3735));
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(" ", string0);
      
      String string1 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"[1]\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string1);
      
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixCSV0.setRowName((-5088), "*");
      resultMatrixGnuPlot0.getShowAverage();
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.7663837045225685
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_CountWidth = 1037;
      resultMatrixHTML0.getDisplayName();
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 1037;
      intArray1[3] = 1;
      intArray1[4] = 1037;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1037;
      intArray2[1] = 1037;
      intArray2[2] = 1;
      intArray2[3] = (-1510);
      intArray2[4] = 0;
      intArray2[5] = 2;
      intArray0[1] = intArray2;
      resultMatrixHTML0.m_Wins = intArray0;
      resultMatrixHTML0.clearSummary();
      resultMatrixHTML0.getColOrder();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.isAverage(1037);
      assertEquals(50, resultMatrixGnuPlot0.getColNameWidth());
      
      resultMatrixHTML0.setShowAverage(false);
      resultMatrixHTML0.countWidthTipText();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9110496040728018
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.doubleToString(0.0, 0);
      resultMatrixLatex0.countWidthTipText();
      resultMatrixLatex0.toStringKey();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "\begin{table}[thb]\ncaption{label{labelname}Table Caption (Key)}\nscriptsize\n{centering\n\begin{tabular}{cl}\\\n(1) & col0 \\\nend{tabular}\n}\nend{table}\n";
      stringArray0[1] = "$\bullet$";
      ResultMatrixCSV.main(stringArray0);
      assertEquals(10, stringArray0.length);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.1082888359463325
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.listOptions();
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixLatex0.m_CountWidth = 89;
      resultMatrixLatex0.m_ShowStdDev = false;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.getSummaryTitle(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixSignificance0.LOSS_STRING = "(";
      resultMatrixHTML0.getRowNameWidth();
      resultMatrixSignificance0.setCount(97, 2277.54277651828);
      resultMatrixHTML0.listOptions();
      resultMatrixLatex0.toStringSummary();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$circ$";
      resultMatrixHTML0.RIGHT_PARENTHESES = "Dataset";
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      stringArray0[1] = "-summary data not set-";
      stringArray0[2] = "-summary data not set-";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixHTML0.trimString("", 34);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 0);
      resultMatrixCSV0.setCountWidth(102);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixLatex0.removeFilterNameTipText();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixHTML0.setSize(97, 89);
      resultMatrixLatex0.enumerateColNamesTipText();
      resultMatrixHTML0.getColNameWidth();
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.287283839518867
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.m_EnumerateColNames = true;
      assertEquals(1, resultMatrixCSV0.getColCount());
      
      resultMatrixPlainText0.setSize(0, 1);
      resultMatrixCSV0.assign(resultMatrixPlainText0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.padString("*", 1);
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray2[4] = 2;
      intArray2[5] = 1551;
      intArray2[6] = 0;
      intArray2[7] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 1;
      intArray3[1] = 2;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 97;
      intArray5[1] = 2;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 2;
      intArray7[1] = (-795);
      intArray7[2] = 433;
      intArray7[3] = 97;
      intArray7[4] = 1;
      intArray7[5] = 453;
      intArray7[6] = 2;
      intArray7[7] = 0;
      intArray7[8] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 97;
      intArray8[1] = 0;
      intArray8[2] = 433;
      intArray8[3] = 453;
      intArray8[4] = 453;
      intArray8[5] = 97;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[5];
      intArray9[0] = 0;
      intArray9[1] = 1;
      intArray9[2] = 2;
      intArray9[3] = 1;
      intArray9[4] = (-795);
      intArray0[8] = intArray9;
      resultMatrixGnuPlot0.m_Wins = intArray0;
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.isStdDev(1);
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3397561401930815
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setEnumerateColNames(false);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2232;
      intArray0[2] = 1;
      intArray0[3] = 1;
      resultMatrixPlainText0.m_RankingDiff = intArray0;
      resultMatrixPlainText0.getRowName(1);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      String string0 = resultMatrixLatex0.toStringKey();
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.8208657342727466
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.globalInfo();
      String[][] stringArray0 = new String[9][8];
      String[] stringArray1 = new String[4];
      stringArray1[1] = "(";
      stringArray1[2] = "(";
      stringArray1[3] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      stringArray3[0] = "*";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray3[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray3[4] = "v";
      stringArray3[5] = "*";
      stringArray3[6] = "v";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      stringArray4[0] = " ";
      stringArray4[1] = "*";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[3];
      stringArray5[0] = "(";
      stringArray5[1] = "v";
      stringArray5[2] = "(";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[9];
      stringArray6[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray6[1] = ")";
      stringArray6[2] = ")";
      stringArray6[3] = "*";
      stringArray6[4] = "v";
      stringArray6[5] = "(";
      stringArray6[6] = "v";
      stringArray6[7] = "Generates the output as plain text (for fixed width fonts).";
      stringArray6[8] = "*";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[8];
      stringArray7[0] = "v";
      stringArray7[1] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray7[2] = "Generates the output as plain text (for fixed width fonts).";
      stringArray7[3] = " ";
      stringArray7[4] = "(";
      stringArray7[5] = "Generates the matrix output as HTML.";
      stringArray7[6] = " ";
      stringArray7[7] = "*";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      stringArray8[0] = "(";
      stringArray8[1] = ")";
      stringArray8[2] = "v";
      stringArray8[3] = ")";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[1];
      stringArray9[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray0[8] = stringArray9;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.884826046119986
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      resultMatrixGnuPlot0.getRowName((-3735));
      resultMatrixGnuPlot0.assign(resultMatrixCSV0);
      String string0 = resultMatrixGnuPlot0.padString(" ", (-3735));
      assertEquals(" ", string0);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      String string1 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"[1]\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string1);
      
      resultMatrixCSV0.setCount((-5088), (-3735));
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      
      resultMatrixCSV0.setRowName((-5088), "*");
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9943009831129443
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(26, 26);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      resultMatrixSignificance0.getColName(2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(false);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setPrintRowNames(false);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML1.toString();
      resultMatrixHTML1.listOptions();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixLatex0.toStringMatrix();
      assertTrue(resultMatrixLatex0.getEnumerateRowNames());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3716624828004464
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.enumerateColNamesTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      Vector<Vector<String>> vector0 = new Vector<Vector<String>>();
      resultMatrixHTML0.m_HeaderValues = vector0;
      resultMatrixHTML0.getDefaultEnumerateColNames();
      Vector<String> vector1 = new Vector<String>();
      vector0.add(vector1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.LEFT_PARENTHESES = "*";
      String string0 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n*1) col0\n", string0);
      
      resultMatrixSignificance0.getDefaultRowNameWidth();
      boolean boolean0 = resultMatrixCSV1.getEnumerateColNames();
      assertTrue(boolean0);
      
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV1.getRowOrder();
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      
      resultMatrixCSV0.toStringKey();
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.133124418257381
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertFalse(resultMatrixLatex0.getPrintColNames());
      
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[0];
      resultMatrixLatex0.m_EnumerateColNames = false;
      intArray0[0] = intArray1;
      resultMatrixLatex0.setRanking(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.getPrintColNames();
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(1, resultMatrixLatex0.getRowCount());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4244551558328777
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(26, 26);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      resultMatrixSignificance0.getColName(2);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      
      booleanArray0[2] = true;
      resultMatrixSignificance0.m_StdDevWidth = 97;
      resultMatrixSignificance0.m_ColHidden = booleanArray0;
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.getDisplayName();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      int[][] intArray1 = new int[9][1];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      intArray1[6] = intArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 97;
      intArray2[4] = 2;
      intArray1[7] = intArray2;
      intArray1[8] = intArray0;
      resultMatrixHTML0.m_Significance = intArray1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(26, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4530062324160475
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getColName((-1));
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.setPrintColNames(false);
      resultMatrixGnuPlot0.getDisplayName();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.removeFilterName("col");
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixGnuPlot0.clearRanking();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.m_RemoveFilterName = false;
      resultMatrixSignificance0.TIE_STRING = " ";
      resultMatrixSignificance0.setRemoveFilterName(false);
      resultMatrixSignificance0.getDefaultMeanWidth();
      resultMatrixCSV0.clear();
      resultMatrixSignificance0.getDefaultPrintColNames();
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultPrintColNames();
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2842012592059757
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintColNames(false);
      resultMatrixHTML0.RIGHT_PARENTHESES = "The maximum width of the column names (0 = optimal).";
      int[][] intArray0 = new int[0][0];
      resultMatrixHTML0.setMeanWidth(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      resultMatrixHTML0.m_RowNames = stringArray0;
      resultMatrixHTML0.clear();
      resultMatrixHTML0.m_ShowStdDev = false;
      resultMatrixHTML0.m_Wins = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.240611702228474
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[0];
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 1;
      intArray6[3] = 0;
      intArray0[5] = intArray6;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixLatex0.setPrintColNames(true);
      assertTrue(resultMatrixLatex0.getPrintColNames());
      
      resultMatrixGnuPlot0.getSummaryTitle(2);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 946);
      resultMatrixCSV0.setRowName(17, "Quote parse error.");
      assertEquals(0, resultMatrixCSV0.getVisibleColCount());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.497724726979346
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setPrintRowNames(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      resultMatrixLatex0.setMeanWidth(1794);
      resultMatrixLatex0.getRowName(1);
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      
      resultMatrixLatex0.clear();
      resultMatrixHTML0.getColCount();
      resultMatrixLatex0.toStringSummary();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.495798695427358
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.m_RankingLosses = intArray0;
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.removeFilterNameTipText();
      int[][] intArray1 = new int[2][2];
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.527722589918696
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearRanking();
      double[] doubleArray0 = new double[0];
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.removeFilterName(" statistically significant improvement or degradation}");
      resultMatrixLatex0.m_Counts = doubleArray0;
      resultMatrixLatex0.setPrintColNames(true);
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.setColHidden(0, false);
      resultMatrixLatex0.m_StdDev = null;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setCount(0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.1082888359463325
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.listOptions();
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixLatex0.m_CountWidth = 89;
      resultMatrixLatex0.m_ShowStdDev = true;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.getSummaryTitle(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixSignificance0.LOSS_STRING = "(";
      resultMatrixHTML0.getRowNameWidth();
      resultMatrixSignificance0.setCount(97, 2277.54277651828);
      resultMatrixHTML0.listOptions();
      resultMatrixLatex0.toStringSummary();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$circ$";
      resultMatrixHTML0.RIGHT_PARENTHESES = "Dataset";
      resultMatrixLatex0.assign(resultMatrixSignificance0);
      stringArray0[1] = "-summary data not set-";
      stringArray0[2] = "-summary data not set-";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixHTML0.trimString("", 34);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 0);
      resultMatrixCSV0.setCountWidth(102);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixLatex0.removeFilterNameTipText();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixHTML0.setSize(97, 89);
      resultMatrixLatex0.enumerateColNamesTipText();
      resultMatrixHTML0.getColNameWidth();
      assertTrue(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(89, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.8144730690601683
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultColNameWidth();
      String[][] stringArray0 = new String[9][8];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray1[1] = "(";
      stringArray1[2] = "(";
      stringArray1[3] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      stringArray3[0] = "*";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray3[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray3[4] = "v";
      stringArray3[5] = "*";
      stringArray3[6] = "v";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      stringArray4[0] = " ";
      stringArray4[1] = "*";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[3];
      stringArray5[0] = "(";
      stringArray5[1] = "v";
      stringArray5[2] = "(";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[9];
      stringArray6[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray6[1] = ")";
      stringArray6[2] = ")";
      stringArray6[3] = "*";
      stringArray6[4] = "v";
      stringArray6[5] = "(";
      stringArray6[6] = "v";
      stringArray6[7] = "Generates the output as plain text (for fixed width fonts).";
      stringArray6[8] = "*";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[8];
      stringArray7[0] = "v";
      stringArray7[1] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray7[2] = "Generates the output as plain text (for fixed width fonts).";
      stringArray7[3] = " ";
      stringArray7[4] = "(";
      stringArray7[5] = "Generates the matrix output as HTML.";
      stringArray7[6] = " ";
      stringArray7[7] = "*";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      stringArray8[0] = "(";
      stringArray8[1] = ")";
      stringArray8[2] = "v";
      stringArray8[3] = ")";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[1];
      stringArray9[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray0[8] = stringArray9;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.448070748176102
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String string0 = resultMatrixCSV0.toStringKey();
      assertEquals("Key,\n[1],col0\n", string0);
      
      boolean boolean0 = resultMatrixCSV0.getRowHidden(3263);
      assertFalse(boolean0);
      
      resultMatrixCSV0.meanWidthTipText();
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultSignificanceWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.117414936070219
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[][] stringArray0 = new String[1][0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "*";
      stringArray1[1] = "<DR 'Cv$1,n";
      stringArray1[2] = "*";
      stringArray1[3] = ")";
      stringArray1[4] = ")";
      stringArray1[5] = "v";
      stringArray1[6] = "";
      stringArray1[7] = "1fDZpK";
      stringArray1[8] = "v";
      stringArray0[0] = stringArray1;
      int int0 = resultMatrixSignificance0.getColSize(stringArray0, 1);
      assertEquals(1, resultMatrixSignificance0.getColCount());
      assertEquals(11, int0);
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.12741050592313
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.m_HeaderKeys = vector0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixPlainText0);
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      
      resultMatrixSignificance0.m_StdDevWidth = 2;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex1);
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      resultMatrixGnuPlot0.m_NonSigWins = intArray0;
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixLatex1.getDefaultSignificanceWidth();
      resultMatrixLatex0.getSignificanceWidth();
      resultMatrixPlainText0.toStringRanking();
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.482762998621332
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      int int0 = resultMatrixLatex0.getDefaultMeanPrec();
      assertEquals(2, int0);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(0, resultMatrixLatex0.getColCount());
  }
}
