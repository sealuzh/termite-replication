/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 05:21:53 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.845638493134258
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixCSV0.assign(resultMatrixHTML0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(155, 2);
      resultMatrixPlainText0.setColHidden(14, false);
      resultMatrixLatex0.getDisplayName();
      resultMatrixHTML0.setCountWidth(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 71;
      intArray0[1] = 0;
      intArray0[2] = 2;
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixPlainText0.getDefaultEnumerateColNames();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      assertEquals(1, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.90255381859477
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 1);
      Vector<Vector<String>> vector0 = new Vector<Vector<String>>();
      resultMatrixLatex0.m_HeaderKeys = vector0;
      resultMatrixLatex0.getRowName(38);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "$\bullet$";
      resultMatrixLatex0.setRowNameWidth(1);
      int int0 = 18;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.padString((String) null, 1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.936854587182045
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      resultMatrixCSV0.assign(resultMatrixHTML0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(155, 2);
      resultMatrixPlainText0.setColHidden(14, false);
      resultMatrixLatex0.m_RemoveFilterName = false;
      resultMatrixLatex0.getDisplayName();
      resultMatrixHTML0.setCountWidth(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 71;
      intArray0[1] = 0;
      intArray0[2] = 2;
      resultMatrixHTML0.setRowOrder(intArray0);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      boolean boolean0 = resultMatrixHTML0.isMean(118);
      assertEquals(1, resultMatrixHTML0.getCountWidth());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5527986263661355
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_CountWidth = 1037;
      resultMatrixHTML0.getDisplayName();
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[2] = 0;
      intArray1[2] = 1037;
      intArray1[3] = 2;
      intArray1[4] = 1037;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1037;
      intArray2[1] = 1037;
      intArray2[2] = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray3 = new int[8][8];
      intArray3[0] = intArray2;
      intArray3[1] = intArray1;
      intArray3[2] = intArray1;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      intArray3[5] = intArray2;
      intArray3[6] = intArray1;
      intArray3[7] = intArray2;
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixHTML1.getAverage(1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "1JP";
      stringArray0[1] = ")";
      stringArray0[2] = ")";
      stringArray0[3] = " ";
      stringArray0[4] = "v";
      stringArray0[5] = "<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n";
      stringArray0[6] = " ";
      ResultMatrixPlainText.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7075381447927462
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[19][8];
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")";
      resultMatrixLatex0.m_ColNames = stringArray0;
      resultMatrixLatex0.m_EnumerateColNames = false;
      resultMatrixLatex0.setRanking(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      int[][] intArray1 = new int[1][1];
      resultMatrixHTML0.setShowAverage(true);
      resultMatrixLatex0.m_ColNameWidth = 0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 0;
      resultMatrixHTML0.m_Counts = doubleArray0;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = 0;
      intArray2[2] = 3444;
      intArray2[3] = 1;
      intArray2[4] = 2;
      intArray1[0] = intArray2;
      resultMatrixLatex0.setSummary(intArray1, intArray1);
      assertEquals("The width of the standard deviation (0 = optimal).", resultMatrixLatex0.stdDevWidthTipText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2495328915214103
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 2);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(1608, 1);
      resultMatrixLatex1.setOptions((String[]) null);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixPlainText0);
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex2 = null;
      try {
        resultMatrixLatex2 = new ResultMatrixLatex((ResultMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      double[][] doubleArray0 = new double[4][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 2;
      doubleArray4[3] = (double) 0;
      doubleArray4[4] = (double) 0;
      resultMatrixCSV0.clear();
      doubleArray4[5] = (double) 0;
      doubleArray4[6] = (double) 0;
      doubleArray0[3] = doubleArray4;
      resultMatrixCSV0.m_Mean = doubleArray0;
      resultMatrixCSV0.m_RowNameWidth = (-1210);
      resultMatrixCSV0.toStringSummary();
      boolean boolean0 = resultMatrixCSV0.getDefaultPrintRowNames();
      assertTrue(boolean0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setCountWidth((-2168));
      resultMatrixLatex0.getRevision();
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertFalse(resultMatrixHTML0.getShowStdDev());
      assertFalse(resultMatrixHTML0.getShowAverage());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.719175869657528
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")";
      resultMatrixLatex0.m_ColNames = stringArray0;
      resultMatrixLatex0.m_EnumerateColNames = false;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      int[][] intArray0 = new int[1][1];
      resultMatrixHTML0.setSignificanceWidth(0);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      
      int[] intArray1 = new int[5];
      intArray1[0] = 0;
      intArray1[1] = 0;
      String string0 = resultMatrixLatex0.padString("", 18, true);
      assertEquals("                  ", string0);
      
      intArray1[2] = 3444;
      intArray1[3] = 1;
      intArray1[4] = 2;
      resultMatrixLatex0.setRanking(intArray0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixHTML1.getAverage((-960));
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(1, resultMatrixHTML1.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.561618665685095
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 2);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText0.addHeader("_d p^OT6aRik){U", "$circ$");
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[2] = "Jl3$/<f/*<nvA";
      stringArray0[3] = "(";
      resultMatrixPlainText1.m_RowNames = stringArray0;
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      stringArray0[6] = "(";
      resultMatrixLatex0.setOptions(stringArray0);
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      ResultMatrixCSV.main(stringArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 44);
      double[][] doubleArray0 = new double[8][6];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) 2;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 1;
      doubleArray3[1] = (double) 2;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (double) 1;
      doubleArray4[1] = (double) 2;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 0;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) 1;
      doubleArray6[1] = (double) 2;
      doubleArray6[2] = (-1066.3);
      doubleArray6[3] = (double) 2;
      doubleArray6[4] = (double) 1;
      doubleArray6[5] = (double) 1;
      doubleArray6[6] = (double) 1;
      doubleArray6[7] = (double) 1;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (double) 44;
      doubleArray8[1] = (double) 0;
      doubleArray0[7] = doubleArray8;
      resultMatrixCSV0.m_StdDev = doubleArray0;
      resultMatrixCSV0.clear();
      assertFalse(resultMatrixCSV0.getShowStdDev());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6969008500088405
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearRanking();
      resultMatrixLatex0.setEnumerateColNames(true);
      boolean boolean0 = true;
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(1, 1015);
      ResultMatrixLatex resultMatrixLatex2 = new ResultMatrixLatex(resultMatrixLatex1);
      resultMatrixLatex2.padString("$circ$", 0, true);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 4043);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.346944212990993
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultColNameWidth();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[3] = "v";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "*";
      stringArray1[1] = " ";
      stringArray1[2] = "(";
      stringArray1[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray1[5] = "*";
      stringArray1[6] = "v";
      String[] stringArray2 = new String[2];
      stringArray2[0] = " ";
      stringArray2[1] = "*";
      String[] stringArray3 = new String[3];
      stringArray3[0] = "(";
      stringArray3[1] = "v";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(45, 0);
      resultMatrixSignificance0.setColOrder((int[]) null);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1260049378554635
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 1);
      resultMatrixLatex0.getRowName(39);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "$\bullet$";
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixLatex0.setCountWidth(1);
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = "(";
      resultMatrixLatex0.clearHeader();
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      stringArray0[8] = " ";
      resultMatrixLatex0.m_ColNames = stringArray0;
      resultMatrixLatex0.setRowName(1, "");
      resultMatrixLatex0.getDisplayRow(1);
      resultMatrixLatex0.getRevision();
      resultMatrixLatex0.getColName((-1));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 0);
      resultMatrixHTML0.setShowStdDev(false);
      resultMatrixHTML0.getColName(39);
      resultMatrixLatex0.setStdDevWidth(31);
      assertEquals(31, resultMatrixLatex0.getStdDevWidth());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2630516572367383
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 2);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[2] = "Jl3$/<f/*<nvA";
      stringArray0[3] = "(";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      stringArray0[6] = "(";
      resultMatrixLatex0.setOptions(stringArray0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixPlainText2);
      resultMatrixLatex1.getDefaultRowNameWidth();
      resultMatrixLatex0.getDisplayName();
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
      
      resultMatrixHTML1.setCountWidth(50);
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(1, 97);
      resultMatrixHTML2.setRowOrder((int[]) null);
      assertFalse(resultMatrixHTML2.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.309615636328503
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_CountWidth = 1037;
      resultMatrixHTML0.getDisplayName();
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[2] = 0;
      intArray0[2] = 1037;
      intArray0[3] = 1;
      intArray0[4] = 1037;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 1037);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 2);
      resultMatrixPlainText1.setColHidden((-338), false);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText1);
      resultMatrixLatex0.getDisplayName();
      resultMatrixHTML0.setCountWidth(2);
      resultMatrixHTML0.setRowOrder(intArray0);
      assertEquals(2, resultMatrixHTML0.getCountWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 7);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.5485617030938585
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[1] = 1;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setPrintRowNames(true);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = "J|6d'-x4Y";
      ResultMatrixHTML.main(stringArray0);
      String string0 = resultMatrixHTML0.getColName(0);
      assertEquals("(1)", string0);
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      assertEquals(2, resultMatrixHTML0.getDefaultStdDevPrec());
      assertEquals(2, resultMatrixHTML0.getDefaultMeanPrec());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9025538185947704
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = "1lp.m'EI";
      stringArray0[2] = " ";
      stringArray0[3] = "XV ";
      int[][] intArray1 = new int[4][8];
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 1890;
      intArray2[2] = 0;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary((int[][]) null, intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.99377256425345
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanWidth(3435);
      resultMatrixGnuPlot0.setShowAverage(false);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.meanWidthTipText();
      assertEquals(3435, resultMatrixGnuPlot0.getMeanWidth());
      
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(3435, 1);
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixPlainText1.toStringRanking();
      int int0 = resultMatrixPlainText0.getMeanWidth();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.5039801530820864
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.listOptions();
      resultMatrixLatex0.clearRanking();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getDefaultRemoveFilterName();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringSummary();
      String[] stringArray0 = resultMatrixHTML0.getOptions();
      assertEquals(18, stringArray0.length);
      
      resultMatrixCSV0.assign(resultMatrixHTML0);
      resultMatrixHTML0.getDisplayName();
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset [1]\n-----------\nrow0       \n", string0);
      
      resultMatrixSignificance0.setPrintColNames(false);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1810);
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertFalse(resultMatrixCSV0.getPrintColNames());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      
      resultMatrixHTML0.getRowNameWidth();
      assertEquals(0, resultMatrixHTML0.getCountWidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setEnumerateRowNames(false);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      assertEquals(0, resultMatrixHTML0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixHTML0.getRowCount());
      assertEquals(0, resultMatrixHTML0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      resultMatrixCSV0.m_HeaderKeys = vector0;
      resultMatrixCSV0.setEnumerateRowNames(true);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) resultMatrixCSV0;
      objectArray0[1] = (Object) vector0;
      objectArray0[2] = (Object) vector0;
      vector0.toArray(objectArray0);
      resultMatrixCSV0.RIGHT_PARENTHESES = "*L";
      Vector<Object> vector1 = new Vector<Object>();
      // Undeclared exception!
      try { 
        vector0.insertElementAt(vector1, 659);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 659 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.277713170060047
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_CountWidth = 1037;
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[2] = 1037;
      intArray1[3] = 1;
      intArray1[4] = 1037;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1037;
      intArray2[1] = 1037;
      intArray2[2] = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      int[][] intArray3 = new int[8][8];
      intArray3[0] = intArray2;
      resultMatrixHTML0.setPrintColNames(true);
      intArray3[2] = intArray1;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      intArray3[5] = intArray1;
      intArray3[6] = intArray1;
      intArray3[7] = intArray2;
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML1.toString();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixHTML1.getAverage(1);
      resultMatrixHTML0.getDefaultSignificanceWidth();
      assertTrue(resultMatrixHTML0.getPrintColNames());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.464279774682563
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean boolean0 = false;
      resultMatrixLatex0.clearHeader();
      int int0 = (-2025);
      resultMatrixLatex0.setColHidden((-2025), false);
      resultMatrixLatex0.setCount(30, (-251.47));
      String[] stringArray0 = new String[6];
      stringArray0[0] = ")";
      stringArray0[1] = ")";
      stringArray0[2] = "(";
      stringArray0[3] = "$circ$";
      stringArray0[4] = "(";
      stringArray0[5] = "(";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.899757101143058
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String[] stringArray0 = new String[1];
      resultMatrixLatex0.setStdDevWidth((-380));
      stringArray0[0] = ")";
      resultMatrixLatex0.m_ColNames = stringArray0;
      resultMatrixLatex0.m_EnumerateColNames = false;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      resultMatrixLatex0.setCountWidth((-2815));
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.setRowName(6, (String) null);
      resultMatrixLatex0.getDisplayRow(44);
      resultMatrixLatex0.getRevision();
      resultMatrixLatex0.getColName(6);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.559348598893942
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.LOSS_STRING = "LaTeX";
      resultMatrixLatex0.setPrintRowNames(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      resultMatrixHTML0.m_EnumerateColNames = false;
      String string0 = resultMatrixHTML0.toString();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b></b></td><td align=\"center\" colspan=\"2\"><b></b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td><td align=\"right\">&nbsp;</td><td align=\"center\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td><td align=\"right\">&nbsp;</td><td align=\"center\">(0/0/0)</td></tr>\n</table>\n", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "LaTeX";
      ResultMatrixHTML.main(stringArray0);
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.m_StdDevWidth = 283;
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixHTML0.getColCount();
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.getDefaultShowStdDev();
      resultMatrixLatex0.getPrintRowNames();
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2946188000713654
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(97, 26);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 97;
      intArray0[2] = 97;
      intArray0[3] = 1;
      intArray0[4] = 2;
      resultMatrixCSV0.m_RankingWins = intArray0;
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 26;
      intArray1[2] = 1;
      intArray1[3] = 97;
      intArray1[4] = 527;
      resultMatrixCSV0.m_RankingLosses = intArray1;
      resultMatrixCSV0.setStdDevPrec(1164);
      // Undeclared exception!
      resultMatrixCSV0.toArray();
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0948254979778937
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 1);
      Vector<Vector<String>> vector0 = new Vector<Vector<String>>();
      resultMatrixLatex0.m_HeaderKeys = vector0;
      resultMatrixLatex0.getRowName(38);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "$\bullet$";
      resultMatrixLatex0.setRowNameWidth(1);
      resultMatrixLatex0.setCountWidth(1);
      stringArray0[2] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = "(";
      resultMatrixLatex0.clearHeader();
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      stringArray0[8] = " ";
      resultMatrixLatex0.setRowName(1, "");
      resultMatrixLatex0.getDisplayRow(1);
      resultMatrixLatex0.getRevision();
      resultMatrixLatex0.getColName(211);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.376342306072053
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultColNameWidth();
      resultMatrixPlainText0.m_PrintColNames = false;
      String[][] stringArray0 = new String[9][8];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray1[1] = "(";
      stringArray1[2] = "(";
      stringArray1[3] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      stringArray3[0] = "*";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray3[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray3[5] = "*";
      stringArray3[6] = "v";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      stringArray4[0] = " ";
      stringArray4[1] = "*";
      stringArray0[3] = stringArray4;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      assertEquals(5, resultMatrixCSV0.getCountWidth());
      
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.setRowName((-476), "");
      resultMatrixCSV0.showAverageTipText();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.656844650076919
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[1];
      resultMatrixLatex0.m_EnumerateColNames = false;
      intArray0[0] = intArray1;
      resultMatrixLatex0.setRanking(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getColSize((String[][]) null, 279, false, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6573579655917148
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[0];
      resultMatrixLatex0.m_EnumerateColNames = false;
      intArray0[0] = intArray1;
      resultMatrixLatex0.setRanking(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      assertFalse(resultMatrixHTML0.getEnumerateColNames());
      
      resultMatrixLatex0.getDefaultRowNameWidth();
      String[][] stringArray0 = new String[4][0];
      String[] stringArray1 = new String[1];
      stringArray1[0] = ")";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[3];
      stringArray2[0] = "$\bullet$";
      stringArray2[1] = "(";
      stringArray2[2] = "(";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[8];
      stringArray3[0] = "(";
      stringArray3[1] = "$\bullet$";
      stringArray3[2] = " ";
      stringArray3[3] = "$\bullet$";
      stringArray3[4] = "(";
      stringArray3[5] = ")";
      stringArray3[6] = "_S?(qGE7?W";
      stringArray3[7] = "$circ$";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      stringArray4[0] = "$\bullet$";
      stringArray0[3] = stringArray4;
      resultMatrixLatex0.getColSize(stringArray0, 126, false, false);
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8466796372141983
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[6][0];
      int[] intArray1 = new int[3];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 0;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.padString((String) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7485462919025654
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.padString(" ", 97, false);
      assertEquals("                                                                                                 ", string0);
      
      resultMatrixLatex0.m_RemoveFilterName = false;
      resultMatrixLatex0.getDisplayName();
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.579066988568077
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.padString("TXEo8%4p!=W9~", (-51), true);
      resultMatrixCSV0.clear();
      resultMatrixCSV0.m_EnumerateRowNames = true;
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      ResultMatrixHTML.main(stringArray0);
      int int0 = 69;
      ResultMatrixHTML resultMatrixHTML0 = null;
      try {
        resultMatrixHTML0 = new ResultMatrixHTML((-1222), 2867);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6300239250417587
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      ResultMatrixHTML.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      resultMatrixLatex0.m_SignificanceWidth = 15;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      resultMatrixHTML0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixHTML0.getAverage(37);
      assertEquals(0, resultMatrixHTML0.getVisibleRowCount());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7584892040296487
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.setStdDevPrec(26);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 175;
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1);
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot2.getDefaultEnumerateColNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.setRowName(1, "&nbsp;");
      resultMatrixGnuPlot0.setColHidden(1, false);
      assertEquals(26, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.147908827500304
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      String string0 = resultMatrixGnuPlot0.getRowName((-3735));
      assertNull(string0);
      
      resultMatrixGnuPlot0.clearSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(433, 1);
      assertEquals(433, resultMatrixGnuPlot1.getVisibleColCount());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(50, resultMatrixGnuPlot1.getColNameWidth());
      assertFalse(resultMatrixGnuPlot1.getEnumerateColNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      String[][] stringArray1 = new String[4][4];
      stringArray1[0] = stringArray0;
      stringArray1[1] = stringArray0;
      stringArray1[2] = stringArray0;
      stringArray1[3] = stringArray0;
      int int0 = resultMatrixLatex0.getColSize(stringArray1, 0, true, false);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(0, resultMatrixLatex0.getColNameWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateRowNames());
      assertEquals(10, int0);
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8428806153171315
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[0];
      resultMatrixLatex0.m_EnumerateColNames = false;
      intArray0[0] = intArray1;
      resultMatrixLatex0.setRanking(intArray0);
      String[][] stringArray0 = new String[3][2];
      String[] stringArray1 = new String[3];
      stringArray1[0] = ")";
      stringArray1[1] = "$circ$";
      stringArray1[2] = " ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[9];
      stringArray2[0] = "$circ$";
      stringArray2[1] = ")";
      stringArray2[2] = "(";
      stringArray2[3] = "$circ$";
      stringArray2[4] = ")";
      stringArray2[5] = "$circ$";
      stringArray2[6] = " ";
      stringArray2[7] = "(";
      stringArray2[8] = " ";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      stringArray3[0] = " ";
      resultMatrixLatex0.m_RowOrder = intArray1;
      stringArray3[1] = ")";
      stringArray3[2] = "$\bullet$";
      stringArray3[3] = " ";
      stringArray3[4] = "$\bullet$";
      stringArray3[5] = "(";
      stringArray3[6] = "$circ$";
      stringArray3[7] = "$\bullet$";
      stringArray3[8] = " ";
      stringArray0[2] = stringArray3;
      int int0 = resultMatrixLatex0.getColSize(stringArray0, (-5442), false, false);
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, int0);
      assertEquals(0, resultMatrixLatex0.getDefaultStdDevWidth());
      assertEquals(1, resultMatrixLatex0.getColCount());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6862390981150464
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[1][8];
      int[] intArray1 = new int[0];
      resultMatrixLatex0.m_EnumerateColNames = false;
      intArray0[0] = intArray1;
      resultMatrixLatex0.setRanking(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.stdDevWidthTipText();
      resultMatrixLatex0.getRowNameWidth();
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.845638493134258
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setEnumerateColNames(false);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2232;
      intArray0[2] = 1;
      resultMatrixPlainText0.getRowName(2232);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      
      resultMatrixLatex0.getDefaultEnumerateColNames();
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getPrintColNames());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2423606966230083
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 2);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[2] = "Jl3$/<f/*<nvA";
      stringArray0[3] = "(";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      stringArray0[6] = "(";
      resultMatrixLatex0.setOptions(stringArray0);
      assertFalse(resultMatrixLatex0.getEnumerateColNames());
      
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixPlainText2);
      resultMatrixLatex1.getDefaultRowNameWidth();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowName(16, "v");
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.631612186595399
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.doubleToString(0.0, (-1667));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[][] stringArray0 = new String[1][0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "*";
      stringArray1[1] = "<DR 'Cv$1,n";
      stringArray1[2] = "*";
      stringArray1[3] = ")";
      stringArray1[4] = ")";
      stringArray1[5] = "v";
      stringArray1[6] = "";
      stringArray1[7] = "1fDZpK";
      stringArray1[8] = "v";
      stringArray0[0] = stringArray1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.colNameWidthTipText();
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertFalse(resultMatrixLatex0.getDefaultRemoveFilterName());
      assertEquals(40, resultMatrixLatex0.getRowNameWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7933509691552927
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 2);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[3] = "(";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      stringArray0[6] = "(";
      try { 
        resultMatrixLatex0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.774342220194881
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintColNames(false);
      resultMatrixHTML0.RIGHT_PARENTHESES = "The maximum width of the column names (0 = optimal).";
      int[][] intArray0 = new int[0][0];
      resultMatrixHTML0.setMeanWidth(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      resultMatrixHTML0.m_RowNames = stringArray0;
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      
      resultMatrixHTML0.clear();
      resultMatrixHTML0.m_ShowStdDev = false;
      resultMatrixHTML0.m_Wins = intArray0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRanking(resultMatrixHTML0.m_Wins);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      assertEquals(0, resultMatrixHTML1.getMeanWidth());
      assertEquals(0, resultMatrixHTML1.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML1.getStdDevWidth());
      assertEquals(25, resultMatrixHTML1.getRowNameWidth());
      assertEquals(2, resultMatrixHTML1.getMeanPrec());
      assertEquals(0, resultMatrixHTML1.getCountWidth());
      assertEquals(2, resultMatrixHTML1.getStdDevPrec());
      assertTrue(resultMatrixHTML1.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      
      resultMatrixLatex0.getDefaultRowNameWidth();
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.4872534092060716
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultColNameWidth();
      String[][] stringArray0 = new String[9][8];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray1[1] = "(";
      stringArray1[2] = "(";
      stringArray1[3] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[9];
      stringArray3[0] = "*";
      resultMatrixPlainText0.LEFT_PARENTHESES = " ";
      stringArray3[2] = " ";
      stringArray3[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      ResultMatrixGnuPlot.main(stringArray1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.globalInfo();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.679706038839934
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSize((-37), (-37));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9458755173797666
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = "mjXtLzw";
      resultMatrixLatex0.clear();
      resultMatrixLatex0.setMeanWidth(25);
      resultMatrixLatex0.trimString("mjXtLzw", (-1));
      resultMatrixLatex0.setMeanPrec((-1));
      resultMatrixLatex0.getColOrder();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.743535678836661
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.LEFT_PARENTHESES = null;
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixPlainText0.setMeanPrec(5);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "$circ$";
      stringArray0[1] = " ";
      stringArray0[2] = "$\bullet$";
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.69690085000884
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.LEFT_PARENTHESES = null;
      resultMatrixHTML0.setMeanPrec(0);
      resultMatrixPlainText0.setMeanPrec(5);
      resultMatrixHTML0.setMean(1, 23, (-1564.0));
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(1, (-163));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2127420325498597
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      resultMatrixLatex0.setOptions(stringArray0);
      resultMatrixHTML0.LEFT_PARENTHESES = null;
      resultMatrixHTML0.setMeanPrec(0);
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize((String[][]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.129247641294252
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setPrintRowNames(true);
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMean(1535, 2038, 2038);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(97, 0);
      resultMatrixCSV0.toStringMatrix();
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.641343963227864
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setOptions(stringArray0);
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 2);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixHTML0);
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 0);
      resultMatrixCSV1.setRowName((-3), ")");
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2747621385670804
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toArray();
      resultMatrixCSV0.clear();
      resultMatrixCSV0.getOptions();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixCSV0.clearSummary();
      resultMatrixGnuPlot0.m_MeanWidth = 9;
      resultMatrixGnuPlot0.getRowName((-3735));
      resultMatrixGnuPlot0.clearSummary();
      String[][] stringArrayArray0 = null;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(2940, 71);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.122064753647185
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(26, 26);
      resultMatrixSignificance0.getColName(2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      resultMatrixLatex0.removeFilterName(")");
      resultMatrixLatex0.getRowName(2);
      resultMatrixLatex0.setPrintColNames(true);
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.setColHidden(17, true);
      resultMatrixLatex0.setCount(26, 26);
      assertEquals(25, resultMatrixLatex0.getVisibleColCount());
      
      resultMatrixLatex0.clear();
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0069916486291746
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.432141272497507
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setPrintRowNames(true);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 1);
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      
      String string0 = resultMatrixHTML0.toString();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>(1)</b></td><td align=\"center\" colspan=\"2\"><b>(2)</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td><td align=\"right\">&nbsp;</td><td align=\"center\">&nbsp;</td></tr>\n   <tr><td>(v/ /*)</td><td align=\"right\">&nbsp;</td><td align=\"right\">&nbsp;</td><td align=\"center\">(0/0/0)</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.listOptions();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixLatex0.meanWidthTipText();
      resultMatrixHTML0.getColCount();
      assertEquals(2, resultMatrixHTML0.getVisibleColCount());
      
      String string1 = resultMatrixLatex0.toString();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.4354628530862756
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getDefaultColNameWidth();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[3] = "v";
      String[] stringArray1 = new String[0];
      String[] stringArray2 = new String[7];
      stringArray2[0] = "*";
      stringArray2[1] = " ";
      stringArray2[2] = "(";
      stringArray2[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray2[5] = "*";
      stringArray2[6] = "v";
      String[] stringArray3 = new String[2];
      stringArray3[0] = " ";
      stringArray3[1] = "*";
      String[] stringArray4 = new String[3];
      stringArray4[0] = "(";
      stringArray0[2] = "v";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(366, 4);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 2;
      resultMatrixSignificance0.setColOrder(intArray0);
      resultMatrixPlainText0.getSignificanceWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.clear();
      resultMatrixPlainText0.setColNameWidth(2851);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 366);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5817698396739623
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.getDisplayName();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = "1lp.m'EI";
      resultMatrixLatex0.getColName(1);
      stringArray0[2] = " ";
      stringArray0[3] = "XV ";
      stringArray0[4] = "";
      resultMatrixLatex0.setOptions(stringArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixLatex0.getDefaultRowNameWidth();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex1.m_SignificanceWidth = 1002;
      resultMatrixLatex1.toString();
      resultMatrixLatex0.rowNameWidthTipText();
      resultMatrixHTML0.removeFilterNameTipText();
      resultMatrixLatex0.getRowName(3014);
      assertEquals(0, resultMatrixLatex0.getStdDevPrec());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3555397222385683
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultColNameWidth();
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (-2240.01836628);
      doubleArray2[1] = (double) 2;
      doubleArray2[2] = 5006.5;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (double) 0;
      doubleArray2[5] = (double) 0;
      doubleArray2[6] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) 0;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (-2240.01836628);
      doubleArray3[3] = (double) 1;
      doubleArray3[4] = (double) 2;
      doubleArray3[5] = (double) 1;
      doubleArray3[6] = (double) 0;
      doubleArray3[7] = 5006.5;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 2;
      doubleArray4[2] = (double) 0;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (-2240.01836628);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 5006.5;
      doubleArray5[1] = (double) 0;
      doubleArray5[2] = 5006.5;
      doubleArray0[4] = doubleArray5;
      resultMatrixPlainText0.m_Mean = doubleArray0;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[3] = "v";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "*";
      stringArray1[1] = " ";
      stringArray1[2] = "(";
      stringArray1[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray1[5] = "*";
      stringArray1[6] = "v";
      String[] stringArray2 = new String[2];
      stringArray2[0] = " ";
      stringArray2[1] = "*";
      String[] stringArray3 = new String[3];
      stringArray3[0] = "(";
      stringArray3[1] = "v";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixPlainText0.toStringRanking();
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 0;
      resultMatrixSignificance0.setColOrder(intArray0);
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6969008500088405
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      assertEquals(0, resultMatrixGnuPlot1.getMeanWidth());
      assertFalse(resultMatrixGnuPlot1.getShowStdDev());
      assertEquals(2, resultMatrixGnuPlot1.getMeanPrec());
      assertTrue(resultMatrixGnuPlot1.getPrintRowNames());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.setColOrder(intArray0);
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7886260379670382
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.LEFT_PARENTHESES = "kk}qr}#";
      resultMatrixLatex0.m_CountWidth = 1;
      resultMatrixLatex0.m_PrintColNames = false;
      resultMatrixLatex0.getDefaultMeanWidth();
      resultMatrixLatex0.printColNamesTipText();
      resultMatrixLatex0.getDefaultPrintRowNames();
      int int0 = resultMatrixLatex0.getDefaultSignificanceWidth();
      assertEquals(0, int0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixHTML0.m_CountWidth = (-659);
      resultMatrixHTML0.m_RankingDiff = intArray0;
      String string0 = resultMatrixHTML0.toStringKey();
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td colspan=\"2\"><b>Key</b></td></tr>\n   <tr><td><b>(1)</b></td><td>col0</td></tr>\n</table>\n", string0);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8456384931342575
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.doubleToString(2, 0);
      resultMatrixLatex0.countWidthTipText();
      resultMatrixLatex0.toStringKey();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      resultMatrixPlainText0.showStdDevTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(6, 3418);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.632058449565375
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      resultMatrixCSV0.m_ShowStdDev = true;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 685);
      resultMatrixLatex0.setOptions(stringArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      assertTrue(resultMatrixCSV0.getShowStdDev());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      resultMatrixLatex0.getDefaultRowNameWidth();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setRowName(3316, "");
      resultMatrixLatex0.showStdDevTipText();
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5247743306825376
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(97, 0);
      double[][] doubleArray0 = new double[3][5];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 97;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = (double) 1;
      doubleArray1[8] = (double) 2;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = (double) 0;
      doubleArray3[3] = (double) 0;
      doubleArray0[2] = doubleArray3;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.RIGHT_PARENTHESES = "MZxpBkOSp~";
      resultMatrixPlainText0.m_ColNameWidth = 0;
      String[] stringArray0 = resultMatrixPlainText0.getOptions();
      assertEquals(19, stringArray0.length);
      
      resultMatrixPlainText0.setPrintColNames(true);
      resultMatrixPlainText0.getDefaultRemoveFilterName();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      String string0 = resultMatrixPlainText0.showStdDevTipText();
      assertEquals("Whether to display the standard deviation column.", string0);
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.toStringKey();
      resultMatrixSignificance0.enumerateRowNamesTipText();
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(0, resultMatrixSignificance0.getMeanWidth());
      assertTrue(resultMatrixSignificance0.getPrintColNames());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(5, resultMatrixSignificance0.getCountWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertTrue(resultMatrixSignificance0.getEnumerateColNames());
      assertEquals(97, resultMatrixPlainText0.getColCount());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.484416519479412
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[] stringArray0 = new String[12];
      stringArray0[0] = "*";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getRowName(0);
      boolean boolean0 = true;
      resultMatrixLatex0.setPrintColNames(true);
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.setColHidden(28, false);
      resultMatrixLatex0.setCount(1458, 2);
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.getDefaultRowNameWidth();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7344667258007744
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[][] intArray0 = new int[7][8];
      String string0 = resultMatrixLatex0.padString("Whether to output row names or just numbers representing them.", 374);
      assertEquals("Whether to output row names or just numbers representing them.                                                                                                                                                                                                                                                                                                                        ", string0);
      
      resultMatrixLatex0.setSummary(intArray0, intArray0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixLatex0);
      resultMatrixLatex1.colNameWidthTipText();
      assertTrue(resultMatrixLatex1.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex1.getMeanPrec());
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      assertEquals(0, resultMatrixLatex1.getCountWidth());
      
      int int0 = resultMatrixLatex0.getStdDevWidth();
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.0780145677474744
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      String string0 = resultMatrixSignificance0.padString("  ", 0);
      assertEquals("  ", string0);
      
      int int0 = resultMatrixSignificance0.getStdDevWidth();
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getVisibleRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(0, resultMatrixSignificance0.getColCount());
      assertEquals(0, int0);
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8720312139206605
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 1;
      doubleArray0[0] = doubleArray1;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.getShowAverage();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.m_MeanWidth = (-139);
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixPlainText0.globalInfo();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getRowName(0);
      resultMatrixLatex0.clear();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1695, 26);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.702312508400662
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.isAverage(0);
      resultMatrixSignificance0.toStringRanking();
      String[][] stringArray0 = new String[8][5];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "*";
      stringArray1[1] = "*";
      stringArray1[2] = "[";
      stringArray1[3] = "v";
      stringArray1[4] = " ";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      stringArray2[0] = "]";
      stringArray2[1] = "";
      stringArray2[2] = "-ranking data not set-";
      stringArray2[3] = "-ranking data not set-";
      stringArray2[4] = "v";
      stringArray2[5] = "-mean-width <int>";
      stringArray2[6] = "v";
      stringArray2[7] = "*";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[6];
      stringArray3[0] = "*";
      stringArray3[1] = "v";
      stringArray3[2] = "";
      stringArray3[3] = "*";
      stringArray3[4] = "";
      stringArray3[5] = "-ranking data not set-";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      stringArray4[0] = "";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[4];
      stringArray5[0] = "]";
      stringArray5[1] = "";
      stringArray5[2] = "*";
      stringArray5[3] = "[";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[5];
      stringArray6[0] = "v";
      stringArray6[1] = "v";
      stringArray6[2] = "*";
      stringArray6[3] = "-mean-width <int>";
      stringArray6[4] = "[";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[5];
      stringArray7[0] = "]";
      stringArray7[1] = "v";
      stringArray7[2] = "";
      stringArray7[3] = "[";
      stringArray7[4] = "*";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[1];
      stringArray8[0] = "[";
      stringArray0[7] = stringArray8;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.getColSize(stringArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.774342220194881
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[0];
      resultMatrixLatex0.m_EnumerateColNames = false;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 2);
      resultMatrixHTML0.getColOrder();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.isAverage((-895));
      resultMatrixHTML0.globalInfo();
      assertFalse(resultMatrixHTML0.getShowAverage());
      
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getDefaultEnumerateRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.267702965736289
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringMatrix();
      resultMatrixHTML0.m_CountWidth = 1037;
      resultMatrixHTML0.getDisplayName();
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[5];
      intArray1[0] = 2;
      intArray1[2] = 0;
      intArray1[2] = 1037;
      intArray1[3] = 1;
      intArray1[4] = 1037;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 1037;
      intArray2[1] = 1037;
      intArray2[2] = 1;
      resultMatrixHTML0.TIE_STRING = "HTML";
      intArray2[3] = (-1510);
      intArray2[4] = 0;
      intArray2[5] = 2;
      intArray0[1] = intArray2;
      resultMatrixHTML0.m_Wins = intArray0;
      resultMatrixHTML0.clearSummary();
      resultMatrixHTML0.getColOrder();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.isAverage(1037);
      resultMatrixHTML0.setShowAverage(false);
      resultMatrixHTML0.countWidthTipText();
      resultMatrixGnuPlot0.toStringSummary();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.411121681339632
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.doubleToString(0.0, 0);
      resultMatrixLatex0.countWidthTipText();
      resultMatrixLatex0.toStringKey();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "\begin{table}[thb]\ncaption{label{labelname}Table Caption (Key)}\nscriptsize\n{centering\n\begin{tabular}{cl}\\\n(1) & col0 \\\nend{tabular}\n}\nend{table}\n";
      stringArray0[1] = "$\bullet$";
      ResultMatrixCSV.main(stringArray0);
      assertEquals(10, stringArray0.length);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.4771163673528225
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultColNameWidth();
      assertEquals(2, resultMatrixPlainText0.getDefaultMeanPrec());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray0[1] = "(";
      stringArray0[2] = "(";
      stringArray0[3] = "v";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "*";
      stringArray1[1] = " ";
      stringArray1[2] = "(";
      stringArray1[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray1[5] = "*";
      stringArray1[6] = "v";
      String[] stringArray2 = new String[2];
      stringArray2[0] = " ";
      String[] stringArray3 = new String[3];
      stringArray3[0] = "(";
      stringArray3[1] = "v";
      ResultMatrixCSV.main(stringArray2);
      resultMatrixPlainText0.setColHidden(0, false);
      resultMatrixPlainText0.getEnumerateColNames();
      resultMatrixPlainText0.toStringMatrix();
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.874519625657589
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      String string0 = resultMatrixCSV1.enumerateColNamesTipText();
      assertEquals("Whether to enumerate the column names (prefixing them with '(x)', with 'x' being the index).", string0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      Vector<Vector<String>> vector0 = new Vector<Vector<String>>();
      resultMatrixHTML0.m_HeaderValues = vector0;
      resultMatrixHTML0.getDefaultEnumerateColNames();
      Vector<String> vector1 = new Vector<String>();
      vector0.add(vector1);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.LEFT_PARENTHESES = "*";
      String string1 = resultMatrixSignificance0.toStringKey();
      assertEquals("Key:\n*1) col0\n", string1);
      
      resultMatrixSignificance0.getDefaultRowNameWidth();
      boolean boolean0 = resultMatrixCSV1.getEnumerateColNames();
      assertTrue(boolean0);
      
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV1.getRowOrder();
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getSignificanceWidth());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      
      resultMatrixCSV0.toStringKey();
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(1, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2501444518297604
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      resultMatrixGnuPlot0.getRowName((-3735));
      resultMatrixGnuPlot0.clearSummary();
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(433, 1);
      resultMatrixGnuPlot1.isStdDev(0);
      assertEquals(0, resultMatrixGnuPlot1.getSignificanceWidth());
      assertEquals(1, resultMatrixGnuPlot1.getVisibleRowCount());
      assertEquals(2, resultMatrixGnuPlot1.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot1.getCountWidth());
      assertFalse(resultMatrixGnuPlot1.getShowAverage());
      assertEquals(433, resultMatrixGnuPlot1.getColCount());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5780228912985903
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setSize(12, 12);
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      ResultMatrixHTML.main(stringArray0);
      resultMatrixCSV0.getShowStdDev();
      assertEquals(12, resultMatrixCSV0.getRowCount());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getColName(69);
      assertFalse(resultMatrixHTML0.getShowAverage());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.7916316656058235
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.m_EnumerateColNames = true;
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      
      resultMatrixPlainText0.setSize(0, 1);
      resultMatrixCSV0.assign(resultMatrixPlainText0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.padString("*", 1);
      int[][] intArray0 = new int[9][7];
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 453;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray2[4] = 2;
      intArray2[5] = 1551;
      intArray2[6] = 0;
      intArray2[7] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 1;
      intArray3[1] = 2;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[0];
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 97;
      intArray5[1] = 2;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 2;
      intArray7[1] = (-795);
      intArray7[2] = 433;
      intArray7[3] = 97;
      intArray7[4] = 1;
      intArray7[5] = 453;
      intArray7[6] = 2;
      intArray7[7] = 0;
      intArray7[8] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[6];
      intArray8[0] = 97;
      intArray8[1] = 0;
      intArray8[2] = 433;
      intArray8[3] = 453;
      intArray8[4] = 453;
      intArray8[5] = 97;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[5];
      intArray9[0] = 0;
      intArray9[1] = 1;
      intArray9[2] = 2;
      intArray9[3] = 1;
      intArray9[4] = (-795);
      intArray0[8] = intArray9;
      resultMatrixGnuPlot0.m_Wins = intArray0;
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.isStdDev(1);
      assertEquals(0, resultMatrixPlainText0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2873481785640757
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.getRowName(18);
      resultMatrixGnuPlot0.clearSummary();
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(2, 0);
      assertEquals(2, resultMatrixGnuPlot1.getColCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot();
      boolean boolean0 = resultMatrixGnuPlot2.isStdDev(2);
      assertEquals(0, resultMatrixGnuPlot2.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot2.getRowCount());
      assertFalse(boolean0);
      assertEquals(50, resultMatrixGnuPlot2.getColNameWidth());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.933181970611719
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.clearRanking();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      int[][] intArray1 = new int[2][8];
      intArray1[0] = intArray0;
      String string0 = resultMatrixLatex0.padString("Whether to output row names or just numbers representing them.", 374);
      assertEquals("Whether to output row names or just numbers representing them.                                                                                                                                                                                                                                                                                                                        ", string0);
      
      intArray1[1] = intArray0;
      resultMatrixLatex0.setSummary(intArray1, intArray1);
      resultMatrixLatex0.getDefaultRowNameWidth();
      String string1 = resultMatrixLatex0.stdDevWidthTipText();
      assertEquals("The width of the standard deviation (0 = optimal).", string1);
      
      int int0 = resultMatrixLatex0.getRowNameWidth();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.3861665286937126
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.m_MeanWidth = 0;
      resultMatrixGnuPlot0.getRowName((-3735));
      resultMatrixGnuPlot0.assign(resultMatrixCSV0);
      String string0 = resultMatrixGnuPlot0.padString(" ", (-3735));
      assertEquals(" ", string0);
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      
      String string1 = resultMatrixGnuPlot0.toStringMatrix();
      assertEquals("\n##################\n# file: plot.dat #\n##################\n# generated by WEKA 3.7.7\n# contains the data for the plot\n\n# key for the x-axis\n# 1 - row0\n\n# data for the plot\n1 ''\n#######\n# end #\n#######\n\n##################\n# file: plot.scr #\n##################\n# generated by WEKA 3.7.7\n# script to plot the data\n\n# display it in a window:\nset terminal x11\nset output\n\n# to display all data rows:\nset xrange [0:2]\n\n# axis labels, e.g.:\n#set xlabel \"Datasets\"\n#set ylabel \"Accuracy in %\"\n\n# the plot commands\nplot \"plot.dat\" using 1:2 with lines title \"[1]\"\n\n# generate ps:\n#set terminal postscript\n#set output \"plot.ps\"\n#replot\n\n# generate png:\n#set terminal png size 800,600\n#set output \"plot.png\"\n#replot\n\n# wait for user to hit <Return>\npause -1\n#######\n# end #\n#######\n", string1);
      
      resultMatrixCSV0.setCount((-5088), (-3735));
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      
      resultMatrixCSV0.setRowName((-5088), "*");
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.924592104418079
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setEnumerateColNames(false);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[2] = 1;
      String string0 = resultMatrixPlainText0.getRowName(0);
      assertNotNull(string0);
      assertEquals("row0", string0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      String string1 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string1);
      
      resultMatrixLatex0.getDefaultEnumerateColNames();
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertTrue(resultMatrixLatex0.getPrintColNames());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.845638493134258
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      
      resultMatrixPlainText0.setEnumerateColNames(false);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2232;
      intArray0[2] = 1;
      intArray0[3] = 1;
      resultMatrixPlainText0.m_RankingDiff = intArray0;
      String string0 = resultMatrixPlainText0.getRowName(1);
      assertNull(string0);
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.m_ShowStdDev = false;
      resultMatrixLatex0.LEFT_PARENTHESES = ")";
      String string1 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n)1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string1);
      
      resultMatrixLatex0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getMeanWidth());
      assertEquals(5, resultMatrixLatex0.getCountWidth());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.8592321198097737
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = new String[1];
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      int[][] intArray0 = new int[1][1];
      int[] intArray1 = new int[5];
      intArray1[2] = 3444;
      intArray0[0] = intArray1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setPrintRowNames(true);
      resultMatrixCSV0.setRowName(0, "");
      resultMatrixCSV0.getAverage(3444);
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(0, resultMatrixCSV0.getDefaultMeanWidth());
      assertFalse(resultMatrixCSV0.getShowStdDev());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2409918106792848
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[9][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 1;
      intArray1[2] = (-165);
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 276;
      intArray1[6] = 0;
      intArray1[7] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 276;
      intArray2[1] = 0;
      intArray2[2] = 2;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = (-165);
      intArray2[6] = 0;
      intArray2[7] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 0;
      intArray3[1] = 2;
      intArray3[2] = (-165);
      intArray3[3] = (-165);
      intArray3[4] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 2;
      intArray4[1] = 276;
      intArray4[2] = 1;
      intArray4[3] = 1;
      intArray4[4] = 0;
      intArray4[5] = 26;
      intArray4[6] = 276;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[4];
      intArray5[0] = 1;
      intArray5[1] = 1;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      intArray6[0] = 0;
      intArray6[1] = (-165);
      intArray6[2] = (-165);
      intArray0[5] = intArray6;
      int[] intArray7 = new int[7];
      intArray7[0] = (-165);
      intArray7[1] = (-165);
      intArray7[2] = 0;
      intArray7[3] = 2;
      intArray7[4] = 1;
      intArray7[5] = 276;
      intArray7[6] = (-165);
      intArray0[6] = intArray7;
      int[] intArray8 = new int[8];
      intArray8[0] = 276;
      intArray8[1] = 2;
      intArray8[2] = 26;
      intArray8[3] = 1596;
      intArray8[4] = 0;
      intArray8[5] = (-165);
      intArray8[6] = 2;
      intArray8[7] = 26;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[8];
      intArray9[0] = 2757;
      intArray9[1] = 1;
      intArray9[2] = (-165);
      intArray9[3] = (-165);
      intArray9[4] = 0;
      intArray9[5] = 0;
      intArray9[6] = 276;
      intArray9[7] = 2;
      intArray0[8] = intArray9;
      resultMatrixLatex0.m_NonSigWins = intArray0;
      resultMatrixLatex0.setPrintRowNames(false);
      resultMatrixLatex0.toStringMatrix();
      assertFalse(resultMatrixLatex0.getPrintRowNames());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.666167055272412
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.m_MeanWidth = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setOptions(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(17, 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixLatex0.getDefaultRowNameWidth();
      resultMatrixLatex0.toString();
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      
      resultMatrixLatex0.clear();
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.315956748585391
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.getDefaultColNameWidth();
      String[][] stringArray0 = new String[9][8];
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray1[1] = "(";
      stringArray1[2] = "(";
      stringArray1[3] = "v";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[0];
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[7];
      stringArray3[0] = "*";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray3[3] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray3[4] = "v";
      stringArray3[5] = "*";
      stringArray3[6] = "v";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      stringArray4[0] = " ";
      stringArray4[1] = "*";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[3];
      stringArray5[0] = "(";
      stringArray5[1] = "v";
      stringArray5[2] = "(";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[9];
      stringArray6[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray6[1] = ")";
      stringArray6[2] = ")";
      stringArray6[3] = "*";
      stringArray6[4] = "v";
      stringArray6[5] = "(";
      stringArray6[6] = "v";
      stringArray6[7] = "Generates the output as plain text (for fixed width fonts).";
      stringArray6[8] = "*";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[8];
      stringArray7[0] = "v";
      stringArray7[1] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray7[2] = "Generates the output as plain text (for fixed width fonts).";
      stringArray7[3] = " ";
      stringArray7[4] = "(";
      stringArray7[5] = "Generates the matrix output as HTML.";
      stringArray7[6] = " ";
      stringArray7[7] = "*";
      stringArray0[6] = stringArray7;
      String[] stringArray8 = new String[4];
      stringArray8[0] = "(";
      stringArray8[1] = ")";
      stringArray8[2] = "v";
      stringArray8[3] = ")";
      stringArray0[7] = stringArray8;
      String[] stringArray9 = new String[1];
      stringArray9[0] = "Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n";
      stringArray0[8] = stringArray9;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.679706038839934
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[6];
      intArray0[0] = (-109);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = (-2550);
      intArray0[5] = 0;
      resultMatrixGnuPlot0.m_RankingDiff = intArray0;
      int int0 = resultMatrixGnuPlot0.getDefaultMeanWidth();
      assertEquals(0, int0);
      
      resultMatrixGnuPlot0.meanPrecTipText();
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultMeanPrec());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultRemoveFilterName());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.0765950133957833
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearRanking();
      double[] doubleArray0 = new double[0];
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.removeFilterName(" statistically significant improvement or degradation}");
      resultMatrixLatex0.m_Counts = doubleArray0;
      resultMatrixLatex0.getRowName((-3963));
      resultMatrixLatex0.setPrintColNames(true);
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.setColHidden(0, false);
      resultMatrixLatex0.m_StdDev = null;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setCount(0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.8322602295395347
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintColNames(false);
      resultMatrixHTML0.RIGHT_PARENTHESES = "The maximum width of the column names (0 = optimal).";
      resultMatrixHTML0.setMeanWidth(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      resultMatrixHTML0.m_RowNames = stringArray0;
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      
      resultMatrixHTML0.clear();
      assertEquals(1, resultMatrixHTML0.getVisibleRowCount());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1The maximum width of the column names (0 = optimal). & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      
      resultMatrixLatex0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixLatex0.getStdDevPrec());
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
      assertFalse(resultMatrixLatex0.getShowAverage());
      assertEquals(0, resultMatrixLatex0.getCountWidth());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.21608935461769
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.toStringRanking();
      resultMatrixGnuPlot0.m_ColNameWidth = (-494);
      resultMatrixGnuPlot0.listOptions();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.setRemoveFilterName(false);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.045862869647524
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 1);
      resultMatrixLatex0.getRowName(38);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      resultMatrixLatex0.setRowNameWidth(1);
      stringArray0[2] = " ";
      stringArray0[3] = " ";
      stringArray0[4] = " ";
      stringArray0[5] = "(";
      resultMatrixLatex0.clearHeader();
      stringArray0[6] = ")";
      stringArray0[7] = ")";
      stringArray0[8] = " ";
      resultMatrixLatex0.m_ColNames = stringArray0;
      resultMatrixLatex0.setRowName(1, "");
      resultMatrixLatex0.getDisplayRow(1);
      resultMatrixLatex0.getRevision();
      resultMatrixLatex0.getColName((-1));
      resultMatrixLatex0.toStringSummary();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[6];
      intArray1[0] = 2028;
      intArray1[1] = 0;
      intArray1[2] = 1095;
      intArray1[3] = 38;
      intArray1[4] = 1;
      intArray1[5] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 1;
      intArray2[1] = 2028;
      intArray2[2] = 1095;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.791039810954727
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[][] intArray0 = new int[1][8];
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.0045706252519193
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      int[] intArray0 = new int[0];
      resultMatrixSignificance0.m_RankingLosses = intArray0;
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.clearSummary();
      resultMatrixSignificance0.removeFilterNameTipText();
      int[][] intArray1 = new int[2][2];
      int[] intArray2 = new int[3];
      intArray2[0] = 0;
      intArray2[1] = 1;
      intArray2[2] = 1;
      intArray1[0] = intArray2;
      intArray1[1] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setRanking(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8466796372141983
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.m_ColHidden = null;
      resultMatrixLatex0.m_PrintColNames = false;
      resultMatrixLatex0.getDefaultPrintRowNames();
      boolean boolean0 = resultMatrixLatex0.getPrintRowNames();
      assertTrue(boolean0);
      
      int int0 = resultMatrixLatex0.getDisplayRow((-515));
      assertEquals(1, resultMatrixLatex0.getColCount());
      assertEquals((-1), int0);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getDefaultCountWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.9555334347432662
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.getRowHidden(3263);
      resultMatrixCSV0.meanWidthTipText();
      resultMatrixCSV0.clearHeader();
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getRowCount());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.6316121865953988
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      assertEquals(1, resultMatrixLatex0.getRowCount());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixSignificance0.m_HeaderKeys = vector0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixSignificance0.m_StdDevWidth = 2;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex1);
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      intArray0[1] = intArray2;
      resultMatrixGnuPlot0.m_NonSigWins = intArray0;
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixLatex1.getDefaultSignificanceWidth();
      int int0 = resultMatrixLatex0.getSignificanceWidth();
      assertEquals(0, int0);
      
      resultMatrixPlainText0.toStringRanking();
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.992196960885483
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      int int0 = resultMatrixLatex0.getDefaultMeanPrec();
      assertEquals(0, resultMatrixLatex0.getColCount());
      assertEquals(2, int0);
      assertEquals(0, resultMatrixLatex0.getRowCount());
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.9154793492940043
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanWidth((-1821));
      resultMatrixGnuPlot0.setShowAverage(false);
      resultMatrixGnuPlot0.toStringSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot1.getDefaultColNameWidth();
      resultMatrixGnuPlot1.toStringKey();
      resultMatrixGnuPlot0.meanWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText(1, (-1821));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.61113513525079
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.clear();
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setOptions(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixHTML0);
      assertEquals(25, resultMatrixLatex0.getRowNameWidth());
      
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowName(2, ")");
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.8322602295395347
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(26, 26);
      resultMatrixGnuPlot0.setStdDevPrec(26);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 175;
      intArray0[4] = 26;
      intArray0[5] = 26;
      intArray0[6] = 0;
      resultMatrixGnuPlot0.m_PrintRowNames = false;
      intArray0[7] = 26;
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.setMeanWidth(26);
      resultMatrixGnuPlot0.setShowAverage(false);
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.meanWidthTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText((-2631), 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.7933509691552927
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 2);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[2] = "Jl3$/<f/*<nvA";
      int[][] intArray0 = new int[0][1];
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.3969509155438113
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      String[] stringArray0 = new String[1];
      resultMatrixHTML0.setShowAverage(false);
      resultMatrixHTML0.setShowAverage(false);
      stringArray0[0] = ")";
      ResultMatrixCSV.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.62684889833437
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[][] stringArray0 = new String[1][0];
      String[] stringArray1 = new String[9];
      stringArray1[0] = "*";
      stringArray1[1] = "<DR 'Cv$1,n";
      stringArray1[2] = "*";
      stringArray1[3] = ")";
      stringArray1[4] = ")";
      stringArray1[5] = "v";
      stringArray1[0] = "";
      stringArray1[7] = "1fDZpK";
      stringArray1[8] = "v";
      stringArray0[0] = stringArray1;
      int int0 = resultMatrixSignificance0.getColSize(stringArray0, 1);
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(11, int0);
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
      assertFalse(resultMatrixSignificance0.getDefaultEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(2, resultMatrixSignificance0.getDefaultStdDevPrec());
  }
}
