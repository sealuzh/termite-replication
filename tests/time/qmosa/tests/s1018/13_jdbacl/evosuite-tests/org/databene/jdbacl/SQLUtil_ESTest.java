/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:18:19 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.raw.xact.GlobalXactId;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBIndex;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.engine.SessionRemote;
import org.h2.tools.SimpleResultSet;
import org.h2.value.ValueLobDb;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)99;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[8] = (byte)7;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SessionRemote sessionRemote0 = new SessionRemote();
      ValueLobDb valueLobDb0 = ValueLobDb.createTempBlob(byteArrayInputStream0, 0L, sessionRemote0);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ordinaryChars(4, (-1555));
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DBConstraint dBConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "execute";
      stringArray0[6] = ">}vO[";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized view", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("execute", true, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "execute", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-547), (double) (-2880));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -547
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5621631996273604
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "callv|0hfse}[,o!\\/t}s";
      SQLUtil.isProcedureCall("callv|0hfse}[,o!/t}s");
      SQLUtil.isProcedureCall("insert|/");
      SQLUtil.normalize("callv|0hfse}[,o!/t}s", true);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XSCH0.S");
      SQLUtil.mutatesStructure("callv | 0hfse } [, o !  / t } s");
      BasicDatabase basicDatabase0 = new BasicDatabase();
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("'6E0J16z^o", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.24775942058532
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = SQLUtil.normalize("'Hz:6fi;/ks=>V7", true);
      assertEquals("'Hz:6fi;/ks=>V7'", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "'Hz:6fi;/ks=>V7'";
      stringArray0[1] = "'Hz:6fi;/ks=>V7";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("'Hz:6fi;/ks=>V7' = ''Hz:6fi;/ks=>V7'' AND 'Hz:6fi;/ks=>V7 = ''Hz:6fi;/ks=>V7'", string1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.341748649525924
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      Integer integer0 = RawTransaction.COMMIT;
      String string0 = SQLUtil.renderValue(integer0);
      assertEquals("0", string0);
      
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "drop materialized viewnational character varying");
      Boolean boolean0 = SQLUtil.mutatesStructure("XSCH0.S");
      assertFalse(boolean0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      DBColumn dBColumn0 = defaultDBTable0.getColumn("k");
      dBColumnArray0[0] = dBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("k, k", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.070357175308493
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-33);
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte) (-12);
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte) (-66);
      byteArray0[6] = (byte)7;
      byteArray0[7] = (byte)99;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[8] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SessionRemote sessionRemote0 = new SessionRemote();
      ValueLobDb valueLobDb0 = ValueLobDb.createTempBlob(byteArrayInputStream0, 0L, sessionRemote0);
      Reader reader0 = valueLobDb0.getReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ordinaryChars(4, (-1555));
      SQLUtil.renderNumber(streamTokenizer0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "FKCATALOGNAME";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "- 0";
      stringArray0[4] = "- 0";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "gQXNjn6");
      String string0 = "";
      String string1 = "TjYg.g@-:9GW";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      SQLUtil.addOptionalCondition("TjYg.g@-:9GW", stringBuilder0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "TjYg.g@-:9GW";
      stringArray0[1] = "";
      stringArray0[2] = "(Q q\"Q";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "kpt9;%!`u";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("CHECK ", stringArray0, "(Q q\"Q", "Us", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.059354619737041
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.toString();
      defaultDBColumn0.setOwner(compositeDBObject0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "k";
      stringArray0[1] = "k : K";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "k";
      stringArray1[1] = "XZgs~$OtoAt#ya$+\"4";
      stringArray1[2] = "";
      stringArray1[3] = "";
      stringArray1[4] = "k : K";
      stringArray1[5] = "k : K";
      stringArray1[6] = "create unique index";
      stringArray1[7] = "SELECT * FROM k WHERE k = 'k' AND k : K = 'k : K'";
      stringArray1[8] = "SELECT * FROM k WHERE k = 'k' AND k : K = 'k : K'";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray1, stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("m");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m", defaultDBTable0, 42, "m");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.toString();
      String string0 = "create unique indexv|0hfse}[,o!\\/t}s";
      SQLUtil.isDDL("create unique indexv|0hfse}[,o!/t}s");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6969987794394548
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.isProcedureCall("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN");
      String[] stringArray0 = new String[3];
      SQLUtil.removeComments("");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      System.setCurrentTimeMillis((-1825));
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID(103079215104L, 0L, (-404354161));
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, "/9DNAsx[gQ'X", basicUUID0, false);
      basicUUID0.toString();
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, (String) null, schemaDescriptor0, (-404354161), '\'');
      SQLUtil.isQuery("exec");
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTriggerDescriptors(tableDescriptor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.427018815017682
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("m");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m", defaultDBTable0, 42, "m");
      defaultDBColumn0.toString();
      vector0.add((DBColumn) defaultDBColumn0);
      assertEquals("[m : M]", vector0.toString());
      
      SQLUtil.normalize("m", true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "m";
      stringArray0[1] = "m : M";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1675), "");
      Integer integer0 = new Integer((-1675));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      Random.setNextRandom(2282);
      SQLUtil.isProcedureCall("1*2cP]*pn!");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("U+Qyu", dBSchema0);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(dBSchema0);
      String string0 = SQLUtil.typeAndName(dBSchema0);
      assertEquals("schema m", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8416127595836764
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.toString();
      defaultDBColumn0.setOwner(compositeDBObject0);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "k";
      stringArray0[1] = "k : K";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1675), "");
      Integer integer0 = new Integer((-1675));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      Random.setNextRandom(2282);
      SQLUtil.isDDL("V.#Zi>e@mJ]%");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("", false, defaultDBTable0, "k");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("Jz(}>G", "k : K");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // k : K
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7094458197175146
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN";
      SQLUtil.isProcedureCall("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      String string1 = "truncateselect * fromm where m = 'm' and m : m = 'm : m'";
      SQLUtil.join((String) null, "=\"y*wmJZ", stringArray0, "}eC8Ze=jQ", "truncateselect * fromm where m = 'm' and m : m = 'm : m'", stringArray0);
      int int0 = (-1151);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("}eC8Ze=jQ as truncateselect * fromm where m = 'm' and m : m = 'm : m' on =\"y*wmJZ.null = truncateselect * fromm where m = 'm' and m : m = 'm : m'.null and =\"y*wmJZ.null = truncateselect * fromm where m = 'm' and m : m = 'm : m'.null and =\"y*wmJZ.null = truncateselect * fromm where m = 'm' and m : m = 'm : m'.null", (DBTable) null, (-1151), "CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"BLOCK BIGINT PRIMARY KEY\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7507184699924547
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SQLUtil.isProcedureCall("callv|0hfse}[,o!/t}s");
      SQLUtil.isDDL("callv|0hfse}[,o!/t}s");
      SQLUtil.isQuery("insert|/");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6350139381357356
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.toString();
      defaultDBColumn0.setOwner(compositeDBObject0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "k";
      stringArray0[1] = "k : K";
      stringArray0[2] = "k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "j^Y5", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      stringBuilder0.insert(15, 1.5);
      assertEquals("CONSTRAINT j^Y51.5 ", stringBuilder0.toString());
      
      SQLUtil.isQuery("DATE");
      Boolean.valueOf("j^Y5");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("CONSTRAINT j^Y5 UNIQUE (k, k : K, k)", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.150886315715538
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SQLUtil.isProcedureCall("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN");
      SQLUtil.isProcedureCall("insert|/");
      SQLUtil.renderValue("insert|/");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XSCH0.S");
      SQLUtil.mutatesStructure("'insert|/'");
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1032731737259827
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.toString();
      defaultDBColumn0.setOwner(compositeDBObject0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "k";
      stringArray0[1] = "k : K";
      stringArray0[2] = "k";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "j^Y5", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2983368449258386
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("5IX4|");
      SQLUtil.isDDL("5IX4|");
      SQLUtil.isQuery("5IX4|");
      SQLUtil.mutatesStructure("5IX4|");
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("5IX4|", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3447004957129813
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GlobalXactId globalXactId0 = new GlobalXactId();
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "5IX4|";
      stringArray0[1] = "drop index";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "5IX4|", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("create table ", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "vywJrb}hDyl7le3];u", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-2880), 1.1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2880
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "nTX(1cWdXN7ZRA";
      String string1 = "TjYg.g@-:9GW";
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "nTX(1cWdXN7ZRA");
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("TjYg.g@-:9GW", stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.replace(41, 41, "SYNONYM");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("Illegal column type format: ", stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("drop materialized view");
      // Undeclared exception!
      try { 
        defaultDBTable0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3221086830269158
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      boolean boolean0 = SQLUtil.isDDL("bSN3)40zL\"usPT^");
      Boolean boolean1 = SQLUtil.mutatesStructure("alter table");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7682293763712118
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.isProcedureCall("Table.addColumn");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Table.addColumn";
      stringArray0[1] = "Table.addColumn";
      stringArray0[2] = "Table.addColumn";
      stringArray0[3] = "Table.addColumn";
      stringArray0[4] = "Table.addColumn";
      stringArray0[5] = "Table.addColumn";
      stringArray0[6] = "Table.addColumn";
      stringArray0[7] = "Table.addColumn";
      stringArray0[8] = "Table.addColumn";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Table.addColumn";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "Table.addColumn";
      objectArray0[3] = (Object) "Table.addColumn";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "Table.addColumn";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "Illegal column type format: ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      boolean boolean0 = false;
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Illegal column type format: ", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2880), (double) (-2880));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2880
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[6] = stringArray0[5];
      // Undeclared exception!
      try { 
        SQLUtil.isDDL(stringArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1418581825237126
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBColumn0.toString();
      defaultDBColumn0.setOwner(compositeDBObject0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("[k : K]", vector0.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "k";
      stringArray0[1] = "k : K";
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1675), "");
      Integer integer0 = new Integer((-1675));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      Random.setNextRandom(2282);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("(-1675)", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.287988646743151
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN");
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema(">}vO[");
      dBSchema0.getTables();
      DBTrigger dBTrigger0 = new DBTrigger("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN", dBSchema0);
      dBTrigger0.setOwner(dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      Random.setNextRandom(15);
      dBCatalog0.removeSchema(dBSchema0);
      dBCatalog0.getTables();
      dBCatalog0.getTable("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XSLAB.D", (DBTable) null, 15, "!");
      DBDataType dBDataType0 = DBDataType.getInstance(3328, "rs^`1|?a<ri;*");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("MP(g]", (DBTable) null, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn1.toString();
      assertEquals("MP(g] : RS^`1|?A<RI;*(1,1)", string0);
      
      defaultDBColumn0.setOwner((CompositeDBObject<?>) null);
      SQLUtil.isDDL("!");
      boolean boolean1 = SQLUtil.isQuery("call");
      assertFalse(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("XSLAB.D");
      assertTrue(boolean2.equals((Object)boolean0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = "x~vi8!`3px3IAvlLz";
      SQLUtil.isDML("x~vi8!`3px3IAvlLz");
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "v|0Hfse}[,O!/T}s";
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("R`", compositeDBObject0);
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v|0Hfse}[,O!/T}s", (DBSchema) null);
      defaultDBTable0.getIndex("v|0Hfse}[,O!/T}s");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(tableContainer0);
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9254090582654846
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.appendCodePoint(10);
      SQLUtil.addRequiredCondition("org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder0);
      assertEquals("\n and org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder0.toString());
      
      SQLUtil.isProcedureCall("org.hsqldb.jdbc.jdbcCallableStatement");
      SQLUtil.mutatesStructure("Mm4eir=/yNp<");
      SQLUtil.isQuery("Mm4eir=/yNp<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("v|0hfs");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.hsqldb.jdbc.jdbcCallableStatement";
      stringArray0[1] = "v|0hfs";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.hsqldb.jdbc.jdbcCallableStatement", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) dBForeignKeyConstraint0;
      objectArray0[1] = (Object) "CONSTRAINT org.hsqldb.jdbc.jdbcCallableStatement FOREIGN KEY (org.hsqldb.jdbc.jdbcCallableStatement, v|0hfs) REFERENCES v|0hfs(org.hsqldb.jdbc.jdbcCallableStatement, v|0hfs)";
      objectArray0[2] = (Object) "v|0hfs";
      objectArray0[3] = (Object) defaultDBTable0;
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertEquals("org.hsqldb.jdbc.jdbcCallableStatement = CONSTRAINT org.hsqldb.jdbc.jdbcCallableStatement FOREIGN KEY (org.hsqldb.jdbc.jdbcCallableStatement, v|0hfs) REFERENCES v|0hfs(org.hsqldb.jdbc.jdbcCallableStatement, v|0hfs) AND v|0hfs = 'CONSTRAINT org.hsqldb.jdbc.jdbcCallableStatement FOREIGN KEY (org.hsqldb.jdbc.jdbcCallableStatement, v|0hfs) REFERENCES v|0hfs(org.hsqldb.jdbc.jdbcCallableStatement, v|0hfs)'", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "drop index");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.substituteMarkers("ALo", "]i;4M1ehrK!:", dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      String string0 = "DSD:";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("drop materialized viewv|0hfse}[,o!/t}s");
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.FRANCE;
      mockPrintWriter0.printf(locale1, "]i;4M1ehrK!:", (Object[]) stringArray0);
      mockPrintWriter0.println((-1892941706));
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.substituteMarkers("ALo", "]i;4M1ehrK!:", dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SQLUtil.removeComments("5IX4|");
      SQLUtil.isQuery("");
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = ",Q{nu";
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[0], false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v|0Hfse}[,O!/T}s";
      stringArray0[1] = "v|0Hfse}[,O!/T}s";
      stringArray0[2] = "v|0Hfse}[,O!/T}s";
      stringArray0[3] = "v|0Hfse}[,O!/T}s";
      stringArray0[4] = "geoCur$entShemaName";
      stringArray0[5] = "v|0Hfse}[,O!/T}s";
      stringArray0[6] = "v|0Hfse}[,O!/T}s";
      stringArray0[7] = "v|0Hfse}[,O!/T}s";
      stringArray0[8] = "v|0Hfse}[,O!/T}s";
      String string0 = SQLUtil.leftJoin("v|0Hfse}[,O!/T}s", stringArray0, "v|0Hfse}[,O!/T}s", "v|0Hfse}[,O!/T}s", stringArray0);
      assertEquals("left join v|0Hfse}[,O!/T}s as v|0Hfse}[,O!/T}s on v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.geoCur$entShemaName = v|0Hfse}[,O!/T}s.geoCur$entShemaName and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s and v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s = v|0Hfse}[,O!/T}s.v|0Hfse}[,O!/T}s", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, (String[]) null, "t:ufns]'l\u0001,0ZOtn", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, (Object) defaultDBTable0);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder1);
      StringBuilder stringBuilder2 = stringBuilder1.append(stringBuffer0);
      StringBuilder stringBuilder3 = stringBuilder2.append(true);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("#0^7UyH", true, (String) null, "SYSCS_BULK_INSERT");
      StringBuilder stringBuilder4 = stringBuilder3.append((Object) dBCheckConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder4, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      String string0 = defaultDBColumn0.toString();
      assertEquals("k : K", string0);
      
      defaultDBColumn0.setOwner(compositeDBObject0);
      String[] stringArray0 = new String[3];
      defaultDBColumn0.setVersionColumn(true);
      stringArray0[0] = "k";
      stringArray0[1] = "k : K";
      stringArray0[2] = "k";
      defaultDBTable0.getColumn("k");
      DBDataType dBDataType0 = DBDataType.getInstance(2496, "");
      Integer integer0 = new Integer(2496);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("DATEDIFF", defaultDBTable0, dBDataType0, integer0);
      Random.setNextRandom((-1675));
      String string1 = SQLUtil.renderValue("1*2cP]*pn!");
      assertEquals("'1*2cP]*pn!'", string1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.641962640552856
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "|/";
      SQLUtil.mutatesDataOrStructure("|/");
      SQLUtil.mutatesStructure("|/");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.373030131495957
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      DBTrigger dBTrigger0 = new DBTrigger("k", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "k";
      stringArray0[1] = "k";
      stringArray0[2] = "k";
      stringArray0[4] = "k";
      stringArray0[5] = null;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("k", defaultDBTable0, 15, "k");
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      String string0 = defaultDBColumn0.toString();
      assertEquals("k : K", string0);
      
      defaultDBColumn0.setOwner(compositeDBObject0);
      String[] stringArray1 = new String[3];
      stringArray1[2] = "k";
      stringArray1[1] = "k : K";
      stringArray1[2] = "k : K";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "j^Y", true, stringArray1);
      dBUniqueConstraint0.toString();
      Random.setNextRandom(463);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      String string1 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT j^Y UNIQUE (, k : K, k : K)", string1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "delete lob ";
      stringArray0[1] = "delete lob ";
      stringArray0[2] = "delete lob ";
      stringArray0[3] = "rename";
      stringArray0[4] = "delete lob ";
      stringArray0[5] = "rename";
      stringArray0[6] = "rename";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "rename|/";
      stringArray1[1] = "rename";
      // Undeclared exception!
      try { 
        SQLUtil.join("delete lob ", "rename", stringArray0, "rename|/", "delete lob ", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = " AND (";
      stringArray0[1] = "getCurrentSchemaName";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin(" AND (", stringArray0, "|E7ep#!9foIk", " AND (", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.8885995049191862
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "drop tablex0x0f.s";
      stringArray0[1] = "JsO+mq0RP6*28";
      SQLUtil.renderColumnNames(stringArray0);
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("JsO+mq0RP6*28", compositeDBObject0);
      tableContainer0.getTable("LEAST");
      int int0 = 5;
      DBDataType dBDataType0 = DBDataType.getInstance(5, "(drop tablex0x0f.s, JsO+mq0RP6*28)");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("(drop tablex0x0f.s, JsO+mq0RP6*28)", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("CHECK ");
      // Undeclared exception!
      try { 
        stringBuilder0.deleteCharAt(103);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 103
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7641462406279715
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[19];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "execute";
      stringArray0[6] = ">}vO[";
      SQLUtil.innerJoin("execute", stringArray0, "execute", ">}vO[", stringArray0);
      SQLUtil.isQuery("execute as >}vO[ on execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.>}vO[ = >}vO[.>}vO[ and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null");
      String string0 = SQLUtil.innerJoin("execute as >}vO[ on execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.execute = >}vO[.execute and execute.>}vO[ = >}vO[.>}vO[ and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null and execute.null = >}vO[.null", stringArray0, ">}vO[", "(u5*]2EDRnU", stringArray0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("w");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      defaultDBTable0.setOwner(compositeDBObject0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DSD:");
      Locale locale0 = Locale.US;
      PrintWriter printWriter0 = mockPrintWriter0.printf(locale0, "(u5*]2EDRnU", objectArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      SQLUtil.join(">}vO[", string0, stringArray0, string0, "DSD:", stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("(S4+RxJ7:+", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      Object[] objectArray1 = new Object[8];
      objectArray1[0] = (Object) "execute";
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) "(S4+RxJ7:+";
      objectArray1[3] = (Object) ">}vO[";
      Object object1 = new Object();
      objectArray1[4] = object1;
      objectArray1[6] = (Object) "execute";
      objectArray1[7] = (Object) mockPrintWriter0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4622252128527944
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("callv|0hfse}[,o!/t}s");
      boolean boolean1 = SQLUtil.isProcedureCall("insert|/");
      assertFalse(boolean1);
      
      String string0 = SQLUtil.normalize("callv|0hfse}[,o!/t}s", true);
      assertEquals("callv | 0hfse } [, o ! / t } s", string0);
      
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XSCH0.S");
      Boolean boolean2 = SQLUtil.mutatesStructure("callv | 0hfse } [, o !  / t } s");
      assertFalse(boolean2.equals((Object)boolean0));
      
      BasicDatabase basicDatabase0 = new BasicDatabase();
      boolean boolean3 = SQLUtil.isDDL("callv|0hfse}[,o!/t}s");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "execute";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execute");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("execute");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      BasicDatabase basicDatabase0 = new BasicDatabase();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getIndex("");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBSchema dBSchema0 = new DBSchema("m");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m", dBSchema0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "inner";
      stringArray0[1] = "m";
      stringArray0[2] = "m";
      stringArray0[3] = "}eC8Ze=jQ";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "truncateselect * from m where m = 'm' and m : m = 'm : m'";
      stringArray1[1] = "truncateselect * from m where m = 'm' and m : m = 'm : m'";
      stringArray1[2] = "m";
      stringArray1[3] = "truncateselect * from m where m = 'm' and m : m = 'm : m'";
      stringArray1[4] = "truncateselect * from m where m = 'm' and m : m = 'm : m'";
      stringArray1[5] = "create ";
      SQLUtil.join("inner", (String) null, stringArray0, "m", "create ", stringArray1);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("truncateselect * from m where m = 'm' and m : m = 'm : m'", (DBTable) null, 90016, "m");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer.max((-1151), 90016);
      defaultDBColumn0.setSize(integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      // Undeclared exception!
      try { 
        defaultDBColumn0.getForeignKeyConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBColumn", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3913987409624062
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("callv|0hfse}[,o!/t}s");
      assertTrue(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("insert|/");
      String string0 = SQLUtil.normalize("callv|0hfse}[,o!/t}s", true);
      assertEquals("callv | 0hfse } [, o ! / t } s", string0);
      
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XSCH0.S");
      Boolean boolean2 = SQLUtil.mutatesStructure("callv | 0hfse } [, o !  / t } s");
      assertTrue(boolean2.equals((Object)boolean1));
      
      BasicDatabase basicDatabase0 = new BasicDatabase();
      String string1 = SQLUtil.normalize("XSCH0.S", false);
      assertEquals("XSCH0.S", string1);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("drop index");
      tableContainer0.getTable("drop index");
      String[] stringArray0 = new String[10];
      stringArray0[0] = "drop index";
      stringArray0[1] = "drop index";
      stringArray0[2] = "drop index";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Character character0 = new Character('%');
      Character.isIdeographic((-1765));
      Character.isAlphabetic((-1765));
      // Undeclared exception!
      try { 
        SQLUtil.join("", ",Q{nu", (String[]) null, " REFERENCES ", "8!^75PhW~", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "INmlWV&.,?>]Y]wf1g");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v|0Hfse}[,O!/T}s";
      stringArray0[1] = "v|0Hfse}[,O!/T}s";
      stringArray0[3] = "v|0Hfse}[,O!/T}s";
      stringArray0[4] = "v|0Hfse}[,O!/T}s";
      stringArray0[5] = "v|0Hfse}[,O!/T}s";
      stringArray0[6] = "v|0Hfse}[,O!/T}s";
      stringArray0[7] = "v|0Hfse}[,O!/T}s";
      stringArray0[8] = "v|0Hfse}[,O!/T}s";
      SQLUtil.isDDL("v|0Hfse}[,O!/T}s");
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SQLUtil.isProcedureCall("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4764625962961113
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder0);
      SQLUtil.isProcedureCall("org.hsqldb.jdbc.jdbcCallableStatement");
      SQLUtil.mutatesStructure("Mm4eir=/yNp<");
      SQLUtil.addRequiredCondition("org.hsqldb.jdbc.jdbcCallableStatement", stringBuilder1);
      SQLUtil.mutatesStructure("!");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("CLOB");
      assertNull(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "2";
      SQLUtil.substituteMarkers("", "2", "");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      String string1 = "*=qj)V:BEA _V.";
      String string2 = "m1(gMn$%5h";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("m1(gMn$%5h");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("2");
      defaultDBTable1.getIndex("m1(gMn$%5h");
      // Undeclared exception!
      try { 
        defaultDBTable0.removeIndex((DBIndex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.329575723675652
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SQLUtil.isProcedureCall("CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN");
      SQLUtil.isProcedureCall("insert|/");
      SQLUtil.renderValue("insert|/");
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XSCH0.S");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "rVp2BR?H(dJ<");
      SQLUtil.mutatesStructure("b`|$v#l4}`B;");
      BasicDatabase basicDatabase0 = new BasicDatabase();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XSCH0.S";
      stringArray0[1] = "insert|/";
      stringArray0[2] = "B";
      stringArray0[3] = "b`|$v#l4}`B;";
      stringArray0[4] = "B";
      stringArray0[5] = "'insert|/'";
      SQLUtil.renderColumnListWithTableName("B", stringArray0);
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("executeinsert|/", "B", object0);
      SQLUtil.isProcedureCall("B");
      Object object1 = new Object();
      String string1 = SQLUtil.substituteMarkers("~9xi_]Zn", "CREATE TABLE IF NOT EXISTS INFORMATION_SCHEMA.LOB_DATA(BLOCK BIGINT PRIMARY KEY, COMPRESSED INT, DATA BINARY) HIDDEN", object1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Character character0 = new Character('%');
      Character.isIdeographic((-1765));
      Character.isAlphabetic((-1765));
      Character.isIdeographic(3);
      char[] charArray0 = new char[4];
      Character.isIdeographic(0);
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = 'E';
      charArray0[3] = '%';
      Character.toChars(3, charArray0, 3);
      String string0 = SQLUtil.substituteMarkers("8!^75PhW~", "8!^75PhW~", character0);
      assertEquals("'%'", string0);
      
      boolean boolean0 = SQLUtil.isProcedureCall("'%'");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "execute";
      stringArray0[1] = "execute";
      stringArray0[2] = "execute";
      stringArray0[3] = "execute";
      stringArray0[4] = "execute";
      stringArray0[5] = "execute";
      stringArray0[6] = ">}vO[";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("execute");
      dBSchema0.getTables();
      DBTrigger dBTrigger0 = new DBTrigger("data_encrypt_algorithm_version", dBSchema0);
      dBTrigger0.setTriggerType((String) null);
      dBTrigger0.setOwner(dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      Random.setNextRandom(15);
      dBCatalog0.removeSchema(dBSchema0);
      dBCatalog0.getTables();
      dBCatalog0.getTable(">}vO[", false);
      SQLUtil.parseColumnTypeAndSize("k)n");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("XSLAB.D", (DBTable) null, 15, "MP(g]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: MP(g]
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String string0 = "k";
      DBSchema dBSchema0 = new DBSchema("k");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("k", dBSchema0);
      String string1 = "1*2cP]*pn!";
      DBTrigger dBTrigger0 = new DBTrigger("1*2cP]*pn!", dBSchema0);
      dBSchema0.addTrigger(dBTrigger0);
      int int0 = 15;
      String string2 = "JI*:(mdKi>;f oB)";
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("JI*:(mdKi>;f oB)", defaultDBTable0, 15, "JI*:(mdKi>;f oB)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"mdKi>;f oB\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select into|/";
      stringArray0[1] = "select into|/";
      stringArray0[2] = "select into|/";
      stringArray0[3] = "drop table|/";
      stringArray0[4] = "select into|/";
      stringArray0[5] = "select into|/";
      stringArray0[6] = "select into|/";
      stringArray0[7] = "select into|/";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select into|/", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (select into|/, select into|/, select into|/, drop table|/, select into|/, select into|/, select into|/, select into|/)", string0);
  }
}
