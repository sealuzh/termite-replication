/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:50:16 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindMain;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.schememode.SchemeMode;
import freemind.preferences.FreemindPropertyListener;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.Window;
import java.awt.event.WindowEvent;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)99;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      LabelView labelView0 = new LabelView(element0);
      JMenu jMenu0 = new JMenu("selection_as_rectangle");
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      jMenu0.getSelectedIcon();
      MenuElement[] menuElementArray0 = new MenuElement[8];
      JMenuItem jMenuItem0 = new JMenuItem();
      jMenuItem0.firePropertyChange("2WcwT&~i", true, true);
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) jMenu0;
      menuElementArray0[2] = (MenuElement) jMenu0;
      menuElementArray0[3] = (MenuElement) jMenu0;
      menuElementArray0[4] = (MenuElement) jMenu0;
      menuElementArray0[5] = (MenuElement) jMenu0;
      menuElementArray0[6] = (MenuElement) jMenu0;
      menuElementArray0[7] = (MenuElement) jMenu0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jMenu0, 1025, 0L, (byte)0, 388, 'i', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.setSource((Object) null);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(menuKeyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      JSeparator jSeparator0 = new JSeparator();
      Color color0 = Color.gray;
      Object[][] objectArray0 = new Object[1][4];
      Object[] objectArray1 = new Object[7];
      objectArray1[1] = (Object) jSeparator0;
      objectArray1[3] = (Object) jSeparator0;
      objectArray0[0] = objectArray1;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      JTable jTable0 = new JTable(defaultTableModel0, (TableColumnModel) null);
      JTableHeader jTableHeader0 = jTable0.getTableHeader();
      jTableHeader0.getDebugGraphicsOptions();
      try { 
        Controller.showCommonJColorChooserDialog(jTable0, "FindDialogAction", color0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Controller.removePropertyChangeListener((FreemindPropertyListener) null);
      Controller.Closer controller_Closer0 = new Controller.Closer();
      WindowEvent windowEvent0 = null;
      try {
        windowEvent0 = new WindowEvent((Window) null, (-379), (Window) null, 111, (-8192));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      BrowseMode browseMode0 = new BrowseMode();
      SchemeMode schemeMode0 = new SchemeMode();
      schemeMode0.getController();
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }
}
