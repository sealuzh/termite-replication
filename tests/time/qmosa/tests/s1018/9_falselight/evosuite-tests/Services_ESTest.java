/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:12:17 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1107);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("**R\u00E9ponse du serveur incorrect**", 1107);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1107);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("**R\u00E9ponse du serveur incorrect**", 1107);
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5352553626086127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("^[", 898);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://z4kds4:715");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "^[");
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTP("ZfY/i_5Q0@9xtj^", 898);
      services_HTTP_Result1.reset();
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      Services.testPOP3("", 0);
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTP(",Mj<=", 0);
      services_HTTP_Result1.Error = "**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ^[) **";
      services_HTTP_Result0.reset();
      services_HTTP_Result2.page_weight = 0;
      Services.HTTP_Result services_HTTP_Result3 = Services.testHTTPS("z4kds4", 715);
      assertTrue(services_HTTP_Result3.works);
      assertEquals(3, services_HTTP_Result3.page_weight);
      
      services_HTTP_Result1.reset();
      Services.testSMTP("https", 339);
      Services.SIMPLE_Result services_SIMPLE_Result1 = new Services.SIMPLE_Result();
      assertFalse(services_SIMPLE_Result1.works);
      assertEquals(0L, services_SIMPLE_Result1.time);
      
      Services.testHTTPS("", 0);
      Services.HTTP_Result services_HTTP_Result4 = Services.testHTTPS(".oN1W0Z*", (-1));
      assertEquals(0, services_HTTP_Result4.code);
      assertFalse(services_HTTP_Result4.works);
      assertEquals(0L, services_HTTP_Result4.time);
      assertEquals(0, services_HTTP_Result4.page_weight);
      
      Services.SIMPLE_Result services_SIMPLE_Result2 = Services.testSMTP("vu2b$hS\"w7Kk}<", 0);
      assertFalse(services_SIMPLE_Result2.works);
      assertEquals(0L, services_SIMPLE_Result2.time);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5357291839779563
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Services.testHTTPS("dNx%5B+oKf3`YK{z}", 903);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://ZfY/i_5Q0@9xtj^:4677");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "dNx%5B+oKf3`YK{z}");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("ZfY/i_5Q0@9xtj^", 4677);
      assertEquals(18, services_HTTP_Result0.page_weight);
      assertTrue(services_HTTP_Result0.works);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      Services.testPOP3("", 0);
      services_HTTP_Result0.page_weight = 4677;
      Services.testHTTP("", 4677);
      Services.testHTTPS("", 0);
      Services.HTTP_Result services_HTTP_Result1 = new Services.HTTP_Result();
      services_HTTP_Result1.reset();
      assertEquals(0, services_HTTP_Result1.code);
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertFalse(services_HTTP_Result1.works);
      assertEquals(0L, services_HTTP_Result1.time);
      
      services_SIMPLE_Result0.reset();
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      services_HTTP_Result1.page_weight = 0;
      Services.testPOP3((String) null, 0);
      Services.testSMTP("**** Resultat : \n** Fonctionnement : ", 4677);
      Services.testSMTP("", 0);
      Services.testSMTP("I^#iG(h`~C", 0);
      Services.HTTP_Result services_HTTP_Result2 = Services.testHTTPS("**Erreur d'E/S** (org.evosuite.runtime.mock.java.lang.MockThrowable: Could not find: ) **", 4677);
      assertEquals(0L, services_HTTP_Result2.time);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Services services0 = new Services();
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://ZfY/i_5Q0@9xtj^:4677");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "");
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("ZfY/i_5Q0@9xtj^", 4677);
      assertTrue(services_HTTP_Result0.works);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      Services.testHTTP(" 5<FPS& k4va[VbnJ", 4677);
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS((String) null, 4677);
      assertEquals(0, services_HTTP_Result1.page_weight);
      assertEquals(0, services_HTTP_Result1.code);
      assertFalse(services_HTTP_Result1.works);
      assertEquals(0L, services_HTTP_Result1.time);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, 989);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Services services0 = new Services();
      Services.testSMTP("", 1);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis((-144L));
      System.setCurrentTimeMillis(1678L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(559L);
      System.setCurrentTimeMillis(1);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(3340L);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.works = false;
      services_HTTP_Result0.toString();
      services_HTTP_Result0.time = 1275L;
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", 0);
      services_SIMPLE_Result0.time = (-1L);
      services_HTTP_Result0.reset();
      services_HTTP_Result0.page_weight = 860;
      Services.testHTTP("", 860);
      services_SIMPLE_Result0.toString();
      Services.HTTP_Result services_HTTP_Result1 = Services.testHTTPS("** Temps : ", 1);
      services_HTTP_Result1.toString();
      services_SIMPLE_Result0.reset();
      assertEquals(0L, services_SIMPLE_Result0.time);
      
      Services.testHTTP("DHvt", 0);
      Services.testHTTPS("A6N.[,RDN", 0);
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 860 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis((-278L));
      Services.testSMTP("{Q]E~SJw[sK", (-2304));
      System.setCurrentTimeMillis((-278L));
      System.setCurrentTimeMillis((-2304));
      System.setCurrentTimeMillis((-2479L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis((-278L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2304));
      System.setCurrentTimeMillis(2798L);
      System.setCurrentTimeMillis(0L);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("{Q]E~SJw[sK", 0);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("**** Resultat : \n** Fonctionnement : ", (-1033));
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("**1\u00E9go]se incoect*", (-318));
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress1 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress1);
      System.setCurrentTimeMillis((byte)0);
      System.setCurrentTimeMillis((-1L));
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-278L));
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP((String) null, (-298));
      services_SIMPLE_Result0.reset();
      services_SIMPLE_Result0.toString();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-278L));
      System.setCurrentTimeMillis(2245L);
      System.setCurrentTimeMillis((-499L));
      System.setCurrentTimeMillis((-3094L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(3090L);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1098L);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.560923023161317
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("", (-282));
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string0);
      
      Services.testPOP3("$l]/", 0);
      services_HTTP_Result0.reset();
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      
      String string1 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : **Erreur : java.lang.IllegalArgumentException: port out of range:-282**.\n****", string1);
      
      Services.SIMPLE_Result services_SIMPLE_Result1 = Services.testSMTP("", 0);
      assertFalse(services_SIMPLE_Result1.works);
  }
}
