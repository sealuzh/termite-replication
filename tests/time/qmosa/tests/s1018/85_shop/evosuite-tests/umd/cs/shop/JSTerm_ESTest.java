/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:13:09 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4648231071394098
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "f";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f");
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6375112767375066
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate2.test(jSSubstitution2);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      Predicate<Object> predicate5 = predicate0.or(predicate3);
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      predicate6.negate();
      predicate4.negate();
      predicate2.test(jSTerm2);
      Predicate<Object> predicate7 = predicate0.negate();
      predicate7.negate();
      Predicate<Object> predicate8 = predicate4.negate();
      predicate8.negate();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.274842682442605
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StringReader stringReader1 = new StringReader("Expecting constant symbol as term");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.add((Object) "Expecting constant symbol as term");
      jSTerm0.add((Object) null);
      stringReader1.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "m");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.or(predicate3);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate4.negate();
      predicate0.negate();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-3222L));
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2064759208601339
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      JSJshopVars.exclamation = 1;
      StringReader stringReader0 = new StringReader("5(@zsa");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0557051606564785
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      jSTerm0.add((Object) "Expecting constant symbol as term");
      jSTerm0.add((Object) null);
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      predicate4.negate();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.431848439223888
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      StringReader stringReader1 = new StringReader("");
      stringReader1.markSupported();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "m");
      predicate1.or(predicate0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.423775993723725
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "~");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      JSJshopVars.rightPar = (-397);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.negate();
      predicate1.negate();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm3.isFunction();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution2.fail());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1412113361534284
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      jSTerm0.add((Object) "m");
      jSTerm0.add((Object) "oB_?c");
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7445131521808093
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.lastElement();
      jSTerm0.add((Object) "?%%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.ensureCapacity((-1));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) stringReader0);
      predicate0.and(predicate1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      jSTerm1.equals(jSTerm3);
      jSTerm2.print();
      jSTerm0.equals(jSTerm3);
      jSTerm0.clear();
      jSTerm3.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSJshopVars.exclamation = (-10);
      char[] charArray0 = new char[2];
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      jSTerm0.add((Object) "oB_?c");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      StreamTokenizer streamTokenizer0 = null;
      // Undeclared exception!
      try { 
        jSTerm1.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 1;
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSJshopVars.semicolon = 1;
      jSTerm0.add((Object) "oB_?c");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.retainAll(jSTerm0);
      jSTerm0.trimToSize();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[14];
      charArray0[1] = 'Z';
      StringReader stringReader0 = new StringReader("m");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("m");
      jSTerm0.add((Object) "m");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis((-4848L));
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.586723914601829
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      StringReader stringReader0 = new StringReader("5(@zsa");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.retainAll(jSTerm0);
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSTerm0);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7228776135535435
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oB_?c");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.retainAll(jSTerm0);
      jSTerm0.trimToSize();
      jSTerm0.isGround();
      jSSubstitution0.add((Object) "oB_?c");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.print();
      jSTerm1.equals(jSTerm0);
      jSTerm1.clear();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5575311754617647
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oB_?c");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm1);
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4881075087522722
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars(61, 61);
      StringReader stringReader1 = new StringReader("M&{aLb]Isw+Ie");
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      jSTerm0.add((Object) "oB_?c");
      JSJshopVars.rightPar = (-2869);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.negate();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8976492786748422
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution0.add((Object) "kW~:lrA<ii");
      jSTerm0.ensureCapacity(93);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm3, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      StringReader stringReader1 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("82d:n0*Yk4E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.310322637655681
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.leftPar = 63;
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isVariable());
      
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSSubstitution1.fail());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.653693876336899
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertFalse(jSTerm1.isEval());
      
      JSTerm jSTerm2 = jSTerm1.call();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m");
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) jSTerm2);
      predicate2.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate0);
      predicate8.or(predicate1);
      Predicate<Object> predicate10 = predicate2.and(predicate9);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate8.and(predicate7);
      Predicate<Object> predicate13 = predicate6.or(predicate12);
      predicate13.and(predicate8);
      predicate4.or(predicate10);
      predicate9.or(predicate5);
      Predicate<Object> predicate14 = predicate1.negate();
      predicate11.or(predicate8);
      predicate14.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertEquals(10, jSTerm2.capacity());
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer0.sval = "2%?i}|#N@t1*t";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.426955225232207
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      streamTokenizer0.sval = "2%?i}|#N@t1*t";
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      StringReader stringReader1 = new StringReader("7{>%!WEzCno| rzc>)c");
      stringReader1.markSupported();
      Object object0 = jSTerm0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Object object1 = jSTerm0.clone();
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "?6[H$>Y2uQvbj\"4ngD3");
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate2);
      Object object2 = jSTerm0.clone();
      Predicate<Object> predicate5 = Predicate.isEqual(object2);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate5.negate();
      predicate2.and(predicate4);
      Predicate<Object> predicate8 = predicate0.and(predicate2);
      predicate4.and(predicate1);
      Predicate<Object> predicate9 = predicate1.and(predicate3);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate6.or(predicate10);
      predicate7.and(predicate6);
      predicate4.or(predicate9);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) "7{>%!WEzCno| rzc>)c");
      predicate12.or(predicate0);
      predicate8.negate();
      Predicate<Object> predicate13 = predicate3.or(predicate11);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate14.negate();
      System.setCurrentTimeMillis(1111L);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(7, stringBuffer0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3631322031433784
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0625752316533053
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "m");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate0.and(predicate3);
      predicate3.negate();
      predicate1.negate();
      System.setCurrentTimeMillis((-937L));
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals("[m, [m]]", jSTerm0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.330250074374067
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm0.parseList(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm0, jSSubstitution2);
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertTrue(jSSubstitution3.fail());
      assertTrue(jSTerm2.isConstant());
      assertEquals("[nil]", jSTerm2.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.111345420808597
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.ensureCapacity(93);
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.matches(jSTerm3, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-252L));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.7314233917906585
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      jSTerm0.call();
      jSTerm0.isVariable();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) "?6[H$>Y2uQvbj\"4ngD3");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.50423160214064
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eh eo9iD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("Error flag1 : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.trimToSize();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm2);
      assertEquals(2, jSTerm0.size());
      
      jSTerm1.equals(jSTerm0);
      jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer1);
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.010406679963535
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StringReader stringReader1 = new StringReader("Lj*S2M--T,/RGu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashSlashComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      jSSubstitution0.addElements(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7813364563813074
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6zO?VQ*XK.L");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.semicolon = (-2);
      jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.nval = (double) (-2);
      jSTerm1.iterator();
      jSTerm0.removeAll(jSTerm1);
      jSTerm1.iterator();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm3 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSSubstitution0.add(object0);
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(0, 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ordinaryChars(770, 439);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      int int0 = 3;
      // Undeclared exception!
      try { 
        jSTerm0.get(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 3
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate3);
      Predicate<Object> predicate6 = predicate2.or(predicate5);
      Predicate<Object> predicate7 = predicate0.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      predicate0.negate();
      predicate4.test(predicate0);
      Predicate<Object> predicate8 = predicate6.or(predicate3);
      predicate7.and(predicate8);
      jSTerm1.makeVariable();
      boolean boolean0 = jSTerm0.isVariable();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.56900474164515
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting variable name in term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.ordinaryChar((-4185));
      streamTokenizer0.eolIsSignificant(true);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(32);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.insertElementAt(jSSubstitution1, 2);
      streamTokenizer0.pushBack();
      stringReader0.read();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.toStr();
      jSTerm1.matches(jSTerm0);
      jSTerm1.makeConstant();
      assertTrue(jSTerm1.isConstant());
      
      JSTerm jSTerm2 = jSTerm0.call();
      boolean boolean0 = jSTerm2.isConstant();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.757832823955802
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSJshopVars.exclamation = 1;
      char[] charArray0 = new char[2];
      charArray0[1] = 'Z';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oB_?c");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.retainAll(jSTerm0);
      jSTerm0.trimToSize();
      jSTerm0.isGround();
      jSSubstitution0.add((Object) "oB_?c");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm1.print();
      JSJshopVars.slash = 1;
      JSJshopVars.equalT = 1;
      jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm0.equals((Object)jSTerm2));
      
      jSTerm0.clear();
      jSTerm2.cloneT();
      jSTerm2.isConstant();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(2);
      StringReader stringReader0 = new StringReader("?}G!L{n31]jTBpG");
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm1.isEval();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5264126563310727
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      predicate3.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) jSTerm0);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      predicate3.test(jSSubstitution0);
      predicate6.and(predicate4);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isVariable());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm2.isFunction());
      assertEquals("[?%%%0]", jSTerm2.toString());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isVariable());
      assertEquals(1, jSTerm0.size());
      assertNotSame(jSTerm0, jSTerm1);
      assertFalse(jSTerm2.isConstant());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.0185666947917342
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(0, 0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.rightBrac = (-4);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.ensureCapacity(93);
      jSTerm3.clear();
      JSTerm jSTerm4 = new JSTerm(streamTokenizer0);
      jSTerm4.cloneT();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.091310026250888
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars(61, 61);
      StringReader stringReader1 = new StringReader("M&{aLb]Isw+Ie");
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      assertEquals((-2), streamTokenizer1.ttype);
      
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      System.setCurrentTimeMillis(61);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isVariable());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.exclamation = 1;
      streamTokenizer0.eolIsSignificant(false);
      stringReader0.reset();
      char[] charArray0 = new char[2];
      charArray0[0] = 'H';
      StringReader stringReader1 = new StringReader("m})[E2A!aH2$/");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer1);
      assertEquals(41, streamTokenizer1.ttype);
      assertEquals("[m]", jSTerm0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2%?i}|#N@t1*t");
      StringReader stringReader1 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8203806314665187
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars(61, 61);
      StringReader stringReader1 = new StringReader("M&{aLb]Isw+Ie");
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = (-2);
      jSTerm0.addAll((Collection) jSTerm1);
      System.setCurrentTimeMillis((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertEquals((-2), streamTokenizer1.ttype);
      assertTrue(jSTerm2.isConstant());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = (-1);
      JSJshopVars.backquote = 0;
      jSTerm0.isGround();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8800221234841177
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      assertEquals(1, streamTokenizer1.lineno());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1985574616803634
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      stringReader0.markSupported();
      streamTokenizer0.whitespaceChars(61, 61);
      StringReader stringReader1 = new StringReader("M&{aLb]Isw+Ie");
      StringReader stringReader2 = new StringReader("2%?i}|#N@t1*t");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity((-1185));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1377L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m})[E2A!aH2$/");
      StringReader stringReader1 = new StringReader("3{olRM");
      StringReader stringReader2 = new StringReader("3{olRM");
      stringReader2.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(1823L);
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8282495135936656
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f");
      jSTerm0.add((Object) "oB_?c");
      StringReader stringReader0 = new StringReader("7{>%!WEzCno| rzc>)c");
      stringReader0.markSupported();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "f");
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate3.or(predicate4);
      predicate7.and(predicate3);
      Predicate<Object> predicate8 = predicate6.and(predicate5);
      predicate1.and(predicate8);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate10.negate();
      Predicate<Object> predicate11 = predicate1.or(predicate5);
      predicate0.and(predicate11);
      Predicate<Object> predicate12 = predicate9.and(predicate8);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate11.and(predicate12);
      predicate13.negate();
      Predicate<Object> predicate14 = predicate1.or(predicate8);
      predicate14.negate();
      predicate14.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader1 = new StringReader("7{>%!WEzCno| rzc>)c");
      stringReader1.markSupported();
      jSTerm0.clone();
      stringReader1.markSupported();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) stringReader1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "|");
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate3.and(predicate2);
      Predicate<Object> predicate8 = predicate4.and(predicate1);
      predicate2.and(predicate7);
      Predicate<Object> predicate9 = predicate4.negate();
      predicate8.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate6);
      predicate2.or(predicate9);
      Predicate<Object> predicate11 = predicate1.or(predicate5);
      Predicate<Object> predicate12 = predicate10.negate();
      predicate2.or(predicate3);
      predicate12.or(predicate7);
      predicate11.negate();
      System.setCurrentTimeMillis(486L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      jSTerm0.ensureCapacity((-1));
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis(3773L);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      CharBuffer.wrap((CharSequence) "WH=Xa\")l");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-3954.6935);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.slashStarComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f");
      jSTerm0.add((Object) "oB_?c");
      StringReader stringReader0 = new StringReader("7{>%!WEzCno| rzc>)c");
      stringReader0.markSupported();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "f");
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate6.negate();
      predicate7.and(predicate3);
      Predicate<Object> predicate8 = predicate6.and(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate8);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate10.or(predicate3);
      predicate6.and(predicate10);
      Predicate<Object> predicate11 = predicate6.or(predicate7);
      Predicate<Object> predicate12 = predicate11.or(predicate7);
      predicate12.negate();
      predicate8.or(predicate10);
      predicate4.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f");
      jSTerm0.add((Object) "oB_?c");
      StringReader stringReader0 = new StringReader("7{>%!WEzCno| rzc>)c");
      stringReader0.markSupported();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "f");
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate6.and(predicate3);
      Predicate<Object> predicate7 = predicate5.and(predicate3);
      Predicate<Object> predicate8 = predicate1.and(predicate7);
      Predicate<Object> predicate9 = predicate8.negate();
      predicate9.or(predicate3);
      predicate5.and(predicate9);
      Predicate<Object> predicate10 = predicate5.or(predicate6);
      predicate10.or(predicate6);
      System.setCurrentTimeMillis((-851L));
      System.setCurrentTimeMillis(1L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?6[H$>Y2uQvbj\"4ngD3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "f");
      jSTerm0.add((Object) "oB_?c");
      StringReader stringReader0 = new StringReader("7{>%!WEzCno| rzc>)c");
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "m");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "f");
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.or(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate7.and(predicate3);
      Predicate<Object> predicate8 = predicate6.and(predicate5);
      Predicate<Object> predicate9 = predicate1.and(predicate8);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate3);
      Predicate<Object> predicate12 = predicate6.and(predicate10);
      Predicate<Object> predicate13 = predicate6.or(predicate7);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate10.and(predicate12);
      Predicate<Object> predicate15 = predicate11.negate();
      predicate14.or(predicate9);
      predicate15.negate();
      System.setCurrentTimeMillis((-3549L));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
