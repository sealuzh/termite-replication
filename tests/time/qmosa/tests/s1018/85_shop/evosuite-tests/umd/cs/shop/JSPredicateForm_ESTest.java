/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 05:00:12 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine("0(u");
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      int int0 = 1466;
      streamTokenizer2.ordinaryChars(1466, (-4));
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(122L);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.whitespaceChars(1466, (-978));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemInUtil.addInputLine("Sc");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      StringReader stringReader0 = new StringReader("r<'c)sk5oce,bri");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("Predicateform.print(): 0 elements");
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "";
      jSTerm0.add((Object) "");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      int int0 = (-3277);
      JSJshopVars.exclamation = (-3277);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Object object0 = new Object();
      SystemInUtil.addInputLine("");
      Predicate<String> predicate0 = Predicate.isEqual((Object) "");
      Predicate<String> predicate1 = predicate0.negate();
      jSTerm0.removeIf(predicate0);
      Predicate<String> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate1.and(predicate0);
      predicate2.or(predicate3);
      predicate0.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate1.or(predicate2);
      Predicate<Integer> predicate4 = Predicate.isEqual((Object) predicate1);
      jSSubstitution2.removeIf(predicate4);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.ordinaryChar((-1106826472));
      SystemInUtil.addInputLine("%;I");
      streamTokenizer0.ordinaryChars((-4), (-4));
      SystemInUtil.addInputLine("jsutil>mst<ingtokengzer");
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer1.sval = "O+{,>!q=l-@]>";
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.ordinaryChars((-4), (-4));
      SystemInUtil.addInputLine("Predicateform.print(): 0 elements");
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-2));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      JSJshopVars.verticalL = (-1781);
      jSPredicateForm0.add((Object) stringBuffer0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0042424730540764
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "umd.cs.shop.JSParserError");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.exclamation = (-3277);
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.clonePF();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      Object object0 = new Object();
      SystemInUtil.addInputLine("umd.cs.shop.JSParserError");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.639031859650177
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4088));
      stringReader0.skip((-1749L));
      SystemInUtil.addInputLine("%I");
      streamTokenizer0.ordinaryChars((-4), (-4));
      stringReader0.mark(1);
      SystemInUtil.addInputLine("jsutil>mst<ingtokengzer");
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer1.sval = "O+{,>!q=l-@]>";
      streamTokenizer1.wordChars(1091, 1091);
      streamTokenizer1.whitespaceChars((-1073741822), 1);
      streamTokenizer1.wordChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.commentChar((-2));
      SystemInUtil.addInputLine((String) null);
      stringReader0.reset();
      streamTokenizer1.parseNumbers();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(0L);
      streamTokenizer1.commentChar((-4));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7505772279825909
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "[aT&d;~c\"");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.clonePF();
      jSPredicateForm3.removeAllElements();
      jSSubstitution0.addAll((Collection) jSPredicateForm3);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution0);
      Object object0 = jSTerm1.firstElement();
      jSSubstitution1.add(object0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      SystemInUtil.addInputLine("DeVC");
      jSPredicateForm4.clonePF();
      jSTerm0.matches(jSPredicateForm3);
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5498260458782016
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "umd.cs.shop.JSParserError");
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSTerm0);
      JSJshopVars.exclamation = (-3277);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Object object0 = new Object();
      SystemInUtil.addInputLine("umd.cs.shop.JSParserError");
      jSPredicateForm0.stream();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "mI!");
      Predicate<String> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate<String> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate1.and(predicate0);
      predicate2.or(predicate3);
      SystemInUtil.addInputLine("mI!");
      predicate0.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.print();
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.664286806596968
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "[aT&d;~c\"");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.clonePF();
      jSPredicateForm3.removeAllElements();
      jSSubstitution0.addAll((Collection) jSPredicateForm3);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution0);
      jSTerm1.firstElement();
      jSPredicateForm1.equals((JSPredicateForm) jSTerm0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
      
      jSPredicateForm4.clonePF();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution1);
      assertFalse(jSSubstitution1.fail());
      assertEquals("[[aT&d;~c\", [[[aT&d;~c\"]]]", jSPredicateForm1.toString());
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm2));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "c");
      jSTerm0.isEmpty();
      jSSubstitution0.add((Object) "c");
      jSTerm0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("aW$w)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSTerm1.containsAll(jSPredicateForm1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      stringReader0.reset();
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("call");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer4.nextToken();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      streamTokenizer7.slashStarComments(true);
      streamTokenizer2.commentChar((-4));
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      StringReader stringReader2 = new StringReader("c}^$");
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader2);
      boolean boolean1 = jSTerm1.equals((JSPredicateForm) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SystemInUtil.addInputLine("UN..Ex0IyC7");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "[aT&d;~c\"");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm2.forEach(consumer0);
      SystemInUtil.addInputLine("[aT&d;~c\"");
      SystemInUtil.addInputLine("7'GUR");
      SystemInUtil.addInputLine("PL^\"T$L:8.ammp}+R{");
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      Integer integer0 = new Integer((-1529));
      jSPredicateForm0.add((Object) integer0);
      jSPredicateForm1.print();
      System.setCurrentTimeMillis((-1018L));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.stream();
      Object object0 = null;
      jSSubstitution0.add((Object) null);
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = null;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(0, 1723);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      streamTokenizer2.commentChar((-4));
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm1.standarizerPredicateForm();
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer8);
      jSTerm2.print();
      JSPredicateForm jSPredicateForm0 = jSTerm2.standarizerPredicateForm();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm2, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      SystemInUtil.addInputLine("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars((-4), (-1));
      streamTokenizer0.parseNumbers();
      streamTokenizer5.nextToken();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer4);
      streamTokenizer0.eolIsSignificant(true);
      jSTerm1.clear();
      streamTokenizer7.commentChar((-2));
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "lc");
      jSTerm0.isEmpty();
      jSSubstitution0.add((Object) "lc");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.add((Object) null);
      String string0 = "aW$w)";
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      stringReader0.reset();
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer0.sval = "c}^$";
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.commentChar((-465));
      StringReader stringReader1 = new StringReader("umd.cs.shop.JSPredicateForm");
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars((-1), (-322070664));
      streamTokenizer1.parseNumbers();
      jSTerm0.add((Object) "JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.pushBack();
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer7.commentChar((-4));
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9415413680202749
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      JSJshopVars.exclamation = (-3277);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      jSTerm0.matches(jSPredicateForm3);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm4.matches(jSPredicateForm2, jSSubstitution1);
      jSPredicateForm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm3);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.310783678099714
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "");
      jSSubstitution0.add((Object) jSTerm0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      JSJshopVars.exclamation = (-3277);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm2.addAll((Collection) jSPredicateForm0);
      Object object0 = new Object();
      SystemInUtil.addInputLine("");
      Predicate<String> predicate0 = Predicate.isEqual((Object) "mI!");
      Predicate<String> predicate1 = predicate0.negate();
      jSPredicateForm1.removeIf(predicate0);
      Predicate<String> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate1.and(predicate0);
      Predicate.isEqual((Object) "");
      predicate2.or(predicate3);
      predicate0.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate<Integer> predicate4 = Predicate.isEqual((Object) predicate1);
      jSSubstitution2.removeIf(predicate4);
      // Undeclared exception!
      try { 
        jSPredicateForm2.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "lc");
      jSTerm0.isEmpty();
      jSSubstitution0.add((Object) "lc");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.add((Object) null);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSPredicateForm0;
      JSJshopVars.percent = 846;
      objectArray0[0] = (Object) jSTerm0;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars((-4), 0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.commentChar(58);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      assertFalse(streamTokenizer8.equals((Object)streamTokenizer6));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "0(u";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("|.-88Uup2: oBnG|Y");
      jSTerm0.add((Object) "not");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) "0(u");
      jSTerm0.add((Object) "0(u");
      SystemInUtil.addInputLine("not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.slashSlashComments(false);
      streamTokenizer4.ordinaryChars((-4), (-1));
      streamTokenizer4.nextToken();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer5.slashStarComments(false);
      streamTokenizer6.slashSlashComments(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer5);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "0(u";
      SystemInUtil.addInputLine("call");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = null;
      jSTerm0.add((Object) null);
      String string1 = "expected '('";
      SystemInUtil.addInputLine("expected '('");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "lc");
      String string0 = "0]2c=~t|6rFs";
      StringReader stringReader0 = new StringReader("0]2c=~t|6rFs");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) streamTokenizer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSSubstitution0.add((Object) jSTerm0);
      SystemInUtil.addInputLine((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      stringReader0.reset();
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer0.commentChar((-465));
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SystemInUtil.addInputLine("%I");
      SystemInUtil.addInputLine("fHFff<U");
      SystemInUtil.addInputLine("znot");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals(0, jSPredicateForm0.size());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SystemInUtil.addInputLine("0(u");
      SystemInUtil.addInputLine("( ");
      SystemInUtil.addInputLine("eWEzLBT{b");
      SystemInUtil.addInputLine("znot");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "znot");
      jSPredicateForm0.print();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5465986860485126
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) "");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      JSJshopVars.exclamation = (-3277);
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      Object object0 = new Object();
      SystemInUtil.addInputLine("");
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(predicate1).test(any());
      Predicate<Integer> predicate2 = predicate0.and(predicate1);
      Predicate<Integer> predicate3 = predicate2.or(predicate0);
      Predicate<Integer> predicate4 = predicate3.negate();
      jSPredicateForm0.removeIf(predicate4);
      Predicate<String> predicate5 = Predicate.isEqual((Object) "");
      Predicate<String> predicate6 = predicate5.negate();
      jSPredicateForm1.removeIf(predicate5);
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate6.and(predicate5);
      predicate7.or(predicate8);
      predicate5.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      predicate6.or(predicate7);
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) predicate6);
      jSSubstitution2.removeIf(predicate9);
      jSPredicateForm2.toStr();
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm0.trimToSize();
      // Undeclared exception!
      try { 
        jSPredicateForm1.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      SystemInUtil.addInputLine(")");
      jSTerm0.add((Object) "lc");
      jSTerm0.isEmpty();
      jSSubstitution0.add((Object) "lc");
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.add((Object) null);
      JSJshopVars.percent = 846;
      StringReader stringReader0 = new StringReader("lc");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.eolIsSignificant(true);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      streamTokenizer0.nval = 1.0;
      streamTokenizer6.ordinaryChars((-1), (-322070664));
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.slashSlashComments(false);
      streamTokenizer7.pushBack();
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer7.commentChar((-4));
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("%I");
      streamTokenizer0.ordinaryChars((-4), (-4));
      SystemInUtil.addInputLine("jsutil>>stringtokenizer");
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer1.sval = "O+{,>!q=l-@]>";
      SystemInUtil.addInputLine("0(u");
      streamTokenizer1.wordChars(96, (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.commentChar((-2));
      SystemInUtil.addInputLine((String) null);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("%I");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer2.commentChar(3245);
      SystemInUtil.addInputLine("0(u");
      stringReader0.reset();
      System.setCurrentTimeMillis(0L);
      streamTokenizer2.commentChar(3245);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7890221622909377
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "-2.0";
      jSTerm0.add((Object) "-2.0");
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) jSPredicateForm0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSTerm0.matches(jSPredicateForm1);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm3.matches(jSPredicateForm2, jSSubstitution0);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSPredicateForm3.clonePF();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm2.clonePF();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 13.010465232034644;
      streamTokenizer6.ordinaryChars((-1), (-322070664));
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.pushBack();
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer7.commentChar((-4));
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars((-1), (-322070664));
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer7.pushBack();
      streamTokenizer1.nextToken();
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(false);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer5);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer3.eolIsSignificant(false);
      streamTokenizer7.commentChar((-4));
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SystemInUtil.addInputLine("(e0");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ot");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("ot");
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(2157L);
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis(222L);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) "dk<BH 1I\"";
      objectArray0[6] = (Object) "dk<BH 1I\"";
      objectArray0[7] = (Object) "aW$w)";
      // Undeclared exception!
      try { 
        jSTerm0.set((-3), objectArray0[5]);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5K-5-}CdC^Qo*F1X");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer2.wordChars((-4), 131);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) streamTokenizer5);
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer2.slashSlashComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4088));
      stringReader0.skip((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      stringReader0.mark(1);
      SystemInUtil.addInputLine("jsutil>mst<ingtokengzer");
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      streamTokenizer1.sval = "O+{,>!q=l-@]>";
      streamTokenizer1.wordChars(1091, 1091);
      streamTokenizer1.whitespaceChars((-1073741822), 1);
      streamTokenizer1.wordChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.commentChar((-2));
      SystemInUtil.addInputLine((String) null);
      stringReader0.reset();
      streamTokenizer1.parseNumbers();
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(0L);
      streamTokenizer1.commentChar((-4));
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1);
      linkedList0.add(integer0);
      linkedList0.add((Integer) null);
      jSTerm0.removeAll(linkedList0);
      jSTerm0.retainAll(linkedList0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "0(Hu";
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.reset();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine((String) null);
      Integer integer0 = new Integer((-1953));
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      JSTerm jSTerm0 = new JSTerm();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      SystemInUtil.addInputLine(" Expecting word as term");
      jSTerm0.removeAll(linkedList0);
      jSTerm0.retainAll(linkedList0);
      SystemInUtil.addInputLine((String) null);
      jSTerm0.add((Object) "!ot");
      jSTerm0.standarizerPredicateForm();
      SystemInUtil.addInputLine("[");
      StringReader stringReader0 = new StringReader("0.0");
      StreamTokenizer streamTokenizer0 = null;
      try {
        streamTokenizer0 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SystemInUtil.addInputLine("(e0");
      String string0 = "dk<BH 1I\"";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = "0(u";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) "0(u");
      SystemInUtil.addInputLine("not");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<JSTerm> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      Predicate.isEqual((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      SystemInUtil.addInputLine("%I");
      streamTokenizer0.ordinaryChars((-4), (-4));
      SystemInUtil.addInputLine("%I");
      streamTokenizer0.ordinaryChars((-2202), 689);
      SystemInUtil.addInputLine("0(u");
      streamTokenizer0.ordinaryChar(3008);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      SystemInUtil.addInputLine((String) null);
      streamTokenizer0.wordChars(1911, 689);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer1.commentChar(3008);
      StringReader stringReader1 = new StringReader("0(u");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      stringReader1.close();
      streamTokenizer3.eolIsSignificant(true);
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis((-2));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer3);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      System.setCurrentTimeMillis(3598L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("0(u");
      int int0 = 369;
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.2868359830561607
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0(Hu");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars((-4), (-1));
      streamTokenizer4.nextToken();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(4675L);
      streamTokenizer4.nval = (double) (-4);
      streamTokenizer3.whitespaceChars((-256), 2901);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SystemInUtil.addInputLine("0(u");
      SystemInUtil.addInputLine("eWEzPBT{b");
      String string0 = "znot";
      SystemInUtil.addInputLine("znot");
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("znot");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
