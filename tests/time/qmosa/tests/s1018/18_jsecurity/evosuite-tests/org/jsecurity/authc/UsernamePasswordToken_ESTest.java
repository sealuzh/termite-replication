/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:43:34 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("aOt&I", charArray0, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'y';
      charArray0[2] = ';';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("JA`C7rh");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("JA`C7rh", (String) null, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - JA`C7rh, rememberMe=false (/192.168.1.42)", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("8C8g#JH$Hc");
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'y';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.toString();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '-';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      char[] charArray1 = new char[2];
      charArray1[0] = '-';
      charArray1[1] = '-';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("dKS<j/|2Hc3AA\"_>", charArray1, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'y';
      charArray0[2] = ';';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("t\"(?c*cGDXHNA&M", charArray0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      char[] charArray0 = new char[3];
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("?M'{L66w*8z;DG|2", "s&j;R2_N.`Hm2-tEZM", inetAddress0);
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3752697138726195
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", " - ");
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("pLP$", "", true);
      assertTrue(usernamePasswordToken1.isRememberMe());
      
      usernamePasswordToken0.toString();
      char[] charArray0 = new char[1];
      usernamePasswordToken1.clear();
      charArray0[0] = 'g';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.toString();
      usernamePasswordToken1.clear();
      usernamePasswordToken0.getUsername();
      String string0 = usernamePasswordToken1.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
      
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("");
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("8C8g#JH$Hc");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName(" (");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;o", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;o");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName(" (");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.507657014263189
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", " - ");
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("pLP$", "", true);
      usernamePasswordToken1.setUsername("");
      assertTrue(usernamePasswordToken1.isRememberMe());
      
      usernamePasswordToken0.toString();
      char[] charArray0 = new char[1];
      usernamePasswordToken1.clear();
      charArray0[0] = 'g';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.toString();
      usernamePasswordToken1.clear();
      usernamePasswordToken0.getUsername();
      usernamePasswordToken1.clear();
      usernamePasswordToken0.getPrincipal();
      String string0 = usernamePasswordToken1.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Y?YqzE#SP*[->#o\"C'", (String) null, inetAddress0);
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("8C8g#JH$Hc");
      MockInetAddress.getByName("8C8g#JH$Hc");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '\u0014';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      InetAddress inetAddress0 = MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("8C8g#JH$Hc");
      MockInetAddress.getByName("v.");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("V", charArray0, true, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("pLP$", ".", true);
      usernamePasswordToken0.setRememberMe(true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'V';
      charArray0[1] = '4';
      charArray0[2] = '.';
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("*F1XXF", "Gh>8N-ki>/=C(O");
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      InetAddress inetAddress1 = MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress1);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("v=E(?kHb", byteArray0);
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("v=E(?kHb");
      MockInetAddress.getByName(":Y^^(Rzh5Qyv36");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("v=E(?kHb", (String) null, false, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName((String) null);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false, inetAddress0);
      usernamePasswordToken0.setUsername("");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("]w))yL(m&A*AukcW7=", "V", true, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - ]w))yL(m&A*AukcW7=, rememberMe=true (JA`C7rh/200.42.42.2)", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName(" (");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("I!+2+nHR4.*5~e`U;oZ", charArray0, false, inetAddress0);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'y';
      charArray0[2] = ';';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("t\"(?c*cGDXHNA&M", charArray0, false);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = 'y';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("2-DK`Ez|Uq/*dc9%%", "");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("I!+2+nHR4.*5~e`U;oZ", byteArray0);
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("I!+2+nHR4.*5~e`U;oZ");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("JA`C7rh");
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      MockInetAddress.getByAddress("", byteArray0);
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getByName("8C8g#JH$Hc");
      MockInetAddress.getByName("8C8g#JH$Hc");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("?M'{L66w*8z;DG|2", charArray0, false, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress("uYWc>Fg}1", byteArray0);
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getByName("?M'{L66w*8z;DG|2");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("uYWc>Fg}1", charArray0, false, inetAddress0);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ZCKXpG3,c[Nt6D=", "ZCKXpG3,c[Nt6D=");
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
