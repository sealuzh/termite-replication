/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:46:48 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Locale;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authz.Permission;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<Integer> class0 = Integer.class;
      simplePrincipalCollection0.byType(class0);
      simplePrincipalCollection1.forEach(consumer0);
      simplePrincipalCollection0.add("", "");
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7944736034533117
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(" = ");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      boolean boolean0 = defaultWebSecurityManager0.isHttpSessionMode();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getCharacterEncoding();
      doReturn((String) null).when(servletResponse0).getContentType();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper2.getContentType();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletResponseWrapper2.getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      defaultWebSecurityManager0.getSessionMode();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      boolean boolean1 = defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper0, servletResponseWrapper4);
      assertFalse(boolean1 == boolean0);
      
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm1);
      String string0 = defaultWebSecurityManager1.getSessionMode();
      assertEquals("http", string0);
      
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager(simpleAccountRealm1);
      Subject subject0 = defaultWebSecurityManager2.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper3);
      assertFalse(subject0.isAuthenticated());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9935433028254361
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      servletResponseWrapper4.getContentType();
      servletResponseWrapper4.setResponse(servletResponseWrapper3);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      defaultWebSecurityManager0.getSessionMode();
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper0);
      defaultWebSecurityManager0.isAuthenticated((Session) null);
      defaultWebSecurityManager0.getSessionMode();
      defaultWebSecurityManager0.newSessionManagerInstance();
      System.setCurrentTimeMillis(8L);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Class<Permission> class0 = Permission.class;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      SimplePrincipalCollection simplePrincipalCollection0 = null;
      try {
        simplePrincipalCollection0 = new SimplePrincipalCollection((PrincipalCollection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.subject.SimplePrincipalCollection", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6938274918342655
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(" = ");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.isHttpSessionMode();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getCharacterEncoding();
      doReturn((String) null).when(servletResponse0).getContentType();
      doReturn(false).when(servletResponse0).isCommitted();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper1.getContentType();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      servletResponseWrapper0.getCharacterEncoding();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper0.isCommitted();
      defaultWebSecurityManager0.getSessionMode();
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper2);
      defaultWebSecurityManager0.isAuthenticated((Session) null, (ServletRequest) null, servletResponseWrapper6);
      defaultWebSecurityManager0.getSessionMode();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.615726363637287
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(servletRequest0).getServerPort();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper0.getServerPort();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager1.setSessionMode("http");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.getSession("jsecurity");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7011978535928471
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      try { 
        defaultWebSecurityManager0.getSession("jsecu|ity");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified id [jsecu|ity] does not correspond to a valid Session  It either does not exist or the corresponding session has been stopped or expired.
         //
         verifyException("org.jsecurity.mgt.SessionsSecurityManager", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "jsecu|ity";
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("jsecu|ity");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [jsecu|ity].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.shouldAllThrowIOExceptions();
      defaultWebSecurityManager0.getPrincipals((Session) null);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper0);
      assertFalse(servletResponseWrapper7.equals((Object)servletResponseWrapper3));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      int int0 = (-3);
      char[] charArray0 = new char[5];
      defaultWebSecurityManager0.setRememberMeCookiePath("");
      charArray0[0] = 'b';
      charArray0[1] = '|';
      charArray0[2] = 'T';
      charArray0[3] = '';
      charArray0[4] = '+';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("http", charArray0);
      try { 
        defaultWebSecurityManager0.login(usernamePasswordToken0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Authentication failed for token submission [org.jsecurity.authc.UsernamePasswordToken - http, rememberMe=false].  Possible unexpected error? (Typical or expected login exceptions should extend from AuthenticationException).
         //
         verifyException("org.jsecurity.authc.AbstractAuthenticator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[2] = (byte) (-78);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)32;
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper2, servletResponseWrapper3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6796742326465708
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getContentType();
      doReturn((BufferedReader) null).when(servletRequest0).getReader();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper6);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper2);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      servletRequestWrapper7.getContentType();
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper4);
      servletRequestWrapper8.getReader();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager1);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper8, servletResponseWrapper2);
      assertTrue(defaultWebSecurityManager1.isHttpSessionMode());
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection1.forEach(consumer0);
      simplePrincipalCollection0.add("", "");
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = null;
      try {
        defaultWebSecurityManager1 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = null;
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm((String) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      PrincipalCollection principalCollection0 = null;
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath("r[Rs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer(1);
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      Locale locale0 = Locale.ROOT;
      servletResponseWrapper0.setLocale(locale0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(4116);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("org.apache.log4j.Appende");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-95);
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKey(byteArray0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("() methods in class ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0343946195677223
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("javax.servlet.forward.context_path");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      Collection<Realm> collection0 = defaultWebSecurityManager0.getRealms();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(collection0);
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      String string0 = "";
      defaultWebSecurityManager2.setRememberMeDecryptionCipherKeyHex("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      Class<Permission> class0 = Permission.class;
      simplePrincipalCollection2.byType(class0);
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      // Undeclared exception!
      try { 
        simpleAccountRealm0.checkPermissions((PrincipalCollection) simplePrincipalCollection0, (Collection<Permission>) linkedList0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$EmptyIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection1.forEach(consumer0);
      simplePrincipalCollection0.add("", "");
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)0;
      Class<Permission> class0 = Permission.class;
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection4.byType(class0);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("}mDkw#2oq");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge(0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper3);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject(servletRequest0, (ServletResponse) servletResponseWrapper4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.javax.servlet.ServletRequest$MockitoMock$47434882 cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection1.forEach(consumer0);
      simplePrincipalCollection0.add("", "");
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)0;
      Class<Permission> class0 = Permission.class;
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection4.byType(class0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      MockInetAddress.anyLocalAddress();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection1.forEach(consumer0);
      simplePrincipalCollection0.add("", "");
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte)0;
      Class<Permission> class0 = Permission.class;
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection4.byType(class0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyHex("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Consumer<Boolean> consumer0 = (Consumer<Boolean>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection0.forEach(consumer0);
      simplePrincipalCollection0.add(simplePrincipalCollection0, "http");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection0.spliterator();
      Class<Permission> class0 = Permission.class;
      simplePrincipalCollection2.byType(class0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }
}
