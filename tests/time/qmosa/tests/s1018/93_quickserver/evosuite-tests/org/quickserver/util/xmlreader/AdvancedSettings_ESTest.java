/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:44:35 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7275578884092866
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesLatency((-774));
      advancedSettings0.setPerformancePreferencesLatency((-774));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesConnectionTime((-774));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesBandwidth(2004);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(2004);
      advancedSettings0.setPerformancePreferencesLatency(261);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.getBacklog();
      advancedSettings0.toXML("ISO-8859-1");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML((String) null);
      assertEquals((-774), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3687843444066994
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog(944);
      advancedSettings0.setClientSocketReceiveBufferSize(944);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setCharset((String) null);
      assertEquals(944, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.38615474653985
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setQSObjectPoolMaker("dsa");
      advancedSettings0.setQSObjectPoolMaker(",3KDkO");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setSocketLinger((-468));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setCharset("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(10, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1153));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesBandwidth(1020);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setByteBufferSize((-117));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger(0);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1118851649746797
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog(1);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setBacklog((-3526));
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9258637628751876
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("VQQ\"@&N.DXo}z");
      advancedSettings0.setSocketLinger(815);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesLatency(1);
      advancedSettings1.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(815, advancedSettings0.getSocketLinger());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.620816874260707
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-681));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.toXML("Kg'&A|");
      advancedSettings0.setSocketLinger(1059);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketReceiveBufferSize(1059);
      advancedSettings0.setClientSocketReceiveBufferSize((-681));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getUseDirectByteBuffer();
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      int int0 = advancedSettings1.getBacklog();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.660910262087134
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.toXML("</debug-non-blocking-mode>\n");
      advancedSettings0.setSocketLinger((-1523));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize((-1523));
      advancedSettings0.setMaxThreadsForNioWrite(817);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger(10);
      assertEquals(10, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.278498493717339
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(65536, int0);
      
      advancedSettings0.setByteBufferSize(65536);
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
      
      int int1 = advancedSettings0.getBacklog();
      assertEquals(0, int1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.449191882584089
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketReceiveBufferSize((-3235));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize((-681));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(65536);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("Z{4R2!o$C\"6ha");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Z{4R2!o$C\"6ha
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1919211688441456
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(4939);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize((-1));
      assertEquals(4939, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.620816874260707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-1584));
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.toXML("");
      advancedSettings0.setMaxThreadsForNioWrite((-1584));
      advancedSettings0.setClientIdentifier("m>#D#8m8");
      advancedSettings0.setPerformancePreferencesBandwidth((-2080));
      advancedSettings0.setQSObjectPoolMaker("~7F(+#*jmN>A$/");
      advancedSettings0.setPerformancePreferencesLatency((-2080));
      advancedSettings0.setClientSocketReceiveBufferSize((-2080));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setQSObjectPoolMaker("edBB$sQRUoX");
      advancedSettings0.setClientIdentifier("?P3");
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientIdentifier("edBB$sQRUoX");
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals("edBB$sQRUoX", advancedSettings0.getClientIdentifier());
      assertEquals((-2080), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.8056840858265004
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesLatency(638);
      advancedSettings0.setBacklog(0);
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setClientSocketTrafficClass("");
      assertEquals(1, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.326793811203479
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("4<kuO(|t");
      advancedSettings0.toXML("VLUU>]{ou=n7#]k'4");
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.841797707406078
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setPerformancePreferencesLatency(638);
      advancedSettings0.setBacklog(0);
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite(1);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.toXML("ISO-8859-1");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-983));
      advancedSettings0.setSocketLinger((-983));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize((-983));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-983), int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.26381679241522
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-403));
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize((-403));
      advancedSettings0.setByteBufferSize((-1060));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger((-1060));
      advancedSettings0.setPerformancePreferencesConnectionTime(3562);
      advancedSettings0.setSocketLinger(3562);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize(3562);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setSocketLinger((-513));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesLatency(3562);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth(3562);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(7);
      advancedSettings0.setByteBufferSize(7);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(7, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4430947416742654
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.toXML("\"");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize((-1297));
      advancedSettings1.setClientSocketReceiveBufferSize(10);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.toXML("\"<advanced-settings>\n\"\t<charset>ISO-8859-1</charset>\n\"\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\"\t<byte-buffer-size>65536</byte-buffer-size>\n\"\t<backlog>0</backlog>\n\"\t<socket-linger>-1</socket-linger>\n\"\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\"\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\"\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\"\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\"\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\"\t<performance-preferences-latency>0</performance-preferences-latency>\n\"\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\"\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n\"\t<client-socket-send-buffer-size>10</client-socket-send-buffer-size>\n\"</advanced-settings>\n");
      advancedSettings2.getUseDirectByteBuffer();
      advancedSettings0.setByteBufferSize(6);
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals(10, advancedSettings1.getClientSocketReceiveBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.925863762875187
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize((-2394));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-3098));
      advancedSettings0.getCharset();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("(S9B+RgJT-9.@.`X");
      advancedSettings0.setPerformancePreferencesLatency((-3098));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-1466));
      advancedSettings0.setDebugNonBlockingMode(true);
      assertEquals("(S9B+RgJT-9.@.`X", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketTrafficClass("");
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.004692434434373
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(346);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setSocketLinger((-2317));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientSocketReceiveBufferSize(3633);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(346, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-53));
      advancedSettings0.setPerformancePreferencesLatency((-53));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize((-1042));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-53), advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-53), int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.847642989259894
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-1159));
      advancedSettings0.setByteBufferSize(7);
      advancedSettings0.setClientSocketTrafficClass("A");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(7, advancedSettings0.getByteBufferSize());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.487634764824866
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(6);
      advancedSettings0.setClientSocketReceiveBufferSize(6);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML("");
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(6, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6220322287852307
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-1160);
      advancedSettings0.setBacklog((-1160));
      advancedSettings0.setClientSocketReceiveBufferSize((-1160));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientIdentifier("</client-socket-send-buffer-size>\n");
      int int1 = 0;
      advancedSettings0.setClientSocketSendBufferSize(0);
      int int2 = 531;
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-send-buffer-size>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-send-buffer-size>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, int0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(2919);
      advancedSettings0.setClientSocketSendBufferSize(2919);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setByteBufferSize(2433);
      advancedSettings0.getPerformancePreferencesLatency();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(2919, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1153));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setSocketLinger((-1153));
      int int0 = advancedSettings0.getSocketLinger();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1153), int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5303437581946024
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize((-681));
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketReceiveBufferSize((-3226));
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setByteBufferSize((-681));
      advancedSettings1.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      assertEquals((-681), advancedSettings0.getClientSocketSendBufferSize());
      
      String string0 = advancedSettings1.toXML("Kg'&A|");
      assertEquals("Kg'&A|<advanced-settings>\nKg'&A|\t<charset>ISO-8859-1</charset>\nKg'&A|\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\nKg'&A|\t<byte-buffer-size>65536</byte-buffer-size>\nKg'&A|\t<backlog>0</backlog>\nKg'&A|\t<socket-linger>-1</socket-linger>\nKg'&A|\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\nKg'&A|\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\nKg'&A|\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\nKg'&A|\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\nKg'&A|\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\nKg'&A|\t<performance-preferences-latency>0</performance-preferences-latency>\nKg'&A|\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\nKg'&A|\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\nKg'&A|</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.482410559484441
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(2918);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getUseDirectByteBuffer();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings1.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.toXML("");
      assertEquals(2918, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("jX`jk#Jmh9");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("jX`jk#Jmh9", string0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(346);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-4805));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize((-2650));
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(346, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("4");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 4
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }
}
