/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:27:32 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.util.xmlreader.DefaultDataMode;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0497978423100225
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTrusted(true);
      theClient0.setMaxAuthTry(437);
      theClient0.getSocket();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[0];
      data0.setPassword(byteArray0);
      byte[] byteArray1 = new byte[0];
      data0.setUsername((String) null);
      data0.setPassword(byteArray1);
      data0.setPassword(byteArray1);
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      data0.setLastAsked((String) null);
      data0.setPassword(byteArray1);
      theClient0.setClientData(data0);
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientData();
      System.setCurrentTimeMillis(437);
      theClient0.toString();
      System.setCurrentTimeMillis(437);
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      assertEquals(437, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(1102);
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.322102232945105
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTry(0);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxAuthTry(1059);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      theClient0.getClientCommandHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getMaxAuthTry();
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientData();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Max Connection Blocking)}", string0);
      
      theClient0.getClientCommandHandler();
      theClient0.setMaxConnectionMsg("{TheClient ");
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      QuickServer quickServer0 = new QuickServer("");
      quickServer0.setName("aA>}vO[Yv=TVo~(q4]");
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      theClient0.getClientObjectHandler();
      theClient0.setTimeoutMsg("");
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1797));
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      defaultClientEventHandler0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.setMaxConnectionMsg(":0TkBK#es=kFJyjcC");
      QuickServer quickServer0 = new QuickServer("");
      quickServer0.setMaxAuthTry((-1797));
      DefaultDataMode defaultDataMode0 = new DefaultDataMode();
      quickServer0.setDefaultDataMode(defaultDataMode0);
      theClient0.setServer(quickServer0);
      theClient0.setMaxAuthTry(1);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient0.toString();
      theClient0.getClientCommandHandler();
      theClient0.getServer();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      TheClient theClient2 = new TheClient();
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxAuthTryMsg("~8Li2)");
      theClient1.getClientWriteHandler();
      theClient1.setMaxAuthTry(1845);
      TheClient theClient3 = new TheClient();
      theClient3.getMaxAuthTryMsg();
      theClient3.getClientCommandHandler();
      theClient2.getSocketChannel();
      theClient1.getClientCommandHandler();
      ClientEvent clientEvent1 = ClientEvent.CLOSE_CON;
      theClient1.getSocketChannel();
      assertEquals(1845, theClient1.getMaxAuthTry());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1919211688441456
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientData();
      ClientEvent clientEvent0 = ClientEvent.RUN_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientCommandHandler();
      theClient0.setMaxConnectionMsg("{TheClient ");
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      QuickServer quickServer0 = new QuickServer("{TheClient ");
      quickServer0.setName("{TheClient ");
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.setServer(quickServer0);
      theClient0.setTimeout(0);
      theClient0.setTimeoutMsg("");
      theClient0.getServer();
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getTimeout());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1797));
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      defaultClientEventHandler0.setClientCommandHandler(commandHandler0);
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getMaxAuthTryMsg();
      DefaultClientEventHandler defaultClientEventHandler1 = new DefaultClientEventHandler();
      theClient1.setClientEventHandler(defaultClientEventHandler1);
      theClient0.getMaxAuthTry();
      theClient1.getClientCommandHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      assertEquals((-1797), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getMaxAuthTry();
      theClient0.getClientEventHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      int int0 = theClient1.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientCommandHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.setClientEventHandler(commandHandler0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: null}", string0);
      
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      int int0 = theClient0.getTimeout();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 0);
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4687044989586093
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientData();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.setClientData((ClientData) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      QuickServer quickServer0 = new QuickServer();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getSocket();
      theClient0.setServer(quickServer0);
      theClient0.toString();
      theClient0.getClientExtendedEventHandler();
      theClient0.setTrusted(false);
      theClient0.setServer(quickServer0);
      theClient0.getCommunicationLogging();
      theClient0.setCommunicationLogging(true);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getAuthenticator();
      TheClient theClient1 = new TheClient();
      theClient1.setAuthenticator((Authenticator) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.setKeepAlive(true);
      theClient0.setSocket(mockSocket0);
      theClient0.setClientEventHandler(commandHandler0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      theClient0.getClientCommandHandler();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setTimeout((-2146));
      Data data0 = new Data();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.toString();
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler(clientAuthenticationHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      int int0 = theClient0.getTimeout();
      assertEquals((-2146), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.setMaxAuthTryMsg("Error in makeDBObjectPool() : {0}");
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEvent();
      int int0 = theClient0.getTimeout();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 0);
      theClient0.setTimeoutMsg("\"");
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.125543816101745
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientData();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientCommandHandler();
      theClient0.setMaxConnectionMsg("{TheClient ");
      theClient0.getCommunicationLogging();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      QuickServer quickServer0 = new QuickServer("");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxConnectionMsg();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(0, int0);
      
      theClient0.getClientCommandHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(theClient0.getTrusted());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setMaxAuthTry(0);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setCommunicationLogging(true);
      theClient0.setMaxAuthTry(1059);
      theClient0.setCommunicationLogging(false);
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      TheClient theClient1 = new TheClient();
      theClient1.getMaxAuthTry();
      theClient1.getClientCommandHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertFalse(theClient0.getCommunicationLogging());
      
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      assertEquals(0, theClient1.getMaxAuthTry());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.262384640607128
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      CommandHandler commandHandler1 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientObjectHandler();
      theClient0.getSocketChannel();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.toString();
      theClient0.setMaxAuthTry(0);
      theClient0.getMaxAuthTryMsg();
      TheClient theClient1 = new TheClient();
      theClient1.getClientCommandHandler();
      theClient1.getSocketChannel();
      theClient0.getClientExtendedEventHandler();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientCommandHandler();
      theClient1.getClientEvent();
      System.setCurrentTimeMillis(0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.1218159503049137
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      theClient0.getClientEventHandler();
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getMaxAuthTry();
      theClient0.getSocketChannel();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getServer();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientEvent();
      theClient0.getTrusted();
      System.setCurrentTimeMillis(163L);
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getTrusted());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientEvent();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Not connected .. so returning ClientData and ClientHandler objects for : ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientWriteHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      theClient0.setTrusted(false);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.setClientEventHandler(commandHandler0);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler(clientAuthenticationHandler0);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getSocket();
      theClient0.setMaxAuthTryMsg("");
      TheClient theClient1 = new TheClient();
      theClient1.getClientAuthenticationHandler();
      theClient0.getClientAuthenticationHandler();
      TheClient theClient2 = new TheClient();
      TheClient theClient3 = new TheClient();
      theClient3.getClientBinaryHandler();
      theClient3.setClientBinaryHandler((ClientBinaryHandler) null);
      assertFalse(theClient3.getTrusted());
      assertTrue(theClient3.getCommunicationLogging());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("/secure/protocol", 3);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeout((-1));
      theClient0.getClientObjectHandler();
      assertEquals((-1), theClient0.getTimeout());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getSocketChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      theClient0.getSocketChannel();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientData();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler(0);
      blockingClientHandler0.getClientData();
      assertEquals("<ClientHandler-Pool#0-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientData((ClientData) null);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      theClient0.setTimeoutMsg("");
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }
}
