/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:17:33 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.1384119912942263
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      jSONObject0.optDouble("Expected '", 0.0);
      int int0 = (-2033);
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = new JSONObject("{}");
      try { 
        jSONObject0.get("m;sU9j7>sD%#t| ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m;sU9j7>sD%#t| \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.03603775908295
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "/";
      Short short0 = new Short((short) (-1256));
      JSONObject.valueToString(short0, 1259, 1259);
      String string1 = "' and instead saw '";
      jSONObject0.put("' and instead saw '", 105);
      JSONObject.quote("/");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 0 of /
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.4100004751111084
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0);
      linkedList0.add(float0);
      JSONObject jSONObject1 = jSONObject0.put("true", (Collection) linkedList0);
      JSONObject.getNames((Object) "true");
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt("true", linkedList0);
      String string0 = null;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6983454957339426
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0);
      Float float0 = new Float(0.0);
      Float.max((-2755), 2347);
      Object object0 = JSONObject.NULL;
      jSONObject0.has("MvGai8JI*:(");
      Long long0 = new Long(487L);
      jSONObject0.optDouble("Expected '", (-2086.017726272491));
      String[] stringArray0 = JSONObject.getNames((Object) "Expected '");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optLong("2A38uU:PUilrLi", (long) 2347);
      jSONObject1.put("A JSONArray text must start with '['", 121);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 1442.8101808137);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.664953245906652
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject2 = jSONObject0.put("] is not a JSONArray.", (double) (-2033));
      JSONObject.valueToString("Expected '", 83, 1);
      JSONObject jSONObject3 = jSONObject1.put("wheel.json.JSONException", 43);
      JSONObject.quote("istoJSONArray");
      jSONObject3.accumulate("}'4e]&n&D!o1_", "] is not a JSONArray.");
      jSONObject0.getInt("] is not a JSONArray.");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      JSONObject jSONObject4 = jSONObject2.put("Expected '", (Map) hashMap0);
      jSONObject4.optJSONObject("hDyl7le3];uj");
      assertEquals(5, jSONObject2.length());
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.570544868816941
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      String string0 = "";
      Integer integer0 = new Integer(833);
      Short short0 = new Short((short)5001);
      short short1 = (short)0;
      Short.compare((short)22, (short)22);
      Short.toUnsignedLong((short)22);
      try { 
        jSONObject1.append((String) null, short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.459487892880099
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      int int0 = 2347;
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      jSONObject0.accumulate("{}", "{}");
      String string0 = "";
      jSONObject0.put("", 0.0);
      try { 
        jSONObject0.getJSONObject("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.290664210654739
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      int int0 = (-291);
      JSONObject.valueToString((Object) null, (-291), (-291));
      Byte byte0 = new Byte((byte) (-48));
      try { 
        jSONObject0.accumulate((String) null, byte0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(181L);
      Long long1 = new Long(181L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = null;
      Boolean boolean0 = Boolean.FALSE;
      jSONObject0.putOpt((String) null, boolean0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(181L);
      Long long1 = new Long(181L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.441523507826231
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "true";
      int int0 = 2347;
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject.valueToString(jSONArray0, 61, 2347);
      Byte byte0 = new Byte((byte)58);
      JSONObject jSONObject1 = jSONObject0.accumulate("sQi]Fbz9F]WtIL^zL", jSONArray0);
      jSONObject1.put("}MK[g\"Df(HG", 1.0);
      jSONObject1.names();
      try { 
        jSONObject1.getBoolean("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.59513748674357
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) "/");
      int int0 = 1259;
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      jSONObject1.toString();
      String string0 = "gettoLowerCase";
      jSONObject0.optLong("gettoLowerCase");
      Object object0 = JSONObject.NULL;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5289348806063603
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(".");
      Boolean.compare(true, true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optDouble("j? u-}6s8kVv#9", 0.0);
      jSONObject0.optLong("j? u-}6s8kVv#9", (long) 0);
      String string0 = "gettoHexString";
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("j? u-}6s8kVv#9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"j? u-}6s8kVv#9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1507623978100163
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      Long long0 = new Long(388L);
      JSONObject.valueToString(linkedList0, 105, 105);
      JSONObject jSONObject1 = jSONObject0.put("C(n8G'K:vX6nK7&", 293);
      JSONObject.quote("C(n8G'K:vX6nK7&");
      Integer integer0 = new Integer(1259);
      jSONObject1.accumulate("[]", integer0);
      String string0 = "\\u";
      try { 
        jSONObject1.getInt(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.743289895409337
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0, 1639, 1639);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      Short.toUnsignedLong((short) (-3882));
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-3882));
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@0000000001", short0);
      jSONObject1.optLong("-2281.022.");
      jSONObject0.keys();
      Short.toUnsignedLong((short)54);
      String string0 = "\"\"";
      JSONObject.quote("\"\"");
      jSONObject0.accumulate("D;]P{Ul!o]#", short0);
      jSONObject1.toString();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONArray0.getJSONObject((short) (-3882));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-3882] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6856783029454037
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      int int0 = 2347;
      JSONObject.valueToString((Object) null, 2347, 2347);
      Byte byte0 = new Byte((byte)58);
      JSONObject jSONObject1 = jSONObject0.accumulate("null", byte0);
      JSONObject jSONObject2 = jSONObject1.put("Expected '", (double) (byte)58);
      jSONObject0.names();
      String string0 = null;
      try { 
        jSONObject2.getBoolean("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.625157740777414
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Long long0 = new Long(405L);
      JSONObject.valueToString((Object) null, 1259, 1259);
      JSONObject.valueToString("null", (-171), 32);
      jSONObject0.optJSONArray("cb*S[[pq*");
      jSONObject0.optString("Ks", "/");
      JSONObject jSONObject1 = new JSONObject((Object) "null");
      jSONObject1.isNull((String) null);
      JSONObject jSONObject2 = jSONObject0.put("x{|yX_*|TpnIH", (Object) null);
      jSONObject0.optString("Null key.", "oMzSCM(NQ|=9");
      jSONObject1.toJSONArray((JSONArray) null);
      assertEquals(3, jSONObject1.length());
      
      jSONObject2.optJSONObject("/");
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.890690167052503
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject2 = jSONObject0.put("", 0.0);
      JSONObject.valueToString((Object) null);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float((float) (-2033));
      Integer.getInteger("iswait", (Integer) null);
      hashMap0.put(float0, (Integer) null);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      hashMap0.putAll(hashMap1);
      jSONObject1.optInt("Expected '", (-1102));
      jSONObject1.optBoolean("{}", false);
      jSONObject2.optDouble("W/NDn9x.+FG!KvL@v");
      int int0 = jSONObject2.optInt("null");
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3815033445338534
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "/";
      JSONObject.getNames((Object) jSONObject0);
      Long long0 = new Long(405L);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONObject jSONObject1 = jSONObject0.put("toL", (Collection) linkedList0);
      JSONObject.getNames(jSONObject1);
      try { 
        jSONObject0.getDouble("K");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"K\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONObject0.write(stringWriter0);
      String string0 = "=(F.{/*";
      double double0 = (-803.0);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        writer0.write(charArray0, (-669), (-669));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6218421758732546
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) "/");
      Long long0 = new Long(388L);
      JSONObject.valueToString(long0, 1259, (-424));
      JSONObject.valueToString("1DS+h", 3304, (-424));
      JSONObject jSONObject1 = jSONObject0.put("1DS+h", 57);
      jSONObject0.optJSONArray("java.lang.Long@0000000002");
      jSONObject1.optString("/", "oMzSCM(NQ|=9");
      jSONObject0.isNull(">dm.*G4ov%C\"NZW+");
      jSONObject0.optString("\"java.lang.String@0000000003\"", "m:0");
      jSONObject1.toJSONArray((JSONArray) null);
      int int0 = jSONObject1.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5748467134904858
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.length();
      jSONObject0.toString();
      jSONObject0.optInt("{}");
      jSONObject0.optBoolean("{}");
      jSONObject0.optBoolean("I=i~ix");
      Float float0 = new Float((float) 0);
      JSONObject jSONObject1 = jSONObject0.append("I=i~ix", float0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.958541141784395
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      String string0 = "true";
      stringArray0[0] = "true";
      stringArray0[1] = "}+L7!g[,=%hGk58au";
      Float.max(1935.2388F, (-2755));
      int int0 = 92;
      try { 
        jSONObject0.get(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6101597165658403
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      JSONObject.valueToString("}+L7!g[,=%h2Gk58au", 1884, 1259);
      Double double0 = new Double(1054.29520451464);
      JSONObject.valueToString(double0, (-171), 111);
      jSONObject0.optJSONArray("Expected a ',' or '}'");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optString("}+L7!g[,=%h2Gk58au", "}+L7!g[,=%h2Gk58au");
      Object object0 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject2.isNull("}+L7!g[,=%h2Gk58au");
      Integer integer0 = new Integer(111);
      jSONObject0.put("\"java.lang.String@0000000002\"", (Object) integer0);
      jSONObject2.optString("}+L7!g[,=%h2Gk58au", "java.lang.Double@0000000003");
      jSONObject1.toJSONArray((JSONArray) null);
      JSONObject jSONObject3 = jSONObject1.optJSONObject("java.lang.Double@0000000003");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.604544231712876
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float((float) (-2033));
      JSONObject.valueToString(float0, 506, (-2033));
      jSONObject0.accumulate("Expected '", "java.lang.Float@0000000002");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Expected '";
      stringArray0[1] = "Expected '";
      JSONObject jSONObject1 = new JSONObject(linkedList0, stringArray0);
      jSONObject1.toJSONArray(jSONArray0);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float1 = new Float((float) (-2033));
      String string0 = "iswait";
      Integer integer0 = null;
      String string1 = "p8iXa\"E#kUt{%zO0N<w";
      try { 
        Integer.decode("java.lang.Float@0000000002");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Float@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2047766612725876
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      jSONObject1.names();
      JSONObject jSONObject2 = new JSONObject((Object) "{}");
      jSONObject0.toString();
      jSONObject2.optString("{}");
      jSONObject2.optBoolean("LPvBE-Ko%&", true);
      jSONObject1.optDouble((String) null);
      jSONObject0.optInt("rev");
      String string0 = jSONObject1.optString("LPvBE-Ko%&");
      assertEquals("", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5367171294801807
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      String string1 = "";
      jSONObject0.put("", 0.0);
      JSONObject jSONObject2 = new JSONObject((Object) "{}");
      String string2 = "in";
      try { 
        jSONObject1.getJSONArray("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9249598560236922
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("");
      Short short0 = new Short((short)5001);
      Short.compare((short)0, (short)0);
      Short.toUnsignedLong((short)61);
      JSONObject jSONObject1 = jSONObject0.append("", short0);
      jSONObject1.optLong("");
      jSONObject1.keys();
      jSONObject1.optJSONArray("^_cS@ZG$_MRoQ");
      String string0 = JSONObject.doubleToString(0L);
      JSONObject.quote((String) null);
      jSONObject0.toString();
      Integer integer1 = new Integer(8);
      String string1 = JSONObject.numberToString(short0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      String string0 = "true";
      stringArray0[0] = "true";
      stringArray0[1] = "}+L7!g[,=%hGk58au";
      stringArray0[2] = "D_!a>U";
      stringArray0[3] = "\"\"";
      jSONObject0.names();
      stringArray0[4] = "Expected a ',' or ']'";
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.801569811501182
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Long long0 = new Long(54L);
      JSONObject.valueToString("istoLowerCase", 78, 1639);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "-h=Q";
      JSONObject.doubleToString((-1.0));
      int int0 = 43;
      String string1 = null;
      try { 
        jSONObject0.put((String) null, 15);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8387783625819853
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      double double0 = 1.0;
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float.sum(433, 433);
      jSONObject0.optInt("");
      Object object0 = new Object();
      JSONObject.getNames(object0);
      jSONObject0.optInt("");
      String string0 = "true";
      try { 
        jSONObject0.getJSONObject("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.9697881365984835
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = jSONObject0.accumulate("wheel.json.JSONObject$1", "Expected '");
      JSONObject jSONObject2 = jSONObject1.put("", 0.0);
      jSONObject1.names();
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      String string0 = jSONObject2.toString();
      JSONObject jSONObject4 = new JSONObject();
      jSONObject4.put("getsplit", (Object) jSONObject2);
      jSONObject0.isNull("wheel.json.JSONObject$1");
      Integer integer0 = new Integer((-143));
      Object object0 = JSONObject.NULL;
      String string1 = JSONObject.valueToString(object0, (-143), 2750);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.474019990929154
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1DS+h";
      stringArray0[1] = "ZB3>C}`(6S~";
      stringArray0[2] = "x";
      String[] stringArray1 = JSONObject.getNames((Object) "/");
      stringArray0[3] = "/";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      jSONObject0.optInt("ZB3>C}`(6S~");
      JSONObject jSONObject2 = jSONObject0.put("ZB3>C}`(6S~", false);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.476119343317517
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "}+L7!g[,=%hGk58au";
      stringArray0[2] = "D_!a>U";
      stringArray0[3] = "\"\"";
      stringArray0[4] = "Expected a ',' or ']'";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optInt("\"\"");
      Integer integer0 = new Integer(9);
      hashMap0.put(integer0, jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("}+L7!g[,=%hGk58au", true);
      try { 
        jSONObject2.getLong("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2900951976233848
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      jSONObject0.optDouble("Expected '", (-1925.887));
      int int0 = (-2033);
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      jSONObject0.accumulate("{}", "{}");
      try { 
        jSONObject0.get("m;sU9j7>sD%#t| ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m;sU9j7>sD%#t| \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.571933779452227
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7269306889616294
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      stringArray0[1] = "}+L7!g[,=%hGk58au";
      stringArray0[2] = "D_!a>U";
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Double double0 = new Double((-2170.87710762));
      JSONObject jSONObject2 = new JSONObject(double0);
      jSONObject1.toString();
      Object object0 = new Object();
      JSONObject jSONObject3 = jSONObject0.put("{}", object0);
      jSONObject1.isNull("D_!a>U");
      jSONObject3.toString(13, 13);
      jSONObject0.optJSONObject("eQE?iD7=");
      jSONObject1.optLong("\t", 3506L);
      JSONObject jSONObject4 = jSONObject3.put("", true);
      assertFalse(jSONObject4.equals((Object)jSONObject2));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(23);
      Integer.getInteger("Nb;|aevp");
      JSONObject.valueToString((Object) null, 23, 1884);
      int int0 = (-1573);
      stringWriter0.write("UO2D:");
      int int1 = (-1459);
      try { 
        Integer.parseUnsignedInt("Nb;|aevp");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Nb;|aevp\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.529022782386111
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      String string1 = "] is not a JSONArray.";
      jSONObject0.put("] is not a JSONArray.", (double) (-2033));
      try { 
        jSONObject1.getBoolean("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.9772080075937244
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("");
      String string0 = "";
      Short short0 = new Short((short)5001);
      short short1 = (short)0;
      Short.compare((short)0, (short)0);
      Short.toUnsignedLong((short)61);
      jSONObject0.append("", short0);
      Long long0 = new Long(433);
      jSONObject0.optDouble("", (double) 433);
      JSONObject.getNames((Object) integer0);
      String string1 = "joi";
      JSONTokener jSONTokener0 = new JSONTokener("joi");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of joi
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9380731042556936
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      String string0 = JSONObject.valueToString(jSONObject0, 2347, 2347);
      jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      jSONObject1.names();
      JSONObject jSONObject2 = new JSONObject((Object) "{}");
      jSONObject0.toString();
      jSONObject0.put("", (Object) jSONObject2);
      jSONObject2.isNull("{\"java.lang.String@0000000003\":java.lang.Double@0000000004,\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}");
      Integer integer0 = new Integer(2347);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3611220692787604
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(18);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(18);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      Float float1 = new Float(0.0F);
      Integer.getInteger("!0kT cTcoLU)9Xp;", (Integer) null);
      Float float2 = new Float(0.0);
      Float.min((-1609.82F), 0.0F);
      hashMap1.put(float2, (Integer) null);
      HashMap<Float, Integer> hashMap2 = new HashMap<Float, Integer>();
      hashMap2.putAll(hashMap1);
      jSONObject0.optInt("getdoubleToRawLongBits", 18);
      jSONObject0.optDouble("12jK");
      jSONObject1.toString(8448, 18);
      JSONObject jSONObject2 = jSONObject0.optJSONObject("] not found.");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3792948491319272
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.valueToString(long0, 1639, 1639);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("Unterminated string", (Collection) linkedList0);
      jSONObject1.optJSONArray("java.lang.Long@0000000001");
      JSONObject jSONObject2 = jSONObject0.put("java.lang.Long@0000000001", 5293.8807);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5880785274790163
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("R.NR$ia(oNSU1^onBrr", (Object) null);
      JSONObject jSONObject2 = jSONObject0.put("", (-1.0));
      String string0 = "gettoString";
      jSONObject2.optBoolean("gettoString", true);
      jSONObject1.optInt("");
      try { 
        jSONObject2.getJSONArray("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6762473350817797
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      String string0 = "}+L7!g[,=%hGk58au";
      stringArray0[1] = "}+L7!g[,=%hGk58au";
      stringArray0[2] = "D_!a>U";
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optJSONObject("}+L7!g[,=%hGk58au");
      Float float0 = new Float((-2170.87710762));
      Short short0 = new Short((short)8192);
      JSONObject.valueToString(jSONObject0);
      int int0 = 2450;
      try { 
        jSONObject1.getBoolean("\"BKH,1@Q_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"BKH,1@Q_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7989710008093636
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) "/");
      Long long0 = new Long(388L);
      JSONObject.valueToString(long0, 1259, (-424));
      JSONObject.valueToString("1DS+h", 1259, (-424));
      String[] stringArray1 = new String[2];
      stringArray1[0] = "x";
      stringArray1[1] = "java.lang.Long@0000000002";
      JSONObject jSONObject1 = new JSONObject("oMzSCM(jNQ|=9", stringArray1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      jSONObject2.optBoolean("ZB3>C}`(6S~", true);
      jSONObject0.optDouble("R#xGy,fE\u0005BXle)4 r");
      jSONObject2.optInt("\f");
      try { 
        jSONObject1.getLong("/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3623200092231245
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("R.NR$ia(oNSU1^onBrr", (Object) null);
      String string0 = "";
      String string1 = "gettoString";
      jSONObject0.optBoolean("gettoString", true);
      jSONObject1.optInt("");
      try { 
        jSONObject0.getJSONArray("e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"e\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8904593748332101
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      String string0 = "true";
      stringArray0[0] = "true";
      stringArray0[1] = "}+L7!g[,=%hGk58au";
      stringArray0[2] = "D_!a>U";
      stringArray0[3] = "\"\"";
      String string1 = "wheel.json.JSONTokener";
      jSONObject0.optDouble("wheel.json.JSONTokener");
      jSONObject0.optInt("");
      jSONObject0.optJSONArray("\"\"");
      try { 
        jSONObject0.getInt("D_!a>U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D_!a>U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.427598241338051
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      Float float0 = new Float(0.0);
      Float float1 = new Float((float) 2347);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      jSONObject0.optInt("-%$7#IoQ*yX", 2347);
      jSONObject0.optBoolean("null", true);
      try { 
        Integer.decode("D_!a>U");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"D_!a>U\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9660741153739707
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-4277), (-4277));
      jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      jSONObject1.names();
      JSONObject jSONObject2 = new JSONObject((Object) "{}");
      jSONObject1.optInt("istoUpperCase");
      jSONObject2.optString("lm.", "");
      jSONObject1.isNull("W\"eLc{noV");
      jSONObject1.optString(":", ":");
      try { 
        jSONObject0.getLong("lm.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"lm.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1999408269926755
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject0 = new JSONObject((Object) "1");
      JSONObject jSONObject1 = jSONObject0.put("1", (-1997L));
      jSONObject0.put("Substring bounds error", (Collection) null);
      jSONObject0.remove("JSON does not allow non-finite numbers.");
      jSONObject1.putOpt("JSONArray initial value should be a string or collection or array.", (Object) null);
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      Long long0 = new Long(181L);
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      long long0 = 181L;
      Long long1 = new Long(181L);
      Long long2 = new Long(181L);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      String string0 = null;
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.8206949809246367
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(817L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Expected a ',' or ']'";
      stringArray0[1] = "D_!a>U";
      stringArray0[2] = ",Gkc*EEg]:Q*/";
      stringArray0[3] = "Expected a ',' or ']'";
      stringArray0[4] = "Expected '";
      stringArray0[5] = "Expected a ',' or ']'";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject0.getJSONObject("D_!a>U");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"D_!a>U\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.0105741759556635
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      String string0 = JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      jSONObject1.put("Expected '", true);
      JSONObject jSONObject2 = jSONObject0.put("", 0.0);
      jSONObject0.names();
      jSONObject2.names();
      JSONObject jSONObject3 = new JSONObject((Object) "{}");
      jSONObject0.toString();
      JSONObject jSONObject4 = jSONObject0.put("", (Object) jSONObject3);
      jSONObject3.isNull("{\"java.lang.String@0000000005\":java.lang.Double@0000000006,\"java.lang.String@0000000002\":\"java.lang.String@0000000002\",\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}");
      Integer integer0 = new Integer(2347);
      jSONObject3.toString(44);
      String string1 = JSONObject.valueToString(jSONObject4, 2, 44);
      assertEquals(3, jSONObject0.length());
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1257879010714897
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double double0 = (-2281.022);
      JSONObject.doubleToString((-2281.022));
      JSONObject jSONObject0 = new JSONObject((Object) "-2281.022");
      try { 
        jSONObject0.getJSONArray(",OpKzA9+&iO\"G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",OpKzA9+&iO\\\"G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.836074176309673
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString("Expected '", 78, 78);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      boolean boolean0 = true;
      String string0 = "h2#)D$o}5Ok7:";
      try { 
        jSONObject1.getInt("num");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"num\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.9848939316685787
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      String string0 = JSONObject.valueToString(jSONObject0, 2347, 2347);
      assertEquals("{}", string0);
      
      jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject1 = jSONObject0.put("", 0.0);
      jSONObject1.names();
      JSONObject jSONObject2 = new JSONObject((Object) "{}");
      String string1 = jSONObject0.toString();
      assertNotNull(string1);
      
      jSONObject0.put("", (Object) jSONObject2);
      boolean boolean0 = jSONObject2.isNull("{\"java.lang.String@0000000003\":java.lang.Double@0000000004,\"java.lang.String@0000000002\":\"java.lang.String@0000000002\"}");
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2347);
      jSONObject2.toString(44);
      assertEquals(3, jSONObject2.length());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "null";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0116585526031
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Float float0 = new Float((-2089.5F));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "n\"QU6fFdG's";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.putOpt("", "n\"QU6fFdG's");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "vwI ";
      stringArray0[2] = "] is not a JSONArray.";
      stringArray0[3] = "";
      stringArray0[4] = "GF8[<mPwClu";
      stringArray0[5] = "LNz5";
      stringArray0[6] = "";
      stringArray0[7] = "] is not a JSONObject.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("", 338);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.363674929373517
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, (-1809), 27);
      HashMap<JSONArray, Byte> hashMap1 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap1);
      jSONObject0.optBoolean("@");
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("[]");
      jSONObject1.put("va", (Collection) linkedList0);
      String string1 = jSONObject1.getString("va");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.287077109493881
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expected '";
      double double0 = new Double((-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      JSONObject.valueToString((Object) null, 2347, 2347);
      byte byte0 = (byte)58;
      Byte byte1 = new Byte((byte)58);
      JSONObject jSONObject1 = jSONObject0.accumulate("null", byte1);
      try { 
        jSONObject1.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.354526612595311
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString("1DS+h", 1259, 1259);
      JSONObject jSONObject1 = jSONObject0.put("oMzSCM(jNQ|=9", 43);
      JSONObject.quote("ZB3>C}`(6S~");
      jSONObject0.accumulate("oMzSCM(jNQ|=9", "\"ZB3>C}`(6S~\"");
      jSONObject1.optInt("getjoin");
      jSONObject1.optInt((String) null, 17);
      Float float0 = new Float((float) 0);
      String string0 = "p<";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9621693083585323
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      stringArray0[1] = "}+L7!g[,=%hGk58au";
      stringArray0[2] = "D_!a>U";
      stringArray0[3] = "\"\"";
      JSONObject jSONObject0 = new JSONObject((Object) "}+L7!g[,=%hGk58au");
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Short short0 = new Short((short)536);
      Short.toUnsignedInt((short)536);
      JSONObject.testValidity(short0);
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.6576820559528143
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      jSONObject0.put("", 0.0);
      JSONObject.valueToString((Object) null);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float((float) (-2033));
      Integer.getInteger("iswait", (Integer) null);
      hashMap0.put(float0, (Integer) null);
      HashMap<Float, Integer> hashMap1 = new HashMap<Float, Integer>();
      hashMap0.putAll(hashMap1);
      jSONObject1.optInt("Expected '", (-1102));
      Float float1 = new Float((float) (-2033));
      jSONObject1.putOpt("Expected '", float1);
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6981176467513301
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      Float float0 = new Float(0.0);
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      try { 
        jSONObject0.getJSONArray("}+L7!g[,=%h2Gk58au");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}+L7!g[,=%h2Gk58au\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.351484865389781
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "toS";
      stringArray0[1] = "wheel.json.JSONObject";
      stringArray0[2] = "to";
      stringArray0[3] = "FcoXR?}";
      stringArray0[4] = "Expected '";
      stringArray0[5] = "5";
      stringArray0[6] = "re";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("[", (-1L));
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject(jSONArray1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "T-";
      stringArray0[1] = "";
      stringArray0[2] = "3bp_A^e%";
      stringArray0[3] = "H/1B]$mEGFIh) Z\"";
      stringArray0[4] = "";
      stringArray0[5] = "z51)=J*u";
      stringArray0[6] = "]ep%>75}tU38p_";
      stringArray0[7] = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer0 = new Integer(2265);
      hashMap0.put(integer0, jSONObject0);
      try { 
        jSONObject0.getInt("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("");
      Short.compare((short)0, (short)0);
      long long0 = new Integer((short)61);
      Short.toUnsignedLong((short) (-3874));
      JSONObject.quote("");
      String string0 = "";
      Float float1 = new Float((float) 61);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "", 407, (-2493));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.894365115251842
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("Expected '", (-1925.887));
      JSONObject.valueToString(jSONObject0, 2347, 2347);
      jSONObject0.optInt((String) null);
      Short short0 = new Short((short)59);
      Short.compare((short)3717, (short)59);
      JSONObject jSONObject1 = jSONObject0.append("K}v<U", "[]");
      jSONObject1.optLong("[]");
      Short.toUnsignedLong((short)0);
      JSONObject.quote("");
      JSONObject jSONObject2 = jSONObject0.accumulate("gettrim", jSONObject1);
      jSONObject0.toString();
      String string0 = "R+m</[P(]g%d]t.";
      try { 
        jSONObject2.getInt("R+m</[P(]g%d]t.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"R+m<\\/[P(]g%d]t.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.277095400555787
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(1L);
      Byte byte0 = new Byte((byte) (-93));
      JSONObject.valueToString(byte0, 1639, 2209);
      HashMap<JSONArray, Byte> hashMap0 = new HashMap<JSONArray, Byte>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject0.put("getsplit", (Collection) linkedList0);
      assertFalse(jSONObject2.equals((Object)jSONObject1));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.476941678592489
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Long long0 = new Long(787L);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "64]WM<j 9,\":Te";
      jSONObject0.optLong("64]WM<j 9,\":Te");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-1843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.708261592648412
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short) (-1256));
      JSONObject.valueToString(short0, 1259, 1259);
      jSONObject0.put("' and instead saw '", 105);
      jSONObject0.getInt("' and instead saw '");
      HashMap<Short, Integer> hashMap0 = new HashMap<Short, Integer>();
      jSONObject0.put("java.lang.Short@0000000002", (Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("/");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.7360569430899
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("");
      Short short0 = new Short((short)5001);
      Short.compare((short)0, (short)0);
      long long0 = new Integer(433);
      JSONObject jSONObject1 = jSONObject0.append("F", short0);
      jSONObject1.optLong("");
      jSONObject1.keys();
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject2 = jSONObject0.put("", (Collection) linkedList0);
      jSONObject2.optInt("nZu*Q31!YB");
      JSONObject jSONObject3 = new JSONObject((Object) "F");
      jSONObject3.optString("wheel.json.JSONObject$Null", "nZu*Q31!YB");
      jSONObject1.isNull("-<Fl>1!):Gw");
      jSONObject1.optString("null", "null");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.0429943885300577
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = new Integer(433);
      Short short0 = new Short((short)5001);
      Short.toUnsignedLong((short)61);
      JSONObject jSONObject1 = jSONObject0.append("", short0);
      jSONObject1.optLong("");
      jSONObject1.keys();
      JSONObject.quote("");
      jSONObject1.accumulate("", "\"\"");
      try { 
        jSONObject0.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.931900764160856
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = new Double((-1925.887));
      JSONObject.valueToString(jSONObject0, (-2033), (-2033));
      JSONObject jSONObject1 = jSONObject0.accumulate("{}", "{}");
      JSONObject jSONObject2 = jSONObject0.put("", 0.0);
      jSONObject2.names();
      JSONObject jSONObject3 = new JSONObject((Object) "{}");
      String string0 = "] is not a JSONObject.";
      JSONObject jSONObject4 = new JSONObject(jSONObject3);
      Integer integer0 = new Integer((-2033));
      jSONObject0.accumulate("{}", integer0);
      jSONObject4.optDouble("");
      jSONObject1.optInt("{}");
      jSONObject4.optDouble("] is not a JSONObject.");
      jSONObject0.accumulate("f", jSONObject4);
      jSONObject0.optJSONArray("{}");
      try { 
        jSONObject3.getInt("O^,7iA.6T'\" 8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O^,7iA.6T'\\\" 8\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.3843764580818716
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1DS+h";
      stringArray0[1] = "ZB3>C}`(6S~";
      stringArray0[2] = "x";
      stringArray0[3] = "/";
      stringArray0[4] = "eziKyeL";
      stringArray0[5] = "`'(%q(7v6{y65q";
      jSONObject0.optBoolean("}@]:$&'VF @,1v&", true);
      jSONObject0.accumulate("}@]:$&'VF @,1v&", "ZB3>C}`(6S~");
      jSONObject0.optDouble("z YorbbMI'w", 0.0);
      jSONObject0.optDouble("Ixl0M\\j\")Lh?Kr]J");
      int int0 = jSONObject0.optInt("L`F6]U0<a~");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.7795296095364648
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Float float0 = new Float((double) 1227L);
      Short short0 = new Short((short)12);
      Short.toUnsignedInt((short)61);
      JSONObject.valueToString(short0);
      Short.toUnsignedLong((short)12);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0, (-877), (short)48);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.4497927527284427
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      float float0 = 0.0F;
      jSONObject0.put("", (Collection) linkedList0);
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.701316305940921
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "1DS+h";
      stringArray0[1] = "ZB3>C}`(6S~";
      stringArray0[2] = "x";
      stringArray0[3] = "/";
      stringArray0[4] = "eziKyeL";
      stringArray0[5] = "`'(%q(7v6{y65q";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getDouble("_r.^n1tj*8:f6]e-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_r.^n1tj*8:f6]e-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.4976355562579444
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Float float0 = new Float(1.0);
      Float.sum(922.0F, 433);
      Integer integer0 = new Integer(433);
      hashMap0.put(float0, integer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optInt("");
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (-1L));
      jSONObject0.optLong("", 1L);
      jSONObject1.optJSONObject("");
      Float float1 = new Float(1836.919922);
      Short short0 = new Short((short)5001);
      jSONObject0.optInt("E#$F#I:4$`DgIKNC", 58);
      jSONObject0.optBoolean("E#$F#I:4$`DgIKNC", true);
      String string1 = "issubstring";
      try { 
        jSONObject0.getInt("E#$F#I:4$`DgIKNC");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"E#$F#I:4$`DgIKNC\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>(46, 46);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(0.0F);
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>(18);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(18);
      hashMap0.clone();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("}+L7!g[,=%h2Gk58au");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }+L7!g[,=%h2Gk58au
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.remove("DZ");
      String string0 = "K.xH1Kx";
      HashMap<Long, Long> hashMap0 = new HashMap<Long, Long>();
      long long0 = (-1842L);
      Long long1 = new Long((-1842L));
      long long2 = 0L;
      try { 
        Long.parseUnsignedLong("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
