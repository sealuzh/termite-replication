/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:17:31 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.color.ICC_Profile;
import java.awt.event.HierarchyListener;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.RenderedImage;
import java.awt.image.renderable.ParameterBlock;
import java.net.Proxy;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import javax.media.jai.OperationRegistry;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.media.jai.operator.MagnitudeDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JLayeredPane;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import javax.swing.plaf.basic.BasicComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.586577333232116
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Object object0 = new Object();
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements((-1), (Collection<VisualPageListItem>) treeSet0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) treeSet0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1));
      visualListModel0.getSize();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      ArrayDeque<VisualPageListItem> arrayDeque1 = arrayDeque0.clone();
      visualListModel0.addAllElements((-1), (Collection<VisualPageListItem>) arrayDeque1);
      visualListModel0.prependAllElements(stack0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>(0, 110);
      visualListModel0.clearData();
      visualListModel0.subList((-29), 1267, true);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(3, visualListModel0.getSize());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.364871333578161
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.prependAllElements(priorityQueue0);
      priorityQueue0.clear();
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      Vector<Object> vector1 = new Vector<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(vector1);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      jComboBox0.removeItem(priorityQueue0);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox0.setName("}ai/TtL(D|_<8Dm");
      jComboBox1.firePopupMenuWillBecomeInvisible();
      visualListModel0.removeListDataListener(jComboBox1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.undeleteElements(intArray0);
      visualListModel0.prependAllElements(vector0);
      visualListModel0.removeElements(558, (int) (byte)0, false);
      visualListModel0.removeElements((-5657), 360, false);
      assertEquals(4, visualListModel0.getSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.165449656180468
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.prependAllElements(priorityQueue0);
      priorityQueue0.clear();
      int[] intArray0 = new int[0];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      vector0.removeAll(priorityQueue0);
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      vector0.retainAll(priorityQueue0);
      vector0.insertElementAt((VisualPageListItem) null, (byte)0);
      visualListModel0.getSize();
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.878666739983584
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1310);
      intArray0[1] = (-1310);
      intArray0[2] = (-1310);
      intArray0[3] = (-1310);
      intArray0[4] = (-1310);
      intArray0[5] = (-1310);
      intArray0[6] = (-1310);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.subList((-1310), 1623);
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.removeElements(intArray1, false);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.getSize();
      visualListModel0.addAllElements((-1310), (Collection<VisualPageListItem>) null);
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[0] = 0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s]");
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) null;
      HashMap<RenderingHints.Key, String> hashMap0 = new HashMap<RenderingHints.Key, String>();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      vector0.insertElementAt((VisualPageListItem) null, 0);
      visualListModel0.getSize();
      visualListModel0.addAllElements((-3008), (Collection<VisualPageListItem>) vector0);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector1 = new Vector<Object>();
      parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector1, vector1);
      parameterBlock1.getSources();
      Vector<Object> vector2 = new Vector<Object>();
      ParameterBlock parameterBlock2 = new ParameterBlock((Vector<Object>) null, vector2);
      ParameterBlock parameterBlock3 = new ParameterBlock();
      parameterBlock2.add('G');
      parameterBlock0.getSources();
      ParameterBlock parameterBlock4 = new ParameterBlock();
      parameterBlock1.getParameters();
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3666967846580786
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      vector0.clear();
      visualListModel0.getElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.getSize();
      visualListModel0.getValidElements();
      visualListModel0.getElements();
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3666967846580786
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      vector0.clear();
      visualListModel0.getElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.getSize();
      visualListModel0.getValidElements();
      visualListModel0.getElements();
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<Proxy.Type> vector0 = new Vector<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      vector0.add(proxy_Type0);
      priorityQueue0.retainAll(vector0);
      priorityQueue0.clear();
      int[] intArray0 = new int[0];
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int[] intArray1 = new int[1];
      intArray1[0] = 0;
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      String string0 = "Vw[";
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(90, (-1), 90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 90
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.165449656180468
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      intArray0[0] = 0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s]");
      Object[] objectArray0 = new Object[4];
      objectArray0[3] = (Object) null;
      visualListModel0.getElementAt(0);
      objectArray0[2] = null;
      objectArray0[3] = (Object) 0;
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(objectArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      visualListModel0.addListDataListener(jComboBox0);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0, vector0);
      Vector<Object> vector1 = parameterBlock0.getSources();
      Vector<Object> vector2 = new Vector<Object>();
      BasicComboBoxEditor basicComboBoxEditor0 = new BasicComboBoxEditor();
      vector1.add((Object) basicComboBoxEditor0);
      parameterBlock0.getSources();
      Vector<Object> vector3 = new Vector<Object>();
      visualListModel0.subList(0, 0, true);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.450507848988659
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements(683, (Collection<VisualPageListItem>) treeSet0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) treeSet0);
      visualListModel0.addElementAt((VisualPageListItem) null, 568);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.addElementAt((VisualPageListItem) null, 568);
      visualListModel2.elementChanged((VisualPageListItem) null);
      visualListModel2.updateElementAt((-3182), (VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-20));
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0, vector0);
      Vector<Object> vector1 = parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector1);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")gO=+#i[I9");
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(1);
      visualListModel0.moveDownIndex(0);
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0, vector0);
      Vector<Object> vector1 = parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector1);
      Vector<Object> vector2 = parameterBlock1.getSources();
      Vector<Object> vector3 = new Vector<Object>();
      ParameterBlock parameterBlock2 = new ParameterBlock(vector2, vector0);
      Vector<Object> vector4 = parameterBlock1.getSources();
      Vector<Object> vector5 = new Vector<Object>();
      ParameterBlock parameterBlock3 = new ParameterBlock(vector5, vector1);
      ParameterBlock parameterBlock4 = new ParameterBlock(vector4, vector2);
      Object object0 = visualListModel0.getElementAt(1);
      assertNull(object0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addElement((VisualPageListItem) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) treeSet0);
      visualListModel0.removeElements(1488, 34, false);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-3990));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3990
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-3692);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-3692));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3692
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) defaultComboBoxModel0;
      objectArray0[2] = (Object) defaultComboBoxModel0;
      objectArray0[5] = (Object) defaultComboBoxModel0;
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) defaultComboBoxModel0;
      objectArray1[3] = (Object) visualListModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel1 = new DefaultComboBoxModel<Object>(objectArray1);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel1);
      Object object1 = new Object();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jComboBox1.addHierarchyListener((HierarchyListener) null);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      jComboBox1.removeItem(proxy_Type0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JComboBox<Object> jComboBox2 = new JComboBox<Object>(defaultComboBoxModel1);
      jComboBox2.firePopupMenuWillBecomeInvisible();
      visualListModel0.removeListDataListener(jComboBox2);
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.undeleteElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7174727810340702
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(1);
      visualListModel0.moveDownIndex(0);
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0, vector0);
      Vector<Object> vector1 = parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector1);
      Vector<Object> vector2 = parameterBlock0.getSources();
      Vector<Object> vector3 = new Vector<Object>();
      ParameterBlock parameterBlock2 = new ParameterBlock(vector2, vector3);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      parameterBlock0.getSources();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-72);
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte) (-46);
      byteArray0[6] = (byte)8;
      byteArray0[7] = (byte)9;
      byteArray0[8] = (byte) (-125);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Vector<Object> vector4 = new Vector<Object>();
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-2462), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2462)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-1472), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1472
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-1472), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1472
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      Object[] objectArray0 = new Object[6];
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      defaultComboBoxModel0.removeElement(metalComboBoxEditor_UIResource0);
      objectArray0[0] = (Object) defaultComboBoxModel0;
      objectArray0[2] = (Object) defaultComboBoxModel0;
      objectArray0[5] = (Object) defaultComboBoxModel0;
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) defaultComboBoxModel0;
      objectArray1[3] = (Object) visualListModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel1 = new DefaultComboBoxModel<Object>(objectArray1);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel1);
      JComboBox<Object> jComboBox1 = new JComboBox<Object>();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jComboBox1.addHierarchyListener((HierarchyListener) null);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      Object object1 = new Object();
      JComboBox<Object> jComboBox2 = new JComboBox<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElements((int[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      defaultComboBoxModel0.removeElement(metalComboBoxEditor0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox0.isFocusable();
      jComboBox0.getAccessibleContext();
      visualListModel0.addListDataListener(jComboBox0);
      VisualListModel visualListModel1 = new VisualListModel();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      JComponent.setDefaultLocale(locale0);
      visualListModel1.removeElements((-137), 0, true);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getSources();
      Vector<Object> vector1 = parameterBlock0.getParameters();
      assertNotSame(vector1, vector0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      defaultComboBoxModel0.removeElement(metalComboBoxEditor0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox0.isFocusable();
      jComboBox0.getAccessibleContext();
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.removeElements(0, 876, false);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getSources();
      Vector<Object> vector1 = parameterBlock0.getParameters();
      assertTrue(vector1.equals((Object)vector0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock((Vector<Object>) null, (Vector<Object>) null);
      parameterBlock0.getSources();
      parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock((Vector<Object>) null);
      parameterBlock1.getSources();
      visualListModel0.removeElements(1000, 0, true);
      parameterBlock0.getSources();
      Vector<Object> vector0 = parameterBlock1.getParameters();
      assertTrue(vector0.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      defaultComboBoxModel0.removeElement(metalComboBoxEditor0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox0.isFocusable();
      jComboBox0.getAccessibleContext();
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.removeElements(0, (-1), false);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.getSources();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      assertEquals("[]", vector0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Object object0 = new Object();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) sunHints_Key0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      stack0.stream();
      Predicate<Object> predicate2 = predicate1.negate();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      BasicComboBoxEditor.UIResource basicComboBoxEditor_UIResource0 = new BasicComboBoxEditor.UIResource();
      predicate1.test(basicComboBoxEditor_UIResource0);
      Predicate.isEqual((Object) predicate0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Predicate<Object> predicate3 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      Predicate<VisualPageListItem> predicate6 = Predicate.isEqual((Object) sunHints_Key2);
      Predicate<VisualPageListItem> predicate7 = predicate6.and(predicate1);
      predicate6.or(predicate5);
      predicate4.or(predicate2);
      predicate6.and(predicate2);
      predicate7.negate();
      visualListModel0.moveUpIndex(125);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-2947), (-2947), false);
      assertNull(collection0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(1);
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0, vector1);
      Vector<Object> vector2 = parameterBlock0.getSources();
      Vector<Object> vector3 = parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector3);
      ParameterBlock parameterBlock2 = new ParameterBlock(vector2);
      parameterBlock2.getSources();
      Vector<Object> vector4 = parameterBlock0.getParameters();
      ParameterBlock parameterBlock3 = new ParameterBlock(vector4, vector1);
      ParameterBlock parameterBlock4 = parameterBlock2.add('p');
      parameterBlock1.getSources();
      ParameterBlock parameterBlock5 = new ParameterBlock();
      Vector<Object> vector5 = parameterBlock4.getParameters();
      assertFalse(vector5.equals((Object)vector1));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3628433742803376
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveUpIndexes(intArray0);
      int[] intArray1 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.clearData();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) visualListModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      Object object0 = new Object();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.undeleteElements(intArray1);
      visualListModel1.removeListDataListener(jComboBox0);
      visualListModel1.moveDownIndexes(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1310);
      intArray0[1] = (-1310);
      intArray0[2] = (-1310);
      intArray0[3] = (-1310);
      intArray0[4] = (-1310);
      intArray0[5] = (-1310);
      int[] intArray1 = new int[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      vector0.add((VisualPageListItem) null);
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4999138335216076
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.appendAllElements(linkedHashSet0);
      int[] intArray0 = new int[7];
      intArray0[0] = (-1310);
      intArray0[1] = (-1310);
      intArray0[2] = (-1310);
      intArray0[3] = (-1310);
      intArray0[4] = (-1310);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) (-1310);
      objectArray0[1] = (Object) (-1310);
      objectArray0[2] = (Object) (-1310);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(objectArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      Object object0 = new Object();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>();
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      jComboBox1.removeItem(objectArray0[0]);
      JComboBox<Object> jComboBox2 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox2.firePopupMenuWillBecomeInvisible();
      visualListModel0.removeListDataListener(jComboBox2);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements(intArray0, true);
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel1.undeleteElements(intArray0);
      visualListModel1.moveUpIndexes(intArray0);
      assertArrayEquals(new int[] {(-1310), (-1310), (-1310), (-1310), (-1310), 0, 0}, intArray0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements((Collection<VisualPageListItem>) null);
      Predicate<VisualPageListItem> predicate0 = Predicate.isEqual((Object) visualListModel0);
      Object object0 = new Object();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_DITHERING;
      Predicate<Object> predicate1 = Predicate.isEqual((Object) sunHints_Key0);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) visualListModel1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.stream();
      Predicate<Object> predicate5 = predicate1.negate();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Predicate.isEqual((Object) sunHints_Key1);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate1);
      predicate0.and(predicate6);
      Predicate<VisualPageListItem> predicate8 = predicate0.or(predicate1);
      predicate1.or(predicate7);
      predicate8.and(predicate5);
      Stack<Object> stack1 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack1);
      Vector<Object> vector0 = parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock();
      Vector<Object> vector1 = parameterBlock0.getParameters();
      assertTrue(vector1.equals((Object)vector0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 0;
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(4, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(4) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-1), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(3082, 3082, false);
      assertNull(collection0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.subList(0, 1974);
      visualListModel0.addAllElements(1356, (Collection<VisualPageListItem>) null);
      visualListModel0.getSize();
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[6];
      String string0 = "";
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid ICC Profile Data
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) treeSet0);
      OperationRegistry operationRegistry0 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.getSources();
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9678593488156242
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1310);
      intArray0[1] = (-1310);
      intArray0[2] = (-1310);
      intArray0[3] = (-1310);
      intArray0[4] = (-1310);
      intArray0[5] = (-1310);
      intArray0[6] = (-1310);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.subList((-1310), 1623);
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      visualListModel0.moveUpIndexes(intArray1);
      int[] intArray2 = null;
      visualListModel0.moveUpIndexes(intArray0);
      ParameterBlock parameterBlock0 = new ParameterBlock((Vector<Object>) null, (Vector<Object>) null);
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0301693915539945
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<RenderingHints.Key, DefaultTableModel> hashMap0 = new HashMap<RenderingHints.Key, DefaultTableModel>();
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      hashMap0.remove((Object) integer0, (Object) sunHints_Key0);
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      ColorConvertOp colorConvertOp0 = new ColorConvertOp(renderingHints1);
      int[] intArray1 = null;
      int[] intArray2 = new int[9];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray2[2] = 93;
      intArray2[3] = 1;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray2[6] = 1;
      intArray2[7] = 1;
      intArray2[8] = 1;
      visualListModel0.moveUpIndexes(intArray2);
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack0);
      Vector<Object> vector0 = parameterBlock0.getParameters();
      ParameterBlock parameterBlock1 = new ParameterBlock(stack0, vector0);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateAnticlockwiseElements(intArray2);
      // Undeclared exception!
      try { 
        visualListModel2.undeleteElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int0 = (-10);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex((-10));
      AffineTransform.getTranslateInstance(0.0, (-10));
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage((-10), (-10), (-4256));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -4256
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) defaultComboBoxModel0;
      objectArray0[2] = (Object) defaultComboBoxModel0;
      objectArray0[5] = (Object) defaultComboBoxModel0;
      Object[] objectArray1 = new Object[6];
      Object object0 = new Object();
      objectArray1[1] = object0;
      objectArray1[2] = (Object) defaultComboBoxModel0;
      objectArray1[3] = (Object) visualListModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel1 = new DefaultComboBoxModel<Object>(objectArray1);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel1);
      Object object1 = new Object();
      JComboBox<Object> jComboBox1 = new JComboBox<Object>();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      JMenu jMenu0 = new JMenu();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      jComboBox1.setComponentPopupMenu(jPopupMenu0);
      jComboBox1.addHierarchyListener((HierarchyListener) null);
      Proxy.Type proxy_Type0 = Proxy.Type.DIRECT;
      jComboBox1.removeItem(proxy_Type0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JComboBox<Object> jComboBox2 = new JComboBox<Object>(defaultComboBoxModel1);
      jComboBox2.firePopupMenuWillBecomeInvisible();
      visualListModel0.removeListDataListener(jComboBox2);
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack0, stack0);
      stack0.add(object1);
      ParameterBlock parameterBlock1 = new ParameterBlock(stack0, stack0);
      parameterBlock1.getParameters();
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(0, intArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int[] intArray0 = new int[0];
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.reverseElements(intArray0);
      BufferedImage bufferedImage0 = null;
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null);
      RenderingHints renderingHints0 = new RenderingHints((RenderingHints.Key) null, (Object) null);
      // Undeclared exception!
      try { 
        MagnitudeDescriptor.create((RenderedImage) null, renderingHints0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The input argument(s) may not be null.
         //
         verifyException("javax.media.jai.ParameterBlockJAI", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) visualListModel0;
      objectArray0[1] = (Object) visualListModel0;
      objectArray0[2] = (Object) visualListModel0;
      objectArray0[3] = (Object) visualListModel0;
      objectArray0[4] = (Object) visualListModel0;
      objectArray0[5] = (Object) visualListModel0;
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(objectArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jComboBox0.removeHierarchyListener((HierarchyListener) null);
      Object object0 = new Object();
      jComboBox0.removeItem(object0);
      visualListModel0.removeListDataListener(jComboBox0);
      assertFalse(jComboBox0.isFocusTraversalPolicyProvider());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<Proxy.Type> vector0 = new Vector<Proxy.Type>();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      vector0.add(proxy_Type0);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      priorityQueue0.retainAll(vector0);
      priorityQueue0.clear();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3957094260849354
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-18);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.prependAllElements(hashSet0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, visualListModel0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HashMap<RenderingHints.Key, DefaultTableModel> hashMap0 = new HashMap<RenderingHints.Key, DefaultTableModel>();
      hashMap0.remove((Object) renderingHints0, (Object) sunHints_Key0);
      visualListModel0.reverseElements(intArray0);
      RenderingHints renderingHints1 = new RenderingHints(hashMap0);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack0, stack0);
      ParameterBlock parameterBlock1 = new ParameterBlock(stack0, stack0);
      parameterBlock1.shallowClone();
      Vector<Object> vector0 = parameterBlock1.getParameters();
      assertEquals("[]", vector0.toString());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }
}
