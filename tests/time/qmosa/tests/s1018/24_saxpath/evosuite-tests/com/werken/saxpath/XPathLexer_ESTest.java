/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:28:14 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.946485623381406
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("}jz=Ae.;");
      Token token3 = xPathLexer1.leftBracket();
      assertEquals("}", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.isIdentifierChar('a');
      XPathLexer xPathLexer2 = new XPathLexer("}jz=Ae.;");
      xPathLexer2.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Ae.", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      xPathLexer2.setXPath("[ (");
      xPathLexer0.consume(8);
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("j", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer3.star();
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('a');
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.isIdentifierChar('@');
      xPathLexer1.endPosition();
      Token token8 = xPathLexer4.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer5.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer3.doubleColon();
      Token token10 = xPathLexer5.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer5.not();
      assertEquals(23, token11.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.008847192034336
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("@3foL9'");
      xPathLexer1.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer1.relationalOperator();
      xPathLexer0.isIdentifierChar('a');
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setXPath("@3foL9'");
      xPathLexer2.consume((-1533));
      XPathLexer xPathLexer4 = new XPathLexer("@3foL9'");
      xPathLexer4.dollar();
      xPathLexer3.whitespace();
      xPathLexer2.consume((-1));
      xPathLexer3.LA(7);
      xPathLexer3.or();
      xPathLexer3.div();
      // Undeclared exception!
      try { 
        xPathLexer2.number();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.213808976392089
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer1.operatorName();
      xPathLexer1.equals();
      xPathLexer1.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      xPathLexer0.whitespace();
      xPathLexer1.currentPosition();
      xPathLexer0.number();
      xPathLexer1.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('a');
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer1.setXPath("");
      xPathLexer0.consume(111);
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer1.slashes();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.star();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.isIdentifierStartChar('o');
      xPathLexer1.LA(111);
      xPathLexer0.rightParen();
      xPathLexer0.at();
      xPathLexer1.plus();
      xPathLexer3.literal();
      Token token0 = xPathLexer3.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.021659707021899
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("I", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.consume(0);
      int int0 = xPathLexer0.endPosition();
      assertEquals(11, int0);
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.consume(62);
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.and();
      xPathLexer0.consume();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      xPathLexer1.getXPath();
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer1.minus();
      assertEquals(6, token6.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9463600909145258
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("}jz=Ae.;");
      Token token3 = xPathLexer1.leftBracket();
      assertEquals("}", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("A", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.isIdentifierChar('a');
      XPathLexer xPathLexer2 = new XPathLexer("}jz=Ae.;");
      xPathLexer2.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("e.", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer2.setXPath("[ (");
      xPathLexer0.consume(8);
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      assertEquals("j", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer3.star();
      assertEquals(20, token8.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('a');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.isIdentifierChar('@');
      xPathLexer1.endPosition();
      Token token9 = xPathLexer4.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer5.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer3.doubleColon();
      assertEquals(19, token11.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2629321649035368
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.dollar();
      assertEquals(":", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.setXPath("8,:y/k[HfJ");
      xPathLexer0.rightBracket();
      char char0 = xPathLexer0.LA(1028);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.or();
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer1.isIdentifierChar('}');
      xPathLexer1.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(":", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("y", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      xPathLexer1.setXPath("qq{8N:0QA)>2.I");
      xPathLexer1.consume(2);
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.and();
      Token token9 = xPathLexer1.slashes();
      assertEquals("{", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      xPathLexer2.star();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('\uFFFF');
      assertFalse(boolean0);
      
      Token token10 = xPathLexer1.rightBracket();
      assertEquals("8", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      xPathLexer1.LA(2);
      Token token11 = xPathLexer0.rightParen();
      assertEquals("/", token11.getTokenText());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.086070098282485
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      assertNotNull(token5);
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("#qNr8j9-cE[", token6.getTokenText());
      
      xPathLexer0.setXPath("");
      xPathLexer0.consume((-1));
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('X');
      boolean boolean1 = xPathLexer1.isIdentifierChar('X');
      assertTrue(boolean1 == boolean0);
      
      xPathLexer1.endPosition();
      Token token10 = xPathLexer1.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.9369713703561815
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.comma();
      Token token0 = xPathLexer0.equals();
      assertEquals("3", token0.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("oL", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("@3foL9'");
      Token token4 = xPathLexer1.leftBracket();
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.isIdentifierChar('K');
      xPathLexer1.or();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("3", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.setXPath("[ (");
      xPathLexer0.consume((-1274));
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.and();
      Token token8 = xPathLexer1.slashes();
      assertEquals("f", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals("o", token9.getTokenText());
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('a');
      assertTrue(boolean0);
      
      xPathLexer0.isIdentifierChar('U');
      xPathLexer0.endPosition();
      xPathLexer2.rightParen();
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.184134730142178
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      xPathLexer0.rightBracket();
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer1.comma();
      xPathLexer1.isIdentifierChar('}');
      xPathLexer0.div();
      xPathLexer0.nextToken();
      String string0 = "^uJZ)?\\udCh#H_b";
      xPathLexer1.setXPath(string0);
      xPathLexer0.consume(2);
      xPathLexer1.dollar();
      xPathLexer1.and();
      xPathLexer0.slashes();
      xPathLexer1.star();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.rightBracket();
      xPathLexer0.LA(45);
      xPathLexer1.rightParen();
      xPathLexer1.at();
      xPathLexer1.plus();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9462809902320073
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.LA(19);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar('/');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer1.setXPath("&I;}E@rR969");
      xPathLexer0.consume((-1533));
      xPathLexer1.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4004421782992615
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "@3foL9'";
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.consume((-3091));
      xPathLexer0.endPosition();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.017635810390532
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNrAj9-cE[");
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.equals();
      Token token3 = xPathLexer0.slashes();
      assertEquals("q", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer1.equals();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("N", token4.getTokenText());
      
      Token token5 = xPathLexer0.minus();
      assertEquals("r", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("Aj", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(30, token8.getTokenType());
      assertEquals("9", token8.getTokenText());
      
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.equals();
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.331164899750828
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals("k", token1.getTokenText());
      
      xPathLexer0.setXPath("8,:y/k[HfJ");
      xPathLexer0.rightBracket();
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer1.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer1.isIdentifierChar('}');
      xPathLexer1.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("y", token6.getTokenText());
      
      String string0 = "^uJZ)?\\udCh#H_b";
      xPathLexer1.setXPath(string0);
      xPathLexer0.consume(2);
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("^", token7.getTokenText());
      
      xPathLexer1.and();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('*');
      assertFalse(boolean0);
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals("H", token10.getTokenText());
      
      Token token11 = xPathLexer1.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      xPathLexer0.nextToken();
      char char0 = xPathLexer1.LA(107);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer0.rightParen();
      assertEquals("f", token12.getTokenText());
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer1.at();
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.733564171406337
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("=", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.slashes();
      assertEquals("C", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.LA(109);
      Token token3 = xPathLexer0.leftParen();
      assertEquals("O", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.at();
      boolean boolean0 = xPathLexer0.isIdentifierChar('\uFFFF');
      assertFalse(boolean0);
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("%f!On[", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("%", token8.getTokenText());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("f!", token9.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightParen();
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      assertEquals("O", token10.getTokenText());
      
      char char0 = xPathLexer1.LA(6084);
      assertEquals('\uFFFF', char0);
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals("n", token11.getTokenText());
      
      Token token12 = xPathLexer0.at();
      assertEquals("[", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2180973560816035
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      xPathLexer0.rightBracket();
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer1.or();
      xPathLexer1.comma();
      xPathLexer1.isIdentifierChar('}');
      xPathLexer1.or();
      xPathLexer0.nextToken();
      String string0 = "^uJZ)?\\udCh#H_b";
      xPathLexer1.setXPath(string0);
      xPathLexer0.consume(2);
      xPathLexer1.dollar();
      xPathLexer1.and();
      xPathLexer0.slashes();
      xPathLexer1.star();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.rightBracket();
      xPathLexer0.LA(45);
      xPathLexer1.rightParen();
      xPathLexer1.at();
      xPathLexer1.plus();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.852135451884004
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}jz=Ae.;");
      xPathLexer0.and();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.at();
      assertEquals("=", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("A", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.isIdentifierChar('Q');
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("e", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(31, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(";", token6.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      assertEquals("", token7.getTokenText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.975082284308453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OiI");
      xPathLexer0.consume(100);
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.setXPath("OiI");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer1.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.isIdentifierChar('}');
      xPathLexer1.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("iI", token5.getTokenText());
      
      xPathLexer0.setXPath("??%$A3e");
      xPathLexer0.consume(20);
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer1.isIdentifierStartChar('}');
      XPathLexer xPathLexer2 = new XPathLexer("OiI");
      Token token9 = xPathLexer2.rightBracket();
      assertEquals("O", token9.getTokenText());
      
      Token token10 = xPathLexer2.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      char char0 = xPathLexer1.LA(100);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer2.rightParen();
      assertEquals("I", token12.getTokenText());
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer2.at();
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.2269857696076794
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      xPathLexer0.dots();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("=", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("i{T c6~)Tk=kIV");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer1.LA(109);
      Token token3 = xPathLexer0.leftParen();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("O", token4.getTokenText());
      
      xPathLexer0.getXPath();
      xPathLexer1.at();
      boolean boolean0 = xPathLexer1.isIdentifierChar('\uFFFF');
      assertFalse(boolean0);
      
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("c6~)Tk=kIV", token6.getTokenText());
      
      Token token7 = xPathLexer1.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("c", token8.getTokenText());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals("6~", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer2.isIdentifierStartChar('X');
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      assertEquals("Y", token10.getTokenText());
      
      char char0 = xPathLexer2.LA(6084);
      assertEquals('\uFFFF', char0);
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals("K", token11.getTokenText());
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("X", token12.getTokenText());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2563197587383965
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      xPathLexer0.rightBracket();
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer0.leftBracket();
      xPathLexer1.comma();
      xPathLexer1.isIdentifierChar('}');
      xPathLexer1.or();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      String string0 = "^uJZ)?\\udCh#H_b";
      xPathLexer1.setXPath(string0);
      xPathLexer0.consume(2);
      xPathLexer1.dollar();
      xPathLexer1.and();
      xPathLexer0.slashes();
      xPathLexer1.star();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer0.rightBracket();
      xPathLexer0.LA(45);
      xPathLexer1.rightParen();
      xPathLexer1.at();
      xPathLexer1.plus();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9978216745685888
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":jy(5P)}z9s6");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.identifier();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftParen();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.getXPath();
      xPathLexer0.dots();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume(2532);
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-7168));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.024364140091354
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.LA(19);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('/');
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer1.setXPath("&I;}E@rR969");
      xPathLexer0.consume((-1533));
      xPathLexer1.dollar();
      xPathLexer1.and();
      xPathLexer1.consume();
      xPathLexer1.slashes();
      xPathLexer0.star();
      xPathLexer1.isIdentifierStartChar('\uFFFF');
      xPathLexer1.rightBracket();
      xPathLexer1.literal();
      // Undeclared exception!
      try { 
        xPathLexer0.LA(19);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9550772439134738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals("/", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(21, token1.getTokenType());
      assertEquals("=", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("C", token2.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.consume(402);
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.isIdentifierStartChar('Z');
      xPathLexer0.operatorName();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('Z');
      assertTrue(boolean0);
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("O4G+ztY7m})T");
      char char0 = xPathLexer1.LA(402);
      assertEquals('\uFFFF', char0);
      
      Token token6 = xPathLexer1.rightParen();
      assertEquals("O", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer1.at();
      assertEquals("4", token7.getTokenText());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.comma();
      xPathLexer0.consume((-2609));
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.975102728219374
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("d_CYts5N;K");
      XPathLexer xPathLexer1 = new XPathLexer("#mA]'VAD,");
      xPathLexer1.comma();
      xPathLexer0.consume((-138));
      xPathLexer0.leftParen();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.330756609419827
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token4 = xPathLexer0.number();
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("qNr8j9-cE", token5.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.equals();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals(1, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      xPathLexer1.consume(2);
      xPathLexer1.LA(3);
      xPathLexer0.or();
      xPathLexer1.div();
      Token token11 = xPathLexer1.number();
      assertEquals(30, token11.getTokenType());
      
      Token token12 = xPathLexer1.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2015706245011
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      xPathLexer0.isIdentifierChar('a');
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("[ (");
      xPathLexer0.consume(111);
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer0.slashes();
      xPathLexer0.star();
      xPathLexer0.isIdentifierStartChar('o');
      xPathLexer1.LA(111);
      xPathLexer1.rightParen();
      xPathLexer0.at();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.955670737421265
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      xPathLexer0.number();
      xPathLexer0.currentPosition();
      xPathLexer0.number();
      String string0 = "com.werken.saxpath.XPathLexer";
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.034873497617
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      xPathLexer0.rightBracket();
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      xPathLexer0.whitespace();
      xPathLexer0.currentPosition();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.equals();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.4070988740355914
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token0);
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.equals();
      Token token1 = xPathLexer0.pipe();
      assertEquals("k", token1.getTokenText());
      
      xPathLexer0.setXPath("8,:y/k[HfJ");
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("y", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("/", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("k", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.pipe();
      char char0 = xPathLexer0.LA(7);
      assertEquals('\uFFFF', char0);
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume((-1));
      char char1 = xPathLexer0.LA((-1));
      assertEquals('H', char1);
      
      xPathLexer0.or();
      xPathLexer0.div();
      Token token9 = xPathLexer0.number();
      assertEquals("", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7745537491193273
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("{G2n<", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.endPosition();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.consume((-1));
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token6 = xPathLexer0.equals();
      assertEquals(21, token6.getTokenType());
      
      xPathLexer0.getXPath();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1268763025185597
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("/=C(OYKX%f!On[");
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("/", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("=", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.slashes();
      assertEquals("C", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("(", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.at();
      assertEquals("%", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("f", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals("", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.isIdentifierChar('Q');
      Token token9 = xPathLexer0.not();
      assertEquals("!", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer1.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer0.leftParen();
      assertEquals(1, token11.getTokenType());
      assertEquals("O", token11.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token12 = xPathLexer1.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9010016649764614
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.endPosition();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.LA(7);
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume(11);
      xPathLexer0.LA(0);
      xPathLexer0.or();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Peg>_:;d52");
      xPathLexer0.or();
      int int0 = (-776);
      xPathLexer0.consume((-776));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.7308151200683755
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.slashes();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("4");
      xPathLexer0.rightParen();
      xPathLexer0.pipe();
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer0.and();
      xPathLexer0.literal();
      xPathLexer0.currentPosition();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9418499775601985
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("?", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.setXPath("u?jO1A{$>nW");
      Token token3 = xPathLexer0.star();
      assertEquals("u", token3.getTokenText());
      
      xPathLexer0.mod();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      Token token6 = xPathLexer0.slashes();
      assertEquals("O", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.equals();
      assertEquals("1", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftParen();
      assertEquals("A", token8.getTokenText());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      xPathLexer0.equals();
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
      
      xPathLexer0.getXPath();
      Token token14 = xPathLexer0.dots();
      assertEquals(13, token14.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.840514546223449
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      Token token0 = xPathLexer0.slashes();
      assertEquals("u", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("?", token1.getTokenText());
      
      xPathLexer0.getXPath();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("O1A", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.consume(5055);
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("s!%Rk&");
      xPathLexer0.getXPath();
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      assertEquals("s", token5.getTokenText());
      
      Token token6 = xPathLexer1.minus();
      assertEquals("!", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4379819616635854
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      Token token0 = xPathLexer0.comma();
      assertEquals("@", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("oL", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("9", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.isIdentifierChar(',');
      xPathLexer0.rightBracket();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      XPathLexer xPathLexer2 = new XPathLexer("){<");
      xPathLexer2.relationalOperator();
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.number();
      xPathLexer0.endPosition();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer2.and();
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer2.slashes();
      assertEquals(")", token9.getTokenText());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer2.isIdentifierStartChar('o');
      Token token11 = xPathLexer2.rightBracket();
      assertEquals(4, token11.getTokenType());
      assertEquals("{", token11.getTokenText());
      
      char char0 = xPathLexer3.LA(8);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer3.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.165069384756312
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      assertNotNull(token0);
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.859440002644872
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.698008644152788
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.927501764513189
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-284));
      xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.164237536865641
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.consume();
      xPathLexer0.consume((-849));
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.721825073810159
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8,:y/k[HfJ");
      Token token0 = xPathLexer0.equals();
      assertEquals("8", token0.getTokenText());
      
      xPathLexer0.equals();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("y", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.equals();
      assertEquals("/", token2.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.setXPath("8,:y/k[HfJ");
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("8", token3.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.dots();
      assertEquals("y", token4.getTokenText());
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("/", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("k", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.LA(7);
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('\uFFFF');
      assertFalse(boolean0);
      
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("8,:y/k[HfJ");
      char char0 = xPathLexer1.LA(2226);
      assertEquals('\uFFFF', char0);
      
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("8", token12.getTokenText());
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.064940563318039
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      char char0 = xPathLexer0.LA(19);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.and();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("&I;}E@rR969");
      Token token2 = xPathLexer2.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer1.setXPath("&I;}E@rR969");
      xPathLexer1.setXPath("&I;}E@rR969");
      xPathLexer2.pipe();
      xPathLexer2.or();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("r", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer2.colon();
      assertEquals(";", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("&", token7.getTokenText());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals("I;", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer2.minus();
      assertEquals("}", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      xPathLexer0.setXPath("&I;}E@rR969");
      XPathLexer xPathLexer3 = new XPathLexer("m:x5^[esA}q8QK]");
      Token token11 = xPathLexer3.leftBracket();
      assertEquals("m", token11.getTokenText());
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer2.comma();
      assertEquals(32, token12.getTokenType());
      assertEquals("E", token12.getTokenText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-862));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4523187021774486
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.isIdentifierChar('^');
      boolean boolean0 = xPathLexer0.isIdentifierChar('^');
      assertFalse(boolean0);
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals(2, token3.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8978803530706065
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken((Token) null);
      xPathLexer0.mod();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.setXPath("&I;}E@rR969");
      xPathLexer0.star();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("E-,V|_27cr/)9)");
      xPathLexer1.equals();
      Token token1 = xPathLexer0.equals();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3054086089306276
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tZ'");
      xPathLexer0.mod();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("'", token1.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.colon();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.star();
      Token token9 = xPathLexer0.whitespace();
      assertEquals("", token9.getTokenText());
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.618573113538999
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.div();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.863725215149263
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.minus();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1076442236329274
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(":jy(5P)}z9s6");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.identifier();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (15) ()", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftParen();
      assertEquals(":", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("jy(5P)}z9s6", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer2.leftParen();
      assertEquals(1, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (15) ()");
      Token token5 = xPathLexer4.minus();
      assertEquals("[", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer4.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals(" (", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (15) ()");
      Token token7 = xPathLexer5.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("[ ", token7.getTokenText());
      
      Token token8 = xPathLexer4.nextToken();
      assertEquals(30, token8.getTokenType());
      assertEquals("15", token8.getTokenText());
      
      Token token9 = xPathLexer0.equals();
      assertEquals("(", token9.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer4.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2152000086364088
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "\\J{G2n<";
      XPathLexer xPathLexer0 = new XPathLexer("J{G2n<");
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("BR,E]cP4IA");
      xPathLexer3.endPosition();
      xPathLexer2.number();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.mod();
      xPathLexer4.and();
      xPathLexer3.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.LA(10);
      xPathLexer5.pipe();
      xPathLexer4.literal();
      xPathLexer1.consume(57);
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-3916));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8911553145952267
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.getXPath();
      xPathLexer0.not();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.setXPath("0#qNr8j9-cE[");
      String string0 = "";
      xPathLexer0.setXPath("");
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.pipe();
      xPathLexer1.nextToken();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.559218041976476
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.colon();
      xPathLexer0.endPosition();
      xPathLexer0.plus();
      xPathLexer0.isIdentifierStartChar('~');
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer0.dollar();
      xPathLexer0.star();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.577672480633218
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@3foL9'");
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.and();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.rightParen();
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.LA(1028);
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume(1028);
      assertEquals("@3foL9'", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.261736896592562
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tZ'");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("t", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("Z", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("'", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.identifier();
      xPathLexer0.getPreviousToken();
      xPathLexer0.colon();
      Token token3 = xPathLexer0.literal();
      assertNull(token3);
      
      xPathLexer0.whitespace();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.star();
      Token token9 = xPathLexer0.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer0.number();
      assertEquals(30, token12.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.8880913512297433
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(2, int0);
      
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8973566202265277
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.089356224511052
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u?jO1A{$>nW");
      xPathLexer0.slashes();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.setXPath("u?jO1A{$>nW");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.877179799491079
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("OiI");
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      xPathLexer0.setXPath("OiI");
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.div();
      assertNull(token0);
  }
}
