/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 03:17:03 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.gui.StartFrame;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.sql.SQLClientInfoException;
import java.sql.SQLDataException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLNonTransientConnectionException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import messages.global.MapInfo;
import messages.global.MapListMsg;
import messages.round.RoundTimeOneSecondLeftMsg;
import messages.round.TileHitPlayerMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket();
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte) (-119);
      byteArray1[4] = (byte)101;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      RoundTimeOneSecondLeftMsg roundTimeOneSecondLeftMsg0 = new RoundTimeOneSecondLeftMsg((-1506L));
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(roundTimeOneSecondLeftMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      String string0 = "ERROR";
      String string1 = "usertype";
      String string2 = "Couldn't close input stream";
      ArrayList<MapInfo> arrayList0 = new ArrayList<MapInfo>();
      int int0 = (-104);
      Vector<Integer> vector0 = new Vector<Integer>();
      MapListMsg mapListMsg0 = new MapListMsg(arrayList0);
      int int1 = 0;
      int int2 = 1;
      TileHitPlayerMsg tileHitPlayerMsg0 = new TileHitPlayerMsg(1);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      clientMsgReceiver0.processMsg(tileHitPlayerMsg0);
      String string3 = "org.apache.log4j.CategoryKey";
      long[] longArray0 = new long[3];
      longArray0[0] = (long) int2;
      longArray0[1] = (long) int0;
      longArray0[2] = (long) int1;
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[2];
      String string4 = "server.ClientInfo";
      String string5 = "messages.round.ClientQuitRunningSessionMsg";
      int int3 = 270;
      StackTraceElement stackTraceElement0 = new StackTraceElement(string2, string4, string5, int3);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement(string5, string0, string3, int1);
      stackTraceElementArray0[1] = stackTraceElement1;
      sQLClientInfoException0.setStackTrace(stackTraceElementArray0);
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException(string1, string0, sQLClientInfoException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(mapListMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockSocket mockSocket0 = new MockSocket();
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-85);
      byteArray1[2] = (byte) (-119);
      byteArray1[3] = (byte) (-119);
      byteArray1[4] = (byte)101;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray1);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, (byte)0);
      mockSocket0.bind(mockInetSocketAddress0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
          MockSocket mockSocket0 = new MockSocket();
          byte[] byteArray0 = new byte[0];
          NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
          byte[] byteArray1 = new byte[5];
          byteArray1[0] = (byte)0;
          mockSocket0.setTcpNoDelay(false);
          byteArray1[1] = (byte) (-85);
          byteArray1[2] = (byte) (-119);
          byteArray1[3] = (byte) (-119);
          byteArray1[4] = (byte)101;
          MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, (byte)0);
          mockInetSocketAddress0.getHostName();
          mockInetSocketAddress0.getHostName();
          FileSystemHandling.shouldAllThrowIOExceptions();
          FileSystemHandling.shouldAllThrowIOExceptions();
          mockInetSocketAddress0.getHostName();
          mockInetSocketAddress0.getHostName();
          mockSocket0.bind((SocketAddress) null);
          ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
          NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "127.0.0.1");
          // Undeclared exception!
          try { 
            clientMsgReceiver0.closeConnection();
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("client.network.ClientMsgReceiver", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver((Socket) null, (BomberClient) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = "uRO";
      String string1 = "";
      StartFrame startFrame0 = StartFrame.startFrame;
      StartFrame.startFrame = startFrame0;
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(string1, string1);
      String string2 = "Lost connection to server!";
      SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(string2, string1);
      sQLNonTransientConnectionException0.setNextException(sQLIntegrityConstraintViolationException0);
      sQLNonTransientConnectionException0.getSuppressed();
      sQLNonTransientConnectionException0.getSuppressed();
      EvoSuiteFile evoSuiteFile0 = null;
      String string3 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, string3);
      SQLDataException sQLDataException0 = new SQLDataException(string0, string0, sQLNonTransientConnectionException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLIntegrityConstraintViolationException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
