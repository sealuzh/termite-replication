/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:37:13 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state.Player$JoinInfo");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int0 = (-667);
      Player player0 = new Player((-1188), (String) null, (-667));
      player0.setDead((long) (-667));
      player0.getName();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, 4919);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player((-1768), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1768));
      Player player1 = new Player((short)4919, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (short)4919, (short)4919);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Player.unpack(): *** WARNING *** [EOF] data was incomplete: ");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream("Player.unpack(): *** WARNING *** [EOF] data was incomplete: ");
      Object object0 = new Object();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object object1 = new Object();
      Object object2 = new Object();
      Locale locale1 = Locale.CHINA;
      locale1.getDisplayVariant(locale0);
      Object object3 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) locale1;
      objectArray0[2] = (Object) player0;
      mockPrintStream0.printf(locale0, "", objectArray0);
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream("m/");
      ObjectOutputStream objectOutputStream1 = new ObjectOutputStream(objectOutputStream0);
      objectOutputStream1.writeUTF("gui.ModuleBrowserDialog$ModuleFilter");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.325966967244622
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player(4111);
      player0.setDead(1392409281320L, true);
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player((short)4919);
      player0.unpack(byteArray0);
      Player player2 = new Player((-1), "", "", 2985, 1996);
      player0.unpack(byteArray0);
      player0.setJoinOK(player1, true);
      player0.setDead();
      player0.getTimeOfDeath();
      assertTrue(player0.isDead());
      
      Player player3 = new Player(10, "", 3);
      player1.toString();
      Player player4 = new Player();
      Player player5 = new Player((-964), "", 1366);
      player1.isJoinOK(player5, true);
      player1.pack();
      boolean boolean0 = player1.isJoinOK(player2, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(0, (String) null, "gui.ModuleBrowserDialog$ModuleFilter", 0, 19968);
      Player player1 = new Player(1, "", "5 @_QQ-\"f<4\u0004Rm3", 19968, (short)4919);
      player0.boss = (Party) player1;
      player0.getIP();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("S]f\"0cEVOYOia=rm0TF");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3826794502038573
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(4096);
      player0.setDead(1392409281320L, true);
      byte[] byteArray0 = player0.pack();
      Player player1 = new Player((short)4919);
      player1.setConnected(false);
      player0.setDead(14999L);
      player0.unpack(byteArray0);
      Player player2 = new Player(880, "", "", 1366, (byte)0);
      player1.setJoinOK(player0, true);
      player1.setDead();
      player2.getTimeOfDeath();
      Player player3 = new Player(1366, ">DE)", ">DE)", 880, 5);
      player3.isJoinOK(player0, true);
      assertTrue(player0.isDead());
      
      Player player4 = new Player(5, "cFjqauO7(", ">DE)", 4096);
      player3.getY();
      boolean boolean0 = player2.isJoinOK(player3, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player();
      player0.getName();
      player0.type();
      Player player1 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-27));
      player0.setY(224);
      player0.getY();
      Player player1 = new Player(1640, "%%L", (-5034));
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(224.0F, player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5782737395252497
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(15000L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-4550), "", "4^ohkU=", 3428, (-4550));
      player0.setMoney((-790.0457F));
      Party party0 = player0.gangBoss();
      player0.add(party0);
      Player player1 = new Player(1069, "4^ohkU=", "", 4159);
      player1.setJoinOK(player0, false);
      player1.isJoinOK(player0, false);
      float float0 = player0.getMoney();
      assertEquals((-790.0457F), float0, 0.01F);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4356670493418786
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1778));
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[5];
      player0.setDead((-392L), false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-1);
      player1.unpack(byteArray0);
      player1.setZ((byte) (-1));
      player0.getTimeOfDeath();
      player1.unpack(byteArray0);
      Player player2 = new Player();
      player1.setJoinOK(player2, false);
      Player player3 = new Player((byte) (-1), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (byte)78);
      player3.setDead();
      player1.setX((short)4919);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      player0.isJoinOK(player2, false);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      player1.unpack(dataInputStream1);
      System.setCurrentTimeMillis((short)4919);
      player1.getZ();
      player2.getName();
      System.setCurrentTimeMillis((byte)17);
      player1.setX(188.18108F);
      player1.getY();
      player0.pack();
      assertTrue(player0.isDead());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Player player0 = new Player((-23827), "", "+xFVR~,", 2834, (-23827));
      String string0 = player0.getIP();
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-76);
      byteArray0[5] = (byte) (-100);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)47);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(2834, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-23827), player0.getStrength());
      assertFalse(boolean0);
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(15000L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-4550), "", "4^ohkU=", 3428, (-4550));
      player0.setMoney(0.0F);
      Party party0 = player0.gangBoss();
      party0.prev = (Party) player0;
      player0.add(party0);
      Player player1 = new Player(1069, "4^ohkU=", "", 3428);
      assertEquals(1, player1.getStrength());
      
      System.setCurrentTimeMillis(2210L);
      float float0 = player0.getZ();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      
      Player player2 = new Player((-4550), "4^ohkU=", "", 3428, (-1));
      player2.getName();
      System.setCurrentTimeMillis(1392409281320L);
      float float1 = player2.getY();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(3428, player2.getPictureId());
      assertEquals("4^ohkU=", player2.getIP());
      assertEquals((-1), player2.getStrength());
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(player2.isConnected());
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertFalse(player2.isDead());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.944797816169571
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((-522), "Ca1Y5kMXw[A^?Jr", 7936);
      player0.getIP();
      Player player1 = new Player();
      player1.add(player0);
      player0.setJoinOK(player1, true);
      player0.gangStrength();
      player1.setMoney(2);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-71);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)38;
      byteArray0[6] = (byte)0;
      player0.unpack(byteArray0);
      player0.type();
      player0.type();
      player0.setJoinOK(player1, true);
      player0.gangStrength();
      player0.getX();
      player0.gangStrength();
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1778));
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-94);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)28;
      byteArray1[1] = (byte) (-91);
      Player player2 = new Player((byte) (-89), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (String) null, (byte) (-89), (byte)0);
      player1.unpack(byteArray1);
      player2.getStrength();
      player0.setY((-1778));
      assertEquals((-1778.0F), player0.getY(), 0.01F);
      
      Player player3 = new Player();
      String string0 = player1.toString();
      assertEquals("Player4919", string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(4255, "", "LyLel5uulD;7T]Bj7@U", 4255);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-67);
      byteArray0[6] = (byte) (-2);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2427), 2127);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4273916305367944
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(15000L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-89);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-4550), "4^ohkU=", "N", (-1422), (byte) (-80));
      player0.setMoney(0.0F);
      player0.gangBoss();
      Player player1 = new Player((-5654), "N", "4^ohkU=", 1899);
      player1.add(player0);
      Player player2 = new Player(13311, "", "N", 4005);
      // Undeclared exception!
      try { 
        player2.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5782737395252497
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(15000L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-1), "", "state.Player", (byte)78, (byte) (-80));
      player0.setMoney(15000L);
      Party party0 = player0.gangBoss();
      player0.add(party0);
      Player player1 = new Player((short)4919, "4^ohkU=", " ", 2);
      player0.setJoinOK(player1, false);
      player0.isJoinOK(player1, true);
      assertEquals(15000.0F, player0.getMoney(), 0.01F);
      
      float float0 = player1.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7853437136837007
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(15000L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(1, "", "state.Party", 3428, (byte)0);
      player0.setMoney(1);
      player0.gangBoss();
      Player player1 = new Player();
      player1.add(player0);
      Player player2 = new Player(256, "GaM~s8wAc", "", 1512);
      player2.setJoinOK(player1, false);
      player2.isJoinOK(player0, false);
      float float0 = player0.getMoney();
      assertEquals(1.0F, float0, 0.01F);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.94402561539737
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      Player player1 = new Player((byte)3, "", "", 2, (byte)0);
      Player player2 = new Player();
      player2.setJoinOK(player1, false);
      player0.setZ((byte)0);
      player2.getTimeOfDeath();
      int int0 = player0.getStrength();
      assertEquals(1, int0);
      
      long long0 = player2.getTimeOfDeath();
      assertEquals(0L, long0);
      
      boolean boolean0 = player0.isJoinOK(player2, true);
      assertFalse(boolean0);
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals("Player-1", player2.toString());
      assertEquals(0, player2.getPictureId());
      assertEquals(0, player0.getPictureId());
      
      int int1 = player1.gangStrength();
      assertEquals(2, player1.getPictureId());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0, int1);
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1778));
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-1);
      player1.setJoinOK(player0, true);
      player0.setConnected(false);
      Player player2 = new Player(5, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0, (-546));
      player2.setJoinOK(player0, true);
      player0.setZ((-546));
      assertEquals((-546.0F), player0.getZ(), 0.01F);
      
      player2.getTimeOfDeath();
      player2.getStrength();
      player1.getTimeOfDeath();
      player2.isJoinOK(player1, false);
      player2.type();
      float float0 = player1.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.943159814531569
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(4, "gwUT\"-", "gwUT\"-", 31, 31);
      player0.setConnected(true);
      Player player1 = new Player((-532), "gwUT\"-", 4);
      player0.gangStrength();
      player1.next = (Party) player0;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player0.setJoinOK(player1, true);
      player0.setConnected(true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.close();
      player1.isDead();
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream1);
      player0.unpack(dataInputStream0);
      System.setCurrentTimeMillis(15000L);
      player1.getZ();
      player1.getName();
      System.setCurrentTimeMillis(1392409281320L);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(95, (String) null, "%@a)!1h", (-2347));
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-67);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      player0.setDead();
      boolean boolean0 = player0.isDead();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1239058144637433
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player(1369, "", 1369);
      player0.setConnected(false);
      player0.getY();
      player0.setMoney(0.0F);
      player0.type();
      player0.reset(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)55;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)24;
      player0.setJoinOK(player0, true);
      player0.setZ((-39.50721F));
      player0.isConnected();
      Player player1 = new Player(231, "", " ", (byte)5, (-2606));
      player1.add(player0);
      player0.isJoinOK(player1, true);
      System.setCurrentTimeMillis(1266L);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)51;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte) (-128);
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)55;
      player0.unpack(byteArray0);
      player0.setY((-1018L));
      player0.setDead((-1018L), false);
      float float0 = player0.getY();
      assertEquals((-1018L), player0.getTimeOfDeath());
      assertEquals((-1018.0F), float0, 0.01F);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player((-10), "gwUT\"-", "gwUT\"-", 31, 31);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m/");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = new Locale("", "gwUT\"-", "m/");
      MockPrintStream mockPrintStream1 = new MockPrintStream("L ");
      mockPrintStream1.print('Q');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      Player player1 = new Player((-246), "xh'", "zRw+@Fv )[r", (-22617));
      player1.pack();
      assertEquals("xh'", player1.getIP());
      assertEquals(1, player1.getStrength());
      
      player0.pack();
      assertEquals(31, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(31, player0.getStrength());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1778));
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[5];
      Player player2 = new Player(2785, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 1718);
      player0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gui.ModuleBrowserDialog$ModuleFilter");
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3234094224875887
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-1778), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1778));
      Player player1 = new Player((short)4919);
      byte[] byteArray0 = new byte[5];
      player0.setDead(3687L, false);
      byteArray0[0] = (byte)16;
      player1.unpack(byteArray0);
      player1.setZ((byte) (-1));
      player0.getTimeOfDeath();
      player1.unpack(byteArray0);
      Player player2 = new Player();
      player1.setJoinOK(player2, false);
      player2.setDead();
      player1.setX((short)4919);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      player1.unpack(dataInputStream1);
      System.setCurrentTimeMillis((short)4919);
      player1.getZ();
      player1.getName();
      assertEquals((-1.0F), player1.getZ(), 0.01F);
      
      System.setCurrentTimeMillis((byte)16);
      Player player3 = new Player((byte)16, "Player4919", "Player4919", (-558));
      float float0 = player3.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      player0.toString();
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("state.Party");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
      player0.pack(dataOutputStream0);
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      player0.getName();
      player0.gangStrength();
      int int0 = 557;
      // Undeclared exception!
      try { 
        player0.pack((DataOutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-77);
      byteArray0[6] = (byte) (-46);
      byteArray0[7] = (byte)10;
      byteArray0[8] = (byte) (-92);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(7, byteArrayInputStream0.available());
      
      player0.toString();
      int int0 = player0.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (String) null, 0);
      player0.toString();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("S(t1mz");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(objectOutputStream0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3203928312357034
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(95, "r/G]OBDN<S)", ".*[.]class$", (-1887));
      player0.setX((-1887));
      player0.setDead((long) 95);
      player0.reset(false);
      player0.type();
      Player player1 = new Player((-2019), "r/G]OBDN<S)", (-2019));
      player0.isJoinOK(player1, false);
      player1.add(player0);
      player1.getPictureId();
      player0.pack();
      player1.getTimeOfDeath();
      player1.setJoinOK(player0, true);
      player0.setZ((-713.0F));
      assertEquals((-1887.0F), player0.getX(), 0.01F);
      
      player1.isConnected();
      assertEquals((-2019), player1.getPictureId());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.853253087436612
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player((-1), "oRNX<0SAR]8AvuhtV'K", "oRNX<0SAR]8AvuhtV'K", 688, (-1));
      int int0 = player0.getPictureId();
      assertEquals(688, int0);
      
      player0.setConnected(true);
      Player player1 = new Player(5, "state.Player$JoinInfo", (-3895));
      int int1 = player1.gangStrength();
      assertEquals(1, int1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)1;
      byteArray0[2] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player1.unpack(dataInputStream0);
      assertFalse(boolean0);
      
      player0.setJoinOK(player1, true);
      player0.setConnected(true);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream2);
      assertEquals((-1), player0.getStrength());
      assertTrue(player0.isConnected());
      
      System.setCurrentTimeMillis((-3895));
      float float0 = player1.getZ();
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0.0F, player1.getY(), 0.01F);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(1369, "j", (-2767));
      player0.setConnected(false);
      player0.getY();
      player0.setMoney(0.0F);
      player0.type();
      player0.reset(false);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)5;
      player0.unpack(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1369);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, (String) null, "^[tzvZ7S{lifS.&+U", (short)4919, (-558));
      player0.prev = (Party) player1;
      player0.setX((-1714.07F));
      player0.setMoney(0.0F);
      player0.setDead(1003L, false);
      player1.isConnected();
      player1.setConnected(true);
      player0.setY(1.0F);
      assertEquals(1003L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(30464);
      player0.reset(true);
      player0.id = (-24064);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "module.ModuleBrowserDialog$ModuleFilter");
      player0.setDead((long) 30464);
      player0.setZ(1044.8F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9RU)oR[R$m");
      player0.setDead();
      player0.getZ();
      player0.type();
      player0.type();
      player0.getX();
      player0.setMoney((-469.0F));
      MockFile mockFile0 = new MockFile("=t=\u0005a+dm2zHRc7");
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m/");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.ENGLISH;
      MockFile mockFile0 = new MockFile("gwUT\"-");
      MockFileOutputStream mockFileOutputStream1 = new MockFileOutputStream(mockFile0, false);
      mockFileOutputStream1.close();
      Object object0 = new Object();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      Object object1 = new Object();
      Object object2 = new Object();
      Locale locale2 = Locale.CHINA;
      locale1.getDisplayVariant(locale2);
      Object object3 = new Object();
      Player player0 = new Player((-10957), "uBDw|Q^", 1186);
      Player player1 = new Player(1, "state.Player", "ZZ7Z6DVG!%", (-10957), 1);
      player0.add(player1);
      player1.setJoinOK(player0, false);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertFalse(player1.isDead());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertEquals(1, player1.getStrength());
      assertEquals("state.Player", player1.getIP());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals((-10957), player1.getPictureId());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertTrue(boolean0);
      assertTrue(player1.isConnected());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(1618);
      player0.getTimeOfDeath();
      player0.setX(1514.4268F);
      player0.setZ(1514.4268F);
      player0.setConnected(true);
      player0.setMoney(0L);
      assertEquals(1514.4268F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "oRNX<0SAR]8AvuhtV'K";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(0, "oRNX<0SAR]8AvuhtV'K", "oRNX<0SAR]8AvuhtV'K", 0, 688);
      player0.getPictureId();
      String string1 = null;
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1271454652812123
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(5, "|]", (String) null, 175, 175);
      Player player1 = new Player(4, (String) null, "Player.unpack(): *** WARNING *** data is not of proper type!", (-795), (-1697));
      player0.setJoinOK(player1, true);
      player0.setY((short)4919);
      player0.setZ(5);
      player0.getTimeOfDeath();
      player0.getStrength();
      player0.getTimeOfDeath();
      player0.isJoinOK(player1, true);
      player1.type();
      player1.getX();
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player(4, "gwUT\"-", "gwUT\"-", 31, 31);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m/");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, true);
      Locale locale0 = new Locale("9T", "gwUT\"-", "m/");
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.format(locale0, " ", objectArray0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0);
      PrintStream printStream1 = mockPrintStream1.append((CharSequence) "gwUT\"-");
      printStream1.println(2065L);
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream1);
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
      
      player0.getIP();
      float float0 = player0.getY();
      assertEquals(31, player0.getPictureId());
      assertEquals(31, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale.getISOCountries();
      Object object0 = new Object();
      Object object1 = new Object();
      Locale locale1 = Locale.CHINA;
      locale0.getDisplayVariant(locale1);
      Object object2 = new Object();
      Player player0 = new Player(2386, "0Ro~R5VH.I~E N", "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", 2849);
      player0.add((Party) null);
      Player player1 = new Player(1);
      player0.setJoinOK(player1, true);
      assertEquals("0Ro~R5VH.I~E N", player0.getIP());
      
      Player player2 = new Player((-2135), "uBDw|Q^", (-1));
      boolean boolean0 = player1.isJoinOK(player2, false);
      assertFalse(boolean0);
      assertFalse(player2.isDead());
      assertEquals(0, player1.getPictureId());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals("Player1", player1.toString());
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(1, player2.getStrength());
      assertEquals((-1), player2.getPictureId());
      assertTrue(player2.isConnected());
      assertEquals("0.0.0.0", player2.getIP());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Object object0 = new Object();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Object object1 = new Object();
      Object[] objectArray0 = new Object[15];
      Object object2 = new Object();
      objectArray0[0] = object2;
      Locale locale1 = Locale.CHINA;
      locale0.getDisplayVariant(locale1);
      Object object3 = new Object();
      objectArray0[2] = object3;
      Player player0 = new Player((-209), "", "Player", (-1));
      Player player1 = new Player((-22784));
      player0.add(player1);
      player0.setJoinOK(player1, false);
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player1.getIP());
      assertTrue(player1.isConnected());
      assertEquals(0, player1.getPictureId());
      assertEquals("Player-22784", player1.toString());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertEquals("", player0.getIP());
      assertFalse(player1.isDead());
      assertEquals((-1), player0.getPictureId());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(1, player1.getStrength());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player(0, " ", "$nc4", 2515);
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Party party0 = new Party();
      party0.getSubparty();
      party0.getSubparty();
      Player player0 = new Player(0, ";_{9xiT", 10);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10, player0.getPictureId());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "%@a)!1h";
      Player player0 = new Player(342, "L0Zd44 x/!^6|", "$o", 4, 10);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(2570, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "gui.ModuleBrowserDialog$ModuleFilter", (-1431), (-3266));
      player0.setZ(1353.24F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player1 = new Player((-364), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Qo!^-YfS8 }", (-375));
      player0.isJoinOK(player1, true);
      player0.gangStrength();
      assertEquals(1353.24F, player0.getZ(), 0.01F);
      
      player1.getZ();
      int int0 = player1.gangStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Party party0 = new Party();
      Player player0 = new Player((-1769), "~e{N|2&]Y", "&p", 0, (-1769));
      Party party1 = player0.head;
      party0.next = null;
      party0.getSubparty();
      party0.getSubparty();
      String string0 = player0.getIP();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0, player0.getPictureId());
      assertEquals((-1769), player0.getStrength());
      assertEquals("~e{N|2&]Y", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player((-10), "gwUT\"-", "gwUT\"-", 31, 31);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m/");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.PRC;
      mockPrintStream0.print(1268);
      MockPrintStream mockPrintStream1 = new MockPrintStream("L ");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      assertEquals(2, byteArrayInputStream0.available());
      
      System.setCurrentTimeMillis((byte)64);
      player0.getZ();
      player0.getName();
      System.setCurrentTimeMillis((short)4919);
      Player player1 = new Player(545, (String) null, "c4V", (byte)10);
      float float0 = player1.getY();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(1, "gwUT\"-", (-1001));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      player0.unpack(byteArray0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gwUT\"-");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      objectOutputStream0.writeUTF(" )7HBQO@|&ReM&6?L4");
      objectOutputStream0.writeUTF("");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("m/");
      mockFileOutputStream0.close();
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      Locale locale0 = Locale.PRC;
      mockPrintStream0.print((-22529));
      MockPrintStream mockPrintStream1 = new MockPrintStream("L ");
      mockPrintStream0.print(15000L);
      mockPrintStream1.print('Q');
      MockPrintStream mockPrintStream2 = new MockPrintStream(mockPrintStream0);
      Player player0 = new Player((-246));
      player0.setY((-22529));
      player0.setX((-246));
      assertEquals((-22529.0F), player0.getY(), 0.01F);
      
      Player player1 = new Player(1558);
      player1.getY();
      player1.pack();
      assertEquals(0.0F, player1.getY(), 0.01F);
  }
}
