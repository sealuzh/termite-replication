/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:51:38 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import javax.sql.ConnectionPoolDataSource;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.h2.jdbcx.JdbcConnectionPool;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "============= end nested exception, level (");
      SQLUtil.normalize("============= end nested exception, level (", false);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("Cm'#]Hm0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.15022055411895
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K]zt9gsSgKCdjv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("80000012-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 7, "");
      TableContainer tableContainer0 = new TableContainer("");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isQuery("select into");
      SQLUtil.isDML("select into");
      // Undeclared exception!
      try { 
        DBDataType.getInstance(" DqeVA/)nuU(xHw");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9482543405540194
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = SQLUtil.normalize("0L?{*B C6Jw", true);
      assertEquals("0L ? { * B C6Jw", string0);
      
      SQLUtil.isQuery(" 4x#cr.HLg");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("delete");
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "Unknown constraint type: ";
      stringArray0[4] = "";
      String string0 = "80000012-00d0-fd77-3ed8-000a0a0b1900";
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog("K]zt9gsSgKCdjv");
      DBSchema dBSchema0 = new DBSchema(":v(C[h{g0W/MM", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Large Objects may not be used in auto-commit mode.", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Unknown constraint type: ", defaultDBTable0, Integer.MIN_VALUE, "?(/uj){y.X@");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"/uj\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2814973815461883
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K]zt9gsSgKCdjv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("80000012-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 7, "");
      vector0.add((DBColumn) defaultDBColumn0);
      assertEquals("[80000012-00d0-fd77-3ed8-000a0a0b1900 : ]", vector0.toString());
      
      SQLUtil.normalize("80000012-00d0-fd77-3ed8-000a0a0b1900", true);
      SQLUtil.renderColumnListWithTableName("", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("<g51>/NS", true);
      SQLUtil.mutatesStructure(".Unknown constraint type: , .CsRF^~`, .K]zt9gsSgKCdjv, ., ., ., .null, .null");
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.327235215055768
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".F<2");
      DBCatalog dBCatalog0 = new DBCatalog("9Vng3/viYp}");
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("9Vng3/viYp}", dBSchema0);
      DBDataType.getInstance(3, "SELECT * FROM ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isQuery("0L?{*B C6Jw");
      SQLUtil.mutatesStructure("callz9itmw&saqyzo");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("callz9itmw&saqyzo");
      assertNull(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-85);
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      char[] charArray0 = new char[1];
      stringBuilder0.append(charArray0);
      SQLUtil.isQuery("drop index");
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("UQkFown constainttyp^: ");
      dBCatalog0.setName("drop index");
      DBSchema dBSchema0 = new DBSchema("drop index", dBCatalog0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isQuery("drop index");
      SQLUtil.mutatesDataOrStructure("exec");
      System.setCurrentTimeMillis((byte)14);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5825483153169175
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SQLUtil.removeComments("org.hsqldb.rowio.RowInputText");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Types.ARRAY";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      defaultDBTable0.setDoc("Types.ARRAY");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "Y5L)3l`w;4~cV4yz";
      stringArray1[1] = "org.hsqldb.rowio.RowInputText";
      stringArray1[2] = "org.hsqldb.rowio.RowInputText";
      stringArray1[3] = "org.hsqldb.rowio.RowInputText";
      stringArray1[4] = "org.hsqldb.rowio.RowInputText";
      stringArray1[5] = "org.hsqldb.rowio.RowInputText";
      stringArray1[6] = "org.hsqldb.rowio.RowInputText";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.hsqldb.rowio.RowInputText", true, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.renderColumnListWithTableName("org.hsqldb.rowio.RowInputText", stringArray0);
      assertEquals("org.hsqldb.rowio.RowInputText.Types.ARRAY", string0);
      
      SQLUtil.removeComments("lO3%9@");
      String string1 = SQLUtil.normalize("Y5L)3l`w;4~cV4yz", true);
      assertEquals("Y5L) 3  l ` w ; 4 ~ cV4yz", string1);
      
      String string2 = SQLUtil.leftJoin("org.hsqldb.rowio.RowInputText", stringArray1, "org.hsqldb.rowio.RowInputText", "org.hsqldb.rowio.RowInputText", stringArray1);
      assertEquals("left join org.hsqldb.rowio.RowInputText as org.hsqldb.rowio.RowInputText on org.hsqldb.rowio.RowInputText.Y5L)3l`w;4~cV4yz = org.hsqldb.rowio.RowInputText.Y5L)3l`w;4~cV4yz and org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText = org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText and org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText = org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText and org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText = org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText and org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText = org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText and org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText = org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText and org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText = org.hsqldb.rowio.RowInputText.org.hsqldb.rowio.RowInputText", string2);
      
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      stringBuilder0.append(true);
      Boolean boolean0 = SQLUtil.mutatesStructure("org.hsqldb.rowio.RowInputText");
      assertFalse(boolean0);
      
      String string3 = SQLUtil.renderValue(stringBuilder0);
      assertEquals("true", string3);
      
      String string4 = SQLUtil.renderValue("org.hsqldb.rowio.RowInputText");
      assertEquals("'org.hsqldb.rowio.RowInputText'", string4);
      
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string5 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (Y5L)3l`w;4~cV4yz, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText) REFERENCES null(Y5L)3l`w;4~cV4yz, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText, org.hsqldb.rowio.RowInputText)", string5);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4431633337638496
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")m<5EQAs$439D)");
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FROM ");
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCatalog0.setOwner(compositeDBObject0);
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ", dBSchema0);
      DBDataType.getInstance((-1528), "Illegal column type format: ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer((String) null);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isQuery("*]K*/)6ocMbMbR4qk;");
      SQLUtil.mutatesStructure("\u0001\u01B8");
      SQLUtil.mutatesDataOrStructure("Illegal column type format: ");
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5364165500896823
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SQLUtil.removeComments("org.hsqldb.rowio.RowInputText");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Types.ARRAY";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      defaultDBTable0.setDoc("Types.ARRAY");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "Y5L)3l`w;4~cV4yz";
      stringArray1[1] = "org.hsqldb.rowio.RowInputText";
      stringArray1[2] = "org.hsqldb.rowio.RowInputText";
      stringArray1[3] = "org.hsqldb.rowio.RowInputText";
      stringArray1[4] = "org.hsqldb.rowio.RowInputText";
      stringArray1[5] = "org.hsqldb.rowio.RowInputText";
      stringArray1[6] = "org.hsqldb.rowio.RowInputText";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.hsqldb.rowio.RowInputText", true, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnListWithTableName("org.hsqldb.rowio.RowInputText", stringArray1);
      SQLUtil.normalize("Y5L)3l`w;4~cV4yz", true);
      SQLUtil.leftJoin("org.hsqldb.rowio.RowInputText", stringArray1, "org.hsqldb.rowio.RowInputText", "org.hsqldb.rowio.RowInputText", stringArray1);
      StringBuilder stringBuilder1 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      stringBuilder1.append(true);
      SQLUtil.mutatesStructure("org.hsqldb.rowio.RowInputText");
      SQLUtil.renderValue(stringBuilder1);
      SQLUtil.renderValue("org.hsqldb.rowio.RowInputText");
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(">z}j(BjH}mTq(Z@;L#/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: >z}j(BjH}mTq(Z@;L#/
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7581150953988849
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "Unknown constraint type: ";
      stringArray0[0] = "Unknown constraint type: ";
      String string1 = "CsRF^~`";
      stringArray0[1] = "CsRF^~`";
      String string2 = "K]zt9gsSgKCdjv";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K]zt9gsSgKCdjv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("80000012-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 7, "");
      vector0.add((DBColumn) defaultDBColumn0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6749380581172693
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("Unknown constraint type:  = 'Unknown constraint type: ' AND CsRF^~` = 'CsRF^~`' AND K]zt9gsSgKCdjv = 'K]zt9gsSgKCdjv' AND  = '' AND  = '' AND  = '' AND null = null AND null = null", string0);
      
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K]zt9gsSgKCdjv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Unknown constraint type: ", defaultDBTable0, (DBDataType) null);
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("80000012-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 7, "");
      vector0.add((DBColumn) defaultDBColumn1);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("Unknown constraint type: , 80000012-00d0-fd77-3ed8-000a0a0b1900", string1);
      
      String string2 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".Unknown constraint type: , .CsRF^~`, .K]zt9gsSgKCdjv, ., ., ., .null, .null", string2);
      
      String string3 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(Unknown constraint type: , CsRF^~`, K]zt9gsSgKCdjv, , , , , )", string3);
      
      Boolean boolean0 = SQLUtil.mutatesStructure("80000012-00d0-fd77-3ed8-000a0a0b1900");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.565394837118028
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")m<5EQAs$439D)");
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FROM ");
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCatalog0.setOwner(compositeDBObject0);
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ", dBSchema0);
      DBDataType.getInstance(2278, "delete");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create materialized view";
      String string0 = SQLUtil.leftJoin("7TDf`v1\"/KJ2x!]", stringArray0, "FF';J", "FF';J", stringArray0);
      assertEquals("left join FF';J as FF';J on 7TDf`v1\"/KJ2x!].create materialized view = FF';J.create materialized view and 7TDf`v1\"/KJ2x!].null = FF';J.null and 7TDf`v1\"/KJ2x!].null = FF';J.null and 7TDf`v1\"/KJ2x!].null = FF';J.null", string0);
      
      boolean boolean0 = SQLUtil.isDDL("create materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1273525491449161
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "selectm+/,";
      TableContainer tableContainer0 = new TableContainer("TYPEINFO");
      tableContainer0.getSchema();
      String string1 = "IJo";
      String string2 = " and ";
      String[] stringArray0 = new String[4];
      String string3 = "";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "TYPEINFO";
      objectArray0[1] = (Object) tableContainer0;
      objectArray0[2] = (Object) "TYPEINFO";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")m<5EQAs$439D)");
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FROM ");
      dBCatalog0.equals((Object) null);
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      dBSchema0.getTables(false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ", dBSchema0);
      int int0 = (-1528);
      String string0 = "Illegal column type format: ";
      DBDataType.getInstance((-1528), "Illegal column type format: ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, 32, "SELECT * FROM ");
      DBColumn dBColumn0 = null;
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.15022055411895
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "CsRF^~`";
      stringArray0[5] = "";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("Unknown constraint type:  = 'Unknown constraint type: ' AND CsRF^~` = 'CsRF^~`' AND K]zt9gsSgKCdjv = 'K]zt9gsSgKCdjv' AND  = '' AND CsRF^~` = 'CsRF^~`' AND  = '' AND null = null AND null = null", string0);
      
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K]zt9gsSgKCdjv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Unknown constraint type: ", defaultDBTable0, 296, "K]zt9gsSgKCdjv");
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("80000012-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 7, "CsRF^~`");
      vector0.add((DBColumn) defaultDBColumn1);
      SQLUtil.normalize("", true);
      String string1 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".Unknown constraint type: , .CsRF^~`, .K]zt9gsSgKCdjv, ., .CsRF^~`, ., .null, .null", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(Unknown constraint type: , CsRF^~`, K]zt9gsSgKCdjv, , CsRF^~`, , , )", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5383021566264516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SQLUtil.removeComments("org.hsqldb.rowio.RowInputText");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Types.ARRAY";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      defaultDBTable0.setDoc("Types.ARRAY");
      String[] stringArray1 = new String[7];
      stringArray1[0] = "Y5L)3l`w;4~cV4yz";
      stringArray1[1] = "org.hsqldb.rowio.RowInputText";
      stringArray1[2] = "org.hsqldb.rowio.RowInputText";
      stringArray1[3] = "org.hsqldb.rowio.RowInputText";
      stringArray1[4] = "org.hsqldb.rowio.RowInputText";
      stringArray1[5] = "org.hsqldb.rowio.RowInputText";
      stringArray1[6] = "org.hsqldb.rowio.RowInputText";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.hsqldb.rowio.RowInputText", true, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBForeignKeyConstraint0.setTable(defaultDBTable0);
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      SQLUtil.renderColumnListWithTableName("org.hsqldb.rowio.RowInputText", stringArray1);
      SQLUtil.removeComments("lO3%9@");
      SQLUtil.normalize("Y5L)3l`w;4~cV4yz", true);
      SQLUtil.leftJoin("org.hsqldb.rowio.RowInputText", stringArray1, "org.hsqldb.rowio.RowInputText", "org.hsqldb.rowio.RowInputText", stringArray1);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      stringBuilder0.append(true);
      SQLUtil.mutatesStructure("org.hsqldb.rowio.RowInputText");
      SQLUtil.renderValue(stringBuilder0);
      SQLUtil.renderValue("org.hsqldb.rowio.RowInputText");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.ownerDotComponent(dBForeignKeyConstraint0);
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBTable0.getUniqueConstraint(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = ")m<5EQAs$439D)";
      SQLUtil.normalize(")m<5EQAs$439D)", false);
      String string1 = " READONLY";
      SQLUtil.normalize(" READONLY", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        DBDataType.getInstance(" READONLY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4359838465843624
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "ELf<k";
      SQLUtil.mutatesDataOrStructure("ELf<k");
      DBCatalog dBCatalog0 = new DBCatalog();
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.857951400568726
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "Unknown constraint type: ";
      stringArray0[4] = "";
      stringArray0[1] = "";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("80000012-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 7, "");
      vector0.add((DBColumn) defaultDBColumn0);
      vector0.add((DBColumn) defaultDBColumn0);
      assertEquals("[80000012-00d0-fd77-3ed8-000a0a0b1900 : , 80000012-00d0-fd77-3ed8-000a0a0b1900 : ]", vector0.toString());
      
      SQLUtil.normalize("80000012-00d0-fd77-3ed8-000a0a0b1900", true);
      SQLUtil.renderColumnListWithTableName("Unknown constraint type: ", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("<g51>/NS", true);
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      DBDataType dBDataType0 = DBDataType.getInstance(99, "CONSTRAINT ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedLong(7);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("K]zt9gsSgKCdjv", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(dBColumnArray0[4]);
      String string0 = SQLUtil.renderWhereClause(stringArray0, dBColumnArray0);
      assertEquals("Unknown constraint type:  = 80000012-00d0-fd77-3ed8-000a0a0b1900 :  AND  = 80000012-00d0-fd77-3ed8-000a0a0b1900 :  AND K]zt9gsSgKCdjv = 80000012-00d0-fd77-3ed8-000a0a0b1900 :  AND Unknown constraint type:  = 80000012-00d0-fd77-3ed8-000a0a0b1900 :  AND  = 80000012-00d0-fd77-3ed8-000a0a0b1900 :  AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      byte byte0 = (byte)42;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-85);
      byteArray0[6] = (byte)42;
      byteArray0[7] = (byte) (-85);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "}6*)[?'bni-{^K&ML";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("}6*)[?'bni-{^K&ML", stringBuilder0);
      char[] charArray0 = new char[2];
      stringBuilder1.append((Object) stringBuilder0);
      charArray0[0] = 'b';
      charArray0[1] = '=';
      stringBuilder0.append(charArray0);
      // Undeclared exception!
      try { 
        stringBuilder1.delete((byte) (-85), (byte)14);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -85
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4719237032510453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SQLUtil.normalize("0L?{*B C6Jw", true);
      SQLUtil.normalize("execute|2_!{4frqsmki/", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "execute|2_!{4frqsmki/";
      stringArray0[1] = "0L?{*B C6Jw";
      stringArray0[2] = "execute|2_!{4frqsmki/";
      stringArray0[3] = "0L?{*B C6Jw";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\"ci~>VTyS", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6948896539491203
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = " DEFAULT ";
      stringArray0[1] = "0L?{*B C6Jw";
      stringArray0[2] = " DEFAULT ";
      stringArray0[3] = "execute|2_!{4frqsmki/";
      stringArray0[4] = " DEFAULT ";
      stringArray0[5] = "execute|2_!{4frqsmki/";
      stringArray0[6] = "execute|2_!{4frqsmki/";
      stringArray0[8] = " DEFAULT ";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")m<5EQAs$439D)");
      String string0 = "SELECT * FROM ";
      DBCatalog dBCatalog0 = new DBCatalog("SELECT * FROM ");
      CompositeDBObject<DBPrimaryKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBPrimaryKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCatalog0.setOwner(compositeDBObject0);
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      TableContainer tableContainer0 = new TableContainer((String) null);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isQuery("80000012-00d0-fd77-3ed8-");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "Unknown constraint type: ";
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      TableContainer tableContainer0 = new TableContainer("TYPEINFO");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("selectm+/,", (DBSchema) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "IJo";
      stringArray0[1] = "selectm+/,";
      stringArray0[2] = " and ";
      stringArray0[3] = null;
      stringArray0[4] = "}*HsS";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" and ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(" or ");
      StringBuilder stringBuilder1 = stringBuilder0.append((-2488.326184449));
      stringBuilder1.codePoints();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      SQLUtil.addRequiredCondition("jdbc:firebirdsql:native:", stringBuilder0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, stringArray0[3], false, " or ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ' or ' not found in table 'null'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8566159543539655
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      DBSchema dBSchema0 = new DBSchema("UQkFown constainttyp^: ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index", dBSchema0);
      DBDataType.getInstance(31, "UQkFown constainttyp^: ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "drop index";
      stringArray0[2] = "drop index";
      stringArray0[3] = "drop index";
      stringArray0[4] = "";
      dBCatalog0.setDoc("");
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "K]zt9gsSgKCdjv";
      stringArray0[8] = "K]zt9gsSgKCdjv";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.databene.jdbacl.SQLUtil", defaultDBTable0, 7, "}6*)[?'bni-{^k&ml");
      vector0.add((DBColumn) defaultDBColumn0);
      assertEquals("[org.databene.jdbacl.SQLUtil : }6*)[?'BNI-{^K&ML]", vector0.toString());
      
      SQLUtil.normalize("org.databene.jdbacl.SQLUtil", true);
      SQLUtil.renderColumnListWithTableName("updateClob(", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.normalize("NCLOB", true);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("}6*)[?'BNI-{^K&ML", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3230994163312477
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      DBSchema dBSchema0 = new DBSchema("Unknown constaint type: ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d}x#", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(31, "d}x#");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C7^9ER>dKNrjvsf*E", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.mutatesStructure("drop index");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(">TB?846mIQqd&0$f}5Z");
      assertNull(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7663176302165642
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      DBSchema dBSchema0 = new DBSchema("Unknown constaint type: ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop index", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(31, "Unknown constaint type: ");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C7^9ER>dKNrjvsf*E", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("os.name");
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("-\"Y+f2^<", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("org.databene.commons.collection.OrderedNameMap", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.insert(31, 31);
      StringBuilder stringBuilder4 = stringBuilder3.append((long) 31);
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = 'q';
      charArray0[2] = 'h';
      charArray0[3] = '&';
      char[] charArray1 = new char[8];
      charArray1[0] = 'L';
      charArray1[1] = 'i';
      charArray1[2] = 'q';
      charArray1[3] = 'h';
      charArray1[4] = 'q';
      charArray1[5] = 'i';
      charArray1[6] = 'q';
      charArray1[7] = '&';
      stringBuilder1.append(charArray1);
      charArray0[4] = 'e';
      // Undeclared exception!
      try { 
        stringBuilder4.append(charArray0, (-1913395246), (-748));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6593340983935647
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      DBSchema dBSchema0 = new DBSchema("Unknown constaint type: ", dBCatalog0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d}x#", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(31, "d}x#");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("C7^9ER>dKNrjvsf*E", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue(", ");
      SQLUtil.renderColumn(defaultDBColumn0);
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder("Unknown constaint type: ");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("pkG,O'zi/zaK~", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      String string0 = "";
      String[] stringArray0 = new String[0];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, (-1423), "");
      vector0.add((DBColumn) defaultDBColumn0);
      DefaultDBColumn defaultDBColumn1 = null;
      try {
        defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, (-1423), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6982543669034142
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCatalog dBCatalog0 = new DBCatalog("c_'%#%mH>jHIYe`kQ>");
      DBSchema dBSchema0 = new DBSchema("alter tableexecz9itmw&saqyzo", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Dqe_6^a}si+", dBSchema0);
      String[] stringArray0 = new String[3];
      dBCatalog0.removeSchema(dBSchema0);
      stringArray0[0] = "P MJ<}:boF:~yNb3;E";
      stringArray0[1] = "P MJ<}:boF:~yNb3;E";
      stringArray0[2] = "P MJ<}:boF:~yNb3;E";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("P MJ<}:boF:~yNb3;E", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("%w(c8T:#R|FmvIy7@E");
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("P MJ<}:boF:~yNb3;E", defaultDBTable0, 154, "Dqe_6^a}si+");
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.join("'", "DATE", stringArray0, "Jb", "Jb", stringArray0);
      SQLUtil.join("P MJ<}:boF:~yNb3;E", "SYSCS_UTIL", stringArray0, "alter tableexecz9itmw&saqyzo", "Jb", stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.943947783633474
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis((-1038L));
      boolean boolean0 = SQLUtil.isDDL("4?Z.Xn:W\"");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "4?Z.Xn:W\"";
      stringArray0[5] = "4?Z.Xn:W\"";
      stringArray0[3] = "4?Z.Xn:W\"";
      stringArray0[4] = "4?Z.Xn:W\"";
      stringArray0[5] = "4?Z.Xn:W\"";
      DBDataType dBDataType0 = DBDataType.getInstance((-1528), "select into");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("ALTER TABLE ");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select into", (DBSchema) null);
      DBDataType.getInstance((-1528), ":W|D[w63*ggh*GzaGo");
      defaultDBTable0.setDoc("alter table");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4?Z.Xn:W\"", defaultDBTable0, dBDataType0, integer1);
      Integer.getInteger("4?Z.Xn:W\"", (Integer) null);
      defaultDBColumn0.setDoc("\u0001\u014D");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("ALTER TABLE ", defaultDBTable0, (-1656), "?Ij\"{RH]L|!3Ab");
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("ALTER TABLE  ?IJ\"{RH]L|!3AB NULL", string0);
      
      tableContainer0.setDoc("?Ij\"{RH]L|!3Ab");
      boolean boolean1 = SQLUtil.isQuery("update|2_!{4frqosmki/");
      assertTrue(boolean1 == boolean0);
      
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM select into WHERE null = null AND 4?Z.Xn:W\" = '4?Z.Xn:W\"' AND null = null AND 4?Z.Xn:W\" = '4?Z.Xn:W\"' AND 4?Z.Xn:W\" = '4?Z.Xn:W\"' AND 4?Z.Xn:W\" = '4?Z.Xn:W\"'", string1);
      
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized view", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, 4?Z.Xn:W\", , 4?Z.Xn:W\", 4?Z.Xn:W\", 4?Z.Xn:W\")", string2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2508570947192676
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.h2.expression.ExpressionVisitor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.expression.ExpressionVisitor", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.expression.ExpressionVisitor";
      stringArray0[1] = "org.h2.expression.ExpressionVisitor";
      stringArray0[2] = "org.h2.expression.ExpressionVisitor";
      stringArray0[3] = "IJo";
      stringArray0[4] = "org.h2.expression.ExpressionVisitor";
      stringArray0[5] = "org.h2.expression.ExpressionVisitor";
      stringArray0[6] = "org.h2.expression.ExpressionVisitor";
      stringArray0[7] = "org.h2.expression.ExpressionVisitor";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.expression.ExpressionVisitor", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("IJo");
      StringBuilder stringBuilder1 = stringBuilder0.append(915.3568);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      SQLUtil.addRequiredCondition("org.h2.expression.ExpressionVisitor", stringBuilder1);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder2, nameSpec1);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec2);
      MockFile mockFile0 = new MockFile("truncate", "org.h2.expression.ExpressionVisitor");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "?LAW");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ?LAW
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9313637081915067
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      boolean boolean0 = true;
      SQLUtil.normalize(".6$'-D]*xDX>nQB", true);
      TableContainer tableContainer0 = new TableContainer(".6$'-D]*xDX>nQB", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.setOwner((CompositeDBObject<?>) null);
      tableContainer0.getSchema();
      tableContainer0.getTable("x,Y'3mmhm{Bz{T");
      SQLUtil.isDML("H)+s><L0(%#I");
      // Undeclared exception!
      try { 
        DBDataType.getInstance("H)+s><L0(%#I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3617945128069984
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = true;
      DBSchema dBSchema0 = new DBSchema("org.h2.expression.ExpressionVisitor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.expression.ExpressionVisitor", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.expression.ExpressionVisitor";
      stringArray0[1] = "org.h2.expression.ExpressionVisitor";
      stringArray0[2] = "org.h2.expression.ExpressionVisitor";
      stringArray0[3] = "IJo";
      stringArray0[4] = "org.h2.expression.ExpressionVisitor";
      stringArray0[5] = "org.h2.expression.ExpressionVisitor";
      stringArray0[6] = "org.h2.expression.ExpressionVisitor";
      stringArray0[7] = "org.h2.expression.ExpressionVisitor";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.expression.ExpressionVisitor", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("IJo");
      stringBuilder0.append(915.3568);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec1);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec2);
      MockFile mockFile0 = new MockFile("truncate", "org.h2.expression.ExpressionVisitor");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter(mockFile0, "org.h2.expression.ExpressionVisitor");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // org.h2.expression.ExpressionVisitor
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Tk!,+L^b$AI}6oC";
      stringArray0[1] = "Tk!,+L^b$AI}6oC";
      stringArray0[2] = "Tk!,+L^b$AI}6oC";
      stringArray0[3] = "updateLong";
      stringArray0[4] = "Tk!,+L^b$AI}6oC";
      stringArray0[5] = "Tk!,+L^b$AI}6oC";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "Tk!,+L^b$AI}6oC";
      stringArray1[1] = "updateLong";
      stringArray1[2] = "//";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("Tk!,+L^b$AI}6oC", stringArray0, "Tk!,+L^b$AI}6oC", "Tk!,+L^b$AI}6oC", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7705542569095885
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      String[] stringArray0 = new String[0];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("NCLOB");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("l'9 HvjQs]0u-E=", defaultDBTable0, 1816, "K@yk}?.Ljsfce");
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.normalize("NCLOB", true);
      SQLUtil.renderColumnListWithTableName("K@yk}?.Ljsfce", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[1];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("create unique indexupdatebyte(", stringArray1, "NCLOB", ",]F#~-U", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.3938827667689906
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "#U)-E~yR";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBPackage dBPackage0 = new DBPackage("K]zt9gsSgKCdjv", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("", dBPackage0);
      dBPackage0.toString();
      dBProcedure0.toString();
      dBProcedure0.setOverload("80000012-00d0-fd77-3ed8-000a0a0b1900");
      dBProcedure0.setObjectId("");
      dBProcedure0.setOverload("CsRF^~`");
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("K]zt9gsSgKCdjv.", string0);
      
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("80000012-00d0-fd77-3ed8-000a0a0b1900");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("#U)-E~yR", defaultDBTable0, 7, "CsRF^~`");
      vector0.add((DBColumn) defaultDBColumn0);
      String string1 = SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      assertEquals("#U)-E~yR", string1);
      
      String string2 = SQLUtil.renderColumnListWithTableName("org.apache.derby.impl.sql.execute.OnceResultSet", stringArray0);
      assertEquals("org.apache.derby.impl.sql.execute.OnceResultSet.Unknown constraint type: , org.apache.derby.impl.sql.execute.OnceResultSet.CsRF^~`, org.apache.derby.impl.sql.execute.OnceResultSet.K]zt9gsSgKCdjv, org.apache.derby.impl.sql.execute.OnceResultSet., org.apache.derby.impl.sql.execute.OnceResultSet., org.apache.derby.impl.sql.execute.OnceResultSet., org.apache.derby.impl.sql.execute.OnceResultSet., org.apache.derby.impl.sql.execute.OnceResultSet.#U)-E~yR", string2);
      
      String string3 = SQLUtil.leftJoin("org.apache.derby.impl.sql.execute.OnceResultSet", stringArray0, "#U)-E~yR", " on ", stringArray0);
      assertEquals("left join #U)-E~yR as  on  on org.apache.derby.impl.sql.execute.OnceResultSet.Unknown constraint type:  =  on .Unknown constraint type:  and org.apache.derby.impl.sql.execute.OnceResultSet.CsRF^~` =  on .CsRF^~` and org.apache.derby.impl.sql.execute.OnceResultSet.K]zt9gsSgKCdjv =  on .K]zt9gsSgKCdjv and org.apache.derby.impl.sql.execute.OnceResultSet. =  on . and org.apache.derby.impl.sql.execute.OnceResultSet. =  on . and org.apache.derby.impl.sql.execute.OnceResultSet. =  on . and org.apache.derby.impl.sql.execute.OnceResultSet. =  on . and org.apache.derby.impl.sql.execute.OnceResultSet.#U)-E~yR =  on .#U)-E~yR", string3);
      
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("Unknown constraint type: ", dBSchema0);
      String string4 = SQLUtil.renderQuery(defaultDBTable1, stringArray0, stringArray0);
      assertEquals("SELECT * FROM Unknown constraint type:  WHERE Unknown constraint type:  = 'Unknown constraint type: ' AND CsRF^~` = 'CsRF^~`' AND K]zt9gsSgKCdjv = 'K]zt9gsSgKCdjv' AND  = '' AND  = '' AND  = '' AND  = '' AND #U)-E~yR = '#U)-E~yR'", string4);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "M+/,";
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("M+/,", (String[]) null, "M+/,", "M+/,", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.h2.expression.ExpressionVisitor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.expression.ExpressionVisitor", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.expression.ExpressionVisitor";
      stringArray0[1] = "org.h2.expression.ExpressionVisitor";
      stringArray0[2] = "org.h2.expression.ExpressionVisitor";
      stringArray0[3] = "IJo";
      stringArray0[4] = "org.h2.expression.ExpressionVisitor";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("call");
      StringBuilder stringBuilder1 = stringBuilder0.append(32768.0);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) "org.h2.expression.ExpressionVisitor");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder3 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder2, nameSpec0);
      stringBuilder3.append(90052);
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      StringBuilder stringBuilder4 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder3, nameSpec1);
      assertEquals("call32768.0org.h2.expression.ExpressionVisitor90052", stringBuilder3.toString());
      assertEquals("call32768.0org.h2.expression.ExpressionVisitor90052", stringBuilder4.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8937277100473913
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hd4I?7+h#9");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "L010", true, (String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec1);
      int int0 = 793;
      // Undeclared exception!
      try { 
        stringBuilder0.insert(793, (CharSequence) "hd4I?7+h#9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 793
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("org.h2.expression.ExpressionVisitor");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("org.h2.expression.ExpressionVisitor", dBSchema0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.h2.expression.ExpressionVisitor";
      stringArray0[1] = "org.h2.expression.ExpressionVisitor";
      stringArray0[2] = "org.h2.expression.ExpressionVisitor";
      stringArray0[3] = "IJo";
      stringArray0[4] = "org.h2.expression.ExpressionVisitor";
      stringArray0[5] = "org.h2.expression.ExpressionVisitor";
      stringArray0[6] = "org.h2.expression.ExpressionVisitor";
      stringArray0[7] = "org.h2.expression.ExpressionVisitor";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("org.h2.expression.ExpressionVisitor", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      FileUtil fileUtil0 = FileUtil.getDefaultInstance();
      OutputStream outputStream0 = fileUtil0.openOutputStreamElement("|2_!{4frqsmki/");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(outputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("foreign key constraint", dBForeignKeyConstraint0.getObjectType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("setTime(String,Time,Calendar)", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("SELECT * FROM ", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(2298, "Xh%Q");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, dBDataType0, integer0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("SELECT * FROM ", defaultDBTable0, dBDataType0, integer1, integer1);
      SQLUtil.renderColumn(defaultDBColumn1);
      String string0 = SQLUtil.removeComments("SELECT * FROM ");
      assertEquals("SELECT * FROM ", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4711150027132236
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SQLUtil.isDDL("4?Z.Xn:W\"");
      String[] stringArray0 = new String[6];
      stringArray0[1] = "4?Z.Xn:W\"";
      stringArray0[5] = "4?Z.Xn:W\"";
      stringArray0[4] = "4?Z.Xn:W\"";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("ALTER TABLE ");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isQuery("update|2_!{4frqosmki/");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("$DK&q$_7fP/NV!oV+{");
      assertNull(boolean0);
      
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertNotNull(string0);
      assertEquals("container ALTER TABLE ", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getColumns();
      SQLUtil.typeAndName(defaultDBTable0);
      Integer integer0 = RawTransaction.ABORT;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        DBDataType.getInstance(".BjWG[Tg#lTF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.ownerDotComponent(defaultDBTable0);
      defaultDBTable0.getIndex("null");
      TableContainer tableContainer0 = new TableContainer(" AND ", defaultDBTable0);
      SQLUtil.ownerDotComponent(tableContainer0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " AND ";
      stringArray0[1] = "null";
      stringArray0[2] = "null";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'null' has no foreign key with the columns ( AND , null, null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      TableContainer tableContainer0 = new TableContainer("TYPEINFO");
      tableContainer0.getSchema();
      SQLUtil.typeAndName((DBObject) null);
      Integer integer0 = RawTransaction.ABORT;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5108045110385615
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("|2_!{4FRqSmKI/");
      String string0 = "executeBatch";
      Integer integer0 = RawTransaction.ABORT;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "executez9itmw&saqyzo";
      stringArray0[1] = "tCcn^v]h22s4.F/O0`e";
      stringArray0[2] = "executez9itmw&saqyzo";
      stringArray0[3] = "executeBatch";
      stringArray0[4] = "|2_!{4FRqSmKI/";
      stringArray0[5] = "|2_!{4FRqSmKI/";
      SQLUtil.join("executeBatch", "|2_!{4FRqSmKI/", stringArray0, "6l4g?Jx<Q{xE", "}{8[O", stringArray0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5650904515357
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "Unknown constraint type: ";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DBCatalog dBCatalog0 = new DBCatalog("K]zt9gsSgKCdjv");
      DBSchema dBSchema0 = new DBSchema(":v(C[h{g0W/MM", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K]zt9gsSgKCdjv");
      // Undeclared exception!
      try { 
        SQLUtil.join("Unknown constraint type: ", "K1n^Ftc^p(f}V9=Im=", (String[]) null, "drop materialized view", "", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "L\"TG/LYiC3W>9C*n~";
      String string1 = "alter index";
      SQLUtil.substituteMarkers("alter index", "_[9A[`4Bi-m", (Object) null);
      String string2 = "";
      SQLUtil.isProcedureCall("L\"TG/LYiC3W>9C*n~");
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool.create((ConnectionPoolDataSource) null);
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create("", "_[9A[`4Bi-m", "alter index");
      jdbcConnectionPool0.getLogWriter();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      String string3 = "update";
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "update", versionNumber0);
      String string4 = "";
      DefaultDatabase defaultDatabase1 = new DefaultDatabase("Can't set query timeout negative", "", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase1.getTable("F%8Z4s6|U;JB'N(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table 'F%8Z4s6|U;JB'N('
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5333444197896682
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      ArrayList<Object> arrayList0 = new ArrayList<Object>(90065);
      VersionNumber versionNumber0 = new VersionNumber(arrayList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("_[9A[`4Bi-m", "L\"TG/LYiC3W>9C*n~", versionNumber0);
      defaultDatabase0.getTable("", false);
      DBDataType dBDataType0 = DBDataType.getInstance(385, "_[9A[`4Bi-m");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_[9A[`4Bi-m", (DBTable) null, dBDataType0, integer0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("L\"TG/LYiC3W>9C*n~", (DBTable) null, 209, "alter tableexecz9itmw&saqyzo");
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("_[9A[`4Bi-m, L\"TG/LYiC3W>9C*n~", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "alter tableexecz9itmw&saqyzo";
      stringArray0[1] = "left";
      stringArray0[2] = "alter tableexecz9itmw&saqyzo";
      String string1 = SQLUtil.innerJoin("left", stringArray0, "_[9A[`4Bi-m, L\"TG/LYiC3W>9C*n~", "MN;m;qEIXbCo<%ti>fK", stringArray0);
      assertEquals("_[9A[`4Bi-m, L\"TG/LYiC3W>9C*n~ as MN;m;qEIXbCo<%ti>fK on left.alter tableexecz9itmw&saqyzo = MN;m;qEIXbCo<%ti>fK.alter tableexecz9itmw&saqyzo and left.left = MN;m;qEIXbCo<%ti>fK.left and left.alter tableexecz9itmw&saqyzo = MN;m;qEIXbCo<%ti>fK.alter tableexecz9itmw&saqyzo", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "updateByte(";
      SQLUtil.mutatesStructure("updateByte(");
      String string1 = "Cm/SnvmO@.d:xPz";
      // Undeclared exception!
      try { 
        DBDataType.getInstance((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.960841804955975
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      dBCatalog0.setName("Uk)pEY(+5}tcph");
      DBSchema dBSchema0 = new DBSchema("Unknown constaint type: ", dBCatalog0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)42;
      byteArray0[5] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TableContainer tableContainer0 = new TableContainer("org.postgresql.jdbc4.AbstractJdbc4Blob");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      SQLUtil.isQuery("Unknown constaint type: ");
      SQLUtil.mutatesDataOrStructure("drop index");
      System.setCurrentTimeMillis((byte)89);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "N)!zw";
      stringArray0[1] = "N)!zw";
      stringArray0[2] = "N)!zw";
      stringArray0[3] = "N)!zw";
      stringArray0[4] = "org.databene.jdbacl.SQLUtil";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      stringArray0[5] = "org.databene.jdbacl.SQLUtil";
      stringArray0[6] = "renameorg.hsqldb.rowio.rowinputtext";
      SQLUtil.join("org.databene.jdbacl.SQLUtil", "N)!zw", stringArray0, "-?H[c", "org.databene.jdbacl.SQLUtil", stringArray0);
      TableContainer tableContainer0 = new TableContainer("7Yf+!BYjS` ", (CompositeDBObject<? extends DBObject>) null);
      tableContainer0.getTable("org.h2.command.ddl.DropFunctionAlias");
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3447004957129813
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("SELECT * FROM ", dBCatalog0);
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("alter session", stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("SELECT * FROM ", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append(468.2704718);
      stringBuilder3.append((-319427342));
      StringBuilder stringBuilder4 = new StringBuilder("alter session");
      StringBuilder stringBuilder5 = stringBuilder4.append('m');
      StringBuilder stringBuilder6 = stringBuilder5.append(0.12);
      SQLUtil.addOptionalCondition("%9@H2h][{O |Pe.", stringBuilder6);
      assertEquals("alter sessionm0.12 or %9@H2h][{O |Pe.", stringBuilder6.toString());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "B0bfMBD0Wb[";
      stringArray0[1] = "%9@H2h][{O |Pe.";
      String string0 = SQLUtil.join("", "B0bfMBD0Wb[", stringArray0, "%9@H2h][{O |Pe.", "B0bfMBD0Wb[", stringArray0);
      assertEquals("%9@H2h][{O |Pe. as B0bfMBD0Wb[ on B0bfMBD0Wb[.B0bfMBD0Wb[ = B0bfMBD0Wb[.B0bfMBD0Wb[ and B0bfMBD0Wb[.%9@H2h][{O |Pe. = B0bfMBD0Wb[.%9@H2h][{O |Pe.", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String string0 = "Unknown constaint type: ";
      DBCatalog dBCatalog0 = new DBCatalog("drop index");
      DBSchema dBSchema0 = new DBSchema("Unknown constaint type: ", dBCatalog0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("d}x#", dBSchema0);
      DBDataType.getInstance(31, "d}x#");
      Integer integer0 = new Integer(31);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("");
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("package");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop index", defaultDBTable2, 31, " or ");
      vector0.add((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames((List<DBColumn>) vector0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.parseColumnTypeAndSize(" ORDER BY ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{!Q?4'0\fm]aO@YJ%v";
      stringArray0[1] = " ORDER BY ";
      stringArray0[2] = "Md=el2Po";
      stringArray0[3] = "";
      stringArray0[4] = " ORDER BY ";
      stringArray0[5] = "?{F_R'(x7jy^K-o";
      stringArray0[6] = "w9(!ui[pDBiX'miL.Su";
      stringArray0[7] = " ORDER BY ";
      stringArray0[8] = " ORDER BY ";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("({!Q?4'0\fm]aO@YJ%v,  ORDER BY , Md=el2Po, ,  ORDER BY , ?{F_R'(x7jy^K-o, w9(!ui[pDBiX'miL.Su,  ORDER BY ,  ORDER BY )", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String string0 = "";
      SQLUtil.removeComments("");
      SQLUtil.isDML(";hVl_|9ihv%&");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(constraintDescriptorList0, constraintDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("Unknown constraint type: ", " (", versionNumber0);
      VersionNumber versionNumber1 = new VersionNumber(constraintDescriptorList0);
      DefaultDatabase defaultDatabase1 = new DefaultDatabase(" (", "DhVpJM", versionNumber1);
      // Undeclared exception!
      try { 
        defaultDatabase1.getTable("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ''
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String string0 = "}q1?t>#9)P";
      boolean boolean0 = false;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}q1?t>#9)P");
      defaultDBTable0.getIndex("}q1?t>#9)P");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3238614379613667
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String string0 = null;
      String string1 = "8WfT^_";
      SQLUtil.mutatesDataOrStructure("8WfT^_");
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      JdbcConnectionPool jdbcConnectionPool0 = JdbcConnectionPool.create((ConnectionPoolDataSource) jdbcDataSource0);
      jdbcConnectionPool0.getLogWriter();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      Locale locale0 = Locale.KOREA;
      PrintWriter printWriter0 = mockPrintWriter0.format(locale0, "callisvalid(int)", (Object[]) stringArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("drop tableorg.hsqldb.rowio.rowinputtext");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger((String) null);
      boolean boolean0 = SQLUtil.isProcedureCall("call");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      StringBuilder stringBuilder0 = new StringBuilder();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(columnDescriptorList0, columnDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("F|9P[:_hmFgup2gqEi", (String) null, versionNumber0);
      defaultDatabase0.getTable("k@BG?(2S$pZLo1", false);
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.221653465727057
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Unknown constraint type: ";
      stringArray0[1] = "CsRF^~`";
      stringArray0[2] = "K]zt9gsSgKCdjv";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("Unknown constraint type:  = 'Unknown constraint type: ' AND CsRF^~` = 'CsRF^~`' AND K]zt9gsSgKCdjv = 'K]zt9gsSgKCdjv' AND  = '' AND  = '' AND  = '' AND null = null AND null = null", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("K]zt9gsSgKCdjv");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("80000012-00d0-fd77-3ed8-000a0a0b1900", defaultDBTable0, 7, "");
      String string1 = SQLUtil.renderColumnListWithTableName("", stringArray0);
      assertEquals(".Unknown constraint type: , .CsRF^~`, .K]zt9gsSgKCdjv, ., ., ., .null, .null", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(Unknown constraint type: , CsRF^~`, K]zt9gsSgKCdjv, , , , , )", string2);
      
      String string3 = SQLUtil.innerJoin(",]F#~-U", stringArray0, "Unknown constraint type: ", "lv3nZEl/qCAhp", stringArray0);
      assertEquals("Unknown constraint type:  as lv3nZEl/qCAhp on ,]F#~-U.Unknown constraint type:  = lv3nZEl/qCAhp.Unknown constraint type:  and ,]F#~-U.CsRF^~` = lv3nZEl/qCAhp.CsRF^~` and ,]F#~-U.K]zt9gsSgKCdjv = lv3nZEl/qCAhp.K]zt9gsSgKCdjv and ,]F#~-U. = lv3nZEl/qCAhp. and ,]F#~-U. = lv3nZEl/qCAhp. and ,]F#~-U. = lv3nZEl/qCAhp. and ,]F#~-U.null = lv3nZEl/qCAhp.null and ,]F#~-U.null = lv3nZEl/qCAhp.null", string3);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("execute|2_!{4frqsmki/");
      assertFalse(boolean0);
  }
}
