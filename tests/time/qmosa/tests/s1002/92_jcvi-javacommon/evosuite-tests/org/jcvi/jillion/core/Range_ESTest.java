/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 16:17:43 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.141087005868997
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.of(1600L, 1600L);
      Long long0 = new Long(1600L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(460L, 1600L);
      Range.ofLength(1613L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1600L, 4294967295L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3697127545429817
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range0.isSubRangeOf(range1);
      range1.endsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-128L), (-128L));
      range2.intersects(range1);
      range0.startsBefore(range2);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("D#kl", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse D#kl into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0301121582968897
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 2147483689L;
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Range range2 = Range.ofLength(2147483689L);
      range0.equals(range2);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("ogx L", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ogx L into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4357904635737913
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(1600L, 1600L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1600L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(460L, 1600L);
      Range range2 = Range.ofLength(1597L);
      Range.of(range_CoordinateSystem0, 1600L, 4294967295L);
      List<Range> list0 = range1.complement(range2);
      List<Range> list1 = range2.complementFrom(list0);
      //  // Unstable assertion: assertEquals(3, list1.size());
      
      Range range3 = Range.of(1600L, 4294967295L);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3511442155318925
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775796L), (-9223372036854775796L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of((-9223372036854775796L), (-9223372036854775796L));
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      range0.equals(range_Builder1);
      boolean boolean0 = range0.startsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = range0.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.566229590517083
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range1.intersection(range0);
      range1.split(2147483689L);
      Long long0 = new Long(1613L);
      Range range3 = Range.ofLength(65535L);
      range2.startsBefore(range3);
      Range.of(2147483689L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range4 = range_Builder2.build();
      range4.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483689L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3868664814630907
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 2147483689L;
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.iterator();
      // Undeclared exception!
      range0.split(32767L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.513602006604876
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range1.endsBefore(range0);
      Range range2 = Range.of(range_CoordinateSystem0, 255L, 9223372036854775807L);
      range0.intersects(range1);
      range0.startsBefore(range1);
      assertSame(range1, range0);
      
      Range range3 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      boolean boolean2 = range3.equals(range0);
      assertFalse(boolean2);
      
      boolean boolean3 = range3.startsBefore(range0);
      assertFalse(boolean3 == boolean0);
      
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1604L), 255L);
      boolean boolean4 = range3.isSubRangeOf(range2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertSame(range0, range1);
      assertEquals("[ 255 .. 256 ]/SB", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.412776758968966
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      Range range1 = Range.of(0L, 2147483647L);
      String string0 = "h-P)5tOL0C^hORIB{5c";
      range1.equals("h-P)5tOL0C^hORIB{5c");
      range0.equals(range_CoordinateSystem0);
      String string1 = "";
      range0.endsBefore(range1);
      Range.ofLength(1399L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6719857793648987
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (-10L), 1312L);
      range1.intersects(range2);
      range0.startsBefore(range1);
      long long0 = 681L;
      Range.of(681L);
      Range.ofLength(262L);
      Object object0 = new Object();
      range1.equals(range2);
      Range.of(range_CoordinateSystem0, 1312L, 9223372036854775553L);
      // Undeclared exception!
      try { 
        Range.of(1026L, (-1906L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.069945762363791
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(1600L, 1600L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1600L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = 460L;
      Range range1 = Range.of(460L);
      Range.of(range_CoordinateSystem0, 460L, 1600L);
      Object object0 = new Object();
      range0.equals(range1);
      long long2 = 2084L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775553L, 2084L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1201968809133813
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.isSubRangeOf(range1);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-1545L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1546 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.666018341701686
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.ofLength(762L);
      List<Range> list0 = range0.split(762L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range0.split(762L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      Range.of((-2013L), (-2013L));
      Range range1 = Range.ofLength(460L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 410L, 65535L);
      // Undeclared exception!
      try { 
        range1.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.833063505425884
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(2147483689L, 2147483689L);
      Range.Builder range_Builder1 = new Range.Builder(2147483689L, 2147483689L);
      Long.sum(9223372036854775807L, (-1457L));
      range1.equals((Object) null);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder4 = range_Builder3.expandEnd(9223372036854775807L);
      Range range2 = Range.ofLength(255L);
      List<Range> list0 = range0.complement(range2);
      range1.complementFrom(list0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 9223372036854775553L);
      range3.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range_Builder4.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.800454179959767
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.ofLength(762L);
      List<Range> list0 = range0.split(762L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range0.complement(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      long long0 = (-2013L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder0.expandEnd(762L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range range2 = Range.of((-2013L));
      range1.startsBefore(range2);
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-128L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1144021642157105
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.of(1600L, 1600L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1600L);
      long long1 = 460L;
      Range.of(1600L, 9223372036854772842L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1300L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.61073100838371
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range1.intersection(range0);
      List<Range> list0 = range1.split(2147483689L);
      Long long0 = new Long(1613L);
      Long.sum((-1457L), 1613L);
      range2.equals(long0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-1457L));
      Range range3 = Range.ofLength(1613L);
      range2.complement(range0);
      List<Range> list1 = range2.complementFrom(list0);
      range0.complementFrom(list1);
      range3.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        range_Builder2.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7104723746944295
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.intersection(range0);
      long long0 = 234L;
      Range.Builder range_Builder0 = new Range.Builder(234L, 1327L);
      range_Builder0.expandEnd(2147483689L);
      Range range2 = Range.of(234L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.parseRange("[ 0 .. 2147483689 ]/SB", range_CoordinateSystem1);
      Range range4 = Range.of((-128L));
      range3.intersects(range4);
      range2.isSubRangeOf(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse file can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2563319146340675
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getBegin(range_CoordinateSystem0);
      range0.equals(range0);
      Range range1 = Range.of(2147483647L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("B~K&F%zPHTK*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse B~K&F%zPHTK* into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9206870268936393
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1L;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1469L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3030369979021437
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 1600L;
      Range range0 = Range.of(1600L, 1600L);
      Long long1 = new Long(1600L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(460L, 1600L);
      long long2 = 2147482600L;
      Range.ofLength(327L);
      range0.startsBefore(range1);
      Range.of(2147482600L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      long long3 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-32753L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32753 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.489460203191834
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder0.build();
      range1.intersection(range2);
      range0.isEmpty();
      Range.ofLength(9223372036854775807L);
      Range range3 = Range.of((-4685L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      // Undeclared exception!
      try { 
        range3.complement(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -4685 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4078293911826347
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-1232L), 9223372036854774212L);
      boolean boolean1 = range0.intersects(range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.182302199920833
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483644L, 2147483644L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 2831L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, 0L, 0L);
      Range.ofLength(2831L);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.of(2831L, 47L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2570846954810757
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.of(1600L, 1600L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Long long0 = new Long(1600L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(460L, 1600L);
      Range range1 = Range.ofLength(1597L);
      Range.of(range_CoordinateSystem0, 1600L, 4294967295L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("invalid startOffset %d: file is only %d bytes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.invalid startOffset %d: file is only %d bytes
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2452324781809128
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(1L);
      range0.getLength();
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2842271188906427
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long(65535L);
      Range range0 = Range.of(65535L, 65535L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      List<Range> list0 = range0.complement(range1);
      assertNotSame(range1, range0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1220184985197483
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L), 587L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      range0.equals(range_CoordinateSystem0);
      long long1 = 2294L;
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3345509462820866
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(1600L, 1600L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of(1600L, 1600L);
      range0.complement(range1);
      range1.equals(range0);
      range1.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(2147482615L, (-1648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3166689368317535
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of((-32768L), (-32768L));
      range1.equals(range0);
      long long0 = (-1604L);
      Range.of((-32768L));
      long long1 = (-1440L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1440L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9843429634622596
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.equals("leng:th must be >= 0");
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      range0.isSubRangeOf(range0);
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Space Based", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3770419893256807
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2966L, 4294967295L);
      range0.isSubRangeOf(range0);
      range0.endsBefore(range0);
      Range range1 = Range.of(range_CoordinateSystem0, 3528L, 3528L);
      boolean boolean0 = range0.intersects(range1);
      range0.startsBefore(range0);
      Object object0 = new Object();
      boolean boolean1 = range0.equals(range1);
      assertFalse(boolean1);
      
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-232L), 2966L);
      Range.of(range_CoordinateSystem1, 2966L, 2147482600L);
      boolean boolean2 = range1.isSubRangeOf(range1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.4437063647046027
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range1.intersection(range0);
      //  // Unstable assertion: assertTrue(range2.equals((Object)range1));
      
      Range range3 = Range.of((-9223372036854775808L));
      boolean boolean0 = range3.intersects(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotSame(range1, range2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.593193056041512
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-81L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-231L), (-231L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483647L;
      Range range2 = Range.of(range_CoordinateSystem1, (-231L), 2147483647L);
      range0.intersects(range1);
      Range.of((-81L));
      range0.complement(range2);
      long long1 = 4294969309L;
      Range.of(4294969309L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2138L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3289537117578845
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3623L, 3623L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = new Range.Builder(3623L, 3623L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range1 = Range.ofLength(4294967315L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      range1.asRange();
      Range.Builder range_Builder3 = new Range.Builder(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem1, 1048L, 2147483647L);
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483689L, 32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.2998861736133174
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range range2 = range_Builder0.build();
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range range3 = Range.ofLength(9223372036854775807L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.644181877749445
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of((-232L), 2147483647L);
      range0.equals(range1);
      Range range2 = Range.of(2147483647L);
      range0.endsBefore(range2);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-232L));
      Range range3 = Range.ofLength(27L);
      range3.startsBefore(range2);
      Range.of(162L);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_Builder1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6723994166256424
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(762L);
      List<Range> list0 = range0.split(762L);
      range0.complementFrom(list0);
      range0.split(762L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      Range.Builder range_Builder0 = new Range.Builder((-2013L), 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range.Builder range_Builder3 = range_Builder2.expandBegin(4294967295L);
      range_Builder2.expandEnd((-2013L));
      range_Builder2.expandBegin(4294967295L);
      Range range1 = Range.of(4294967295L);
      Range.of(762L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range1.intersection(range0);
      Range range2 = Range.of(4294967295L);
      // Undeclared exception!
      try { 
        range2.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5515532383813335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(1600L, 1600L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(1L);
      range0.endsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(32767L);
      long long0 = 0L;
      Range range2 = Range.ofLength(0L);
      range1.spliterator();
      range2.startsBefore(range1);
      Range range3 = Range.of(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range3);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.of(32767L, (-1139L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3345041647630427
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967295L);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(0L);
      Range.Builder range_Builder1 = new Range.Builder(range2);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range_Builder1.build();
      assertFalse(range3.isEmpty());
      assertSame(range3, range2);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.4329779847108766
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = range_Builder0.shift((-2147483648L));
      range_Builder1.contractEnd((-232L));
      Range range1 = Range.of((-232L), 9223372036854772833L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.expandEnd((-436L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range range2 = Range.of((-1L), 32767L);
      range2.getLength();
      Range.Builder range_Builder3 = new Range.Builder(1078L, 9223372036854775807L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      range_Builder0.shift((-436L));
      // Undeclared exception!
      try { 
        Range.parseRange("@t}6i _brb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse @t}6i _brb into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4302878990369594
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of((-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = range0.intersection(range0);
      range0.complement(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3494716310503536
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483689L;
      Range.ofLength(2147483689L);
      Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long1 = (-10L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long2 = 0L;
      Range.of(range_CoordinateSystem1, 0L, 2147483689L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.929568618777601
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = 2147483689L;
      Range range0 = Range.ofLength(2147483689L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483689L, (-3728L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.4575713336635876
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      long long0 = 2147483689L;
      Range.ofLength(2147483689L);
      Range range0 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(2147483689L, 2147483689L);
      Range.Builder range_Builder1 = new Range.Builder(2147483689L, 2147483689L);
      Range.of(2147483689L);
      Range range1 = Range.of((-128L));
      range1.getLength();
      Range.ofLength(2147483689L);
      // Undeclared exception!
      try { 
        Range.parseRange("D#kl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse D#kl into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5818254374912133
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = (-32768L);
      Range range0 = Range.of((-32768L), (-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.115475024880771
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.of(0L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.7300326465245814
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.ofLength(762L);
      range0.complement(range0);
      range0.complement(range0);
      Range range1 = Range.of(762L, 762L);
      range1.split(762L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      Range.Builder range_Builder0 = new Range.Builder((-2013L), 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder2.expandEnd((-2013L));
      Range range2 = Range.ofLength(0L);
      range2.startsBefore(range1);
      Range range3 = Range.of((-32768L));
      Range.Builder range_Builder3 = new Range.Builder(range3);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      range_Builder3.build();
      // Undeclared exception!
      try { 
        range2.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4826182215872206
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = 762L;
      Range range0 = Range.ofLength(762L);
      List<Range> list0 = range0.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range.ofLength(762L);
      Range range1 = Range.of(762L, 762L);
      range1.split(127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.pollLast();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4294969188L, 762L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.730632919046993
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-128L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_CoordinateSystem2, 726L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.648438334546311
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      linkedList0.clear();
      range0.complementFrom(linkedList0);
      String string0 = range0.toString();
      assertEquals("[ 0 .. -1 ]/0B", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.08990929146868
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = 2147483689L;
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1250L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.987813724355642
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      range0.spliterator();
      Range range1 = Range.of(2147483647L);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.9501378444440385
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      long long0 = (-654L);
      Range range0 = Range.of((-654L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.435258757665833
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(1600L, 1600L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range0.isSubRangeOf(range1);
      range0.endsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, (-3101L), (-3101L));
      range2.intersects(range0);
      range0.startsBefore(range1);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(object1);
      range1.startsBefore(range2);
      range1.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.234902085700579
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.of(1600L, 1600L);
      Long long0 = new Long(1600L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(410L, 1600L);
      Range.of((-1244L));
      // Undeclared exception!
      try { 
        Range.of(410L, (-1244L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1858L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1858L), (-1858L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1858L));
      range_Builder0.contractEnd((-1858L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder3.expandEnd((-1858L));
      Range.Builder range_Builder4 = range_Builder3.contractEnd((-1858L));
      range_Builder4.shift((-1858L));
      long long1 = 0L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9867954750916335
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift(406L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(9223372034707292162L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.059354848590835
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = 255L;
      Range range0 = Range.of(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      range0.iterator();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4294967295L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6518214586217956
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Range.of(47L, 2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      range1.getBegin();
      Range range2 = Range.of(range_CoordinateSystem0, (-10L), 1312L);
      range2.startsBefore(range2);
      range0.startsBefore(range1);
      long long0 = 681L;
      Range.of(681L);
      Range.ofLength(262L);
      Object object0 = new Object();
      range1.equals(range2);
      Range.of(range_CoordinateSystem0, 1312L, 9223372036854775553L);
      // Undeclared exception!
      try { 
        Range.of(1026L, (-1906L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7519159690311215
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.of(65535L);
      long long0 = new Long(65535L);
      assertEquals(65535L, long0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.36641007607638
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getBegin();
      Range range1 = Range.ofLength(1L);
      range0.getLength();
      range1.split(1L);
      range0.endsBefore(range1);
      range1.iterator();
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange("J3SC7%(YINfr-fkZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse J3SC7%(YINfr-fkZ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.259564415698713
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1858L), (-1858L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder3.expandEnd((-1858L));
      range_Builder3.contractEnd((-1858L));
      range_Builder3.expandEnd(0L);
      range_Builder3.shift((-1858L));
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getEnd();
      Range.of((-1858L), 0L);
      // Undeclared exception!
      try { 
        range0.split((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2183409498998414
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range1.getEnd();
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.282951286680582
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range_Builder0.copy();
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.885082981228065
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      range1.complement(range0);
      range0.complementFrom(list0);
      Range.ofLength(0L);
      Range range2 = Range.ofLength(0L);
      // Undeclared exception!
      try { 
        range2.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.8492350266892
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long long0 = 2692L;
      Range.of(2692L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.9381824546861237
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.of(255L, 3572L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.024695553858248
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.split((-1207L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.237090833521228
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Long long0 = new Long(1600L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(1597L);
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1600L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("file can not be null", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse file can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.178806665535632
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.of(0L, 805L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-210L), (-345L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.734782042890787
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.ofLength(762L);
      List<Range> list0 = range0.split(762L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      List<Range> list2 = range0.split(762L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder((-2013L), 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd((-9223372036854775808L));
      Range range1 = Range.ofLength(1957L);
      range0.startsBefore(range1);
      Range range2 = Range.of((-2013L));
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      Range range3 = range_Builder0.build();
      Range range4 = range2.intersection(range0);
      range4.isEmpty();
      range4.complement(range0);
      range3.complementFrom(list2);
      range4.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.755631553360365
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      long long0 = 762L;
      Range range0 = Range.ofLength(762L);
      List<Range> list0 = range0.split(762L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      range0.split(762L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.pollLast();
      Range.Builder range_Builder0 = new Range.Builder((-2013L), 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.expandBegin(4294967295L);
      range_Builder2.expandEnd((-2013L));
      Range.of((-2147483648L));
      Range.of(762L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.12662657220799
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.of(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.split((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.4073235239059283
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 255L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      boolean boolean1 = range1.endsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      range_Builder2.build();
      Range range2 = range_Builder0.build();
      range_Builder2.contractBegin((-2824L));
      List<Range> list0 = range2.complement(range0);
      range2.complementFrom(list0);
      assertTrue(range2.isEmpty());
      assertSame(range0, range1);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.5044965275376425
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range range0 = Range.of(1600L, 1600L);
      Long long0 = new Long(1600L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      Range range1 = Range.of(460L, 1600L);
      Range range2 = Range.ofLength(1597L);
      List<Range> list0 = range2.complement(range1);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(1600L, 460L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.071080362736029
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      range_Builder0.expandEnd(0L);
      Range range0 = Range.of(0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.944832507989743
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      long long1 = 2966L;
      Range.of(range_CoordinateSystem1, (-1L), 2966L);
      // Undeclared exception!
      try { 
        Range.parseRange("bitLength mus? be >=0", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse bitLength mus? be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 9223372034707292162L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2965L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.313836809778846
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      range0.startsBefore(range1);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-32768L), 2147482600L);
      boolean boolean0 = range2.intersects(range0);
      assertTrue(boolean0);
      
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertSame(range0, range1);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.43534154919132
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      range_Builder1.build();
      range_Builder0.contractBegin((-32768L));
      Range range2 = range0.intersection(range1);
      range2.isEmpty();
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range3 = Range.of((-32768L));
      boolean boolean0 = range2.isSubRangeOf(range3);
      assertTrue(boolean0);
      
      Range range4 = range_Builder1.build();
      assertSame(range0, range4);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8892632916692693
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(9223372036854775807L);
      range_Builder1.expandEnd(1399L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3028L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.5240449460488823
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range1.intersection(range0);
      range2.split(3528L);
      Range.of(range_CoordinateSystem0, 2147483689L, 9223372036854775807L);
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.2159577287746126
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of((-232L), 2147483647L);
      range1.isSubRangeOf(range0);
      range0.endsBefore(range0);
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.200032774978333
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range1.intersection(range0);
      long long0 = new Long(2147483689L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1250L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.133966568907185
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Range.of((-2479L));
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.347417853852905
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      List<Range> list0 = range1.complement(range2);
      Range range3 = Range.of(0L);
      List<Range> list1 = range3.complementFrom(list0);
      assertFalse(list0.contains(range0));
      assertTrue(list0.contains(range3));
      assertTrue(list1.isEmpty());
      assertSame(range3, range1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.597008349743236
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(2147483689L);
      Range range1 = Range.of(2147483689L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range1.isSubRangeOf(range0);
      range1.endsBefore(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (-10L), 1312L);
      range1.intersects(range2);
      boolean boolean1 = range0.startsBefore(range1);
      assertTrue(boolean1);
      
      Range.of(681L, 681L);
      Range.ofLength(549L);
      Range.of(range_CoordinateSystem0, 1312L, 1312L);
      boolean boolean2 = range0.intersects(range2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.7129621730528903
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 726L, (-1511L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.846323859467729
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(3246L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Range.of((-1604L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2966L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.7738522086804824
  */
  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2054L), (-2054L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-128L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.0778535254303145
  */
  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1858L), (-1858L));
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      range_Builder0.contractEnd(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder3.expandEnd((-1858L));
      range_Builder3.contractEnd((-1858L));
      range_Builder3.expandEnd(0L);
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.of((-1858L), 0L);
      Range.Builder range_Builder5 = range_Builder3.expandEnd((-1491L));
      // Undeclared exception!
      try { 
        range_Builder5.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
