/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:31:39 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5568388167466263
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(1844L);
      range_Builder0.expandEnd(1L);
      Range range2 = Range.ofLength(9223372036854775807L);
      assertFalse(range2.isEmpty());
      
      range0.spliterator();
      Long long0 = new Long(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem0);
      assertEquals(1L, long1);
      
      long long2 = range1.getEnd();
      assertFalse(range1.equals((Object)range2));
      assertNotSame(range1, range0);
      assertEquals(0L, long2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1517986823729784
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = 9223372036854775045L;
      Range range0 = Range.ofLength(9223372036854775045L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.070214147202297
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(3016L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 3016L, 2147483647L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      range1.complementFrom(list1);
      range1.iterator();
      range0.startsBefore(range1);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("unable to delete ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to delete  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.63825586807193
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of(820L);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.ofLength(2147483647L);
      range2.iterator();
      Object object0 = new Object();
      boolean boolean0 = range2.equals("");
      boolean boolean1 = range0.intersects(range2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range range3 = range2.intersection(range1);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
      //  // Unstable assertion: assertNotSame(range3, range1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.968687772599122
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Range.of(1L, 2914L);
      Range range1 = Range.ofLength(2211L);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem1);
      assertEquals(65535L, long0);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(2614L, 2914L);
      List<Range> list0 = range3.split(2914L);
      assertTrue(list0.contains(range3));
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 65535L, 65535L);
      Range.of(range_CoordinateSystem0, (-1257L), 2245L);
      long long1 = range3.getBegin(range_CoordinateSystem1);
      assertEquals(2614L, long1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.8642011189670824
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(792L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      range_Builder0.expandEnd(583L);
      Long long0 = new Long(583L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(1844L);
      range3.equals((Object) null);
      range0.startsBefore(range2);
      range3.complement(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7493656454461584
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range0.iterator();
      range0.equals(range_CoordinateSystem0);
      boolean boolean0 = range0.intersects(range1);
      boolean boolean1 = range1.startsBefore(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Range range2 = range0.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.6402488992634923
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.ofLength(1844L);
      Range.of(792L);
      Range.Builder range_Builder0 = new Range.Builder(792L, 792L);
      range_Builder0.expandEnd(583L);
      Range.ofLength(1844L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 954L, 9223372036854775015L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.594667167182212
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.ofLength(820L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      range_Builder1.expandEnd(47L);
      assertFalse(range0.isEmpty());
      assertSame(range0, range1);
      
      Range range2 = Range.ofLength(32767L);
      Range.of(47L);
      long long0 = range2.getLength();
      assertEquals(32767L, long0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-3219L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, (-3219L), (-3219L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.894944944180719
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(820L);
      Range range1 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean0 = range1.endsBefore(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder1.expandEnd(1159L);
      Range range2 = Range.ofLength(820L);
      range2.spliterator();
      Range range3 = Range.ofLength(0L);
      Long long0 = new Long(65535L);
      range3.intersection(range2);
      boolean boolean1 = range3.equals(long0);
      assertFalse(boolean1);
      
      boolean boolean2 = range1.startsBefore(range2);
      assertTrue(boolean2 == boolean0);
      
      range2.complement(range3);
      assertTrue(range3.isEmpty());
      
      Range.Comparators.values();
      Range range4 = Range.of(1159L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.899237715349947
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range2 = range0.intersection(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.of(1L, 0L);
      range0.endsBefore(range1);
      range2.asRange();
      Range.ofLength(1L);
      range2.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("RvD`b$,*", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RvD`b$,* into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.822149600420107
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      range0.getBegin();
      range0.intersects(range0);
      Range range1 = Range.of(4648L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7238063961029817
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(792L);
      Range.Builder range_Builder0 = new Range.Builder(792L, 792L);
      range_Builder0.expandEnd(583L);
      Range.ofLength(1844L);
      Range range2 = Range.ofLength(583L);
      Range range3 = Range.of((-1L));
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range0.startsBefore(range1);
      assertNotSame(range0, range2);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.985277805472209
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = Range.of(1L, 2914L);
      Range range1 = Range.ofLength(2211L);
      boolean boolean0 = range0.startsBefore(range1);
      assertFalse(boolean0);
      
      Range.Builder range_Builder2 = new Range.Builder(1L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder3.build();
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder4 = range_Builder3.expandEnd(665L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-1282L), 1399L);
      assertFalse(range3.isEmpty());
      
      Range.of((-818L), 2147483647L);
      range0.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem1.toString();
      Range range4 = range_Builder4.build();
      assertFalse(range4.isEmpty());
      assertNotSame(range4, range0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6638781175660124
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1546L), (-1546L));
      Range range1 = Range.of(127L, 1398L);
      range0.startsBefore(range1);
      Range.of((-2012L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967296L, 1463L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.546457371635333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range.of(range_CoordinateSystem0, 14L, 1155L);
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1979L, 625L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=4.075129377308554
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of((-654L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-654L));
      Range range2 = range1.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder0.expandBegin(0L);
      range_Builder3.expandEnd(1159L);
      Range range3 = Range.ofLength(9223372036854775807L);
      range3.equals((Object) null);
      Range.of((-387L));
      range1.startsBefore(range2);
      range2.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.6331426838680496
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(1844L);
      range_Builder0.expandEnd(1L);
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.spliterator();
      Long long0 = new Long(9223372036854775806L);
      range2.intersection(range1);
      range2.equals("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.6641694002636624
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of(1844L, 1844L);
      Range range1 = Range.of(1844L, 1844L);
      range0.startsBefore(range1);
      Range range2 = Range.of((-917L), 1463L);
      range2.endsBefore(range1);
      range2.asRange();
      String string0 = "RvD`b$,*";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("RvD`b$,*", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse RvD`b$,* into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.85552511396838
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(783L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.ofLength(1609L);
      range0.spliterator();
      Range range1 = Range.ofLength(783L);
      long long0 = range1.getEnd();
      assertEquals(782L, long0);
      
      Long long1 = new Long((-794L));
      Range range2 = range0.intersection(range1);
      range2.equals(range1);
      Range range3 = Range.of((-794L));
      range0.equals(range3);
      List<Range> list0 = range2.complement(range3);
      assertTrue(list0.contains(range1));
      
      Range range4 = range_Builder0.build();
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.815259584535465
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-654L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of((-654L), (-654L));
      Range range2 = range1.intersection(range0);
      range1.equals(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.getLength();
      Range range3 = Range.of(range_CoordinateSystem0, (-654L), (-128L));
      range1.complement(range3);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8695218063718
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1L, 2914L);
      Range range2 = Range.ofLength(2211L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem0);
      assertEquals(0L, long0);
      assertFalse(range2.isEmpty());
      
      range0.split(2691L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 1L, 65535L);
      Range range4 = range3.intersection(range0);
      assertTrue(range4.isEmpty());
      assertFalse(range3.isEmpty());
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6770393729796442
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(792L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 792L, 3027L);
      Range range3 = Range.of(792L, 1844L);
      Range range4 = range2.intersection(range1);
      assertNotSame(range4, range3);
      assertNotSame(range4, range2);
      assertSame(range4, range1);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.004164919144734
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Object object0 = new Object();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1844L, 1844L);
      Range range2 = Range.of(792L, 1053L);
      Object object1 = new Object();
      range2.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.equals(range2);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      range1.split(1844L);
      Range range3 = Range.parseRange("[ 0 .. 1844 ]/SB", range_CoordinateSystem0);
      range3.getLength();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long0 = (-3099L);
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.913679657876001
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.ofLength(1826L);
      Range range1 = Range.of(792L, 1826L);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(1399L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder1.build();
      Range range3 = Range.of((-128L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin(1826L);
      range_Builder2.expandEnd(1826L);
      Range.ofLength(1826L);
      Range.of((-3377L));
      range3.isEmpty();
      boolean boolean0 = range2.startsBefore(range3);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.759871268444525
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range.of(range_CoordinateSystem0, 0L, 1155L);
      Range range1 = Range.of(0L);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem1.getAbbreviatedName();
      Range range2 = range1.asRange();
      assertFalse(range2.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd((-1822L));
      range_Builder1.expandBegin((-1822L));
      assertFalse(range0.isEmpty());
      assertFalse(range0.equals((Object)range2));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.6819541604958053
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.ofLength(1832L);
      Range range1 = Range.of(792L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(255L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range3);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range2);
      range_Builder4.expandBegin(792L);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range3.intersects(range0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.062258042985728
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.ofLength(5388L);
      long long0 = (-3531L);
      Range range1 = Range.of((-3531L), 5388L);
      range1.equals(range0);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-3531L));
      range_Builder1.expandEnd(4294967295L);
      Range range2 = Range.ofLength(5388L);
      Range.of((-3531L));
      range1.complement(range2);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.7513634864149594
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(1L, 2914L);
      Range range2 = Range.ofLength(2211L);
      assertFalse(range2.isEmpty());
      
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range3 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder0);
      range_Builder4.expandBegin(2914L);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertSame(range0, range3);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.8177212264080023
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(2692L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.complement(range0);
      range0.split(2692L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.9827095576024507
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.ofLength(820L);
      Range.of(820L);
      long long0 = 676L;
      Range.ofLength(676L);
      Range.Builder range_Builder0 = new Range.Builder(676L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      List<Range> list0 = range0.split(1843L);
      range0.complementFrom(list0);
      long long1 = 9223372036854775807L;
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.725353262679425
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(792L, 1844L);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(1399L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(2147483647L);
      range0.spliterator();
      Long long0 = new Long(788L);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.627334107980187
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.of(792L);
      Range.Builder range_Builder0 = new Range.Builder(792L, 792L);
      range_Builder0.expandEnd(583L);
      Range range2 = Range.ofLength(1844L);
      range1.isEmpty();
      Range.Comparators.values();
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertSame(range0, range2);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.36392167189959
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(2692L);
      Range range1 = Range.ofLength(2692L);
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = range0.asRange();
      assertSame(range2, range0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.736741539153857
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4406L), 1844L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.expandEnd(0L);
      Range.of(4099L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, (-128L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -129 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.367781988988908
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = 1844L;
      Range.Builder range_Builder0 = new Range.Builder(1844L);
      range_Builder0.shift(1844L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-3372L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3372 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.781957383072053
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(1844L);
      range_Builder0.expandEnd(1L);
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.spliterator();
      Long long0 = new Long(9223372036854775806L);
      Range range3 = Range.of(2147483647L);
      range3.intersection(range1);
      range2.equals("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
      range3.startsBefore(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.8659705124254193
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(783L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.ofLength(1609L);
      range0.spliterator();
      Range range1 = Range.ofLength(783L);
      Long long0 = new Long((-794L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-794L));
      range0.equals(range3);
      range2.complement(range3);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.913130737351781
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder2.expandEnd(0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = Range.of(0L);
      assertFalse(range2.isEmpty());
      
      long long0 = range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.6058110478776872
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      long long0 = 820L;
      Range range0 = Range.ofLength(820L);
      Range range1 = Range.of(820L, 820L);
      range0.startsBefore(range1);
      Range range2 = Range.of(820L, 820L);
      range2.toString();
      range1.endsBefore(range0);
      Range range3 = range0.asRange();
      range3.getLength();
      range3.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-807L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.4979440636524792
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of(9223372036854771646L);
      Range.of(1076L, 9223372036854771646L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.764317851198875
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(2L, 805L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 0L;
      Range range1 = Range.of(0L, 0L);
      Range.ofLength(0L);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.485784964896437
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-2147483648L), (-1L));
      // Undeclared exception!
      try { 
        Range.parseRange("jJUNoZ6_H;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse jJUNoZ6_H; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.5824643876209317
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2597L), (-2597L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2597L), (-2597L));
      Range range2 = range1.intersection(range0);
      range2.equals(range_CoordinateSystem0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.7537678120699645
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(783L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.ofLength(1609L);
      range0.spliterator();
      Range range1 = Range.ofLength(783L);
      Long long0 = new Long((-794L));
      range0.intersection(range1);
      Range range2 = Range.of((-794L));
      range0.equals(range2);
      range2.equals(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.6238173999392087
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2147483648L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2809L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.8711605031858505
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(783L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.ofLength(1609L);
      range0.spliterator();
      Range range1 = Range.ofLength(783L);
      Long long0 = new Long((-794L));
      Range range2 = range0.intersection(range1);
      range1.getBegin();
      Range range3 = Range.of((-794L));
      range0.equals(range3);
      range2.complement(range3);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.373958502414682
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.ofLength(1844L);
      range0.iterator();
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range1.equals(object1);
      boolean boolean1 = range0.intersects(range1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = range0.startsBefore(range1);
      assertFalse(boolean2 == boolean1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.5621909853428515
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      range0.getBegin();
      Range.of(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-1L), 783L);
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 5388L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.949559602196724
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3219L), (-3219L));
      long long0 = range0.getBegin();
      assertEquals((-3220L), long0);
      
      Range range1 = Range.of(4648L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(327L);
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.8842350744667113
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift(1L);
      range_Builder0.build();
      Range range0 = Range.of(1L, 2914L);
      Range range1 = Range.ofLength(2211L);
      range0.startsBefore(range1);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range2 = range_Builder2.build();
      range_Builder0.build();
      range_Builder0.expandBegin(665L);
      range_Builder0.expandEnd(2914L);
      range2.complement(range1);
      Range.ofLength(32767L);
      range1.split(2211L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(";+&}A|=pH", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ;+&}A|=pH into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.509585170600978
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.split(1L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1629L);
      long long1 = (-2778L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-1629L), (-2778L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.073331149588024
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 1822L;
      long long1 = 684L;
      Range range0 = Range.ofLength(684L);
      long long2 = 1398L;
      Range.ofLength(1398L);
      Range.of(1398L);
      Range range1 = Range.ofLength(1398L);
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      List<Range> list0 = range0.split(255L);
      range1.complementFrom(list0);
      long long3 = (-654L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1458L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.601922208793876
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range range1 = Range.ofLength(1L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(1844L);
      range_Builder0.expandEnd(1L);
      Range range2 = Range.ofLength(9223372036854775807L);
      range0.spliterator();
      Long long0 = new Long(9223372036854775806L);
      Range range3 = range2.intersection(range1);
      Range.of(9223372036854775806L);
      long long1 = range3.getLength();
      assertSame(range3, range1);
      assertNotSame(range3, range0);
      assertEquals(1L, long1);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5474243872166027
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-4406L), 1844L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1844L, 1844L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(127L);
      range_Builder1.expandEnd((-4406L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 1844L, (-1284L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2402880620543772
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-1L);
      Range.of(783L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 398L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 783L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.80461137705973
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.of(1L, 2914L);
      Range range1 = Range.ofLength(2211L);
      range_Builder0.build();
      range_Builder0.expandEnd(1075L);
      Range range2 = Range.ofLength(2914L);
      Range.of(2279L);
      range0.getLength();
      Range range3 = range1.intersection(range2);
      assertSame(range3, range1);
      assertNotSame(range3, range2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.637161286199329
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      long long0 = (-2597L);
      Range range0 = Range.of((-2597L), (-1190L));
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.expandEnd((-3220L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1190L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.4072901554533064
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 783L, 783L);
      Range.of(range_CoordinateSystem0, (-635L), (-635L));
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(783L, long0);
      
      long long1 = range0.getEnd();
      assertEquals(782L, long1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.032280525136252
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(820L, 820L);
      Range range1 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder1.expandEnd(1159L);
      Range range2 = Range.ofLength(820L);
      range2.spliterator();
      Range range3 = Range.ofLength(0L);
      Long long0 = new Long(65554L);
      Range range4 = range3.intersection(range2);
      range4.intersection(range0);
      range3.isSubRangeOf(range0);
      range1.startsBefore(range2);
      range2.complement(range3);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertFalse(range_ComparatorsArray1.equals((Object)range_ComparatorsArray0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.860162647453459
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.ofLength(820L);
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      List<Range> list0 = range0.split(4294967295L);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.60465360550556
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      range0.split(1787L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-542L), 1791L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.7962774893182396
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.of(2L, 805L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(0L, 0L);
      Range.ofLength(0L);
      range1.intersects(range0);
      range0.isSubRangeOf(range1);
      Range range2 = null;
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.6089311802514716
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = 0L;
      Range range1 = Range.of(0L, 0L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.5801478068573203
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = (-1L);
      Range.of(783L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-1L);
      Range.of(range_CoordinateSystem0, (-1L), 398L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 783L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.8646866216640436
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.ofLength(1826L);
      Range range1 = Range.of(792L, 1826L);
      boolean boolean0 = range0.startsBefore(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.of((-128L));
      Range range3 = Range.ofLength(1826L);
      assertFalse(range3.isEmpty());
      assertSame(range3, range0);
      
      Range range4 = Range.of((-3377L));
      range2.isEmpty();
      Range.Comparators.values();
      boolean boolean1 = range4.isSubRangeOf(range1);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.5055316571339494
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-1068L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1068L), 4294967295L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, (-43L), (-1L));
      range_Builder2.expandEnd((-1L));
      long long1 = (-128L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.4392866118536753
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(2210L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 4006L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      assertNotSame(range2, range0);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.4878640037699413
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2597L), (-2597L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2597L), (-2597L));
      assertTrue(range1.isEmpty());
      
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2597L), long0);
      
      long long1 = range0.getEnd();
      assertEquals((-2598L), long1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.751457756876191
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.of((-2147483678L), (-2147483678L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483678L), (-2147483678L));
      Object object0 = new Object();
      range0.isEmpty();
      range0.intersects(range1);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.3910032313883347
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      long long1 = 765L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(344L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.7011468627272075
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.ofLength(820L);
      Range range1 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder1.expandEnd(1159L);
      Range range2 = Range.ofLength(820L);
      range2.spliterator();
      Range range3 = Range.ofLength(0L);
      assertTrue(range3.isEmpty());
      
      Long long0 = new Long(65535L);
      Range.of(105L);
      boolean boolean0 = range2.isEmpty();
      Range.Comparators.values();
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1 == boolean0);
      assertSame(range0, range2);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.of((-2986L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.870178857264688
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3207L), (-3207L));
      range0.getBegin();
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(4648L);
      range1.getBegin(range_CoordinateSystem0);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.416425399948219
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3774L), 1L);
      range0.getBegin(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-3774L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.6591397055417056
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.ofLength(820L);
      Range.ofLength(2147483647L);
      Range.of(2147483647L);
      Range.ofLength(2147483647L);
      Range.of((-2986L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2647L), (-3393L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.6016168388329026
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range range0 = Range.ofLength(1844L);
      Range.of(792L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      range_Builder0.expandEnd(4294967295L);
      Range.ofLength(9223372036854743041L);
      Range.of(2184L);
      long long0 = range0.getLength();
      assertEquals(1844L, long0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.222383443648748
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(775L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.ofLength(775L);
      Long long0 = new Long((-794L));
      Range.ofLength(1609L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.4149986825384553
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      long long0 = 1844L;
      long long1 = 0L;
      long long2 = 1106L;
      Range range0 = Range.of(0L, 1106L);
      range0.getBegin();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.8501361732319523
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range range0 = Range.ofLength(820L);
      Range range1 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      boolean boolean0 = range1.endsBefore(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder1.expandEnd(1159L);
      Range range2 = Range.ofLength(820L);
      range2.spliterator();
      Range range3 = Range.ofLength(0L);
      Long long0 = new Long(65535L);
      range3.intersection(range2);
      boolean boolean1 = range0.intersects(range0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = range1.startsBefore(range2);
      List<Range> list0 = range2.complement(range3);
      assertFalse(list0.contains(range1));
      assertTrue(range3.isEmpty());
      
      Range.Comparators.values();
      Range.Comparators.values();
      boolean boolean3 = range2.isSubRangeOf(range0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1721L), (-109L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.667417696432669
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range.of(range_CoordinateSystem0, 0L, 1155L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1714L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.647826624623992
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder0.expandBegin(0L);
      range_Builder3.expandEnd(1159L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-968L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Range.of((-3219L), (-3219L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1646L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
