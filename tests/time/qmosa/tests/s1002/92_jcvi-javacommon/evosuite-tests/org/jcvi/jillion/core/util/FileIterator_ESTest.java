/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:30:15 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.510042857760971
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator0.spliterator();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("", "");
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      mockFile1.deleteOnExit();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.setUpInitialState(mockFile1);
      fileIterator1.updateFileIterator(mockFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      File file0 = fileIterator1.next();
      assertFalse(file0.isHidden());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3057834780040483
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator0.spliterator();
      fileIterator0.getNextFile();
      MockFile mockFile1 = new MockFile("", "");
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.setUpInitialState(mockFile1);
      fileIterator1.updateFileIterator(mockFile1);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.491593725874444
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setReadable(false, true);
      mockFile0.setExecutable(true, true);
      mockFile0.toPath();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.7413744800465882
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "org.jcvi.jillion.core.util.FileIterator$NullFileFilter");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, false);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.FileIterator$NullFileFilter", "org.jcvi.jillion.core.util.FileIterator$NullFileFilter", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.getNextFile();
      fileIterator0.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.6607364782805547
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, false);
      File file0 = MockFile.createTempFile("<S)K4YEq9i/@(%", "%u P2+", (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MockFile.createTempFile("%u P2+", "%u P2+");
      fileIterator0.next();
      fileIterator0.forEach(consumer0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.6868010971566996
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, true);
      File file0 = MockFile.createTempFile("<S)K4YEq9i/@(%", "%u P2+", (File) mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator1.setUpInitialState(file0);
      assertTrue(file0.isAbsolute());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.473631354080885
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4Ypq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.setExecutable(false, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      mockFile0.setExecutable(true, false);
      File file0 = MockFile.createTempFile("<S)K4Ypq9i/@(%", "", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("<S)K4Ypq9i/@(%/<S)K4Ypq9i/@(%0");
      FileSystemHandling.createFolder(evoSuiteFile0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      linkedList3.toArray();
      FileFilter[] fileFilterArray0 = new FileFilter[5];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList4);
      Predicate.isEqual((Object) null);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList0.poll();
      linkedList5.retainAll(linkedList1);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2762483211108506
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "org.jcvi.jillion.core.util.FileIterator$NullFileFilter");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter0;
      linkedList1.add(fileFilterArray0[3]);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[7] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[8] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.493829557506601
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      Iterator<File> iterator0 = fileIterator0.iterator();
      Iterator<File> iterator1 = fileIterator0.iterator();
      assertFalse(iterator1.equals((Object)iterator0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.563817014570424
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, false);
      File file0 = MockFile.createTempFile("<S)K4YEq9i/@(%", "%u P2+", (File) mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3857374755222467
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "`d");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(false, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2215423032987673
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      boolean boolean0 = true;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator0.spliterator();
      fileIterator0.getNextFile();
      fileIterator0.hasNext();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4423456639951278
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter2);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter3);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      FileFilter[] fileFilterArray1 = new FileFilter[3];
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray1);
      FileFilter[] fileFilterArray2 = new FileFilter[5];
      fileFilterArray2[0] = (FileFilter) multipleFileFilter4;
      fileFilterArray2[1] = (FileFilter) multipleFileFilter4;
      fileFilterArray2[2] = (FileFilter) multipleFileFilter4;
      linkedList1.retainAll(linkedList0);
      fileFilterArray2[3] = (FileFilter) multipleFileFilter5;
      fileFilterArray2[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray2);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.693189244935981
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("K7fVCW=ufO-/+GYf,");
      mockFile0.setExecutable(true, true);
      MockFile.createTempFile("Np!)2CQ{:qlws{}", "Np!)2CQ{:qlws{}", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.forEach(consumer0);
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      File file0 = MockFile.createTempFile("Np!)2CQ{:qlws{}", "Np!)2CQ{:qlws{}");
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer1);
      assertTrue(fileIterator1.hasNext());
      
      fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder1.build();
      fileIterator1.setUpInitialState(file0);
      fileIterator0.getNextFile();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.452912655928389
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "9co~");
      mockFile0.mkdirs();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, true);
      MockFile.createTempFile("<S)K4YEq9i/@(%", "", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.8356202122031373
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      MockFile mockFile0 = new MockFile("K7fVCW=ufO-/+GYf,");
      mockFile0.setExecutable(true, true);
      MockFile.createTempFile("Np!)2CQ{:qlws{}", "Np!)2CQ{:qlws{}", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.forEach(consumer0);
      fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      File file0 = MockFile.createTempFile("Np!)2CQ{:qlws{}", "e\"|Q9Ik.^?]ww4ag");
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator1.forEach(consumer1);
      assertTrue(fileIterator1.hasNext());
      
      fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.build();
      fileIterator1.setUpInitialState(file0);
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.84060911398924
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "org.jcvi.jillion.core.util.FileIterator$NullFileFilter");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(fileFilterArray0[1]);
      fileIterator_FileIteratorBuilder1.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      linkedList1.retainAll(linkedList0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      assertFalse(multipleFileFilter6.equals((Object)multipleFileFilter1));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setReadable(true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter3);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter4.accept(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.deleteOnExit();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter3);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter4.accept(mockFile0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter4);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      mockFile0.setReadable(true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      linkedList0.add((FileFilter) multipleFileFilter3);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      multipleFileFilter4.accept(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.473185423200172
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.deleteOnExit();
      mockFile0.setExecutable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      mockFile0.setReadable(true, true);
      mockFile0.setExecutable(true, false);
      File file0 = MockFile.createTempFile("<S)K4YEq9i/@(%", "%u P2+", (File) mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileFilter[] fileFilterArray0 = new FileFilter[6];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter6);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2140666558065467
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.setExecutable(false, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      mockFile0.setExecutable(true, false);
      MockFile mockFile1 = new MockFile("");
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      multipleFileFilter0.accept(mockFile0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList6);
      linkedList0.toArray();
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList2);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      linkedList7.retainAll(linkedList5);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      assertFalse(multipleFileFilter9.equals((Object)multipleFileFilter8));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2140666558065467
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("<S)K4YEq9i/@(%", "");
      mockFile0.mkdirs();
      mockFile0.setExecutable(false, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      mockFile0.setExecutable(true, false);
      MockFile mockFile1 = new MockFile("");
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      multipleFileFilter1.accept(mockFile1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      linkedList6.toArray();
      FileFilter[] fileFilterArray0 = null;
      MultipleFileFilter multipleFileFilter7 = null;
      try {
        multipleFileFilter7 = new MultipleFileFilter((FileFilter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.143654440989084
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("K7fVCW=ufO-/+GYf,");
      mockFile0.getAbsolutePath();
      MockFile mockFile1 = new MockFile(mockFile0, "K7fVCW=ufO-/+GYf,");
      mockFile0.setLastModified(0L);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
