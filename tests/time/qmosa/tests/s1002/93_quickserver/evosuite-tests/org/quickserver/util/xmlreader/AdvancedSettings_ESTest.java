/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:54:47 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.462874249191005
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setCharset("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("");
      advancedSettings0.setCharset("ISO-8859-1");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(456);
      advancedSettings0.getBacklog();
      advancedSettings0.setCharset((String) null);
      assertEquals(456, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.924886245768638
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setMaxThreadsForNioWrite((-1125));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setBacklog((-451));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("yAM5?");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(6);
      advancedSettings0.setClientSocketReceiveBufferSize(456);
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize((-2430));
      advancedSettings0.setClientIdentifier("dqWshkZ~G`9i|M@fvO");
      advancedSettings0.setClientSocketSendBufferSize(472);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(456, advancedSettings0.getByteBufferSize());
      assertEquals(472, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5360478614522353
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-223));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setSocketLinger((-223));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesConnectionTime((-223));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesConnectionTime((-223));
      advancedSettings0.setByteBufferSize(1985);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getBacklog();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesLatency((-590));
      advancedSettings0.getSocketLinger();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setMaxThreadsForNioWrite((-223));
      advancedSettings0.setByteBufferSize(1026);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.579755221006731
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(543);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(543);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</charset>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </charset>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.733857589601352
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setClientSocketTrafficClass("o;w*w)E77\"Y62lX");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("<advanced-settings>\n");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(456, advancedSettings0.getByteBufferSize());
      
      advancedSettings1.setClientIdentifier("");
      assertEquals(65536, advancedSettings1.getByteBufferSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9421822974250196
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketTrafficClass("0eEl=vignOp6J|");
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getBacklog();
      advancedSettings0.setBacklog((-3236));
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5306411117479777
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setClientSocketReceiveBufferSize(456);
      advancedSettings0.setClientSocketTrafficClass("\")`;]d!jW(gd");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(1533);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("");
      assertEquals(1533, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1476947907327726
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setMaxThreadsForNioWrite((-890));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(456);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setByteBufferSize((-890));
      advancedSettings0.setPerformancePreferencesConnectionTime(456);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setSocketLinger(47);
      advancedSettings0.setQSObjectPoolMaker("NeVi");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-1), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals((-890), int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1494));
      advancedSettings0.setPerformancePreferencesBandwidth((-1494));
      advancedSettings0.setClientSocketSendBufferSize((-1494));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setByteBufferSize((-1494));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(5900);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setBacklog((-1494));
      advancedSettings0.setQSObjectPoolMaker("csEZ_nP=UONR?eF5#(s");
      advancedSettings0.setMaxThreadsForNioWrite(10);
      assertEquals(5900, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(3275);
      advancedSettings0.setClientIdentifier("b**fR?}Q");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals("b**fR?}Q", advancedSettings0.getClientIdentifier());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.157299376986305
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(2309);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(627);
      advancedSettings1.getClientIdentifier();
      int int0 = advancedSettings1.getClientSocketReceiveBufferSize();
      assertEquals(627, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesLatency((-2455));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getBacklog();
      assertEquals((-2455), advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency((-1900));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setMaxThreadsForNioWrite((-1900));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-1900), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6913126447406794
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(2309);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(2130);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth(3916);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(287);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setCharset("");
      assertEquals(2130, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(459);
      advancedSettings0.setPerformancePreferencesConnectionTime(459);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setClientSocketReceiveBufferSize(459);
      advancedSettings0.setClientSocketTrafficClass("");
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(459, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(459, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.6258417525947544
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setMaxThreadsForNioWrite((-1249));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientIdentifier("z_ &?V3jK\f");
      advancedSettings0.setCharset("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency(353);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setCharset("");
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5406561526120646
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setClientSocketReceiveBufferSize(929);
      advancedSettings0.setClientSocketSendBufferSize(533);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings1.setCharset("");
      advancedSettings1.setClientIdentifier("H\n'c?d6q:_04Fb9I");
      advancedSettings1.setClientSocketTcpNoDelay(true);
      advancedSettings1.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings1.getByteBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-identifier>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-identifier>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7093158799917085
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML("K7fVCW=ufO-/+GYf,");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("@Qi>");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass("2jXu};P~ih^m>B0l");
      advancedSettings0.setClientSocketTrafficClass(string0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketTrafficClass(string0);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setMaxThreadsForNioWrite((-360));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier((String) null);
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.508084841459723
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setByteBufferSize((-1772));
      advancedSettings0.setClientSocketReceiveBufferSize(456);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(1533);
      advancedSettings0.setClientSocketReceiveBufferSize((-1250));
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(1533, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-184));
      advancedSettings0.setClientSocketReceiveBufferSize(974);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("&YN{0$\"");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(290);
      advancedSettings0.setClientSocketReceiveBufferSize(1169);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings1.getClientSocketSendBufferSize();
      assertEquals(290, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(65536);
      advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(65536, advancedSettings0.getClientSocketSendBufferSize());
      
      int int0 = advancedSettings1.getClientSocketSendBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.460455383605455
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("V`Vkp>e>J#I$i");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("V`Vkp>e>J#I$i");
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings2.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.setClientSocketSendBufferSize((-441));
      advancedSettings2.setClientIdentifier("");
      advancedSettings1.setClientIdentifier(" I&\"2O");
      advancedSettings0.toXML("");
      advancedSettings1.getClientIdentifier();
      assertEquals(" I&\"2O", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, int0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.38104578380316
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(409);
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("mbeVH\"0grr");
      advancedSettings1.setClientSocketSendBufferSize(1751);
      advancedSettings1.setClientIdentifier("l+^rgMf");
      advancedSettings1.setClientSocketSendBufferSize(409);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings1.toXML("\t<charset>");
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals("l+^rgMf", advancedSettings1.getClientIdentifier());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.530918966707689
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setClientSocketReceiveBufferSize(456);
      advancedSettings0.setClientSocketTrafficClass("\")`;]d!jW(gd");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("\")`;]d!jW(gd");
      advancedSettings0.setClientSocketSendBufferSize(1533);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.toXML("");
      assertEquals(456, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(456);
      String string0 = "";
      advancedSettings0.setMaxThreadsForNioWrite((-890));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketTrafficClass("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("w_X*#3SX#_{cS6)9h%3");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // w_X*#3SX#_{cS6)9h%3
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setClientSocketReceiveBufferSize(456);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(1533);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(1533, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(1620);
      advancedSettings0.setSocketLinger(543);
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(1620);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings1.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings1.getClientSocketSendBufferSize();
      assertEquals(1620, int0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.502808529414704
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(456);
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setClientSocketReceiveBufferSize(456);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(1533);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("O6LK0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // O6LK0
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(2298);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime(65536);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog(2298);
      advancedSettings0.setClientSocketSendBufferSize(1533);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(2298, advancedSettings0.getBacklog());
      assertEquals(1533, int0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2700203387932723
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setBacklog((-6342));
      advancedSettings0.getClientSocketSendBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketSendBufferSize(522);
      advancedSettings0.setClientSocketSendBufferSize(472);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.getClientSocketSendBufferSize();
      int int0 = advancedSettings1.getByteBufferSize();
      assertEquals(522, advancedSettings1.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertNotNull(string0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
  }
}
