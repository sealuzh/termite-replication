/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:02:27 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.globalInfo();
      Filter.makeCopy(discretize0);
      discretize0.attributeIndicesTipText();
      discretize0.m_DiscretizeCols = null;
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.getAttributeIndices();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "o.d?o9=SUvLsW#BP/!";
      Discretize discretize0 = new Discretize("o.d?o9=SUvLsW#BP/!");
      discretize0.setDesiredWeightOfInstancesPerInterval(100.0);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("t -;ri,UX+aSohzJ");
      double[][] doubleArray0 = new double[1][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints((byte) (-3));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8003780070989173
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      discretize0.getBins();
      discretize0.m_FindNumBins = true;
      discretize0.getOptions();
      discretize0.getBins();
      int int0 = (-2078209979);
      discretize0.setBins((-2078209979));
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3077);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("pkpm}Q 348QL");
      discretize0.setMakeBinary(true);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter filter0 = Filter.makeCopy(multiFilter0);
      filter0.getCapabilities();
      String[] stringArray0 = new String[0];
      Filter.runFilter(filter0, stringArray0);
      discretize0.getCapabilities();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)42;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)84;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)99;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize1 = new Discretize();
      Discretize discretize2 = new Discretize();
      // Undeclared exception!
      try { 
        discretize2.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      discretize0.m_MakeBinary = true;
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.0E-6;
      discretize0.getMakeBinary();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MultiFilter multiFilter0 = new MultiFilter();
      Filter[] filterArray0 = new Filter[9];
      filterArray0[0] = (Filter) discretize0;
      filterArray0[1] = (Filter) multiFilter0;
      double[][] doubleArray0 = new double[1][5];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1.0E-6;
      doubleArray1[1] = 1.0E-6;
      doubleArray1[2] = 1.0E-6;
      doubleArray1[3] = 1.0E-6;
      doubleArray1[4] = 1.0E-6;
      doubleArray1[5] = 1.0E-6;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      filterArray0[2] = (Filter) multiFilter0;
      filterArray0[3] = (Filter) multiFilter0;
      filterArray0[4] = (Filter) multiFilter0;
      filterArray0[5] = (Filter) discretize0;
      filterArray0[6] = (Filter) multiFilter0;
      filterArray0[7] = (Filter) multiFilter0;
      AllFilter allFilter0 = new AllFilter();
      filterArray0[8] = (Filter) allFilter0;
      multiFilter0.setFilters(filterArray0);
      SparseInstance sparseInstance0 = new SparseInstance(0);
      discretize0.invertSelectionTipText();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("hB0*whS]~!(!4|1&%n0");
      discretize0.getCapabilities();
      discretize0.m_MakeBinary = true;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.0E-6;
      discretize0.setIgnoreClass(true);
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(true);
      discretize0.getUseEqualFrequency();
      discretize0.makeBinaryTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.getMakeBinary();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1036.2079428461);
      int[] intArray0 = new int[8];
      intArray0[1] = 1;
      intArray0[2] = 2771;
      intArray0[4] = 2771;
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-4948));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4948
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("\nUsage: ");
      String[] stringArray0 = discretize0.getOptions();
      StringReader stringReader0 = new StringReader("\nUsage: ");
      stringReader0.reset();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(251);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 251;
      doubleArray0[1] = (-1567.4514221923212);
      doubleArray0[2] = 1620.0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = 3165.1163398597;
      SparseInstance sparseInstance1 = new SparseInstance((-1914.804011), doubleArray0, intArray0, 4);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2.0, doubleArray0);
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "hB0*whS]~!(!4|1&%n0";
      Discretize discretize0 = new Discretize("hB0*whS]~!(!4|1&%n0");
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "hB0*whS]~!(!4|1&%n0";
      Discretize discretize0 = new Discretize("hB0*whS]~!(!4|1&%n0");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1354897993716
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      StringReader stringReader0 = new StringReader("\nUsage: ");
      stringReader0.reset();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(251);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[4];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 251;
      doubleArray0[1] = (-1567.4514221923212);
      doubleArray0[2] = 1620.0;
      doubleArray0[3] = 3165.1163398597;
      SparseInstance sparseInstance1 = new SparseInstance((-1914.804011), doubleArray0, intArray0, 4);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2.0, doubleArray0);
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(4, stringArray0.length);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("hB0*whS]~!(!4|1&%n0");
      discretize0.getCapabilities();
      discretize0.m_FindNumBins = false;
      discretize0.setMakeBinary(false);
      discretize0.m_MakeBinary = true;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 1.0E-6;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "    for (i = 0 ; i < obj.length; i++) {\n";
      stringArray0[1] = "";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      Attribute attribute0 = new Attribute("    for (i = 0 ; i < obj.length; i++) {\n");
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[21];
      stringArray0[0] = "4,-709,-1982292594,-4418,87,49";
      discretize0.m_FindNumBins = false;
      stringArray0[1] = "4,-709,-1982292594,-4418,87,49";
      discretize0.m_CutPoints = null;
      discretize0.setBins((-3));
      discretize0.m_UseEqualFrequency = false;
      int int0 = 815;
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SystemInUtil.addInputLine((String) null);
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      discretize0.setInvertSelection(true);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "A zeropoint attribute must be ordered");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      SystemInUtil.addInputLine("first-last");
      Attribute attribute0 = new Attribute("{8p-7(rIb4Sx", "", (-2610));
      attribute0.enumerateValues();
      attribute0.enumerateValues();
      Attribute attribute1 = new Attribute("");
      Discretize discretize0 = new Discretize("string");
      discretize0.listOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Use bin numbers (eg BXofY) rather than ranges for for discretized attributes");
      byteArray0[1] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("B");
      discretize0.m_ClassIndex = (int) (byte) (-3);
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, int0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize("Y");
      discretize0.getBinRangesString(6);
      discretize0.getCutPoints(4);
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.908238329122374
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("   * Runs the filter from commandline.\n");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "   * Runs the filter from commandline.\n";
      stringArray0[1] = "   * Runs the filter from commandline.\n";
      stringArray0[2] = "   * Runs the filter from commandline.\n";
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-2711.97);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = (-2711.97);
      doubleArray2[3] = (-2711.97);
      doubleArray2[4] = (-2711.97);
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray2[7] = (-1739.423178441437);
      doubleArray2[8] = (-1332.7695);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (-2711.97);
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (-1739.423178441437);
      doubleArray3[4] = 0.0;
      doubleArray3[5] = 0.0;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      assertFalse(discretize0.getMakeBinary());
      
      stringArray0[3] = "   * Runs the filter from commandline.\n";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.binsTipText();
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("UE+BP}8J _}3,}");
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3406.0);
      doubleArray1[1] = 1001.3145;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1001.3145;
      doubleArray2[1] = (-3406.0);
      doubleArray2[2] = (-3406.0);
      doubleArray2[3] = (-3406.0);
      doubleArray2[4] = 1001.3145;
      doubleArray2[5] = (-3406.0);
      doubleArray2[6] = (-3406.0);
      doubleArray2[7] = 1001.3145;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-3406.0);
      doubleArray3[1] = (-3406.0);
      doubleArray3[2] = 1001.3145;
      doubleArray3[3] = 1001.3145;
      doubleArray3[4] = 1001.3145;
      doubleArray3[5] = (-3406.0);
      doubleArray3[6] = (-3406.0);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[2];
      doubleArray4[0] = (-3406.0);
      doubleArray4[1] = (-1779.9);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = (-3406.0);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[19];
      doubleArray6[0] = 1.0;
      doubleArray6[1] = (-3406.0);
      doubleArray6[2] = (-3406.0);
      doubleArray6[3] = (-1779.9);
      doubleArray6[4] = 1001.3145;
      doubleArray6[5] = 1001.3145;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[8];
      doubleArray7[0] = (-3406.0);
      doubleArray7[1] = 1001.3145;
      doubleArray7[2] = 1001.3145;
      doubleArray7[3] = (-3406.0);
      doubleArray7[4] = (-2759.6823917490365);
      doubleArray7[5] = 1001.3145;
      doubleArray7[6] = 1.0;
      doubleArray7[7] = 1001.3145;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[0];
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = (-2759.6823917490365);
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      System.setCurrentTimeMillis(2L);
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize(" Y$!");
      Attribute attribute0 = new Attribute(";[pLZ1o'", " Y$!", (-2370));
      Attribute attribute1 = attribute0.copy(" Y$!");
      attribute1.enumerateValues();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("%wE]Se&");
      int[] intArray0 = new int[7];
      intArray0[0] = (-11);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(300.0, intArray0, 27);
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      Discretize discretize1 = new Discretize();
      discretize1.setAttributeIndices("%wE]Se&");
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-2087831322));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.toString();
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "    for (i = 0 ; i < obj.length; i++) {\n";
      stringArray0[1] = "";
      stringArray0[2] = "";
      discretize0.setDesiredWeightOfInstancesPerInterval((byte) (-3));
      stringArray0[3] = "";
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(4);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "    for (i = 0 ; i < obj.length; i++) {\n";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "$C_~~twg%z";
      stringArray0[7] = "";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[0] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "    for (i = 0 ; i < obj.length; i++) {\n";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "$C_~~twg%z";
      stringArray0[7] = "";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      byteArray0[0] = (byte) (-3);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("t -;ri,UX+aSohzJ");
      Attribute attribute0 = new Attribute("t -;ri,UX+aSohzJ");
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Discretize discretize0 = new Discretize("");
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3406.0);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[24];
      doubleArray2[0] = 1001.3145;
      doubleArray2[1] = (-3406.0);
      doubleArray2[2] = (-3406.0);
      doubleArray2[3] = (-3406.0);
      doubleArray2[4] = 1001.3145;
      doubleArray2[5] = (-3406.0);
      doubleArray2[6] = (-3406.0);
      doubleArray2[7] = 1001.3145;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[7];
      doubleArray3[0] = (-3406.0);
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getBinRangesString((-2028178998));
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setOutputFormat();
      discretize0.getAttributeIndices();
      discretize0.attributeIndicesTipText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize("Y$!");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3617.0;
      doubleArray0[1] = 3617.0;
      doubleArray0[2] = 3617.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 3617.0;
      DenseInstance denseInstance0 = new DenseInstance(3617.0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      int int0 = (-1982292595);
      discretize0.getBinRangesString((-1982292595));
      stringArray0[0] = "(DY4'=+y6r(";
      discretize0.m_MakeBinary = false;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1982292595);
      intArray0[1] = (-1982292595);
      intArray0[2] = (-1982292595);
      intArray0[3] = (-1982292595);
      discretize0.setIgnoreClass(false);
      intArray0[4] = (-1982292595);
      discretize0.getUseBinNumbers();
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-3406.0);
      doubleArray0[1] = 1001.3145;
      double[] doubleArray1 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray1);
      discretize0.getInvertSelection();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      binarySparseInstance0.setValueSparse(1703, (-186.06350026125764));
      int[] intArray0 = new int[5];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 1052;
      intArray0[3] = 4;
      intArray0[4] = (-1560);
      SparseInstance sparseInstance0 = new SparseInstance(1703, doubleArray1, intArray0, 1052);
      // Undeclared exception!
      try { 
        sparseInstance0.setClassMissing();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3406.0);
      doubleArray0[1] = 1001.3145;
      Discretize discretize1 = new Discretize();
      discretize1.getUseEqualFrequency();
      discretize1.makeBinaryTipText();
      discretize1.useEqualFrequencyTipText();
      discretize0.getMakeBinary();
      int int0 = (-1088);
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-2087831322));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2087831322
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getOptions();
      StringReader stringReader0 = new StringReader("9.(");
      stringReader0.reset();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(251);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-454.59404049), intArray0, 4);
      // Undeclared exception!
      try { 
        binarySparseInstance2.isMissingSparse((-935));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -935
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = "K!]'";
      Filter filter0 = null;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "K!]'";
      stringArray0[3] = "K!]'";
      stringArray0[4] = "K!]'";
      Filter.runFilter((Filter) null, stringArray0);
      Discretize discretize0 = new Discretize("K!]'");
      int int0 = (-337);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-337));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("(-inf-");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unknown attribute type '";
      stringArray0[1] = "symbolic";
      stringArray0[2] = "7 KjdH+g>0OQ+b.w|<*";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "--k+1Uc";
      Discretize.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance(4);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize(" Y$!");
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-22);
      byteArray0[2] = (byte)89;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Discretize discretize0 = new Discretize("}P'");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((byte) (-22));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize(" Y$!");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getFindNumBins());
      
      discretize1.setFindNumBins(true);
      discretize0.getFindNumBins();
      discretize1.invertSelectionTipText();
      assertTrue(discretize1.getFindNumBins());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[][] doubleArray0 = new double[9][0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-3406.0);
      doubleArray1[1] = 1001.3145;
      doubleArray0[0] = doubleArray1;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Discretize.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }
}
