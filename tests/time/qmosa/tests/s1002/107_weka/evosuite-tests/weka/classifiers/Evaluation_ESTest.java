/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:27:39 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomial;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.AttributeSelectedClassifier;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.M5P;
import weka.clusterers.SimpleKMeans;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.Version;
import weka.core.converters.ArffLoader;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.NGramTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.318013832188361
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      serializedInstancesLoader0.setRetrieval(1617);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation1.toClassDetailsString();
      double double0 = evaluation0.m_Correct;
      evaluation1.SFMeanEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      int[] intArray0 = new int[4];
      intArray0[0] = 25;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      evaluation1.SFMeanEntropyGain();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1617;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = 1222.86538;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 1617;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1617;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5042372439664464
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.94002021988433);
      doubleArray0[1] = (-42.94002021988433);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-42.94002021988433), doubleArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(".xml", true);
      instances0.compactify();
      AbstractInstance.s_numericAfterDecimalPoint = 6;
      evaluation0.falsePositiveRate(1981);
      evaluation0.getRevision();
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation0.setPriors(instances0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-42.94002021988433));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) sparseInstance1;
      objectArray0[1] = (Object) evaluation0;
      objectArray0[2] = (Object) additiveRegression0;
      try { 
        evaluation0.evaluateModel((Classifier) additiveRegression0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.SparseInstance cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0171869213426303
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2277.2936886355);
      doubleArray0[1] = (-2277.2936886355);
      doubleArray0[2] = (-2277.2936886355);
      doubleArray0[3] = (-2277.2936886355);
      doubleArray0[4] = (-2277.2936886355);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-83));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4030688680951124
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      serializedInstancesLoader0.setRetrieval(1617);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(10);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4609);
      binarySparseInstance0.copy();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getDataSet();
      instances1.compactify();
      double double0 = evaluation0.SFMeanEntropyGain();
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = new Instances(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toMatrixString("'[=@7SbY8s,zl");
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.totalCost();
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.toMatrixString();
      assertEquals(Double.NaN, evaluation1.SFMeanEntropyGain(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.684698616776485
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.180179);
      doubleArray0[1] = (-42.180179);
      doubleArray0[2] = (-42.180179);
      doubleArray0[3] = (-42.180179);
      doubleArray0[4] = (-42.180179);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-20);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      instances0.compactify();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.SFSchemeEntropy();
      instances0.stream();
      evaluation0.falsePositiveRate(118);
      evaluation1.getRevision();
      boolean boolean0 = evaluation0.m_ComplexityStatisticsAvailable;
      evaluation1.setPriors(instances0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2.0));
      double double1 = evaluation0.truePositiveRate(323);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.31128814303217
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      byte[] byteArray0 = new byte[0];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.compactify();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumClasses = (-168);
      double double0 = evaluation0.fMeasure(5);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9396859142670557
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "getC");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.180179);
      doubleArray0[1] = (-42.180179);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-42.180179), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDirectory();
      instances0.add((Instance) binarySparseInstance0);
      instances0.compactify();
      evaluation0.weightedRecall();
      evaluation0.matthewsCorrelationCoefficient((-416));
      evaluation0.meanAbsoluteError();
      evaluation0.falseNegativeRate(6);
      M5P m5P0 = new M5P();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) m5P0, instances0, 48, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3157158806270903
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      serializedInstancesLoader0.setRetrieval(1617);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      double double0 = evaluation0.m_Correct;
      double double1 = evaluation1.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      int[] intArray0 = new int[4];
      intArray0[0] = 25;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      double double2 = evaluation0.m_TotalCoverage;
      String string1 = evaluation1.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      SMOreg sMOreg0 = new SMOreg();
      Evaluation.getGlobalInfo(sMOreg0);
      evaluation0.incorrect();
      evaluation0.SFSchemeEntropy();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5682261254929206
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Evaluation.handleCostOption("", 757);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.SFMeanEntropyGain();
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.toMatrixString(".arff");
      double double2 = evaluation1.recall((-1349));
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0942915208291915
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.94002021988433);
      doubleArray0[1] = (-42.94002021988433);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-42.94002021988433), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(6);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      instances0.compactify();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.weightedRecall();
      evaluation0.matthewsCorrelationCoefficient(20);
      evaluation0.meanAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.truePositiveRate(717);
      NaiveBayesMultinomial naiveBayesMultinomial0 = new NaiveBayesMultinomial();
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) naiveBayesMultinomial0, (Instance) sparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0888672664189687
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (-42.180179);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.52), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(false);
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader2.getDirectory();
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      double double0 = evaluation1.weightedRecall();
      evaluation1.setDiscardPredictions(false);
      double double1 = evaluation0.matthewsCorrelationCoefficient((-426));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.meanAbsoluteError();
      assertEquals(double2, double0, 0.01);
      
      evaluation1.truePositiveRate((-426));
      assertFalse(evaluation1.getDiscardPredictions());
      
      double double3 = evaluation0.correct();
      assertEquals(double3, double1, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.158274780648856
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.94002021988433);
      doubleArray0[1] = (-42.94002021988433);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-42.94002021988433), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(6);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      instances0.compactify();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.incorrect();
      double double1 = evaluation0.matthewsCorrelationCoefficient(20);
      evaluation0.meanAbsoluteError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedRecall();
      evaluation1.setDiscardPredictions(true);
      double double2 = evaluation1.matthewsCorrelationCoefficient(6);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.meanAbsoluteError();
      double double3 = evaluation0.truePositiveRate(10);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation1.correct();
      assertEquals(double4, double1, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.296266451551098
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.180179);
      doubleArray0[1] = (-42.180179);
      doubleArray0[2] = (-42.180179);
      doubleArray0[3] = (-42.180179);
      doubleArray0[4] = (-42.180179);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-20);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanEntropyGain();
      evaluation0.SFSchemeEntropy();
      int[] intArray0 = new int[8];
      intArray0[0] = (int) (byte)10;
      intArray0[1] = (-1842989002);
      intArray0[2] = (int) (byte)10;
      intArray0[3] = (int) (byte)10;
      intArray0[4] = (int) (byte) (-20);
      intArray0[5] = (int) (byte)10;
      intArray0[6] = (int) (byte) (-20);
      intArray0[7] = (-1842989002);
      Instance instance0 = BallNode.calcCentroidPivot((int) (byte)10, (int) (byte) (-20), intArray0, instances0);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5491175177279355
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.addNumericTrainClass((-2), 0.0);
      evaluation0.areaUnderROC(487);
      evaluation0.pctCorrect();
      int[] intArray0 = new int[5];
      intArray0[0] = 499;
      intArray0[1] = 487;
      intArray0[2] = (-2);
      intArray0[3] = 21;
      intArray0[4] = 487;
      Instance instance0 = BallNode.calcCentroidPivot(489, (-747), intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnce(0.0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5266399744832115
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 757;
      Evaluation.handleCostOption("", 757);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".cost");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      instances0.compactify();
      SparseInstance sparseInstance0 = new SparseInstance(757);
      try { 
        evaluation0.updateStatsForPredictor(757, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5656825482084757
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SparseInstance sparseInstance0 = new SparseInstance(108);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      IBk iBk0 = new IBk();
      Evaluation.makeOptionString(iBk0, false);
      double double0 = evaluation0.SFMeanEntropyGain();
      double double1 = evaluation0.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.fMeasure(5);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.282697641452146
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)109;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SparseInstance sparseInstance0 = new SparseInstance(108);
      byte[] byteArray1 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString("@data", false);
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      try { 
        evaluation1.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.8341982274708015
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.180179);
      doubleArray0[1] = (-42.180179);
      doubleArray0[2] = (-42.180179);
      doubleArray0[3] = (-42.180179);
      doubleArray0[4] = (-42.180179);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-20);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      evaluation0.unweightedMacroFmeasure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toSummaryString();
      evaluation1.SFMeanEntropyGain();
      evaluation0.SFSchemeEntropy();
      evaluation1.m_SumErr = 0.0;
      evaluation1.KBMeanInformation();
      textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFEntropyGain();
      try { 
        evaluation1.crossValidateModel("#qto\"~1P", instances0, 483, (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: #qto\"~1P
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2077488965784924
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      serializedInstancesLoader0.setRetrieval(1617);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation0.toClassDetailsString();
      evaluation0.SFMeanEntropyGain();
      evaluation1.SFMeanEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 25;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 101;
      intArray0[7] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1723.4, intArray0, 25);
      try { 
        evaluation1.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.370557011391566
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.94002021988433);
      doubleArray0[1] = (-42.94002021988433);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-42.94002021988433), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      binarySparseInstance0.copy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(".xml", true);
      instances0.compactify();
      AbstractInstance.s_numericAfterDecimalPoint = 6;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      intArray0[1] = 6;
      evaluation1.meanAbsoluteError();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, intArray0, 6);
      evaluation0.unclassified();
      try { 
        evaluation1.updatePriors(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      int int0 = 1617;
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      serializedInstancesLoader0.setRetrieval(1617);
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z2P^^9\"";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3494212837970236
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SparseInstance sparseInstance0 = new SparseInstance(108);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)113;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 108;
      doubleArray0[1] = (double) (byte)47;
      doubleArray0[2] = (double) (byte)113;
      doubleArray0[3] = (double) (byte)20;
      doubleArray0[4] = (double) (byte)113;
      doubleArray0[5] = (double) (byte)113;
      doubleArray0[6] = (double) 6;
      evaluation0.m_TrainClassWeights = doubleArray0;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.SFMeanEntropyGain();
      evaluation1.SFMeanEntropyGain();
      evaluation0.totalCost();
      try { 
        Evaluation.handleCostOption("@relation", (byte)113);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2077488965784924
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SparseInstance sparseInstance0 = new SparseInstance(108);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      String[] stringArray0 = new String[0];
      evaluation1.m_ClassNames = stringArray0;
      evaluation0.toClassDetailsString();
      evaluation1.SFMeanEntropyGain();
      evaluation0.SFMeanEntropyGain();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updatePriors(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3517961703142536
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-80.57013902217736);
      doubleArray0[1] = (-80.57013902217736);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-80.57013902217736), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      binarySparseInstance0.copy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      double double0 = evaluation0.m_SumKBInfo;
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      sparseInstance0.toString((-2), 105);
      evaluation0.toMatrixString("  extends Filter {\n");
      evaluation0.KBMeanInformation();
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3494212837970236
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte) (-65);
      byteArray0[1] = (byte) (-65);
      byte byte1 = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte) (-5);
      byteArray0[4] = (byte) (-117);
      byteArray0[5] = (byte) (-117);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      textDirectoryLoader0.setSource(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = evaluation0.m_MissingClass;
      Utils.log2 = 1.0;
      evaluation1.SFMeanEntropyGain();
      instances0.stream();
      evaluation0.falsePositiveRate((byte)19);
      evaluation1.getRevision();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".arff");
      try { 
        evaluation1.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.534576694197681
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-714.675178104339);
      doubleArray0[1] = (-714.675178104339);
      doubleArray0[2] = 1797.27459;
      doubleArray0[3] = 1797.27459;
      doubleArray0[4] = (-714.675178104339);
      doubleArray0[5] = 1797.27459;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBMeanInformation();
      evaluation1.SFMeanEntropyGain();
      evaluation1.truePositiveRate(16);
      evaluation1.toCumulativeMarginDistributionString();
      evaluation1.KBMeanInformation();
      Instances instances1 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFEntropyGain();
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      try { 
        evaluation2.crossValidateModel("#qto\"~1P", instances1, (-1145), (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: #qto\"~1P
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6544465311255245
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.180179);
      doubleArray0[1] = (-42.180179);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-42.180179), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDirectory();
      instances0.compactify();
      evaluation0.weightedRecall();
      double double0 = evaluation0.matthewsCorrelationCoefficient((-426));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.numTruePositives((byte)6);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.717020786717215
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      double double0 = (-42.180179);
      double[] doubleArray0 = new double[8];
      double double1 = 1797.27459;
      SparseInstance sparseInstance0 = new SparseInstance(1797.27459, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-42.180179), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(527.0, doubleArray0);
      SparseInstance sparseInstance3 = new SparseInstance((-1677.6675516866), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.setValue(15, (double) 15);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      ArffLoader arffLoader0 = new ArffLoader();
      File file0 = arffLoader0.retrieveFile();
      textDirectoryLoader0.setDirectory(file0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        Evaluation.evaluateModel((String) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6714599763614508
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.94002021988433);
      doubleArray0[1] = (-42.94002021988433);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-42.94002021988433), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      binarySparseInstance0.copy();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.compactify();
      evaluation0.SFMeanEntropyGain();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-1508.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(1187.6, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (-62.81757);
      doubleArray1[2] = (-1508.0);
      doubleArray1[3] = 1187.6;
      doubleArray1[4] = (-62.81757);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6, doubleArray1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(6);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(1384.66, doubleArray1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance2);
      binarySparseInstance1.setValue(5, 329.8833763);
      Instances instances0 = textDirectoryLoader1.getDataSet();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4582244426360023
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      Evaluation.handleCostOption("", 727);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 727;
      doubleArray0[1] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 727;
      doubleArray0[5] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance(1.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(727);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 2108;
      Instances instances0 = new Instances("globalInfo", arrayList0, 2108);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("globalInfo");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)101;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte)12;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        Evaluation.handleCostOption("globalInfo", 727);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"e\uFFFDd\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7723221396381754
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double double0 = (-42.180179);
      double[] doubleArray0 = new double[8];
      SparseInstance sparseInstance0 = new SparseInstance(1797.27459, doubleArray0);
      sparseInstance0.toString((-97), 498);
      SparseInstance sparseInstance1 = new SparseInstance((-42.180179), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(527.0, doubleArray0);
      SparseInstance sparseInstance3 = new SparseInstance((-1677.6675516866), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance2);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.setValue(15, (double) 15);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      Version.REVISION = 6;
      ArffLoader arffLoader0 = new ArffLoader();
      File file0 = arffLoader0.retrieveFile();
      textDirectoryLoader0.setDirectory(file0);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.evaluateModelOnce(1797.27459, (Instance) sparseInstance1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1797
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.180179);
      doubleArray0[1] = (-42.180179);
      SparseInstance sparseInstance0 = new SparseInstance((-3613.523), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(10);
      SparseInstance sparseInstance2 = new SparseInstance((-42.180179), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance2);
      int int0 = 419;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(6);
      instances0.add((Instance) binarySparseInstance1);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Evaluation.main((String[]) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "EYjb<hbsR=q{\"|vTrS");
      assertNotNull(string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "2@iarB(OG";
      stringArray0[1] = "-p range\n";
      Evaluation.main(stringArray0);
      ArffLoader arffLoader0 = new ArffLoader();
      ArffLoader arffLoader1 = new ArffLoader();
      try { 
        arffLoader1.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      byte byte0 = (byte)112;
      String string0 = null;
      Evaluation.handleCostOption((String) null, 108);
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0, (byte)112);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      int int0 = 1617;
      serializedInstancesLoader0.setRetrieval(1617);
      int int1 = 122;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Classifier classifier0 = AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Z2P^^9\"";
      stringArray0[1] = "s6XQq>o";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "";
      try { 
        Evaluation.evaluateModel(classifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.MultiClassClassifierUpdateable:
         // 
         // -M <num>
         // \tSets the method to use. Valid values are 0 (1-against-all),
         // \t1 (random codes), 2 (exhaustive code), and 3 (1-against-1). (default 0)
         // 
         // -R <num>
         // \tSets the multiplier when using random codes. (default 2.0)
         // -P
         // \tUse pairwise coupling (only has an effect for 1-against1)
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.functions.Logistic)
         // 
         // Options specific to classifier weka.classifiers.functions.Logistic:
         // 
         // -D
         // \tTurn on debugging output.
         // -C
         // \tUse conjugate gradient descent rather than BFGS updates.
         // -R <ridge>
         // \tSet the ridge in the log-likelihood.
         // -M <number>
         // \tSet the maximum number of iterations (default -1, until convergence).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Evaluation.handleCostOption("", 494);
      try { 
        Evaluation.handleCostOption(".xml", 90);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[7];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[0] = 4.9E-324;
      doubleArray0[1] = 4.9E-324;
      doubleArray0[2] = 4.9E-324;
      doubleArray0[3] = 4.9E-324;
      doubleArray0[4] = 4.9E-324;
      doubleArray0[5] = 4.9E-324;
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AbstractClassifier.makeCopy(multiClassClassifierUpdateable0);
      String[] stringArray0 = new String[3];
      try { 
        Evaluation.evaluateModel((Classifier) multiClassClassifierUpdateable0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = 727;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4189364700457425
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-42.180179);
      doubleArray0[1] = (-42.180179);
      doubleArray0[2] = (-42.180179);
      doubleArray0[3] = (-42.180179);
      doubleArray0[4] = (-42.180179);
      AttributeSelectedClassifier attributeSelectedClassifier0 = new AttributeSelectedClassifier();
      Enumeration enumeration0 = new NGramTokenizer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7L7Jzoe'y=";
      stringArray0[1] = "b8iqFp+,=b0vMh;zt";
      stringArray0[2] = "b8iqFp+,=b0vMh;zt";
      AbstractClassifier.runClassifier(attributeSelectedClassifier0, stringArray0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
