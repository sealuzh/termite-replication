/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:47:50 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("b]#bC8J:A\"kXmA:J");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, false, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("5Nt6#T&jPO");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("5Nt6#T&jPO");
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("5Nt6#T&jPO", charArray0, true, inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("5Nt6#T&jPO", (String) null, inetAddress1);
      usernamePasswordToken1.clear();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'a';
      charArray0[2] = 'B';
      charArray0[3] = 'l';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'Y';
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("*Y'}A{ebGlQ|", "", true, inetAddress0);
      usernamePasswordToken0.getPassword();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" xMy1i]N_'rkqoW0KB", "R UQI!5yFOm`SU,T'", false);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken -  xMy1i]N_'rkqoW0KB, rememberMe=false", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "nWLDGw_A?", false, inetAddress0);
      usernamePasswordToken0.getPrincipal();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[5];
      charArray1[0] = 'g';
      charArray1[1] = '}';
      charArray1[2] = 'g';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("d_^V1{.s]H uN$", " xMy1i]N_'rkqoW0KB", true);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
      
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getCredentials();
      char[] charArray2 = usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setPassword(charArray2);
      usernamePasswordToken0.getPassword();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("5Nt6#T&jPO");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      MockInetAddress.anyLocalAddress();
      char[] charArray1 = new char[2];
      charArray1[0] = 'g';
      charArray1[1] = 'g';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray1, true);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4530014063936125
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetAddress.getByName("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setRememberMe(true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = '\"';
      charArray0[2] = 'V';
      charArray0[2] = 'p';
      charArray0[4] = '0';
      charArray0[5] = 'p';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getPassword();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", "");
      usernamePasswordToken1.setRememberMe(true);
      usernamePasswordToken1.clear();
      usernamePasswordToken1.getCredentials();
      usernamePasswordToken1.setRememberMe(true);
      assertTrue(usernamePasswordToken1.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("*x<zb)xG+:j9[?l", "", true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPrincipal();
      char[] charArray0 = new char[2];
      charArray0[0] = '\"';
      charArray0[1] = 'J';
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8624848373103666
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = '/';
      charArray0[2] = '0';
      charArray0[3] = 'L';
      charArray0[4] = '~';
      charArray0[5] = 'H';
      charArray0[6] = ' ';
      charArray0[7] = '.';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("v=>ol\"abWrycNQ~", charArray0);
      usernamePasswordToken0.setUsername("v=>ol\"abWrycNQ~");
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getUsername();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("N{>?OQi~g@1EYe}f_(", charArray0);
      usernamePasswordToken1.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[5];
      charArray1[0] = 'g';
      charArray1[1] = '}';
      charArray1[2] = 'g';
      charArray1[4] = '-';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("8 ut", "");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = '|';
      charArray0[2] = 'j';
      charArray0[3] = ';';
      charArray0[4] = 'U';
      charArray0[5] = 'W';
      charArray0[6] = 'D';
      charArray0[7] = '7';
      charArray0[8] = 'H';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("yp", charArray0, true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - yp, rememberMe=true", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("5Nt6#T&jPO");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[3];
      charArray0[0] = 'g';
      charArray0[1] = '3';
      charArray0[2] = 'g';
      InetAddress inetAddress0 = MockInetAddress.getByName("5Nt6#T&jPO");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("5Nt6#T&jPO", charArray0, true, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - 5Nt6#T&jPO, rememberMe=true (5Nt6#T&jPO/200.42.42.0)", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = new char[5];
      charArray1[0] = 'g';
      charArray1[1] = '}';
      charArray1[2] = 'g';
      charArray1[4] = '-';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "NMK\">9=cC", true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=true", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      char[] charArray0 = new char[4];
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false);
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
      
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "";
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "hw0N`>", false, inetAddress0);
      usernamePasswordToken0.setInetAddress(inetAddress0);
      char[] charArray0 = new char[9];
      charArray0[0] = 'A';
      charArray0[1] = 'k';
      charArray0[2] = 'E';
      charArray0[3] = 'j';
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-109);
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-120);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)53;
      byteArray0[7] = (byte)3;
      try { 
        MockInetAddress.getByAddress("hw0N`>", byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-109, 2, 6, 0, -120, -1, 53, 3]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.getByName("");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("UIihF.tCq");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", ", rememberMe=", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockInetAddress.getByName("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-110);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.setRememberMe(true);
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = '\"';
      charArray0[2] = 'V';
      charArray0[3] = 'p';
      charArray0[4] = '0';
      charArray0[5] = 'p';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getPassword();
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", "");
      usernamePasswordToken1.setRememberMe(true);
      usernamePasswordToken1.getCredentials();
      usernamePasswordToken1.setRememberMe(true);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '&';
      charArray0[1] = '!';
      charArray0[2] = '+';
      charArray0[3] = 'a';
      charArray0[4] = 'u';
      charArray0[5] = '!';
      charArray0[6] = 'Z';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, false);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = 'I';
      charArray0[1] = '@';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = 'l';
      charArray0[5] = 'L';
      charArray0[6] = ':';
      charArray0[7] = ',';
      charArray0[8] = 'T';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("{|RbT80", charArray0, true);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("{|RbT80", charArray0, true);
      usernamePasswordToken1.setUsername("<t0kk");
      assertTrue(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      char[] charArray0 = new char[0];
      MockInetAddress.getLocalHost();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false, inetAddress0);
      usernamePasswordToken0.getPrincipal();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", "+M&'M");
      usernamePasswordToken1.setUsername("");
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockInetAddress.getByName("F,\",;,cRd;~xc`, 3fH");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("F,\",;,cRd;~xc`, 3fH");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[3] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("F,\",;,cRd;~xc`, 3fH", "F,\",;,cRd;~xc`, 3fH", inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockInetAddress.getByName("*x<zb)xG+:j9[?l");
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getByName("*x<zb)xG+:j9[?l");
      MockInetAddress.getLocalHost();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[8];
      charArray0[0] = 'Q';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      charArray0[5] = 'g';
      charArray0[6] = 'g';
      charArray0[7] = 'g';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("~h~16Swt>9c", charArray0, true, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }
}
