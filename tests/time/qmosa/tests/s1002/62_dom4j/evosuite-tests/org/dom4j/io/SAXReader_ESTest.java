/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:30:49 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMDocument;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.util.NonLazyElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Parser;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributeListImpl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9355234013011677
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.getDispatchHandler();
      sAXReader0.isValidating();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/x,Y'3mmhm{Bz{T0H)+s><L0(%#I");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/tmp/:dZ:.i{0-8%4LJU0-8%4LJU", "//tmp/tmp/:dZ:.i{0-8%4LJU0-8%4LJU");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader_SAXEntityResolver0.resolveEntity("hJqatta7^]<q!NzQdF", "//tmp/Validation not supported for XMLReader: 0-8%4LJU");
      sAXReader0.createDefaultEntityResolver("//tmp/amp0.tmp");
      sAXReader0.setEncoding("%P't=t");
      boolean boolean0 = sAXReader0.isIgnoreComments();
      sAXReader0.getEncoding();
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.getEntityResolver();
      sAXReader_SAXEntityResolver0.resolveEntity("%P't=t", "&");
      sAXReader0.isValidating();
      sAXReader0.getEncoding();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/amp0.tmp");
      sAXReader0.getEncoding();
      sAXReader0.isValidating();
      boolean boolean1 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(boolean1 == boolean0);
      
      sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("vtl;*62x*T");
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      StringReader stringReader1 = new StringReader(")c{`]pg/Jvdco6Z\"m");
      stringReader0.ready();
      try { 
        sAXReader0.read((Reader) stringReader0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5615441469466216
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String string0 = "vtl;*6Clx*T";
      StringReader stringReader0 = new StringReader("vtl;*6Clx*T");
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, false);
      SAXReader sAXReader2 = new SAXReader();
      SAXContentHandler sAXContentHandler0 = sAXReader2.createContentHandler((XMLReader) null);
      sAXReader1.setErrorHandler(sAXContentHandler0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader2.setXMLFilter((XMLFilter) null);
      sAXReader2.setIgnoreComments(false);
      stringReader0.ready();
      try { 
        sAXReader1.read((Reader) stringReader0, "vtl;*6Clx*T");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/vtl;*6Clx*T : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, true);
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      sAXReader1.addHandler((String) null, dispatchHandler0);
      boolean boolean0 = sAXReader1.isValidating();
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(boolean0);
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-6);
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-83);
      byteArray0[3] = (byte)42;
      byteArray0[4] = (byte) (-86);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DispatchHandler dispatchHandler0 = new DispatchHandler();
          SAXReader sAXReader0 = new SAXReader();
          URL uRL0 = MockURL.getHttpExample();
          String string0 = "bF&Z<J,5";
          URL uRL1 = MockURL.URL(uRL0, "bF&Z<J,5", (URLStreamHandler) null);
          try { 
            sAXReader0.read(uRL1);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor225.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      char[] charArray0 = new char[6];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "//tmp/-8%4LJU0/tmp/:dZ:.i{0-8%4LJU/tmp/:dZ:.i{0-8%4LJU/org.jaxen.saxpath.base.XPathLexer0org.jaxen.saxpath.base.XPathLexer");
      charArray0[0] = '@';
      StringReader stringReader0 = new StringReader(")c{`]pg/Jvdco6Z\"m");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DOMDocument dOMDocument0 = new DOMDocument("vtl;*62x*T");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(parserAdapter0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      char[] charArray0 = new char[5];
      charArray0[3] = ']';
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("-\"7Xl+");
      String string0 = " K,#}/_[";
      StringReader stringReader0 = new StringReader(" K,#}/_[");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      MockURL.getHttpExample();
      String string0 = "1ttA&l";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("1ttA&l");
      sAXReader_SAXEntityResolver0.resolveEntity("1ttA&l", (String) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("boolean() requires one argument");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      SAXReader sAXReader1 = new SAXReader();
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("1ttA&l", "[A:H$-ejQtP4(y'@");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.365397793850337
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("", "Validation not supported for XMLReader: ");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setIgnoreComments(false);
      StringReader stringReader0 = new StringReader("//tmp/Validation not supported for XMLReader: 0-8%4LJU");
      stringReader0.ready();
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, "//tmp/Validation not supported for XMLReader: 0-8%4LJU");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("Fp", " : ");
      URI uRI0 = MockURI.aHttpURI;
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringReader stringReader0 = new StringReader("org.w3c.dom.Node");
      stringReader0.read();
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.setIgnoreComments(true);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = "Validation not supported for XMLReader: ";
      xMLFilterImpl0.processingInstruction("", "Validation not supported for XMLReader: ");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      sAXReader0.removeHandler("Validation not supported for XMLReader: ");
      InputSource inputSource0 = new InputSource("Validation not supported for XMLReader: ");
      sAXReader0.getErrorHandler();
      MockFile mockFile0 = new MockFile("");
      MockFile.createTempFile("Validation not supported for XMLReader: ", "");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      sAXReader0.isIgnoreComments();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.47232673134543
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      sAXReader1.setEncoding("J.|3O2");
      try { 
        sAXReader1.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3049002651316712
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      SAXReader sAXReader0 = new SAXReader(true);
      MockURL.getHttpExample();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(".;@ru&nH=}Iv>ng*9qt");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, ".;@ru&nH=}Iv>ng*9qt");
      String string0 = "//tmp/:dZ:.i{0-8%4LJU";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver(".;@ru&nH=}Iv>ng*9qt");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver2 = new SAXReader.SAXEntityResolver("//tmp/:dZ:.i{0-8%4LJU");
      InputSource inputSource0 = sAXReader_SAXEntityResolver2.resolveEntity("boolean() requires one argument", "//tmp/:dZ:.i{0-8%4LJU");
      SAXReader sAXReader1 = new SAXReader();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/:dZ:.i{0-8%4LJU Nested exception: no protocol: //tmp/:dZ:.i{0-8%4LJU
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getDispatchHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.4270713435750126
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "]ELJO)4>)1MD";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string1 = "//tmp/:dZ:.i{0-8%4LJU";
      xMLFilterImpl0.processingInstruction("]ELJO)4>)1MD", "//tmp/:dZ:.i{0-8%4LJU");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4397875658695436
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("", "Validation not supported for XMLReader: ");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(pruningDispatchHandler0);
      sAXReader0.removeHandler("");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InputSource inputSource0 = new InputSource("");
      sAXReader0.getErrorHandler();
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("Validation not supported for XMLReader: ", "-8%4LJU");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      char[] charArray0 = new char[9];
      charArray0[0] = 'n';
      charArray0[1] = 'R';
      charArray0[2] = 'J';
      charArray0[3] = 'W';
      charArray0[4] = 'J';
      charArray0[5] = 'b';
      charArray0[6] = '2';
      charArray0[7] = '^';
      charArray0[8] = 'R';
      xMLFilterImpl0.ignorableWhitespace(charArray0, 44, 7);
      xMLFilterImpl0.startPrefixMapping((String) null, (String) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DefaultDocumentFactory.getInstance();
      sAXReader0.createDefaultEntityResolver("uI9nt");
      assertFalse(sAXReader0.isMergeAdjacentText());
      
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.createXMLReader();
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.8797790870358644
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setMergeAdjacentText(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.getErrorHandler();
      xMLReaderAdapter0.setErrorHandler((ErrorHandler) null);
      xMLReaderAdapter0.startPrefixMapping("", "");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(parserAdapter0, defaultHandler2_0);
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.removeHandler("");
      sAXReader0.setStringInternEnabled(false);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.504742798546941
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("");
      String string1 = null;
      InputSource inputSource0 = sAXReader_SAXEntityResolver1.resolveEntity("", (String) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/x,Y'3mmhm{Bz{T0H)+s><L0(%#I");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "";
      sAXReader0.removeHandler("");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setMergeAdjacentText(false);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter((Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Parser argument must not be null
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/org.w3c.dom.Node0");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/org.w3c.dom.Node0 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("]ELJO)4>)1MD", "//tmp/:dZ:.i{0-8%4LJU");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.440140500251581
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      char[] charArray0 = new char[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://xml.org/sax/handlers/LexicalHandler");
      charArray0[3] = ']';
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      dispatchHandler0.setDefaultHandler(sAXModifyElementHandler0);
      dispatchHandler0.removeHandler("");
      sAXReader0.addHandler("http://xml.org/sax/handlers/LexicalHandler", (ElementHandler) null);
      documentFactory0.createPattern("http://xml.org/sax/handlers/LexicalHandler");
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5642900265283206
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "the size: ");
      String string1 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      sAXReader_SAXEntityResolver0.resolveEntity("VPcP", "boolean() requires one argument");
      sAXReader_SAXEntityResolver0.resolveEntity("", "8!QpkV v");
      sAXReader_SAXEntityResolver0.resolveEntity("boolean() requires one argument", "org.jaxen.pattern.UnionPattern");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.createXMLReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler0);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty("boolean() requires one argument", "");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'boolean() requires one argument' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getEntityResolver();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.isIncludeExternalDTDDeclarations();
      boolean boolean0 = false;
      sAXReader0.setStringInternEnabled(false);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      QName qName0 = QName.get((String) null, (Namespace) null);
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.getXMLReader();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      xMLFilterImpl0.setErrorHandler(sAXContentHandler0);
      DefaultDocumentFactory.getInstance();
      try { 
        xMLFilterImpl0.getFeature((String) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: null
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getDocumentFactory();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter((Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Parser argument must not be null
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.getEncoding();
      sAXReader0.getDocumentFactory();
      AttributeListImpl attributeListImpl0 = new AttributeListImpl();
      AttributeListImpl attributeListImpl1 = new AttributeListImpl(attributeListImpl0);
      attributeListImpl1.getName(47);
      AttributeListImpl attributeListImpl2 = new AttributeListImpl(attributeListImpl1);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.startElement((String) null, attributeListImpl0);
      ParserAdapter parserAdapter1 = null;
      try {
        parserAdapter1 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.createXMLReader();
      sAXReader0.getXMLReader();
      sAXReader0.setStringInternEnabled(false);
      try { 
        sAXReader0.setXMLReaderClassName("x_i;j(bG]@aP\u0003u?@");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class x_i;j(bG]@aP\u0003u?@ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setStripWhitespaceText(true);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("vtl;*62x*T");
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      charArray0[1] = ']';
      charArray0[2] = '=';
      charArray0[3] = 'v';
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String string0 = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      Object object1 = new Object();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      try { 
        sAXReader0.setProperty("BtHDyqJ}/a", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: BtHDyqJ}/a
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("vtl;*62x*T");
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = ']';
      String string0 = "";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Object object0 = new Object();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, object1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.setIgnoreComments(true);
      sAXReader0.isStringInternEnabled();
      sAXReader0.setXMLReader((XMLReader) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      sAXReader0.resetHandlers();
      byte[] byteArray0 = new byte[0];
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Element element0 = defaultDocumentFactory0.createElement("+1U", "+1U");
      defaultDocumentFactory0.createDocument(element0);
      String string0 = "~\"x;Diu(;y79i5";
      defaultDocumentFactory0.createDocument("~\"x;Diu(;y79i5");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setEncoding("+1U");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultDocumentFactory0.createText("+1U");
      sAXReader0.setEntityResolver(defaultHandler2_0);
      char[] charArray0 = new char[0];
      defaultHandler2_0.comment(charArray0, 2172, 0);
      try { 
        sAXReader0.setProperty("SGs|HiT;%=", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'SGs|HiT;%=' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("", "Validation not supported for XMLReader: ");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      xMLFilterImpl0.startElement("-8%4LJU", "-8%4LJU", "/", attributesImpl0);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.setEncoding("Validation not supported for XMLReader: ");
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "-8%4LJU";
      stringArray0[2] = "org.dom4j.io.SAXReader$SAXEntityResolver";
      stringArray0[3] = "P";
      stringArray0[4] = "P";
      stringArray0[5] = "Validation not supported for XMLReader: ";
      stringArray0[6] = "/";
      stringArray0[7] = "/";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      dispatchHandler1.removeHandler("Tfe5{i7vSllk9");
      sAXReader0.addHandler("-8%4LJU", dispatchHandler0);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      xMLFilterImpl0.processingInstruction("DB4:Ua,roB]YjT", "DB4:Ua,roB]YjT");
      sAXReader0.removeHandler("-8%4LJU");
      InputSource inputSource0 = new InputSource("-8%4LJU");
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      sAXReader0.setValidation(false);
      defaultHandler2_0.resolveEntity("w<#'", (String) null, "w<#'", "HG2[2x");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte) (-1);
      try { 
        pipedOutputStream0.write(byteArray0, (-942), 2234);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null);
      QName qName0 = QName.get((String) null, (Namespace) null);
      qName0.getDocumentFactory();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.getXMLReader();
      sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.isIncludeInternalDTDDeclarations();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, xMLReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String string0 = "vtl;*62x*T";
      StringReader stringReader0 = new StringReader("vtl;*62x*T");
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = ']';
      charArray0[2] = '=';
      charArray0[3] = 'v';
      charArray0[4] = '|';
      charArray0[5] = '$';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2492391531850404
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "the size: ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("the size: ");
      String string0 = "boolean() requires one argument";
      sAXReader_SAXEntityResolver0.resolveEntity("VPcP", "boolean() requires one argument");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("//tmp/:dZ:.i{0-8%4LJU");
      InputSource inputSource0 = sAXReader_SAXEntityResolver1.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string0 = "//tmp/:dZ:.i{0-8%4LJU/tmp/:dZ:.i{0-8%4LJU/org.jaxen.saxpath.base.XPathLexer0org.jaxen.saxpath.base.XPathLexer";
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "//tmp/:dZ:.i{0-8%4LJU/tmp/:dZ:.i{0-8%4LJU/org.jaxen.saxpath.base.XPathLexer0org.jaxen.saxpath.base.XPathLexer");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      InputSource inputSource0 = new InputSource();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      xMLFilterImpl1.setDTDHandler(xMLFilterImpl2);
      try { 
        sAXReader0.setFeature("K q]d.nw/m6", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: K q]d.nw/m6
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      StringReader stringReader0 = new StringReader("");
      stringReader0.ready();
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.getErrorHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.configureReader(xMLFilterImpl1, defaultHandler2_0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      StringReader stringReader0 = new StringReader("vtl;*62x*T");
      char[] charArray0 = new char[6];
      charArray0[0] = '@';
      charArray0[1] = ']';
      charArray0[2] = '=';
      charArray0[3] = 'v';
      StringReader stringReader1 = new StringReader("vtl;*62x*T");
      stringReader1.read();
      stringReader0.ready();
      try { 
        sAXReader0.read((Reader) stringReader1, "RI6W.up[Cha&<2AZTn");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document RI6W.up[Cha&<2AZTn : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Namespace namespace0 = Namespace.get("1F", "u>A");
      QName qName0 = QName.get("zK;1tQO", namespace0, "zK;1tQO");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      InputSource inputSource0 = new InputSource();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@4182e062 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String string0 = "vtl;*62x*T";
      char[] charArray0 = new char[6];
      charArray0[1] = ']';
      charArray0[2] = '=';
      charArray0[3] = 'v';
      charArray0[4] = '|';
      charArray0[5] = '$';
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.createContentHandler(parserAdapter0);
      QName qName0 = QName.get("]", "ANY_NODE");
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0, 7);
      documentFactory0.createAttribute((Element) nonLazyElement0, qName0, "TH`cAm`M)h.\"&nB=OQ_");
      try { 
        sAXReader0.setProperty("CNyNVO(!zs8?", "CNyNVO(!zs8?");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'CNyNVO(!zs8?' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.4428334486999774
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("]ELJO)4>)1MD", "//tmp/:dZ:.i{0-8%4LJU");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      sAXReader0.removeHandler("]ELJO)4>)1MD");
      InputSource inputSource0 = new InputSource("");
      sAXReader0.getErrorHandler();
      MockFile mockFile0 = new MockFile("");
      File file0 = MockFile.createTempFile("//tmp/:dZ:.i{0-8%4LJU", "-8%4LJU");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      InputSource inputSource0 = new InputSource();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      sAXReader0.addHandler((String) null, sAXModifyElementHandler0);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String string0 = "";
      InputSource inputSource0 = new InputSource("");
      MockFile mockFile0 = new MockFile("");
      MockFile.createTempFile("//tmp/:dZ:.i{0-8%4LJU", "-8%4LJU");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//tmp/:dZ:.i{0-8%4LJU");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/:dZ:.i{0-8%4LJU not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
