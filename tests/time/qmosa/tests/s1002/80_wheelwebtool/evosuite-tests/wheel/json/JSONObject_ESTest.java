/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 16:38:04 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7092634709273697
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("'@~1[*-{ZaV", hashMap0);
      jSONObject1.toString(27, 1569);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8849092779765202
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      jSONObject0.accumulate("rem", jSONObject1);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, (-1425), (-1425));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1428852304537858
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean(",:]}/\"[{;=#");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-55.0902922));
      hashMap0.put((String) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove((String) null);
      assertEquals((-55.0902922), object0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ',' or '}'", 101);
      int int0 = jSONObject0.optInt("Expected a ',' or '}'");
      assertEquals(101, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.094729047527649
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-267L));
      int int0 = jSONObject0.optInt("");
      assertEquals((-267), int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expected a ',' or '}'", true);
      Object object0 = jSONObject1.opt("Expected a ',' or '}'");
      assertEquals(true, object0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.put("((XMOIqipwoRNX<0", 2355L);
      boolean boolean1 = jSONObject0.has("((XMOIqipwoRNX<0");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.append("isfloatToRawIntBits", "isfloatToRawIntBits");
      jSONObject1.getString("isfloatToRawIntBits");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      jSONObject1.getInt("\"java.lang.String@0000000004\"");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3404197634823931
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      Double double0 = new Double(0L);
      jSONObject0.put("isF", (Object) double0);
      jSONObject0.get("isF");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.666278442414676
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = JSONObject.valueToString("", 0, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0579054247036734
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Short short0 = new Short((short)92);
      String string0 = JSONObject.valueToString(short0, 2178, 78);
      assertNotNull(string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7260509192674385
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString(0, 0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1685), (-1685));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.toString((-27));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject.testValidity(".");
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte)32);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byte0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      jSONObject0.put("", (Collection) linkedList0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("^BcI/[S.;_]", 0L);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2105367626153136
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("cC()2##:T", 0.0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.2105367626153136
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("4'n<e7", (double) (short)92);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = jSONObject0.optString("qNngsPKOdw@g[>h)Z", (String) null);
      assertNull(string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      String string0 = jSONObject0.optString("", "K'md");
      assertEquals("K'md", string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-57));
      JSONObject jSONObject0 = new JSONObject(byte0);
      long long0 = jSONObject0.optLong("sp", 438L);
      assertEquals(1, jSONObject0.length());
      assertEquals(438L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Short short0 = new Short((short) (-2362));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      long long0 = jSONObject0.optLong((String) null, (long) (short) (-2362));
      assertEquals((-2362L), long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.572528756326852
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      int int0 = jSONObject0.optInt("isfloatToRawIntBits", 120);
      assertEquals(120, int0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Short short0 = new Short((short) (-2362));
      String[] stringArray0 = new String[8];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      int int0 = jSONObject0.optInt((String) null, (int) (short) (-2362));
      assertEquals((-2362), int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("", 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble("jhmvvAO", (-105.34092));
      assertEquals(3, jSONObject0.length());
      assertEquals((-105.34092), double1, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      double double1 = jSONObject0.optDouble("jhmvvAO", 0.0);
      assertEquals(3, jSONObject0.length());
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      double double0 = jSONObject0.optDouble("", (double) 18);
      assertEquals(1, jSONObject0.length());
      assertEquals(18.0, double0, 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Am>7G]Fz^O", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt(".");
      assertNull(object0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Short short0 = new Short((short) (-669));
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.459801299462856
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.3441763374838773
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.accumulate("", double0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9938422820620596
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.append("isfloatToRawIntBits", "isfloatToRawIntBits");
      JSONObject jSONObject1 = jSONObject0.append("cC()2##:T", "cC()2##:T");
      jSONObject1.accumulate("isF", short0);
      // Undeclared exception!
      jSONObject0.toString((int) (short)92, 2548);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.964304943808148
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.append("isfloatToRawIntBits", "isfloatToRawIntBits");
      JSONObject jSONObject1 = jSONObject0.append("cC()2##:T", "cC()2##:T");
      // Undeclared exception!
      jSONObject1.toString(4036);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1521));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getLong("jhmvvAO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jhmvvAO\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getBoolean("760xDG.Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"760xDG.Q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[7];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.8398854144113996
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.842336546466179
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.accumulate("0", object0);
      String string0 = JSONObject.valueToString(jSONObject0, (-1425), (-1425));
      assertNotNull(string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = JSONObject.valueToString(stringArray0[1], (short) (-2362), 120);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HashMap<Object, JSONArray> hashMap0 = new HashMap<Object, JSONArray>();
      Set<Object> set0 = hashMap0.keySet();
      String string0 = JSONObject.valueToString(set0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.8083923859736026
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      jSONObject0.toString();
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject.valueToString(jSONObject0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9469236291416967
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.putOpt("isfloatTjRawIntBits", short0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.7870020467612302
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.toString((int) (short)105, (int) (short)105);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4272171500680497
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((Object) short0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.2367930007966412
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(1.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4007118881730545
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Float float0 = new Float(1.0);
      jSONObject0.accumulate("] is not a JSONArray.", float0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.488507861129921
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.getDouble("jQ.%p[LzyWn.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jQ.%p[LzyWn.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.3480251115140525
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      try { 
        jSONObject0.get("4)rsF63/9g;Sk6F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4)rsF63/9g;Sk6F\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.7851038147158325
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      boolean boolean0 = jSONObject0.optBoolean((String) null);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A JSONArray text must start with '['";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("JSONObject[", (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.40912941612615
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Boolean boolean0 = Boolean.FALSE;
      try { 
        jSONObject0.accumulate((String) null, boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.499509409674557
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer0 = new Integer((-27));
      jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      jSONObject0.optJSONArray("jhmvvAO");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optJSONArray("\"java.lang.String@0000000004\"");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (int) (short)798);
      double double0 = jSONObject1.optDouble("");
      assertEquals(798.0, double0, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = jSONObject0.optString((String) null, "A JSONArray text must start with '['");
      assertNotNull(string0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.308291616609219
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.append("isfloatToRawIntBits", "isfloatToRawIntBits");
      JSONObject jSONObject2 = jSONObject0.append("cC()2##:T", "cC()2##:T");
      jSONObject0.optLong("{\"java.lang.String@0000000005\":wheel.json.JSONArray@0000000004,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\",\"java.lang.String@0000000007\":wheel.json.JSONArray@0000000006}");
      jSONObject2.accumulate("isF", short0);
      jSONObject1.toString(0);
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9911719560767125
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      Double double0 = new Double(0L);
      jSONObject0.put("isF", (Object) double0);
      jSONObject0.toString((int) (short)92);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.4085788142038693
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONArray0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) "null");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7297052670593185
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject jSONObject1 = jSONObject0.append("cC()2##:T", "cC()2##:T");
      jSONObject1.optLong("cC()2##:T", 0L);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6170014857862662
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-57));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put(": ", (-3768.04291));
      try { 
        jSONObject0.getJSONObject(": ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\": \"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.979204517434325
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (-267L));
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer0 = new Integer((-27));
      JSONObject jSONObject1 = jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      jSONObject1.getInt("\"java.lang.String@0000000004\"");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.8200759753606217
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expected a ',' or '}'", true);
      boolean boolean0 = jSONObject0.getBoolean("Expected a ',' or '}'");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8099178033256933
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.append("isfloatToRawIntBits", "isfloatToRawIntBits");
      boolean boolean0 = jSONObject0.optBoolean("isfloatToRawIntBits");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.put("Expected a ',' or '}'", false);
      boolean boolean0 = jSONObject0.getBoolean("Expected a ',' or '}'");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      try { 
        jSONObject0.getInt("jhmvvAO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"jhmvvAO\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-1949.432383506));
      assertEquals("-1949.432383506", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = JSONObject.doubleToString(92.0);
      assertEquals("92", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.3820569345794618
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      jSONObject0.append("jhmvvAO", double0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.499509409674557
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.append("cC()2##:T", "cC()2##:T");
      jSONObject0.accumulate("cC()2##:T", jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.3734685941026814
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("JSONArray[", jSONArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4007118881730545
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      Double double0 = new Double(0L);
      jSONObject0.put("isF", (Object) double0);
      jSONObject0.accumulate("isF", short0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{xjE");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {xjE
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.9207477987394994
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-57));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, jSONObject1.length());
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.664556478966277
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      Integer integer0 = new Integer((-27));
      jSONObject0.accumulate("\"java.lang.String@0000000004\"", integer0);
      boolean boolean0 = jSONObject0.isNull("\"java.lang.String@0000000004\"");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("gettoUnsignedInt");
      assertEquals("", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      boolean boolean0 = jSONObject0.isNull("\"java.lang.String@0000000004\"");
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("cC()2##:T");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of cC()2##:T
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      jSONObject0.put("isfloatToRawIntBits", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.2105367626153136
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      try { 
        jSONObject0.put("q38G!b%]q!ytbG", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Object object0 = jSONObject0.remove(".");
      assertNull(object0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.5655234268707423
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.put("isfloatToRawIntBits", (long) (short)92);
      int int0 = jSONObject0.getInt("isfloatToRawIntBits");
      assertEquals(2, jSONObject0.length());
      assertEquals(92, int0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Short short0 = new Short((short)92);
      JSONObject jSONObject0 = new JSONObject(short0);
      double double0 = jSONObject0.optDouble("Substring bounds error");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = new String[2];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      boolean boolean1 = jSONObject0.has("((XMOIqipwoRNX<0");
      assertFalse(boolean1);
  }
}
