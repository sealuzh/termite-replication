/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:48:36 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9268791598033745
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Float.sum(1.0F, (-2772.1F));
      Long.divideUnsigned(1644L, (-3632L));
      Long.compare((-3632L), (-3632L));
      Long.getLong("9;|3wxR7nnF&e^J.");
      Long.max(1157L, (-3584L));
      JSONObject.valueToString((Object) null, 55, (-18603944));
      Byte byte0 = new Byte((byte)111);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.numberToString(byte0);
      try { 
        jSONArray0.getJSONObject((-1742));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[-1742] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.175139680561415
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      short short0 = (short) (-2337);
      Short short1 = new Short((short) (-2337));
      String[] stringArray0 = new String[3];
      String string0 = "] is not a JSONObject.";
      stringArray0[0] = "] is not a JSONObject.";
      Long long0 = new Long((short) (-2337));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.accumulate("] is not a JSONObject.", jSONArray0);
      Integer integer0 = new Integer((short) (-2337));
      Long long1 = new Long((-1726L));
      try { 
        jSONObject0.put(stringArray0[1], (Object) long1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.807630226768526
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 2616L);
      Long.sum(0L, 1L);
      JSONObject jSONObject2 = jSONObject1.put("false", (double) 2616L);
      jSONObject1.optLong(" of ");
      jSONObject2.put("A JSONArray text must start with '['", 2065.165);
      JSONObject jSONObject3 = jSONObject0.putOpt("true", long1);
      jSONObject3.isNull("A JSONArray text must start with '['");
      jSONObject1.optInt("false");
      try { 
        jSONObject2.get("/!@ TF!Kh");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/!@ TF!Kh\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0757355056763034
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] not found.", "] not found.");
      Long long0 = new Long((-2664L));
      Long.divideUnsigned(1644L, 503L);
      Long.compare(1644L, 503L);
      Long.getLong("|YbgF6?");
      Long.max(1644L, 1);
      Float float0 = new Float(0.0F);
      JSONObject.valueToString(float0, 1, 0);
      byte byte0 = (byte)69;
      Byte byte1 = new Byte((byte)69);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.512450879249128
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Long long0 = new Long(0L);
      Long long1 = new Long(264L);
      Long.divideUnsigned((-2046L), 1644L);
      Long.compare(264L, 0L);
      Long.getLong("A JSONArray text must start with '['");
      Long.max(0L, (-769L));
      JSONObject.valueToString(long1, 0, 0);
      Byte byte0 = new Byte((byte)111);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject.numberToString(long1);
      try { 
        jSONArray0.getJSONObject(21);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[21] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6188076157453675
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", "] not found.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("bBc7", (Collection) linkedList0);
      Float float0 = new Float(0.0F);
      Float.sum(711.0F, 711.0F);
      jSONObject0.optBoolean("] not found.", true);
      jSONObject0.optInt("9;|3wxR7nnF&e^J.");
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      Long long0 = new Long(0);
      JSONObject.quote("FpDG,");
      Long long1 = new Long(2647L);
      Float float1 = new Float((double) 711.0F);
      JSONObject jSONObject3 = jSONObject2.put("bBc7", (Collection) linkedList0);
      jSONObject3.optString("Missing value");
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.975016415017832
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long.getLong("A JSONArray text must start with '['", long0);
      boolean boolean0 = jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray((String) null);
      JSONObject jSONObject1 = jSONObject0.put("false", 1L);
      Long.sum(0L, 0L);
      JSONObject jSONObject2 = jSONObject1.put("W-bjF]17u,r>", (-1.0));
      long long1 = jSONObject2.optLong("0");
      assertEquals(0L, long1);
      
      JSONObject jSONObject3 = jSONObject1.put("{C$oWqY j", (-1746.5432965015));
      jSONObject3.putOpt("0", "true");
      jSONObject0.optLong("sUb8iqFp+,", 0L);
      boolean boolean1 = jSONObject0.isNull("{C$oWqY j");
      assertTrue(boolean1 == boolean0);
      
      int int0 = jSONObject2.optInt("0");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5776409490506267
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject1 = new JSONObject(float0);
      Float.sum(2481.2F, (-98.5F));
      jSONObject1.optInt("Expected a ':' after a key");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "wheel.json.JSONObject$1";
      stringArray0[1] = "getintern";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      jSONObject2.optJSONArray("false");
      jSONObject1.put("}$'>L0een#*", (long) 0);
      Float.max(0.0F, (-3219.1174F));
      String string0 = null;
      try { 
        jSONObject1.put((String) null, (double) 2382.7F);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5952629603288853
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Long long0 = new Long(2456L);
      Long.divideUnsigned(2456L, (-1264L));
      Long.getLong("isaccumulate", long0);
      Long.divideUnsigned((-2753L), (-2046L));
      Long.valueOf(0L);
      Long.max((-2046L), (-2087L));
      JSONObject.valueToString((Object) null, 0, 0);
      Byte byte0 = new Byte((byte)111);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0892819693510214
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 264L);
      Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optJSONArray("false");
      Long long1 = new Long(543L);
      Float float0 = new Float(1.0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(0L);
      Double.min((-1.0), 1129.597);
      linkedList0.add(double0);
      linkedList0.addFirst(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.optInt("false", 15);
      JSONObject.getNames((Object) jSONArray0);
      try { 
        jSONObject0.getString("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9284982420204746
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSONObject.getNames((Object) null);
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(0.0F, (-313.0F));
      jSONObject0.optInt(".oYLdATD");
      jSONObject0.optJSONArray("wheel.json.JSONObject$1");
      JSONObject jSONObject1 = jSONObject0.put("5HXN=K}QeL", 0L);
      Float.max(0.0F, 0.0F);
      JSONObject jSONObject2 = jSONObject1.put("5HXN=K}QeL", (double) (-313.0F));
      jSONObject2.optLong("}$'>L0een#*");
      jSONObject1.put(">Y3d0{Z", (double) 0.0F);
      Short short0 = new Short((short)4089);
      jSONObject0.getLong("5HXN=K}QeL");
      jSONObject0.toString();
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.192483368752913
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Double double0 = new Double(2024.972118);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "5MP!^?Rw;R.`'";
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("5MP!^?Rw;R.`'", (Collection) linkedList0);
      Double.min(2024.972118, 2024.972118);
      JSONObject jSONObject1 = jSONObject0.put("5MP!^?Rw;R.`'", false);
      Long long0 = new Long(0L);
      linkedList0.addFirst(long0);
      try { 
        jSONObject1.getLong("5MP!^?Rw;R.`'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"5MP!^?Rw;R.`'\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.041835474075406
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("(/uj~)$!9J0_JV");
      Long long0 = new Long(2715L);
      Long.divideUnsigned(264L, 1648L);
      Long long1 = new Long(2715L);
      Long.getLong("A JSONArray text must start with '['", long1);
      Long.sum((-695L), (-695L));
      Long.max((-1390L), (-1L));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.toJSONObject((JSONArray) null);
      JSONObject.valueToString(jSONArray0, 0, 3253);
      jSONObject0.keys();
      jSONObject0.toString(10, 2875);
      try { 
        jSONObject0.getJSONArray("8u!ou;:Q^ f7=!-tEg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8u!ou;:Q^ f7=!-tEg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      long long0 = 0L;
      Long long1 = new Long(0L);
      Long.divideUnsigned(0L, 264L);
      Long.getLong("A JSONArray text must start with '['", long1);
      Long.sum(197L, 0L);
      try { 
        jSONObject0.getBoolean("tOF$,-<rj&e*2'%Q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tOF$,-<rj&e*2'%Q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7070710523309285
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.optJSONArray("sh");
      jSONObject0.optLong((String) null);
      jSONObject0.optInt(",\n");
      JSONObject jSONObject1 = jSONObject0.put("TX!gU5; .l$^Rus", 196);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("", (Object) null);
      try { 
        jSONObject2.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.62975513947925
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Float.sum(711.0F, 711.0F);
      jSONObject1.toString((-3), (-15));
      jSONObject1.optInt("9;|3wxR7nnF&e^J.");
      jSONObject0.optJSONArray("J,:]}/\"[{;=#");
      jSONObject1.optInt("to");
      Long long0 = new Long((-480L));
      jSONObject0.optDouble("9;|3wxR7nnF&e^J.", (double) 711.0F);
      jSONObject1.opt(",\n");
      try { 
        jSONObject1.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.2653188729187956
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSONObject.getNames((Object) null);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-619));
      int int0 = 781;
      Integer.toUnsignedLong(2323);
      hashMap0.putIfAbsent((String) null, (Integer) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.accumulate((String) null, jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1470154674898834
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt((String) null);
      jSONObject0.optLong(" of ");
      jSONObject0.optInt("isintBitsToFloat");
      try { 
        jSONObject0.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7305203749015896
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString("jhmvvAO");
      Double.isFinite(0.0);
      jSONObject0.toString();
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.optJSONArray("\"java.lang.String@0000000009\"");
      JSONObject.quote("");
      Double.min(0.0, 1.0);
      HashMap<JSONObject, Boolean> hashMap1 = new HashMap<JSONObject, Boolean>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject.getNames((Object) jSONObject0);
      jSONObject0.opt("tJKwo[ ");
      int int0 = jSONObject0.optInt("tJKwo[ ", 2);
      assertEquals(4, jSONObject0.length());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.4374978385697084
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("] not found.", "] not found.");
      Float float0 = new Float(0.0F);
      Float.sum(711.0F, 711.0F);
      short short0 = (short)544;
      Short short1 = new Short((short)544);
      Short.compare((short)544, (short)112);
      JSONObject.valueToString(short1);
      jSONObject0.optString("=H>.l'm", (String) null);
      try { 
        jSONObject0.getInt("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2518225106579672
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "[Oi`KGkQnG*C";
      String string1 = null;
      jSONObject0.optInt((String) null);
      jSONObject0.putOpt("[Oi`KGkQnG*C", "[Oi`KGkQnG*C");
      try { 
        jSONObject0.getJSONObject("[Oi`KGkQnG*C");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[Oi`KGkQnG*C\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.41883922654649
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.put("aZHdVw%qtP8A{Ng", true);
      jSONObject0.optInt("jh8");
      jSONObject1.put("aZHdVw%qtP8A{Ng", 34);
      String string0 = null;
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6068454443843634
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      short short0 = (short) (-2337);
      Short short1 = new Short((short) (-2337));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      Long long0 = new Long((short) (-2337));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("] is not a JSONObject.", jSONArray0);
      Integer integer0 = new Integer((short) (-2337));
      Long long1 = new Long((-1726L));
      jSONObject0.put("", (Object) long1);
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONObject jSONObject3 = jSONObject1.put("] is not a JSONObject.", (Object) jSONObject2);
      JSONTokener jSONTokener0 = new JSONTokener("0f1/E09ZINC,Q_");
      jSONObject3.optInt("] is not a JSONObject.", (int) (short) (-2337));
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0f1/E09ZINC,Q_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.706782642645971
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not fo+und.", "] not fo+und.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("bBc7", (Collection) linkedList0);
      Float float0 = new Float(0.0F);
      Float.sum(711.0F, 711.0F);
      jSONObject0.optBoolean("] not fo+und.", true);
      jSONObject0.optInt("9;|3wxR7nnF&e^J.");
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      JSONObject.quote("9;|3wxR7nnF&e^J.");
      Long long0 = new Long((-480L));
      Float float1 = new Float((-307.3666028));
      jSONObject0.put("\"9;|3wxR7nnF&e^J.\"", (Collection) linkedList0);
      jSONObject2.optString((String) null);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject0.putOpt("]_[cgV1i(F2", object0);
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.9870352812716376
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      int int0 = jSONObject0.optInt("false");
      assertEquals(0, int0);
      
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 2616L);
      Long.sum(0L, 1L);
      boolean boolean0 = jSONObject1.optBoolean("A JSONArray text must start with '['");
      JSONObject jSONObject2 = jSONObject1.put("false", (double) 2616L);
      long long2 = jSONObject1.optLong(" of ");
      assertEquals(0L, long2);
      
      JSONObject jSONObject3 = jSONObject2.put("A JSONArray text must start with '['", 2065.165);
      JSONObject jSONObject4 = jSONObject0.putOpt("true", long1);
      boolean boolean1 = jSONObject4.isNull("A JSONArray text must start with '['");
      assertTrue(boolean1 == boolean0);
      
      jSONObject1.optInt("false");
      Object object0 = jSONObject3.get("false");
      assertEquals(2616.0, object0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      long long0 = 0L;
      Long long1 = new Long(0L);
      try { 
        jSONObject0.getJSONObject("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2661374765073794
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject.getNames((Object) null);
      Float float0 = new Float(2442.0F);
      Short short0 = new Short((short)29);
      JSONObject jSONObject0 = new JSONObject(short0);
      Float.sum(2439.442F, (short)29);
      jSONObject0.optInt(".oYLdATD");
      jSONObject0.optJSONArray("Substring bounds error");
      JSONObject.quote((String) null);
      Long long0 = new Long(0);
      Byte byte0 = new Byte((byte)47);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2391997573006275
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("Bad value from toJSONString: ");
      Long long0 = new Long(0L);
      String string0 = null;
      Long long1 = new Long(0L);
      Long.getLong((String) null, long1);
      String string1 = "Missing value";
      try { 
        jSONObject0.get("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4910898785675633
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 264L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      Long.divideUnsigned((-2046L), 1644L);
      Long.getLong("getfloatToIntBits");
      Long.sum(197L, 0L);
      Long.max(0L, (-769L));
      JSONObject.valueToString(long1, 0, 0);
      jSONObject0.keys();
      Byte byte0 = new Byte((byte)111);
      JSONObject jSONObject1 = new JSONObject((Object) "t+L6^");
      jSONObject0.toJSONArray((JSONArray) null);
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      JSONObject jSONObject2 = jSONObject0.put("A JSONArray text must start with '['", (Map) hashMap0);
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 1180;
      Integer integer0 = new Integer(1180);
      JSONObject.getNames((Object) integer0);
      Float float0 = new Float((float) 1180);
      Float.sum(0.0F, 1180);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONTokener jSONTokener0 = new JSONTokener("U`q`*7!y- }TUc");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of U`q`*7!y- }TUc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1219839175286905
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      jSONObject2.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      jSONObject2.optString(",\n", "\"java.lang.String@0000000004\"");
      jSONObject0.toString(0, 0);
      Integer.divideUnsigned(3, (-1608));
      Integer.compare((-652), (-652));
      jSONObject2.optBoolean("y/N,~jcxU&W,H");
      jSONObject0.getString("ck");
      jSONObject2.optDouble("wheel.json.JSONArray@0000000005");
      jSONObject0.has("{\n\"java.lang.String@0000000006\": java.lang.Integer@0000000007,\n\"java.lang.String@0000000004\": [],\n\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"\n}");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9889846985395472
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short) (-2362));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      stringArray0[2] = " YM9^6P19x?3OI";
      stringArray0[3] = "o";
      stringArray0[4] = ",";
      stringArray0[5] = "g";
      Short.toUnsignedInt((short) (-2362));
      stringArray0[6] = "46|52txYi:y/fm*9";
      stringArray0[7] = "\"\"";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = new JSONObject((Map) null);
      try { 
        jSONObject2.getString(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject();
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4987114489454725
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      Boolean boolean0 = Boolean.valueOf("getgetJSONArray");
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(true, true);
      hashMap0.getOrDefault(boolean0, (Double) null);
      Integer integer0 = new Integer(100);
      Integer.getInteger("getgetJSONArray", 9);
      Double double0 = null;
      hashMap0.put(integer0, (Double) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Integer integer1 = Integer.valueOf(9);
      hashMap0.put(integer1, (Double) null);
      jSONObject0.toString(1);
      jSONObject0.optDouble("{\"java.lang.Integer@0000000002\": null}");
      jSONObject0.optJSONArray("getgetJSONArray");
      jSONObject0.keys();
      jSONObject0.toString();
      try { 
        jSONObject0.getInt("getgetJSONArray");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetJSONArray\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.876711434962373
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      String string0 = "jhmvvAO";
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      jSONObject0.append("jhmvvAO", double1);
      JSONObject.valueToString("jhmvvAO");
      Double.isFinite(0.0);
      jSONObject0.toString();
      jSONObject0.accumulate("", double1);
      int int0 = 0;
      jSONObject0.toString(0);
      try { 
        jSONObject0.getDouble("{\"java.lang.String@0000000002\":java.lang.Boolean@0000000003,\"java.lang.String@0000000004\":java.lang.Boolean@0000000005,\"java.lang.String@0000000006\":\"java.lang.Class@0000000007\",\"java.lang.String@0000000009\":wheel.json.JSONArray@0000000008}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\":java.lang.Boolean@0000000003,\\\"java.lang.String@0000000004\\\":java.lang.Boolean@0000000005,\\\"java.lang.String@0000000006\\\":\\\"java.lang.Class@0000000007\\\",\\\"java.lang.String@0000000009\\\":wheel.json.JSONArray@0000000008}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0688738786540872
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject.valueToString(jSONObject0);
      Long.divideUnsigned(264L, 264L);
      String string0 = "isvalueOf";
      Long long0 = new Long(264L);
      Long.getLong("isvalueOf", long0);
      String string1 = "Missing value";
      try { 
        jSONObject1.get("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.631294395850374
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject.getNames(jSONObject0);
      String string0 = "ck";
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      JSONObject jSONObject2 = jSONObject1.accumulate("\"java.lang.String@0000000004\"", integer0);
      JSONObject.valueToString("ck");
      jSONObject0.optString("\"java.lang.String@0000000004\"", ",\n");
      jSONObject2.getInt("\"java.lang.String@0000000004\"");
      jSONObject0.length();
      jSONObject2.optString(",\n", "\"java.lang.String@0000000004\"");
      Long long0 = new Long(1L);
      Byte byte0 = new Byte((byte) (-71));
      Double double0 = new Double((byte) (-71));
      JSONObject jSONObject3 = new JSONObject(double0);
      Object object1 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.9003547983943343
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long long1 = Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("false");
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", 2616L);
      Long.sum(0L, 1L);
      JSONObject jSONObject2 = jSONObject1.put("false", (double) 2616L);
      jSONObject1.optLong(" of ");
      JSONObject jSONObject3 = jSONObject2.put("A JSONArray text must start with '['", 2065.165);
      JSONObject jSONObject4 = jSONObject0.putOpt("true", long1);
      jSONObject4.isNull("A JSONArray text must start with '['");
      jSONObject1.optInt("false");
      assertEquals(3, jSONObject1.length());
      
      jSONObject3.getInt("true");
      Object object0 = jSONObject0.get("A JSONArray text must start with '['");
      assertEquals(2065.165, object0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8914570236902883
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.append("jhmvvAO", "jhmvvAO");
      Double.isFinite(0.0);
      Double.min(1.0, 1.0);
      jSONObject0.append("jhmvvAO", double0);
      JSONObject.valueToString("jhmvvAO");
      Double.isFinite(0.0);
      jSONObject0.toString();
      jSONObject0.accumulate("", double0);
      jSONObject1.toString(0);
      Integer.toUnsignedLong(0);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(0);
      hashMap0.putIfAbsent("{\n\"java.lang.String@0000000010\": java.lang.Double@0000000011,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n\"java.lang.String@0000000009\": [\n\"java.lang.String@0000000009\",\njava.lang.Double@0000000011\n]\n}", integer0);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject3 = jSONObject1.accumulate("A JSONObject text must begin with '{'", "{\n\"java.lang.String@0000000010\": java.lang.Double@0000000011,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\",\n\"java.lang.String@0000000009\": [\n\"java.lang.String@0000000009\",\njava.lang.Double@0000000011\n]\n}");
      assertEquals(6, jSONObject0.length());
      assertEquals(6, jSONObject3.length());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7563848066373224
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      Float float0 = new Float(1.0F);
      JSONObject jSONObject1 = new JSONObject((Object) "A JSONArray text must start with '['");
      Float.sum(433.86F, 1483.8541F);
      String string1 = jSONObject1.toString((-3), 27);
      jSONObject0.optInt((String) null);
      jSONObject1.optJSONArray(string1);
      jSONObject1.optInt("");
      Long long0 = new Long((-4110L));
      jSONObject0.optDouble("wheel.json.JSONTokener", 0.0);
      jSONObject1.opt((String) null);
      try { 
        jSONObject1.getDouble("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3137063051745137
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      short short0 = (short) (-2337);
      Short short1 = new Short((short) (-2337));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "] is not a JSONObject.";
      String string0 = "";
      stringArray0[1] = "";
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("] is not a JSONObject.");
      try { 
        jSONObject0.getInt("x/s!0]z?}ve");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x/s!0]z?}ve\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.777477642995922
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("&WN`%`)tW:;MMI ;", (-267L));
      String string0 = "^L5-L$\\lc@?Ma>#";
      try { 
        jSONObject1.getJSONArray("^L5-L$lc@?Ma>#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"^L5-L$lc@?Ma>#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.802042567622524
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short) (-2337));
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      HashMap<Short, Float> hashMap0 = new HashMap<Short, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("$i)i|nAn1PP3Y7>@]", (Collection) linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("", (Map) hashMap0);
      jSONObject0.put("wheel.json.JSONArray", 16);
      Long long0 = new Long((short) (-2337));
      jSONObject0.accumulate("A JSONObject text must begin with '{'", long0);
      jSONObject1.isNull("wheel.json.JSONArray");
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      try { 
        jSONObject2.append("", "A JSONObject text must begin with '{'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.8989924656584725
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("flo");
      jSONObject0.optBoolean("flo", false);
      jSONObject0.optInt((String) null);
      jSONObject0.optJSONArray("false");
      JSONObject jSONObject1 = jSONObject0.put("U]O>/Rx~kk[/9!", 2616L);
      Long.sum(1654L, 2616L);
      jSONObject0.put("flo", 2825.49457793);
      jSONObject1.optLong("co");
      JSONObject jSONObject2 = jSONObject1.put("flo", 2825.49457793);
      jSONObject2.putOpt("true", "flo");
      boolean boolean0 = jSONObject1.isNull("?xPdbU/LTEUr9");
      assertEquals(3, jSONObject1.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0134376632867808
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject.getNames((Object) null);
      Float float0 = new Float(2481.2F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.sum(0.0F, (-313.0F));
      jSONObject0.optInt(".oYLdATD");
      jSONObject0.optJSONArray("wheel.json.JSONObject$1");
      JSONObject jSONObject1 = jSONObject0.put("5HXN=K}QeL", 0L);
      JSONObject jSONObject2 = jSONObject1.put("5HXN=K}QeL", (double) (-313.0F));
      jSONObject2.optLong("}$'>L0een#*");
      JSONObject jSONObject3 = jSONObject1.put(">Y3d0{Z", (double) 0.0F);
      Short short0 = new Short((short)4089);
      jSONObject1.putOpt((String) null, short0);
      jSONObject1.isNull((String) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject3.put("wheel.json.JSONObject$1", (Collection) linkedList0);
      jSONObject1.put(".oYLdATD", 72L);
      JSONObject.getNames(jSONObject2);
      assertEquals(7, jSONObject1.length());
      assertEquals(7, jSONObject0.length());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5123091724807542
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("ck");
      JSONObject jSONObject1 = jSONObject0.put("ck", (Collection) null);
      Integer integer0 = new Integer(0);
      Integer.sum(11, (-740));
      jSONObject1.accumulate("\"java.lang.String@0000000002\"", integer0);
      JSONObject.valueToString("ck");
      Long.getLong("\"java.lang.String@0000000002\"");
      Long.sum(197L, 488L);
      Long.max(1L, (-1L));
      Float float0 = new Float((double) 685L);
      JSONObject.valueToString(float0, 0, (-475));
      JSONTokener jSONTokener0 = new JSONTokener("ck");
      try { 
        jSONTokener0.next('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '+' and instead saw 'c' at character 1 of ck
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.545202527023502
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      Double double0 = new Double((-55.0902922));
      hashMap0.put((String) null, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = null;
      Function<String, Double> function0 = (Function<String, Double>) mock(Function.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfAbsent((String) null, function0);
      jSONObject0.remove((String) null);
      jSONObject0.optJSONArray("r:");
      try { 
        jSONObject0.getInt("Expected a ',' or ']'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ',' or ']'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HashMap<Float, JSONObject> hashMap0 = new HashMap<Float, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has("null");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.401907417570458
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      String string0 = "Xz(_gKY:+K#X%7kV";
      hashMap0.putIfAbsent("Xz(_gKY:+K#X%7kV", (Integer) null);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-1525));
      hashMap0.replace("}QvVgba=3\"", (Integer) null);
      hashMap1.putAll(hashMap0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("A JSONObject text must begin with '{'", (Object) null);
      int int0 = 690;
      Integer integer1 = new Integer(690);
      jSONObject2.optDouble("m,vc;c.");
      jSONObject0.put("m,vc;c.", (Object) null);
      JSONObject jSONObject3 = jSONObject2.put("nam", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("}QvVgba=3\"");
      jSONObject3.optBoolean("m,vc;c.", true);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }QvVgba=3\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.1421830290269335
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      Long long0 = new Long(0L);
      Long.divideUnsigned(0L, 264L);
      Long.getLong("A JSONArray text must start with '['", long0);
      jSONObject0.optBoolean("A JSONArray text must start with '['", false);
      jSONObject0.optInt("[faHse");
      jSONObject0.optJSONArray("[faHse");
      Long long1 = new Long(543L);
      jSONObject0.optDouble("JSONArray initial value should be a string or collection or array.", (double) 0);
      jSONObject0.opt("JSONArray initial value should be a string or collection or array.");
      try { 
        jSONObject0.getDouble("Missing value");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Missing value\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2891131376734095
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject.doubleToString((-1949.432383506));
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer((-2291));
      hashMap0.putIfAbsent("-1949.432383506", (Integer) null);
      HashMap<String, Integer> hashMap1 = new HashMap<String, Integer>();
      Integer integer1 = new Integer((-1525));
      hashMap1.replace("-1949.432383506", integer1);
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("-1949.432383506", "A JSONObject text must begin with '{'");
      Integer integer2 = new Integer((-54582745));
      jSONObject1.put("-1949.432383506", (Object) integer2);
      jSONObject1.put("A JSONObject text must begin with '{'", (Object) null);
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.504199543228922
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "r=GISa*2+QA2J_&F`N";
      stringArray0[1] = ": ";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("((XMOIqipwoRNX<0", 2355L);
      jSONObject1.remove(".");
      jSONObject0.optInt("Z~g[<^RQIhKLHiXh");
      jSONObject0.names();
      jSONObject0.remove("Z~g[<^RQIhKLHiXh");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.1588975271257596
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Am>7G]Fz^O";
      jSONObject0.optBoolean("Am>7G]Fz^O", true);
      jSONObject0.put("3@MK(0tpTTiCYWsx'n", false);
      jSONObject0.keys();
      try { 
        jSONObject0.getDouble("Am>7G]Fz^O");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Am>7G]Fz^O\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.142617245266621
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float.sum(1.0F, (-2772.1F));
      jSONObject0.toString(1619, 3254);
      jSONObject0.optInt("9;|3wxR7nnF&e^J.");
      jSONObject0.optJSONArray("Expected '");
      jSONObject0.optInt("toS");
      Long long0 = new Long(1619);
      jSONObject0.optDouble("isnotifyAll", 0.0);
      jSONObject0.opt("Missing value");
      String string0 = "ishashCode";
      try { 
        jSONObject0.getDouble("ishashCode");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ishashCode\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5218012046324865
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("] not found.", (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("] not found.", (Collection) linkedList0);
      Float float0 = new Float(0.0F);
      Float.sum(0.0F, 0.0F);
      jSONObject1.optBoolean("] not found.", true);
      jSONObject1.optInt("[CA/D&D*?t8S@9");
      Long long0 = new Long(0);
      JSONObject.quote("&R n{Q");
      jSONObject0.optDouble("] not found.", (double) 0.0F);
      jSONObject1.opt("] not found.");
      try { 
        jSONObject1.getDouble("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.835050496785154
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "A JSONArray text must start with '['";
      Float float0 = new Float(1.0F);
      Float.sum(433.86F, 1483.8541F);
      jSONObject0.optInt((String) null);
      Long long0 = new Long((-4110L));
      jSONObject0.optDouble("wheel.json.JSONTokener", (double) (-4110L));
      jSONObject0.opt((String) null);
      try { 
        jSONObject0.getDouble("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0293124533881794
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      String string0 = "8f]Lt ?QTHkQJYRla)";
      try { 
        jSONObject0.getInt("8f]Lt ?QTHkQJYRla)");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8f]Lt ?QTHkQJYRla)\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6614298875994273
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      Float.sum(711.0F, 711.0F);
      jSONObject1.toString((-3), (-15));
      jSONObject1.optInt("9;|3wxR7nnF&e^J.");
      jSONObject0.optJSONArray("J,:]}/\"[{;=#");
      jSONObject1.optInt("to");
      Long long0 = new Long((-480L));
      jSONObject0.optDouble("9;|3wxR7nnF&e^J.", (double) 711.0F);
      try { 
        jSONObject1.getLong("getjoin");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getjoin\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{N}.6yp3_Zs1j[U-'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {N}.6yp3_Zs1j[U-'
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6872593473350865
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      jSONObject0.put("", (-267L));
      String string0 = "";
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.2929322920032833
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "[Oi`KGkQnG*C";
      jSONObject0.optInt("[Oi`KGkQnG*C");
      JSONObject jSONObject1 = jSONObject0.putOpt("[Oi`KGkQnG*C", "[Oi`KGkQnG*C");
      jSONObject1.put("[Oi`KGkQnG*C", (-4225L));
      try { 
        jSONObject1.getJSONArray("Pp|p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Pp|p\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.9576699287932238
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("aZHdVw%qtP8A{Ng", true);
      String string0 = "8f]Lt ?QTHkQJYRla)";
      try { 
        jSONObject1.getInt("aZHdVw%qtP8A{Ng");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"aZHdVw%qtP8A{Ng\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.4981423022637577
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optString(",\n", ",\n");
      JSONObject.valueToString(",\n", (-825), (-825));
      StringWriter stringWriter0 = new StringWriter();
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '3';
      charArray0[2] = '5';
      charArray0[3] = '\"';
      charArray0[4] = 'G';
      charArray0[5] = 'T';
      charArray0[6] = 'Q';
      charArray0[7] = '0';
      charArray0[8] = 'b';
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, (-825), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.4776549137673083
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("S@w>LISk*]qU", (Collection) linkedList0);
      Float.sum(711.0F, 711.0F);
      Byte byte0 = new Byte((byte)22);
      jSONObject0.accumulate("9;|3wxR7nnF&e^J.", byte0);
      Double double0 = new Double((-15));
      JSONObject.valueToString(double0);
      Long.getLong("?6d)Y");
      long long0 = new Byte((byte)22);
      Long.max((-15), (-1401L));
      Float float1 = new Float((double) (-1401L));
      int int0 = 5;
      JSONObject.valueToString("9;|3wxR7nnF&e^J.", 5, 42);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Double@0000000009");
      try { 
        jSONTokener0.next('+');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '+' and instead saw 'j' at character 1 of java.lang.Double@0000000009
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.8350070556411429
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer(7);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-2986), 8448);
      Byte byte0 = new Byte((byte) (-43));
      Byte byte1 = new Byte((byte)55);
      Byte.toUnsignedInt((byte)55);
      JSONObject jSONObject0 = new JSONObject(byte1);
      HashMap<Boolean, Byte> hashMap0 = new HashMap<Boolean, Byte>();
      assertTrue(hashMap0.isEmpty());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt("u");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.628593324779097
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Short short0 = new Short((short) (-2362));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "";
      stringArray0[2] = " YM9^6P19R33O";
      stringArray0[3] = "o";
      stringArray0[4] = ",";
      stringArray0[5] = "g";
      Short.toUnsignedInt((short) (-2362));
      stringArray0[6] = "46|52txYi:y/fm*9";
      stringArray0[7] = "\"\"";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      int int0 = jSONObject1.optInt((String) null, 63174);
      assertEquals(63174, int0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.549435801175998
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("A JSONArray text must start with '['");
      jSONObject0.optLong(" of ");
      jSONObject0.optInt("{nE>Td'^4cz/0s8S");
      JSONObject jSONObject1 = jSONObject0.put("{nE>Td'^4cz/0s8S", 196);
      Object object0 = new Object();
      JSONObject jSONObject2 = jSONObject1.put("false", (Object) null);
      String string0 = jSONObject2.optString("-}_%[h");
      assertEquals(1, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Short short0 = Short.valueOf((short)2122);
      Short.compare((short)8192, (short) (-496));
      Short.toUnsignedInt((short)10);
      Short.toUnsignedLong((short)2122);
      Short.compare((short)2122, (short)2122);
      JSONObject.testValidity(short0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|?aLn4N*$/WDVE9", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
