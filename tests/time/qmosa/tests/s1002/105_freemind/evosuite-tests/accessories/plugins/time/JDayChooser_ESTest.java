/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 15:33:35 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.URL;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import javax.help.ForwardAction;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JApplet;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.MenuElement;
import javax.swing.event.AncestorListener;
import javax.swing.plaf.metal.MetalToolBarUI;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.xerces.parsers.CachingParserPool;
import org.apache.xerces.parsers.XIncludeAwareParserConfiguration;
import org.apache.xerces.util.SymbolTable;
import org.apache.xerces.util.XMLGrammarPoolImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2218624665855553
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBaselineResizeBehavior();
      Color color0 = new Color(240);
      jDayChooser0.setMonth(240);
      jDayChooser0.drawDays();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 240;
      floatArray0[1] = (float) 240;
      floatArray0[2] = (float) 240;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 240;
      floatArray0[5] = (-833.7202F);
      floatArray0[6] = (float) 240;
      floatArray0[7] = (float) 240;
      floatArray0[8] = (float) 240;
      color0.getColorComponents(floatArray0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.selectedColor = color0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setMonth(100);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDebugGraphicsOptions();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.177193323614304
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isDefaultCapable();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setMaxDayCharacters(3);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.205738586539807
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBaselineResizeBehavior();
      jDayChooser0.getBackground();
      jDayChooser0.setMonth(237);
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 237, true);
      Calendar calendar0 = MockCalendar.getInstance();
      focusEvent0.setSource(calendar0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.validate();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setMonth(47);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1609096373188827
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JDayChooser");
      jDayChooser0.day = 896;
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.setMaxDayCharacters(896);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1677717028005006
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.day = 896;
      jDayChooser0.setToolTipText("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.setToolTipText("28");
      jDayChooser0.getSelectedDay();
      jDayChooser0.setEnabled(false);
      jDayChooser0.drawDays();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.128690880730071
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isRequestFocusEnabled();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(38);
      jDayChooser0.drawWeeks();
      jDayChooser0.getDayPanel();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1700419077878936
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.setDecorationBordersVisible(true);
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      jDayChooser0.getMaxSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.setYear(6);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2956790486033625
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-277), "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
      Locale locale0 = xIncludeAwareParserConfiguration0.getLocale();
      Locale.setDefault(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 0, 3282, '>', 0);
      keyEvent0.setKeyCode(247);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDay();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.124806616475451
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.day = 896;
      jDayChooser0.setMaxDayCharacters(43);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.getInputVerifier();
      jDayChooser0.setInputVerifier((InputVerifier) null);
      jDayChooser0.setMaxDayCharacters(0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3728639978196506
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "accessories.plugins.time.JDayChooser$DecoratorButton";
      stringArray0[2] = "org.apache.batik.svggen.SVGGraphics2DIOException";
      stringArray0[3] = "yc<p+Ty\"Af;l5P7Gw|";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 2058, false);
      focusEvent0.setSource("accessories.plugins.time.JDayChooser$DecoratorButton");
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 2058);
      jDayChooser0.focusLost(focusEvent1);
      jDayChooser0.validate();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setWeekOfYearVisible(false);
      Calendar calendar0 = MockCalendar.getInstance();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setCalendar(calendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      jDayChooser1.setFocus();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.updateUI();
      jDayChooser1.isWeekOfYearVisible();
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(0, int0);
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 12, 1433L, 968, 45, '%');
      jDayChooser1.keyReleased(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2957123852703627
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-277), "day");
      SymbolTable symbolTable0 = new SymbolTable(0);
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
      Locale locale0 = xIncludeAwareParserConfiguration0.getLocale();
      Locale.setDefault(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=day,offset=-277,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=43,ZONE_OFFSET=-277,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 11, 0, 3282, '>', 0);
      keyEvent0.setKeyCode(247);
      jDayChooser0.keyPressed(keyEvent0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setSelectableDateRange(date0, date0);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.082398309345218
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.day = 896;
      jDayChooser0.setToolTipText("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(896);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "org.apache.batik.svggen.SVGGraphics2DIOException";
      stringArray0[3] = "yc<p+Ty\"Af;l5P7Gw|";
      stringArray0[4] = "h&JzHSb]~";
      stringArray0[5] = "freemind.modes.mindmapmode.actions.NewChildAction";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 14, (-463L), (-376), 4507, '`', 0);
      keyEvent0.getExtendedKeyCode();
      KeyEvent.getExtendedKeyCodeForChar(4507);
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.decorationBordersVisible = false;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false);
      focusEvent0.setSource(keyEvent0);
      jDayChooser0.focusLost(focusEvent0);
      Date date0 = jDayChooser0.maxSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.addListeners(0);
      jDayChooser0.setMaxSelectableDate(date1);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.307202216034785
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getBaselineResizeBehavior();
      Color color0 = jDayChooser0.getBackground();
      jDayChooser0.setMonth(237);
      jDayChooser0.drawDays();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 237;
      floatArray0[1] = (float) 237;
      floatArray0[2] = (float) 237;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 237;
      floatArray0[5] = (-833.7202F);
      floatArray0[6] = (float) 237;
      floatArray0[7] = (float) 237;
      floatArray0[8] = (float) 237;
      color0.getColorComponents(floatArray0);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.selectedColor = color0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setMonth(100);
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getDebugGraphicsOptions();
      MockDate mockDate0 = new MockDate();
      mockDate0.setTime(0L);
      jDayChooser0.setDay(237);
      jDayChooser0.setMaxDayCharacters(627);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3546381896595503
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.doLayout();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1603), true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.validate();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setWeekOfYearVisible(true);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setFocus();
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.186834139655932
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JComponent.getDefaultLocale();
      jDayChooser0.doLayout();
      MetalToolBarUI metalToolBarUI0 = new MetalToolBarUI();
      metalToolBarUI0.getFloatingColor();
      jDayChooser0.decorationBackgroundColor = null;
      jDayChooser0.updateUI();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1603), true);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.validate();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      CanvasGraphicsNode canvasGraphicsNode1 = new CanvasGraphicsNode();
      canvasGraphicsNode1.getParent();
      Locale.lookup(canvasGraphicsNode0, canvasGraphicsNode1);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0966290068221545
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getBorder();
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.setMonth(0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Font font0 = Font.decode("day");
      jDayChooser0.setFont(font0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      int int0 = 1035;
      MenuElement[] menuElementArray0 = new MenuElement[7];
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2021525171555334
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.drawDays();
      jDayChooser0.getMaxDayCharacters();
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jDayChooser0, 1, 3364L, 454, 15, 'u', (-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1286781254653357
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.setDay(38);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2401873239899905
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "accessories.plugins.time.JDayChooser$DecoratorButton";
      stringArray0[0] = "org.apache.batik.svggen.SVGGraphics2DIOException";
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isDefaultCapable();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.156148558892201
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener2, hierarchyBoundsListener2);
      jDayChooser0.doLayout();
      jDayChooser0.removeHierarchyBoundsListener(hierarchyBoundsListener3);
      jDayChooser0.drawDays();
      jDayChooser0.drawDays();
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      jDayChooser0.init();
      jDayChooser0.setDay(0);
      jDayChooser0.setMaxDayCharacters(1532);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0587048806759154
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.208440569071093
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 502, 1L, 502, 502, '`', 0);
      KeyEvent.getKeyText(12);
      jDayChooser0.keyPressed(keyEvent0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      
      jDayChooser0.updateUI();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1509904277017373
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.infoText;
      int int0 = 480;
      Color color0 = Color.getColor("DOMNodeRemoved", 480);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getDayPanel();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getParent();
      Locale.lookup(canvasGraphicsNode0, canvasGraphicsNode0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.231801819655064
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      java.sql.Date date0 = new java.sql.Date(0L);
      jDayChooser0.setSelectableDateRange(date0, date0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-277), "day");
      SymbolTable symbolTable0 = new SymbolTable();
      XMLGrammarPoolImpl xMLGrammarPoolImpl0 = new XMLGrammarPoolImpl();
      CachingParserPool.ShadowedGrammarPool cachingParserPool_ShadowedGrammarPool0 = new CachingParserPool.ShadowedGrammarPool(xMLGrammarPoolImpl0);
      XIncludeAwareParserConfiguration xIncludeAwareParserConfiguration0 = new XIncludeAwareParserConfiguration(symbolTable0, cachingParserPool_ShadowedGrammarPool0);
      JDayChooser jDayChooser1 = new JDayChooser();
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(0);
      jDayChooser1.setMaxDayCharacters((-206));
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.133742703431037
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      Locale locale1 = Locale.ROOT;
      jDayChooser0.getUIClassID();
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      locale0.clone();
      locale0.getScript();
      locale0.getDisplayVariant(locale1);
      locale0.getDisplayVariant(locale1);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3319);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.322349113683711
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = jDayChooser0.getLocale();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale.getISOCountries();
      jDayChooser0.setLocale(locale0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      ForwardAction forwardAction0 = new ForwardAction(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.addMouseListener(forwardAction0);
      jDayChooser0.setWeekOfYearVisible(true);
      Color color0 = Color.WHITE;
      jDayChooser0.setWeekdayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(210, color0.getRed());
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ImageIcon imageIcon0 = new ImageIcon("", "day");
      jDayChooser_DecoratorButton0.setIcon(imageIcon0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createVolatileImage(90, 1159);
      boolean boolean0 = false;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-2668), false);
      focusEvent0.setSource((Object) null);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setWeekOfYearVisible(false);
      EvoSuiteFile evoSuiteFile0 = null;
      JEditorPane jEditorPane0 = null;
      try {
        jEditorPane0 = new JEditorPane((URL) null);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // invalid url
         //
         verifyException("javax.swing.JEditorPane", e);
      }
  }
}
