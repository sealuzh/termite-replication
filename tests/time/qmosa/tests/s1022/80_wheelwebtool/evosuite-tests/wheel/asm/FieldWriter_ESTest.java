/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:45:29 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassReader;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;
import wheel.asm.Item;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      String string0 = "";
      int int0 = 2807;
      String string1 = "SourceFilQe";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2807, "SourceFilQe", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      byteVector0.data = null;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0225955941538991
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = (-2552);
      ClassWriter classWriter0 = new ClassWriter((-2552));
      ByteVector byteVector0 = new ByteVector(1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "(.N";
      stringArray0[1] = "";
      classWriter0.visit((-2552), (-1184), "(.N", "5`&jn_L#V', HU}A-G", "5`&jn_L#V', HU}A-G", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1184), "5`&jn_L#V', HU}A-G", "5`&jn_L#V', HU}A-G", "WAE9&2 .i48;`l=Av", (Object) null);
      FieldWriter fieldWriter1 = classWriter0.lastField;
      Attribute attribute0 = new Attribute("WAE9&2 .i48;`l=Av");
      fieldWriter1.visitAttribute(attribute0);
      ByteVector byteVector1 = byteVector0.putLong((-1L));
      byteVector1.putShort(8);
      // Undeclared exception!
      try { 
        fieldWriter1.put(byteVector1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2552));
      ByteVector byteVector0 = new ByteVector(4);
      int int0 = 2603;
      ByteVector byteVector1 = byteVector0.put11((-2552), 2603);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "RuntimeVisibleAnnotations", "~w}pAZ=[/+C", (String) null, (Object) null);
      ClassWriter classWriter1 = new ClassWriter((-2552));
      byteVector1.putLong(0L);
      fieldWriter0.put(byteVector1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0108643020548935
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      ByteVector byteVector0 = new ByteVector(1736);
      int int0 = 2;
      byteVector0.putShort(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "", "&h\u0004Rw|w@S$=*z/dyyU", (String) null, (Object) null);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      fieldWriter1.getSize();
      Attribute attribute0 = new Attribute("&h\u0004Rw|w@S$=*z/dyyU");
      PipedInputStream pipedInputStream0 = new PipedInputStream(1736);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2552));
      ByteVector byteVector0 = new ByteVector(4);
      String string0 = "java/lang/Throwable";
      byteVector0.put11((-2552), (-5));
      String string1 = "Synthetic";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-5), "RuntimeInvisibleAnnotatioWs", "Synthetic", "java/lang/Throwable", (Object) null);
      fieldWriter0.getSize();
      Attribute attribute0 = new Attribute("Exceptions");
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-5));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4804779276453799
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(1);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-764), "", "", "5#T&;!Z>g?Wi^6%", "5#T&;!Z>g?Wi^6%");
      fieldWriter0.visitAnnotation("W", false);
      Attribute attribute0 = new Attribute(" )AfL;");
      Attribute attribute1 = attribute0.next;
      attribute0.next = null;
      Attribute attribute2 = attribute0.next;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)0;
      fieldWriter0.getSize();
      Attribute attribute3 = new Attribute("g4ey6i?|/OSm?&'");
      ByteVector byteVector0 = classWriter0.pool;
      ByteVector byteVector1 = byteVector0.putInt(1);
      ByteVector byteVector2 = byteVector1.putByte(4096);
      ByteVector byteVector3 = byteVector2.put12(6, 27);
      fieldWriter0.put(byteVector3);
      assertSame(byteVector2, byteVector3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2525306450725109
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777220, "", "", "", "");
      Attribute attribute0 = new Attribute("Synthetic");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2525306450725109
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      String string0 = "";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 16777220, "", "", "", "");
      Attribute attribute0 = new Attribute("");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.285069146028301
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2552));
      ByteVector byteVector0 = new ByteVector(4);
      ByteVector byteVector1 = byteVector0.putUTF8("RuntimeInvisibleAnnotations");
      ByteVector byteVector2 = byteVector1.put11((-2552), 2603);
      ByteVector byteVector3 = byteVector2.putShort((-2552));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2603, "wheel.asm.Frame", "RuntimeInvisibleAnnotations", (String) null, "wheel.asm.Frame");
      fieldWriter0.getSize();
      byteVector3.put11((-2552), (-1575));
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 5114, "RuntimeInvisibleAnnotations", "ConstantValue", "?m}~L", "?m}~L");
      FieldWriter fieldWriter2 = classWriter0.firstField;
      fieldWriter1.getSize();
      byteVector1.length = (-3276);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("ConstantValue");
      int int0 = (-80);
      // Undeclared exception!
      try { 
        fieldWriter2.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.497571944739397
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2552));
      ByteVector byteVector0 = new ByteVector(4);
      ByteVector byteVector1 = byteVector0.putUTF8("RuntimeInvisibleAnnotations");
      ByteVector byteVector2 = byteVector1.put11((-2552), 2603);
      byteVector2.putShort((-2552));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2603, "wheel.asm.Frame", "RuntimeInvisibleAnnotations", (String) null, "wheel.asm.Frame");
      fieldWriter0.getSize();
      ByteVector byteVector3 = new ByteVector(2603);
      fieldWriter0.put(byteVector1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=4-");
      fieldWriter0.visitAnnotation("RuntimeInvisibleAnnotations", true);
      fieldWriter0.getSize();
      ByteVector byteVector4 = new ByteVector(16);
      ByteVector byteVector5 = byteVector0.putLong(16);
      classWriter0.visitInnerClass("", "org.apache.commons.io.filefilter.WildcardFileFilter", (String) null, 256);
      byteVector0.put12(1561, 2);
      fieldWriter0.put(byteVector5);
      assertSame(byteVector5, byteVector0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8361623253853443
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-2552);
      ClassWriter classWriter0 = new ClassWriter((-2552));
      ByteVector byteVector0 = new ByteVector(1);
      int int1 = 317;
      byteVector0.put11((-1184), 317);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-1184), "5`&jn_L#V', U}A-G", "5`&jn_L#V', U}A-G", "WAE9&2 .i48;`l=Av", (Object) null);
      FieldWriter fieldWriter1 = classWriter0.firstField;
      ByteVector byteVector1 = byteVector0.putLong(1L);
      fieldWriter1.put(byteVector1);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        pipedOutputStream0.write((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.OutputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2552));
      ByteVector byteVector0 = new ByteVector(4);
      ByteVector byteVector1 = byteVector0.putUTF8("RuntimeInvisibleAnnotations");
      ByteVector byteVector2 = byteVector1.put11((-2552), 2603);
      ByteVector byteVector3 = byteVector2.putShort((-2552));
      ByteVector byteVector4 = byteVector3.putLong(0L);
      byteVector4.put11(2603, 2);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 285212684, "org.apache.commons.io.filefilter.WildcardFileFilter", "RuntimeInvisibleAnnotations", "MeW5peA#>|0%^%cU}#", "The filters must not be null");
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2552));
      int int0 = 4;
      ByteVector byteVector0 = new ByteVector(4);
      ByteVector byteVector1 = byteVector0.put11((-2552), 2603);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "RuntimeVisibleAnnotations", "~w}pAZ=[/+C", (String) null, (Object) null);
      ClassWriter classWriter1 = new ClassWriter((-2552));
      byteVector1.putLong(0L);
      fieldWriter0.put(byteVector1);
      byte[] byteArray0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 20;
      ClassWriter classWriter0 = new ClassWriter(20);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-764), "", "Synthetic", "5#T&;!Z>g?Wi^6%", "5#T&;!Z>g?Wi^6%");
      fieldWriter0.next = null;
      fieldWriter0.visitAnnotation("W", false);
      fieldWriter0.visitEnd();
      Attribute attribute0 = new Attribute(" )AfL;");
      Attribute attribute1 = attribute0.next;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)16;
      ClassReader classReader0 = null;
      try {
        classReader0 = new ClassReader(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("wheel.asm.ClassReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(196);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "p|qV6$[lYUxn\"2`n%sF";
      stringArray0[1] = "p|qV6$[lYUxn\"2`n%sF";
      stringArray0[2] = "!E(";
      classWriter0.visit(196, 196, "!E(", "p|qV6$[lYUxn\"2`n%sF", "org.apache.commons.io.filefilter.CanWriteFileFilter", stringArray0);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 340, "dn&P*l8a", "dn&P*l8a", "dn&P*l8a", (Object) null);
      // Undeclared exception!
      try { 
        fieldWriter0.visitAnnotation((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(4);
      byteVector0.put11(4, 4096);
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, 4, "java/lang/Throwable", "RuntimeInvisibleAnnotations", (String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(635);
      String string0 = "ConstantValue";
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter(classWriter0, 0, "ve,,18w*%[pi^", "ve,,18w*%[pi^", "ConstantValue", classWriter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ClassWriter@5
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(16777220);
      classWriter0.newClass("");
      Item[] itemArray0 = new Item[8];
      Item item0 = classWriter0.newDouble(0.0);
      itemArray0[0] = item0;
      Item item1 = classWriter0.newLong(16777220);
      itemArray0[1] = item1;
      Item item2 = classWriter0.newClassItem("org.apache.commons.io.filefilter.SizeFileFilter");
      itemArray0[2] = item2;
      Item item3 = classWriter0.newFloat(0.0F);
      itemArray0[3] = item3;
      Item item4 = classWriter0.newFloat(16777220);
      itemArray0[4] = item4;
      Item item5 = classWriter0.key3;
      itemArray0[5] = item5;
      itemArray0[6] = item5;
      Item item6 = classWriter0.newInteger(2);
      itemArray0[7] = item6;
      classWriter0.typeTable = itemArray0;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2807, "org.apache.commons.io.filefilter.SizeFileFilter", "", "", "");
      ByteVector byteVector0 = classWriter0.pool;
      fieldWriter0.put(byteVector0);
      ByteVector byteVector1 = null;
      try {
        byteVector1 = new ByteVector((-2827));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.ByteVector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0108643020548935
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2552));
      ByteVector byteVector0 = new ByteVector(4);
      byteVector0.put11(1, 4);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 4, "RuntimeInvisibleAnnotations", "RuntimeInvisibleAnnotations", "java/lang/Throwable", (Object) null);
      fieldWriter0.getSize();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)9;
      try { 
        pipedOutputStream0.write(byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }
}
