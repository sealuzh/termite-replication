/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:37:53 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.net.URI;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(545);
      Player player1 = new Player();
      player0.boss = (Party) player1;
      player0.getSubparty();
      player0.pack();
      player0.setX((-2057.3F));
      player0.getX();
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0514474029629954
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)84;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.reset();
      Player player0 = new Player((byte)20, "gui.ModuleBrowserDialog$ModuleFilter", (byte)20);
      player0.getPictureId();
      Player player1 = new Player(2570, "p0~V13qHFMRWBr", "gui.ModuleBrowserDialog$ModuleFilter", (-1001), 0);
      player0.setX((byte)20);
      player1.setJoinOK(player0, true);
      player1.isJoinOK(player0, false);
      player0.type();
      player0.pack();
      System.setCurrentTimeMillis(5);
      player1.getStrength();
      float float0 = player0.getX();
      assertEquals(20.0F, float0, 0.01F);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 4;
      Player player0 = new Player(298, "|#*11DZm?7Z?T.X", "|#*11DZm?7Z?T.X", 298, 4);
      player0.setY((-1.0F));
      Player player1 = null;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8851218920964308
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)3;
      Player player0 = new Player();
      int int0 = Packable.PLAYER;
      Player player1 = new Player(622, "9(q>%esK", "state.Player$JoinInfo", 16079, 4140);
      player1.setY((-3692.17F));
      player1.setJoinOK(player0, true);
      player1.isJoinOK(player0, true);
      int int1 = Packable.UNDEFINED;
      player0.pack();
      float float0 = player1.getY();
      assertEquals((-3692.17F), float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.688514447186191
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      Player player0 = new Player();
      int int0 = Packable.PLAYER;
      Player player1 = new Player((byte)20, "0.0.0.0", "state.Player$JoinInfo", (-2864), 0);
      player1.setJoinOK(player0, true);
      player1.isJoinOK(player0, false);
      player1.type();
      System.setCurrentTimeMillis(5);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int1 = 5;
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6875440376031756
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 3, (-2059));
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player((byte)20, "", (byte)20);
      player0.unpack(dataInputStream0);
      int int0 = player0.getPictureId();
      assertEquals(20, int0);
      
      Player player1 = new Player(1, "gui.ModuleBrowserDialog$ModuleFilter", "", 2, 0);
      player0.setJoinOK(player1, false);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertFalse(boolean0);
      
      int int1 = player1.type();
      assertEquals(5, int1);
      
      player0.unpack(dataInputStream0);
      assertEquals("0.0.0.0", player0.getIP());
      
      int int2 = player1.gangStrength();
      assertEquals(2, player1.getPictureId());
      assertTrue(player1.isConnected());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(0, int2);
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
      assertEquals("gui.ModuleBrowserDialog$ModuleFilter", player1.getIP());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.128419031742918
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player(4919, "", "", 4919, 4919);
      Party party0 = new Party((short)4919);
      player0.getSubparty();
      player0.setDead(0L);
      player0.prev = party0;
      player0.boss = party0;
      player0.getPictureId();
      player0.setConnected(true);
      party0.next = (Party) player0;
      player0.getIP();
      player0.setDead();
      player0.setConnected(true);
      player0.setDead((long) 4919);
      player0.getTimeOfDeath();
      player0.setDead((-563L));
      player0.setConnected(true);
      player0.setZ(1708.278F);
      player0.getTimeOfDeath();
      player0.pack();
      assertEquals((-563L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((-1248), "", "", (-1248));
      Player player1 = new Player(5, "", 5);
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, false);
      int int0 = Packable.UNDEFINED;
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.3137791018031715
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(298, ".*[.]class$", ".*[.]class$", (-1248), 5355);
      Player player1 = new Player(5355, "", "RG=KCrp%k~r9 g2{Z", 298);
      player0.setJoinOK(player1, false);
      Player player2 = new Player(298, "RG=KCrp%k~r9 g2{Z", (-1));
      player2.setJoinOK(player1, false);
      player2.isJoinOK(player1, false);
      int int0 = Packable.UNDEFINED;
      System.setCurrentTimeMillis(169L);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = (-1055);
      Player player0 = new Player((-1055), "state.Party", "state.Party", (-1055), (-1055));
      player0.setMoney((-1055));
      player0.getY();
      player0.getMoney();
      player0.getTimeOfDeath();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0, (int) (byte)0, (int) (byte)1);
      byteArrayInputStream0.reset();
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      String string0 = "gui.ModuleBrowserDialog$ModuleFilter";
      int int0 = 664;
      Player player0 = new Player(5, "Player", 664);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)66;
      Player player0 = new Player((byte)0, "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", 4919);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.4338006812941
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Player player0 = new Player(4919, "wUD|(/zRA 0y|`BwSG", 4919);
      Player player1 = new Player();
      player0.remove(player1);
      player0.getTimeOfDeath();
      player0.getName();
      player1.setZ(857.99F);
      player0.setZ(0.1F);
      player0.getSubparty();
      player1.setConnected(false);
      player0.id = 176;
      player1.setX(0.2F);
      player0.setJoinOK(player1, true);
      player1.getSubparty();
      player0.setX(0.0F);
      player0.getY();
      player0.getY();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "q\"r.Ht*uv");
      player1.getStrength();
      player1.getMoney();
      player1.isJoinOK(player0, true);
      player1.pack();
      System.setCurrentTimeMillis(0L);
      player1.type();
      player1.getIP();
      float float0 = player0.getX();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vAlPQ`zR2$");
      int int0 = Packable.UNDEFINED;
      System.setCurrentTimeMillis((-1970L));
      Player player0 = new Player(0, "", "", 0, 0);
      player0.getName();
      assertEquals(0, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player(0, (String) null, (String) null, 0);
      player0.setDead();
      player0.isDead();
      player0.getX();
      player0.toString();
      System.setCurrentTimeMillis(1060L);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(0, "vo~S{i>WP,vtn#", "6Ow[)XM6n/\"?Th7H", 1530);
      player0.setDead();
      player0.setConnected(true);
      player0.isDead();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, (-669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.getX();
      player0.gangStrength();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      player0.unpack(byteArray0);
      player0.setZ((-1522.9F));
      player0.add((Party) null);
      player0.setDead((-1648L), true);
      player0.next = null;
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2627848006711537
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player0.prev = (Party) player1;
      player0.reset(true);
      Player player2 = new Player((short)4919, "gui.ModuleBrowserDialog$ModuleFilter", "gui.ModuleBrowserDialog$ModuleFilter", (-1116));
      player2.setZ((short)4919);
      player0.setDead(0L, true);
      player2.reset(true);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)87;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)93;
      byteArray0[7] = (byte) (-119);
      byteArray0[8] = (byte)7;
      player1.unpack(byteArray0);
      player0.setJoinOK(player2, true);
      player0.reset(true);
      player2.getSubparty();
      player0.setDead(0L);
      player2.setConnected(false);
      player2.setJoinOK(player0, false);
      player2.getZ();
      player0.setConnected(true);
      player2.setX((-1116));
      boolean boolean0 = player2.isConnected();
      assertEquals((-1116.0F), player2.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-49);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 4919);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player();
      player0.unpack(dataInputStream0);
      player0.setZ(6272.4F);
      Party party0 = player0.head;
      player0.isDead();
      player0.getZ();
      player0.getStrength();
      float float0 = player0.getMoney();
      assertEquals(6272.4F, player0.getZ(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.853253087436612
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((-3753), "state.Player$JoinInfo", (-3753));
      Player player1 = new Player();
      player0.remove(player1);
      player0.setMoney((short)4919);
      player1.gangStrength();
      player0.remove(player1);
      player1.setZ((short)4919);
      player1.setZ(0.2F);
      player1.getPictureId();
      Player player2 = new Player(1051, " ", (short)4919);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)0;
      player2.unpack(byteArray0);
      player0.isJoinOK(player1, true);
      float float0 = player0.getMoney();
      assertEquals(4919.0F, float0, 0.01F);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player(1394, "aEif)", 2);
      player0.getPictureId();
      Player player1 = new Player(2, "%iIt", "state.Player$JoinInfo", (-3719), 1280);
      player0.setX(1394);
      player0.setJoinOK(player1, true);
      player1.isJoinOK(player0, false);
      assertEquals(1394.0F, player0.getX(), 0.01F);
      
      player1.type();
      Enumeration<MockFileInputStream> enumeration0 = (Enumeration<MockFileInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 5);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pushbackInputStream0, sequenceInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      boolean boolean0 = player1.unpack(dataInputStream0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte)3;
      byteArray0[6] = (byte) (-29);
      int int0 = 5;
      Player player0 = new Player(5, "gui.ModuleBrowserDialog$ModuleFilter", (-1638));
      player0.getPictureId();
      player0.setX(0.0F);
      System.setCurrentTimeMillis((-1L));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 1775);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0, "", 0);
      Party party0 = new Party();
      player0.boss = party0;
      // Undeclared exception!
      try { 
        player0.gangStrength();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // state.Party cannot be cast to state.Player
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player(5355, "", "RG=KCrp%k~r9 g2{Z", 298);
      Player player1 = new Player(298, "RG=KCrp%k~r9 g2{Z", (-1));
      Player player2 = new Player((-140), "I", "Player", (short)4919, (-1));
      player1.setX((short)4919);
      Player player3 = new Player();
      player0.setJoinOK(player3, false);
      player1.isJoinOK(player2, false);
      byte[] byteArray0 = player2.pack();
      System.setCurrentTimeMillis((-140));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 5355);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player2.unpack(dataInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = true;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)20;
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte)20;
      byteArray0[6] = (byte) (-6);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)0);
      int int0 = Packable.TEXT_MESSAGE;
      byteArrayInputStream0.reset();
      Player player0 = new Player(5, "gui.ModuleBrowserDialog$ModuleFilter", (-1638));
      player0.getPictureId();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Player player0 = new Player((-728), "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "U5S9d>wf>8M", 0, (-728));
      Player player1 = new Player(298, "U5S9d>wf>8M", (-728));
      player0.prev = (Party) player1;
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals((-728), player1.getPictureId());
      
      int int0 = player0.gangStrength();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals((-728), int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Player player0 = new Player(978, "Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", "", 0, (-2787));
      byte[] byteArray0 = new byte[0];
      player0.unpack(byteArray0);
      player0.setZ(0.0F);
      int int0 = player0.getPictureId();
      assertEquals(0, int0);
      
      int int1 = player0.gangStrength();
      int int2 = player0.getStrength();
      assertTrue(player0.isConnected());
      assertTrue(int2 == int1);
      assertEquals("Player.pack(): *** ERROR *** [IO] pack failed! current state is inconsistent: ", player0.getIP());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals((-2787), int2);
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player(1470, (String) null, "!G5:shH?tZn.hzWSpI", 1470, 1470);
      int int0 = player0.gangStrength();
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1470, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(1470, player0.getPictureId());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[2] = (byte)120;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      Player player0 = new Player();
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
      
      float float1 = player0.getMoney();
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, float1, 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("Player-1", player0.toString());
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = Packable.PLAYER;
      Player player0 = new Player((-1), "9(q>%esK", "", 5, 5140);
      Player player1 = new Player(5);
      player0.setJoinOK(player1, true);
      int int1 = Packable.UNDEFINED;
      System.setCurrentTimeMillis(2027L);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0);
      player0.reset(false);
      player0.reset(true);
      player0.getMoney();
      player0.pack();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-14331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Player player0 = new Player((-3862), (String) null, (String) null, (-3862));
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = (-179);
      int int1 = 1369;
      Player player0 = new Player((-179), "", 1369);
      Party party0 = player0.boss;
      player0.head = null;
      player0.remove((Party) null);
      player0.setY(1369);
      player0.toString();
      player0.getIP();
      Player player1 = new Player((short)4919, (String) null, "", 1369);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1149);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player();
      player0.add((Party) null);
      player0.boss = null;
      player0.setZ((-971.5191F));
      player0.toString();
      player0.getY();
      player0.setX(3044.2207F);
      assertEquals(3044.2207F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(true);
      player0.getName();
      player0.setZ((-993.18F));
      player0.getZ();
      player0.isConnected();
      player0.setDead((-577L));
      player0.setDead((-577L), true);
      Party party0 = new Party((short)4919);
      player0.boss = party0;
      player0.getName();
      player0.setZ((-577L));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-48);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)0;
      player0.unpack(byteArray0);
      assertEquals((-577L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.579755221006731
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)84;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte)103;
      byteArray0[6] = (byte) (-21);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.reset();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player(5, "gui.ModuleBrowserDialog$ModuleFilter", (-1638));
      player0.unpack(dataInputStream0);
      player0.getPictureId();
      Player player1 = new Player(16896, "state.Player$JoinInfo", "state.Player$JoinInfo", 0, (-4196));
      player0.setJoinOK(player1, true);
      player0.isJoinOK(player1, false);
      player1.unpack(dataInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player1.unpack(dataInputStream1);
      assertEquals(1, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2_nmHL_B*N$QhI;Q,");
      Player player0 = new Player(1074, "2_nmHL_B*N$QhI;Q,", (-58));
      Player player1 = new Player((byte)20);
      player1.setZ(1074);
      System.setCurrentTimeMillis((-1L));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 5);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      System.setCurrentTimeMillis((-1216L));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vAlPQ`zR2$");
      Player player0 = new Player(3, "vAlPQ`zR2$", (-7425));
      System.setCurrentTimeMillis(1392409281320L);
      player0.getName();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals((-7425), player0.getPictureId());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player(694, "1G^6qRXLeBwo", 4);
      Player player1 = new Player(4, " ", (byte) (-30));
      Player player2 = new Player();
      assertEquals(0, player2.getPictureId());
      assertEquals("Player-1", player2.getName());
      
      boolean boolean0 = player1.isConnected();
      assertEquals(1, player1.getStrength());
      assertEquals((-30), player1.getPictureId());
      assertTrue(boolean0);
      assertEquals("0.0.0.0", player1.getIP());
      assertEquals(0L, player1.getTimeOfDeath());
      assertEquals(0.0F, player1.getY(), 0.01F);
      assertEquals(10.0F, player1.getX(), 0.01F);
      assertFalse(player1.isDead());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = (-125);
      int int1 = 1369;
      Player player0 = new Player((-125), "", 1369);
      Party party0 = player0.boss;
      player0.head = null;
      player0.remove((Party) null);
      player0.setY(1369);
      player0.toString();
      player0.getIP();
      Player player1 = new Player((short)4919, (String) null, "", 1369);
      int int2 = 1149;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1149);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(1, "cl}];*IB!(~8210", "29PcnB7||r", 1);
      Player player1 = new Player();
      Party party0 = player1.gangBoss();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)0;
      party0.next = (Party) player0;
      player0.unpack(byteArray0);
      player0.add(party0);
      player0.getY();
      player1.gangStrength();
      player1.getName();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("cl}];*IB!(~8210");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[15];
      byteArray0[0] = (byte)0;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      Player player0 = new Player((-101), (String) null, "Player.unpack(): *** WARNING *** data is not of proper type!", 2);
      player0.getIP();
      player0.pack();
      int int0 = player0.gangStrength();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(2, player0.getPictureId());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player((-3753), "state.Player$JoinInfo", (-3753));
      Player player1 = new Player();
      player0.remove(player1);
      player0.setMoney((short)4919);
      player1.gangStrength();
      player0.remove(player1);
      assertEquals(4919.0F, player0.getMoney(), 0.01F);
      
      player1.setZ((short)4919);
      Party party0 = player0.head;
      Player player2 = new Player((-1256), "", "", 0, (-3753));
      float float0 = player1.getMoney();
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player();
      Party party0 = new Party();
      player0.add(party0);
      player0.boss = party0;
      Player player1 = new Player(5, "", "module.ModuleBrowserDialog$ModuleFilter", 5, 5);
      party0.prev = (Party) player1;
      player0.setX((-2625.627F));
      player0.setDead(2050L);
      player0.getName();
      party0.id = 784;
      player0.setY(2050L);
      player0.getY();
      player0.type();
      float float0 = player0.getY();
      assertEquals(2050.0F, float0, 0.01F);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(694, "1G^6qRXLeBwo", 4);
      URI uRI0 = MockURI.aFileURI;
      MockFile mockFile0 = new MockFile(uRI0);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player0.pack(dataOutputStream0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)120;
      Player player1 = new Player((-2688), "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", (byte)120);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "2_nmHL_B*N$QhI;Q,");
      System.setCurrentTimeMillis((byte)20);
      Player player0 = new Player((byte)20);
      float float0 = player0.getY();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player20", player0.getName());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player((-1400), (String) null, "", 1035);
      float float0 = player0.getX();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, float0, 0.01F);
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(1035, player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(1746, "", "", 1746);
      Player player1 = new Player(1640, "", "", 1640, 5);
      Party party0 = player1.gangBoss();
      player0.next = party0;
      player0.setDead();
      player0.getTimeOfDeath();
      System.setCurrentTimeMillis(1392409281320L);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(0, "]6ci'e{.P ", "", 0);
      player0.setDead(47L, false);
      assertEquals(47L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Player player0 = new Player(1, "\"I)y+osa3@{m.", "$)U_NlPz", (-2736), (-1879));
      player0.setConnected(true);
      assertEquals((-1879), player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("\"I)y+osa3@{m.", player0.getIP());
      assertEquals((-2736), player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Player player0 = new Player(12799, "0.0.0.0", "RG=KCrp%k~r9 g2{Z", 12799);
      Player player1 = new Player((short)4919, ".Dw,g8W", (-4785));
      Player player2 = new Player((-4785));
      player1.reset(false);
      player2.boss = (Party) player1;
      player0.setJoinOK(player2, true);
      Player player3 = new Player(3178, "Ya-OoBz`m<", 2767);
      Player player4 = new Player();
      player3.isJoinOK(player4, false);
      int int0 = Packable.UNDEFINED;
      assertEquals(0, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      System.setCurrentTimeMillis((-12L));
      Player player0 = new Player((byte)20, "", "", (byte)20, (byte)20);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(5, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Player player0 = new Player((byte)20, "vAlPQ`zR2$", 1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, (byte)20);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      player0.unpack(dataInputStream1);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player();
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      
      Player player1 = new Player(298, ".*[.]class$", 0);
      assertEquals(0, player1.getPictureId());
      
      Player player2 = new Player((short)4919, "lz]@sF[0%8u^1{", (short)4919);
      float float0 = player2.getZ();
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(player2.isConnected());
      assertEquals(1, player2.getStrength());
      assertFalse(player2.isDead());
      assertEquals(0.0F, player2.getY(), 0.01F);
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertEquals(4919, player2.getPictureId());
      assertEquals("0.0.0.0", player2.getIP());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Player player0 = new Player((-1088), (String) null, (String) null, (-1088));
      boolean boolean0 = player0.isDead();
      assertEquals((-1088), player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertFalse(boolean0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }
}
