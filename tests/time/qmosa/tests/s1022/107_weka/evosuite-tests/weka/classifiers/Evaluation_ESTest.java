/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:11:48 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.EOFException;
import java.io.File;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.evaluation.output.prediction.XML;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.Bagging;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.Option;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.719358056887115
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.areaUnderROC(30);
      doubleArray0[0] = Double.NaN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      double double0 = evaluation0.trueNegativeRate(30);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate(30);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.weightedRecall();
      assertEquals(Double.NaN, double2, 0.01);
      
      String string0 = evaluation1.toSummaryString(true);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9999683577390484
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Random.setNextRandom(936);
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      evaluation0.num2ShortID(1, charArray0, 1);
      double double0 = evaluation0.m_SumSqrPredicted;
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8132665436334134
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      Evaluation.main(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_ConfLevel = (-108.3654034857332);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate(12);
      assertEquals(double1, double0, 0.01);
      
      evaluation0.truePositiveRate((-1167));
      Evaluation evaluation2 = new Evaluation(instances0);
      textDirectoryLoader0.getRevision();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation2.weightedRecall();
      double double2 = evaluation2.weightedTruePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.KBInformation();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      evaluation0.areaUnderROC(30);
      doubleArray0[0] = Double.NaN;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".bsi";
      double[] doubleArray1 = evaluation0.makeDistribution(Double.NaN);
      assertEquals(0, doubleArray1.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertNotNull(doubleArray1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7250999952233594
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Random.setNextRandom(522);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_NoPriors = false;
      double double1 = evaluation0.trueNegativeRate(522);
      assertEquals(0.0, double1, 0.01);
      
      instances0.enumerateAttributes();
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation1.KBRelativeInformation();
      double double4 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double4, double2, 0.01);
      
      double double5 = evaluation0.pctIncorrect();
      assertEquals(double5, double3, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5832746798932913
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "skBlE[Bs4";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "skBlE[Bs4");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8");
      Random.setNextRandom((-1127281206));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.trueNegativeRate((-2));
      assertEquals(0.0, double1, 0.01);
      
      instances0.enumerateAttributes();
      double double2 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation1.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.323245593310404
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "skBlE[Bs4";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "skBlE[Bs4");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8");
      Random.setNextRandom((-1127281206));
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.trueNegativeRate((-2));
      instances0.enumerateAttributes();
      double double2 = evaluation1.weightedTrueNegativeRate();
      assertNotEquals(double2, double1, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("xgNzA,c", arrayList0, 38);
      CostMatrix costMatrix0 = new CostMatrix(38);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4775431275048834
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Random.setNextRandom(104);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(104);
      assertEquals(0.0, double0, 0.01);
      
      instances0.enumerateAttributes();
      double double1 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.meanAbsoluteError();
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8934284047624406
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 38;
      evaluation0.areaUnderPRC(38);
      evaluation0.toMatrixString("lf{Rn(");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int int1 = 132;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        instances0.resampleWithWeights((java.util.Random) mockRandom0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Random.setNextRandom(522);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(522);
      evaluation0.weightedTrueNegativeRate();
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      assertNotNull(string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, "getCurrentModel");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.178235655793613
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Random.setNextRandom(522);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_NoPriors = false;
      double double1 = evaluation0.trueNegativeRate(522);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1474121202909413
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "S/X(/^";
      stringArray0[1] = "";
      Evaluation.main(stringArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 8;
      evaluation0.toClassDetailsString(",8kqwdPNz=a");
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = 's';
      evaluation0.m_SumErr = (-2916.0);
      charArray0[3] = '}';
      charArray0[4] = '(';
      charArray0[5] = '7';
      charArray0[6] = '\\';
      charArray0[7] = 'w';
      evaluation0.num2ShortID(8, charArray0, 8);
      double double0 = evaluation0.m_SumSqrPredicted;
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.unclassified();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.23570282797068
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader0.setDebug(true);
      evaluation0.toSummaryString("@data", false);
      evaluation0.toMatrixString("3'En");
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8=Z{RLMJ'O& G{/I");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 1;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 0;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.953396668187928
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "S/X(/^";
      stringArray0[1] = "";
      Evaluation.main(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.trueNegativeRate(12);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.truePositiveRate((-1167));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedRecall();
      double double2 = evaluation2.weightedTruePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.KBInformation();
      assertEquals(0.0, double3, 0.01);
      
      evaluation0.numTrueNegatives(12);
      double double4 = evaluation0.recall(1407);
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.numTrueNegatives(22);
      assertEquals(0.0, double5, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.63626463485485
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 843.9046924205968;
      Random.setNextRandom(21);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.trueNegativeRate(18);
      instances0.enumerateAttributes();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation2.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.KBRelativeInformation();
      double double3 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4101507468289296
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Random.setNextRandom(522);
      double double0 = evaluation0.m_SumSchemeEntropy;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      boolean boolean0 = evaluation0.equals(textDirectoryLoader0);
      assertFalse(boolean0);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.434448337225669
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.equals(instances0);
      String string0 = evaluation0.toSummaryString(".arff", false);
      assertEquals(".arff\nTotal Number of Instances                0     \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numInstances();
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.929909928967567
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 843.9046924205968;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XML xML0 = new XML();
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1842177144));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      evaluation0.confusionMatrix();
      evaluation0.relativeAbsoluteError();
      double double1 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Random.setNextRandom(2);
      evaluation0.weightedAreaUnderPRC();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Random.setNextRandom(1);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 420.47;
      doubleArray0[1] = 420.47;
      doubleArray0[2] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1000.0);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5315817424487252
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.matthewsCorrelationCoefficient(0);
      double double0 = evaluation0.m_SumSqrErr;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.282697641452146
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.equals((Object) null);
      String string0 = evaluation0.toSummaryString("getCurrentModel", false);
      assertEquals("getCurrentModel\nTotal Number of Instances                0     \n", string0);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.007458120938535
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = ",8kqwdPNz=a";
      evaluation0.toClassDetailsString(",8kqwdPNz=a");
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(8, charArray0, 8);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 843.9046924205968;
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = '7';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      charArray0[6] = '}';
      int int0 = (-2264);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(1004, charArray0, (-2264));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5453929420108388
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 843.9046924205968;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XML xML0 = new XML();
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1842177144));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.setPriors(instances0);
      evaluation0.weightedTrueNegativeRate();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      evaluation0.equals(instances0);
      String string0 = "numExecutionSlotsTipText";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3614);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) simpleLogistic0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8934284047624406
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      double[] doubleArray0 = new double[4];
      int[] intArray0 = new int[20];
      intArray0[0] = 25;
      intArray0[1] = 10;
      intArray0[2] = (-1796270519);
      intArray0[3] = (-1796270519);
      intArray0[4] = (-1796270519);
      intArray0[5] = (-1796270519);
      intArray0[3] = 10;
      intArray0[7] = (-1796270519);
      SparseInstance sparseInstance0 = new SparseInstance((-1796270519), doubleArray0, intArray0, 1838);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.enumerateAttributes();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.19814492559653
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "skBlE[Bs4";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "skBlE[Bs4");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("8");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.evaluateModel((Classifier) null, instances0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0930118455844764
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      Random.setNextRandom((-2916));
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedPrecision();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.addNumericTrainClass((-2916), 420.47);
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.586170916206464
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListOptions listOptions0 = new ListOptions();
      evaluation0.KBMeanInformation();
      evaluation0.matthewsCorrelationCoefficient(892);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4276);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.equals(binarySparseInstance0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0557193919262944
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      Random.setNextRandom(936);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedTruePositiveRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedPrecision();
      String string0 = evaluation2.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.addNumericTrainClass(420.47, 420.47);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0615098824653293
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "thence");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("getCurrentModel");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6059565610476003
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "S/X(/^";
      stringArray0[1] = "";
      Evaluation.main(stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      evaluation0.priorEntropy();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression(simpleLogistic0);
      evaluation0.equals(additiveRegression0);
      evaluation1.toSummaryString("enumerateMeasures", true);
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[0];
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("");
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListOptions listOptions0 = new ListOptions();
      double double0 = evaluation0.KBMeanInformation();
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 177.5;
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.8439211032839484
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = (-1.7976931348623157E308);
      doubleArray0[4] = (-1.7976931348623157E308);
      doubleArray0[5] = (-1.7976931348623157E308);
      doubleArray0[6] = (-1.7976931348623157E308);
      doubleArray0[7] = (-1.7976931348623157E308);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.7976931348623157E308), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      instances0.add((Instance) binarySparseInstance1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Option option0 = new Option("Trying to add database driver (JDBC): ", "@data", 1111, "@relation");
      evaluation0.equals(option0);
      double double0 = evaluation0.matthewsCorrelationCoefficient(23);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      evaluation0.num2ShortID(0, charArray0, 5);
      double double0 = evaluation0.m_SumSqrPredicted;
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6727352603542553
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListOptions listOptions0 = new ListOptions();
      evaluation0.KBMeanInformation();
      evaluation0.matthewsCorrelationCoefficient(892);
      char[] charArray0 = new char[7];
      charArray0[2] = '3';
      charArray0[3] = '}';
      charArray0[4] = '}';
      charArray0[5] = '\\';
      charArray0[6] = '7';
      int int0 = 59;
      evaluation0.num2ShortID(892, charArray0, 59);
      evaluation0.totalCost();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.228257806277753
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      BallTree ballTree0 = new BallTree();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      Random.setNextRandom(936);
      evaluation0.weightedAreaUnderPRC();
      evaluation0.weightedTruePositiveRate();
      evaluation0.weightedPrecision();
      evaluation0.toClassDetailsString();
      evaluation0.addNumericTrainClass(Double.NaN, (-258.671218));
      evaluation0.relativeAbsoluteError();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte)86;
      byteArray0[3] = (byte)78;
      byte byte0 = (byte)101;
      byteArray0[4] = (byte)101;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte) (-106);
      byteArray0[7] = (byte) (-73);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-4610), (byte) (-106));
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(byteArrayInputStream0);
        fail("Expecting exception: EOFException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.7606352457244663
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ListOptions listOptions0 = new ListOptions();
      evaluation0.KBMeanInformation();
      evaluation0.matthewsCorrelationCoefficient(892);
      evaluation0.KBInformation();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 177.5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 892;
      doubleArray0[3] = (double) 892;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 892;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 892;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 892, 892);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 892
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(0L);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel("-z5CYI|", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name -z5CYI|.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.doubles();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@data";
      try { 
        evaluation0.crossValidateModel("@relation", instances0, 1583, stringArray0, (java.util.Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @relation
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setSource(file0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      instances0.forEach(consumer0);
      Evaluation evaluation0 = new Evaluation(instances0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      GaussianProcesses gaussianProcesses1 = new GaussianProcesses();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      Classifier classifier0 = wrapperSubsetEval0.getClassifier();
      Evaluation.makeOptionString(classifier0, true);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.toXMLBIF03();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2193));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "thence";
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      String string0 = Evaluation.makeOptionString((Classifier) null, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3502705392332346
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l)Us");
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      Evaluation.getGlobalInfo(bagging0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(" -");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)12;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)123;
      byteArray0[5] = (byte)12;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      try { 
        Evaluation.handleCostOption(" -", 887);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"d\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0615632381579823
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      String[] stringArray0 = new String[0];
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.bayes.BayesNet:
         // 
         // -D
         // \tDo not use ADTree data structure
         // 
         // -B <BIF file>
         // \tBIF file to compare with
         // 
         // -Q weka.classifiers.bayes.net.search.SearchAlgorithm
         // \tSearch algorithm
         // 
         // -E weka.classifiers.bayes.net.estimate.SimpleEstimator
         // \tEstimator algorithm
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "thence";
      stringArray0[1] = "\tThe directory to work on.\n\t(default: current directory)";
      stringArray0[2] = "=== Confusion Matrix ===\n";
      stringArray0[3] = "";
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Evaluation.handleCostOption("", 116);
      BayesNet bayesNet0 = new BayesNet();
      Logistic logistic0 = new Logistic();
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte) (-6);
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte) (-6);
      byteArray0[5] = (byte) (-61);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, (byte) (-6));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      Logistic logistic0 = new Logistic();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      try { 
        Evaluation.evaluateModel((Classifier) bayesNet0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9799151714181009
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "thence";
      stringArray0[1] = "\tThe directory to work on.\n\t(default: current directory)";
      stringArray0[2] = "=== Confusion Matrix ===\n";
      stringArray0[3] = "";
      try { 
        Evaluation.evaluateModel((Classifier) null, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "getClass";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      try { 
        Evaluation.evaluateModel((Classifier) randomCommittee0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.RandomCommittee:
         // 
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -num-slots <num>
         // \tNumber of execution slots.
         // \t(default 1 - i.e. no parallelism)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.RandomTree)
         // 
         // Options specific to classifier weka.classifiers.trees.RandomTree:
         // 
         // -K <number of attributes>
         // \tNumber of attributes to randomly investigate
         // \t(<0 = int(log_2(#attributes)+1)).
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // -S <num>
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the tree, 0 for unlimited.
         // \t(default 0)
         // -N <num>
         // \tNumber of folds for backfitting (default 0, no backfitting).
         // -U
         // \tAllow unclassified instances.
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-5);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      try { 
        Evaluation.handleCostOption("everyone", 1648);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      IBk iBk0 = new IBk(2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("getRandomWidthFactor", arrayList0, 2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 4;
      iBk0.pruneToK(instances0, doubleArray0, 102);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      Bagging bagging0 = new Bagging();
      bagging0.getCapabilities();
      String string0 = Evaluation.makeOptionString(bagging0, true);
      assertNotNull(string0);
  }
}
