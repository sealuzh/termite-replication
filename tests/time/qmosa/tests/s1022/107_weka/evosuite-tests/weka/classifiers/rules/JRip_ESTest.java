/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:47:28 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.neighboursearch.balltrees.MiddleOutConstructor;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-452));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setClassifier(jRip0);
      AbstractClassifier.runClassifier(additiveRegression0, (String[]) null);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accu = (double) 2;
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.att = attribute0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.getRevision();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent(0.0);
      attribute0.setStringValue("string");
      jRip0.setOptimizations(1379);
      ClassOrder classOrder0 = new ClassOrder();
      double double0 = jRip_NominalAntd0.getAccu();
      assertEquals((-452), jRip0.getFolds());
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.218191942074211
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      jRip0.getTechnicalInformation();
      jRip0.setMinNo(6.7);
      stringArray0[0] = "U5:yj4OX%xsDY=(anUy";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U5:yj4OX%xsDY=(anUy");
      stringArray0[1] = "!ks6zb;-`{B}u8c";
      jRip0.setOptions(stringArray0);
      jRip0.enumerateMeasures();
      jRip0.getOptions();
      jRip0.foldsTipText();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      Utils.log2 = 98.14138667613213;
      RuleStats ruleStats0 = new RuleStats();
      jRip0.debugTipText();
      jRip0.setFolds((-22));
      jRip0.setFolds((-22));
      jRip0.setDebug(true);
      jRip0.getTechnicalInformation();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip0.setCheckErrorRate(true);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("!ks6zb;-`{B}u8c", "U5:yj4OX%xsDY=(anUy", (-22));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'U'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.967760398593298
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-3L));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8118");
      jRip_RipperRule1.copy();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.hasAntds();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(790);
      jRip_RipperRule1.covers(binarySparseInstance0);
      jRip0.getSeed();
      JRip jRip1 = new JRip();
      jRip_RipperRule2.covers(binarySparseInstance0);
      Attribute attribute0 = new Attribute("8rPA");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.8727606824715153
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      Attribute attribute0 = new Attribute(" with ");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip0.getRevision();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 2;
      SparseInstance sparseInstance0 = new SparseInstance((-2519.72), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      binarySparseInstance0.copy();
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance1);
      assertTrue(boolean0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.getTechnicalInformation();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(" with  <= NaN", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      jRip0.usePruningTipText();
      jRip0.getMinNo();
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = " with ";
      stringArray0[1] = " with ";
      stringArray0[2] = "c[!U9u";
      stringArray0[3] = "O";
      stringArray0[4] = "weka/core/Capabilities.props";
      stringArray0[5] = " =>  with =";
      stringArray0[6] = " with  <= NaN";
      stringArray0[7] = "integer";
      jRip0.setOptions(stringArray0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7597840065206163
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-452));
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setClassifier(jRip0);
      AbstractClassifier.runClassifier(additiveRegression0, (String[]) null);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accu = (double) 2;
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.att = attribute0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip_RipperRule0.hasAntds();
      int int0 = 1379;
      jRip_RipperRule0.getRevision();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent(0.0);
      int int1 = 0;
      Instances instances0 = new Instances("\"5BLHo/D^j", arrayList0, 0);
      attribute0.setStringValue("string");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 1379;
      doubleArray0[5] = (double) 1379;
      doubleArray0[6] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(4, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1431.52387713822, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.221751559072405
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      CoverTree coverTree0 = new CoverTree();
      JRip jRip1 = new JRip();
      jRip1.toString();
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      StringReader stringReader0 = new StringReader("Eg;G5m~>brMEv]w");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 4);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("fgpA", arrayList0, 1);
      Attribute attribute0 = new Attribute(".bsi");
      attribute0.setStringValue(".bsi");
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance((-2990.0), doubleArray0);
      instances0.add((Instance) sparseInstance0);
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute0);
      Instances instances1 = new Instances(instances0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances1, 1, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<*T=q^WHO_=>C8C=");
      jRip0.setCheckErrorRate(false);
      jRip0.getCheckErrorRate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("^IbuUw*^V=1b5!2%", linkedList0, (-2251));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.toString();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BallNode ballNode0 = new BallNode(803, 2, 0);
      jRip_NominalAntd0.cover = 0.0;
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "integer");
      try { 
        BallNode.calcPivot(ballNode0, ballNode0, (Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("0bzFUQk[>~XP");
      JRip jRip0 = new JRip();
      jRip0.getDebug();
      jRip0.debugTipText();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.3;
      doubleArray0[1] = (-1.7976931348623157E308);
      DenseInstance denseInstance0 = new DenseInstance(0.3, doubleArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      JRip jRip1 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("string", linkedList0, 0);
      Object object0 = new Object();
      attribute1.equals(object0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(268);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        jRip1.getMeasure("@end");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // @end not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      AbstractClassifier.runClassifier(additiveRegression0, (String[]) null);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\"5BLHo/D^j");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList2, 1);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, (-452), 1);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      JRip jRip1 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("string", linkedList0, 0);
      Object object0 = new Object();
      attribute1.equals(object0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "real");
      jRip_NominalAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        jRip1.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "9";
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("9", linkedList0, 69);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      Attribute attribute1 = new Attribute("CH^v'", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8540941957621455
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(630L);
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      jRip2.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1992);
      jRip_RipperRule0.getRevision();
      JRip.RipperRule jRip_RipperRule1 = jRip2.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule1.getRevision();
      jRip_RipperRule0.copy();
      jRip_RipperRule1.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip2.new RipperRule();
      jRip_RipperRule1.covers(binarySparseInstance0);
      jRip1.getSeed();
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      
      jRip1.setMinNo(0.0);
      boolean boolean0 = jRip2.getUsePruning();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.759784006520616
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0L);
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1992);
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.copy();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.covers((Instance) null);
      jRip0.getSeed();
      jRip0.setMinNo(0L);
      assertEquals(0L, jRip0.getSeed());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      SystemInUtil.addInputLine("AP</");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.944797816169571
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed((-3L));
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1992);
      jRip_RipperRule0.getRevision();
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      jRip_RipperRule1.getRevision();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule1.copy();
      jRip_RipperRule0.hasAntds();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule2.covers(binarySparseInstance0);
      jRip1.getSeed();
      jRip1.setMinNo(1992);
      // Undeclared exception!
      try { 
        jRip1.getMeasure("unpublished");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // unpublished not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("M~fY_:[Rag", linkedList0, 41);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      int int0 = 1625;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1625);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_NominalAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "size";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6772245773362195
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      MockRandom mockRandom0 = new MockRandom();
      JRip jRip2 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute1 = new Attribute((String) null, linkedList0, 2);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.size();
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "relational";
      stringArray0[2] = "real";
      stringArray0[3] = "@end";
      stringArray0[4] = "string";
      stringArray0[5] = "real";
      stringArray0[6] = "numeric";
      stringArray0[7] = "X|<5QI!";
      stringArray0[8] = "relational";
      JRip.main(stringArray0);
      jRip_RipperRule0.setConsequent(4);
      jRip1.setOptimizations(8);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip0.setSeed(120L);
      jRip0.foldsTipText();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", arrayList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      jRip_NominalAntd0.maxInfoGain = 281.037162;
      // Undeclared exception!
      try { 
        protectedProperties0.put((Object) null, arrayList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.minNoTipText();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "9";
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("9", linkedList0, 69);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      linkedList0.add("");
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string1 = jRip_NumericAntd0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals("9 <= NaN", string1);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.211667659113366
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      jRip0.setOptions(stringArray0);
      jRip0.toString();
      jRip0.getUsePruning();
      JRip jRip1 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("2", list1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      StringReader stringReader0 = new StringReader("opNoA-Lc]:`fy-*1>");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 27);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(bufferedReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"opNoA-Lc]:`fy-*1>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "9";
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("9", linkedList0, 71);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      double double0 = jRip0.getMinNo();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      jRip0.minNoTipText();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "S$3Si@PI9/}/FA";
      stringArray0[1] = "`LM";
      stringArray0[2] = "Should never happen: revDLin optmz. stage NaN or infinite!";
      jRip0.setOptions(stringArray0);
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      Instances instances0 = null;
      try { 
        jRip0.rulesetForOneClass(2, (Instances) null, 4, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "9";
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("9", linkedList0, 69);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.788299378708331
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getFolds();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList0, 3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      linkedList0.add("`LM");
      jRip_NumericAntd0.att = attribute0;
      Attribute attribute1 = jRip_NumericAntd0.getAttr();
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getRevision();
      jRip0.minNoTipText();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.copy();
      MiddleOutConstructor middleOutConstructor0 = new MiddleOutConstructor();
      try { 
        middleOutConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.getCapabilities();
      jRip0.getMinNo();
      jRip0.seedTipText();
      String string0 = null;
      String string1 = "mw";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, RuleStats> biFunction0 = (BiFunction<Object, Object, RuleStats>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        protectedProperties0.computeIfPresent((Object) null, biFunction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      int int0 = 68;
      jRip0.setOptimizations(68);
      jRip0.setCheckErrorRate(true);
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Bth/ aI4_qz+A5";
      stringArray0[1] = "  ConditionalOffset = ";
      stringArray0[2] = "";
      stringArray0[3] = "T/.|";
      jRip1.setOptions(stringArray0);
      AbstractClassifier.makeCopy(jRip0);
      jRip0.getOptimizations();
      jRip0.getCheckErrorRate();
      jRip0.getCapabilities();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      MockRandom mockRandom0 = new MockRandom();
      jRip0.setOptimizations(82);
      jRip0.seedTipText();
      jRip0.setDebug(true);
      assertEquals(82, jRip0.getOptimizations());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[1];
      jRip0.setSeed(0L);
      jRip0.enumerateMeasures();
      stringArray0[0] = "mtI%Bn+";
      jRip0.setDebug(true);
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = 64.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1992);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(1992);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Attribute attribute0 = new Attribute("{?no9[!s sq>ay", (-1539));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "string";
      stringArray0[1] = "date";
      stringArray0[2] = "@end";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      attribute0.setStringValue("\tSet the minimal weights of instances\n\twithin a split.\n\t(default 2.0)");
      attribute0.addRelation((Instances) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.maxInfoGain = (double) (-1539);
      attribute0.toString();
      jRip_NumericAntd0.getRevision();
      jRip_RipperRule0.copy();
      attribute0.addStringValue("");
      jRip_RipperRule0.size();
      jRip0.setFolds(0);
      jRip_NumericAntd0.getAccuRate();
      jRip_RipperRule0.getConsequent();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("\tSet whether turn on the\n\tdebug mode (Default: false)", "");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      Instances instances0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-452));
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accu = (double) 2;
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.att = attribute0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 1379;
      jRip_NominalAntd0.getRevision();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent(0.0);
      Instances instances0 = new Instances("\"5BLHo/D^j", arrayList0, 0);
      attribute0.setStringValue("string");
      // Undeclared exception!
      try { 
        RuleStats.partition(instances0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.660945560561596
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setClassifier(jRip0);
      AbstractClassifier.runClassifier(additiveRegression0, (String[]) null);
      Attribute attribute0 = new Attribute("", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accu = (double) 2;
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.att = attribute0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.getRevision();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent(0.0);
      Instances instances0 = new Instances("\"5BLHo/D^j", arrayList0, 0);
      attribute0.setStringValue("string");
      jRip_NominalAntd0.splitData(instances0, 3, 0);
      jRip0.setOptimizations(1379);
      ClassOrder classOrder0 = new ClassOrder();
      try { 
        jRip0.rulesetForOneClass(1379, instances0, (-1656.480875180551), 1379);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.691735059102455
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute("\tSet whether turn on the\n\tdebug mode (Default: false)", (String) null, (-751));
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      jRip_NumericAntd0.toString();
      MockRandom mockRandom0 = new MockRandom();
      JRip jRip2 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute2 = new Attribute((String) null, linkedList0, 2);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[2] = 4;
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.setConsequent(4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip2.new NominalAntd(attribute2);
      jRip_NominalAntd0.splitData(instances0, (-322.363774076408), -0.0);
      jRip1.setOptimizations(8);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SystemInUtil.addInputLine("");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      jRip0.listOptions();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("^oS?|'JW) {J48");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ^oS?|'JW) {J48 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 0.001;
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      String string1 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string1);
      
      jRip0.setUsePruning(true);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("", "");
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute("\tSet whether turn on the\n\tdebug mode (Default: false)", (String) null, (-751));
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute1);
      jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      JRip jRip2 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute2 = new Attribute((String) null, linkedList0, 2);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[2] = 4;
      intArray0[3] = 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 4);
      jRip_NumericAntd0.splitData(instances0, 0, 971.01248672188);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("optimization in this implementation.\n\n");
      attribute0.toString();
      Attribute attribute1 = attribute0.copy("");
      attribute0.equalsMsg("@(m3n");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getRevision();
      jRip0.setFolds(0);
      jRip_NumericAntd0.getCover();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2);
      assertEquals(2.0, jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.accuRate = 0.0;
      jRip_NumericAntd0.toString();
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "9";
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("9", linkedList0, 69);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip0.setMinNo((-1879.339278662));
      assertEquals((-1879.339278662), jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.globalInfo();
      // Undeclared exception!
      try { 
        jRip0.getMeasure(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // This class implements a propositional rule learner, Repeated Incremental Pruning to Produce Error Reduction (RIPPER), which was proposed by William W. Cohen as an optimized version of IREP. 
         // 
         // The algorithm is briefly described as follows: 
         // 
         // Initialize RS = {}, and for each class from the less prevalent one to the more frequent one, DO: 
         // 
         // 1. Building stage:
         // Repeat 1.1 and 1.2 until the descrition length (DL) of the ruleset and examples is 64 bits greater than the smallest DL met so far, or there are no positive examples, or the error rate >= 50%. 
         // 
         // 1.1. Grow phase:
         // Grow one rule by greedily adding antecedents (or conditions) to the rule until the rule is perfect (i.e. 100% accurate).  The procedure tries every possible value of each attribute and selects the condition with highest information gain: p(log(p/t)-log(P/T)).
         // 
         // 1.2. Prune phase:
         // Incrementally prune each rule and allow the pruning of any final sequences of the antecedents;The pruning metric is (p-n)/(p+n) -- but it's actually 2p/(p+n) -1, so in this implementation we simply use p/(p+n) (actually (p+1)/(p+n+2), thus if p+n is 0, it's 0.5).
         // 
         // 2. Optimization stage:
         //  after generating the initial ruleset {Ri}, generate and prune two variants of each rule Ri from randomized data using procedure 1.1 and 1.2. But one variant is generated from an empty rule while the other is generated by greedily adding antecedents to the original rule. Moreover, the pruning metric used here is (TP+TN)/(P+N).Then the smallest possible DL for each variant and the original rule is computed.  The variant with the minimal DL is selected as the final representative of Ri in the ruleset.After all the rules in {Ri} have been examined and if there are still residual positives, more rules are generated based on the residual positives using Building Stage again. 
         // 3. Delete the rules from the ruleset that would increase the DL of the whole ruleset if it were in it. and add resultant ruleset to RS. 
         // ENDDO
         // 
         // Note that there seem to be 2 bugs in the original ripper program that would affect the ruleset size and accuracy slightly.  This implementation avoids these bugs and thus is a little bit different from Cohen's original implementation. Even after fixing the bugs, since the order of classes with the same frequency is not defined in ripper, there still seems to be some trivial difference between this implementation and the original ripper, especially for audiology data in UCI repository, where there are lots of classes of few instances.
         // 
         // Details please see:
         // 
         // William W. Cohen: Fast Effective Rule Induction. In: Twelfth International Conference on Machine Learning, 115-123, 1995.
         // 
         // PS.  We have compared this implementation with the original ripper implementation in aspects of accuracy, ruleset size and running time on both artificial data \"ab+bcd+defg\" and UCI datasets.  In all these aspects it seems to be quite comparable to the original ripper implementation.  However, we didn't consider memory consumption optimization in this implementation.
         // 
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }
}
