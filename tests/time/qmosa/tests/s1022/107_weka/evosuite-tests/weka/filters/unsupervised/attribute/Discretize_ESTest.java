/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:33:13 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StringReader;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2611883523040466
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SystemInUtil.addInputLine("^w){$ir`d0");
      SystemInUtil.addInputLine("Rj*'])W33;k");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("Yh$sXp.U.p3Imw");
      Discretize discretize0 = new Discretize("Yh$sXp.U.p3Imw");
      discretize0.m_UseBinNumbers = true;
      String[] stringArray0 = discretize0.getOptions();
      Filter.runFilter(discretize0, stringArray0);
      Discretize discretize1 = new Discretize("1@ClxS{Pq\"8");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "6BPz88+:0";
      stringArray0[1] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -B option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.m_DefaultCols = "Sets the desired weight of instances per interval for equal-frequency binning.";
      discretize0.getInvertSelection();
      discretize0.getFindNumBins();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-64);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-67);
      byteArray0[3] = (byte)79;
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)113;
      byteArray0[6] = (byte)110;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.getUseBinNumbers();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("-M");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-M";
      stringArray0[1] = "-M";
      stringArray0[2] = "-M";
      stringArray0[3] = "-M";
      stringArray0[4] = "-M";
      stringArray0[5] = "-M";
      stringArray0[6] = "-M";
      stringArray0[7] = "-M";
      stringArray0[8] = "-M";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.613628922152431
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance((-22.6659), doubleArray0);
      Discretize discretize0 = new Discretize("");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.setUseEqualFrequency(true);
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("^w){$ir`d0");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][9];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 0.0;
      doubleArray4[7] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray6[5] = 0.0;
      doubleArray6[6] = 0.0;
      doubleArray6[7] = 0.0;
      doubleArray6[8] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SystemInUtil.addInputLine("^w){I$ir`/d0;");
      double[] doubleArray0 = new double[1];
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.802468599433412
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SystemInUtil.addInputLine("^w){I$ir`/d0;");
      Discretize discretize0 = new Discretize("");
      Discretize discretize1 = new Discretize("U>");
      Discretize discretize2 = new Discretize();
      Discretize discretize3 = new Discretize();
      discretize3.setOutputFormat();
      assertEquals(10, discretize3.getBins());
      assertFalse(discretize3.getUseBinNumbers());
      assertFalse(discretize3.getUseEqualFrequency());
      assertFalse(discretize3.getFindNumBins());
      assertFalse(discretize3.getMakeBinary());
      assertEquals((-1.0), discretize3.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      
      discretize1.getCutPoints(495);
      discretize1.getCutPoints(495);
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8211303254932276
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine("^w){I$ir`/d0;");
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[8];
      discretize0.setUseBinNumbers(true);
      stringArray0[0] = "^}+czJ";
      stringArray0[1] = "^w){I$ir`/d0;";
      stringArray0[2] = "";
      stringArray0[3] = "^w){I$ir`/d0;";
      stringArray0[4] = "^w){I$ir`/d0;";
      stringArray0[5] = "7ekHObK_G.3nk";
      stringArray0[6] = "DoNotLoadIfEnvVarNotSetMessage";
      stringArray0[7] = "DoNotLoadIfEnvVarNotSetMessage";
      discretize0.setOptions(stringArray0);
      discretize0.useBinNumbersTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1994091956));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(2923);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-2028178998));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 0;
      intArray0[2] = (-334);
      intArray0[3] = 0;
      intArray0[4] = 0;
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[9][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      doubleArray1[8] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      discretize0.getCutPoints(0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.deleteAttributeAt((-1));
      binarySparseInstance0.toStringNoWeight((-2028178998));
      int[] intArray0 = new int[6];
      intArray0[0] = (-2028178998);
      intArray0[1] = (-2028178998);
      intArray0[2] = (-2028178998);
      intArray0[3] = (-2028178998);
      intArray0[4] = (-2028178998);
      intArray0[5] = (-2028178998);
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0, intArray0, 10);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[7][0];
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) (-2028178998);
      doubleArray2[1] = (double) (-2028178998);
      doubleArray2[2] = 1.7976931348623157E308;
      doubleArray2[3] = (double) (-2028178998);
      doubleArray1[0] = doubleArray2;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (double) (-2028178998);
      doubleArray3[1] = (double) (-2028178998);
      doubleArray3[2] = (double) (-2028178998);
      doubleArray3[3] = (double) (-2028178998);
      doubleArray3[4] = 1.7976931348623157E308;
      doubleArray3[5] = (double) (-2028178998);
      doubleArray3[6] = (double) (-2028178998);
      doubleArray3[7] = (-1857.02057972);
      doubleArray1[3] = doubleArray3;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = (double) (-2028178998);
      doubleArray4[1] = (double) (-2028178998);
      doubleArray4[2] = (double) (-2028178998);
      doubleArray4[3] = (-834.3278605534724);
      doubleArray4[4] = (double) (-2028178998);
      doubleArray4[5] = (double) (-2028178998);
      doubleArray4[6] = (double) (-2028178998);
      doubleArray1[6] = doubleArray4;
      discretize0.m_CutPoints = doubleArray1;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(2434);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "CoKLW'4$'I\"9S";
      Discretize discretize0 = new Discretize("CoKLW'4$'I\"9S");
      discretize0.setMakeBinary(true);
      int int0 = 6;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance2 = new DenseInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      DenseInstance denseInstance3 = new DenseInstance((-2028178998), doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(denseInstance3);
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("");
      discretize0.m_UseEqualFrequency = true;
      discretize0.getBinRangesString(545);
      discretize0.globalInfo();
      discretize0.getUseEqualFrequency();
      SystemInUtil.addInputLine("IO06A?7*|F8X8z8\"uM");
      discretize0.getCutPoints(545);
      discretize0.getInvertSelection();
      StringReader stringReader0 = new StringReader("?");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token['?'], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_FindNumBins = false;
      discretize0.getUseEqualFrequency();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.setDesiredWeightOfInstancesPerInterval((-1.0));
      discretize0.getInvertSelection();
      discretize0.setDesiredWeightOfInstancesPerInterval((-0.2695155859846503));
      discretize0.getRevision();
      discretize0.setBins((-837));
      int[] intArray0 = new int[1];
      discretize0.setInvertSelection(false);
      intArray0[0] = (-2184);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.m_FindNumBins = false;
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemInUtil.addInputLine("^w){I$ir`/d0;");
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), double0, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Discretize discretize0 = new Discretize();
      discretize0.getBins();
      byteArray0[0] = (byte)37;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte)37;
      byteArray0[5] = (byte)2;
      byteArray0[6] = (byte)2;
      String[] stringArray0 = new String[7];
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((byte)37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 37
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.087698781999318
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-2129.6088);
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getBinRangesString((-4525));
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getBinRangesString(1688);
      discretize0.setUseEqualFrequency(false);
      discretize0.setUseEqualFrequency(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      Filter.runFilter((Filter) null, stringArray0);
      Range.main(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SystemInUtil.addInputLine("^w){I$ir`/d0;");
      double[] doubleArray0 = new double[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^w){I$ir`/d0;");
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[7];
      intArray0[1] = 3410;
      intArray0[2] = (-334);
      intArray0[4] = 3410;
      Discretize discretize0 = new Discretize("DoNotLoadIfEnvVarNotSetMessage");
      String[] stringArray0 = new String[7];
      stringArray0[0] = " Nvs7/Yg6x8}25n.";
      discretize0.m_DiscretizeCols = null;
      stringArray0[1] = "DoNotLoadIfEnvVarNotSetMessage";
      stringArray0[2] = "^w){I$ir`/d0;";
      stringArray0[3] = "^w){I$ir`/d0;";
      stringArray0[4] = "DoNotLoadIfEnvVarNotSetMessage";
      stringArray0[5] = "DoNotLoadIfEnvVarNotSetMessage";
      stringArray0[6] = "^w){I$ir`/d0;";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = (-22.6659);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.toString();
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance2 = new DenseInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance(double0, doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      DenseInstance denseInstance3 = new DenseInstance(binarySparseInstance3.s_numericAfterDecimalPoint, doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("0ZsBNjUoh?7=7HEVH");
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.findNumBinsTipText();
      discretize0.makeBinaryTipText();
      int[] intArray0 = new int[8];
      intArray0[0] = (-1610612734);
      intArray0[1] = (-3330);
      intArray0[2] = 0;
      intArray0[3] = 717;
      intArray0[4] = 102;
      intArray0[5] = 988;
      intArray0[6] = 3096;
      intArray0[7] = (-1879048189);
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.listOptions();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize(" and ");
      Range range0 = new Range();
      range0.getRanges();
      discretize0.m_DiscretizeCols = range0;
      String string0 = "%S`hwJ)\\[jZ|~";
      discretize0.getAttributeIndices();
      // Undeclared exception!
      try { 
        range0.getSelection();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.setMissing((-2028178998));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SystemInUtil.addInputLine("^w){I$ir`/d0;");
      double[] doubleArray0 = new double[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "^w){I$ir`/d0;");
      doubleArray0[0] = (double) 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[2] = 3410;
      intArray0[2] = (-334);
      intArray0[3] = 0;
      intArray0[4] = 3410;
      Discretize discretize0 = new Discretize(".");
      discretize0.getCutPoints(0);
      Discretize discretize1 = new Discretize();
      discretize1.setOutputFormat();
      discretize1.getAttributeIndices();
      // Undeclared exception!
      try { 
        discretize1.findNumBins((-3647));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("");
      Discretize discretize1 = null;
      try {
        discretize1 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8003780070989173
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Dc1*in8@82G";
      Discretize discretize0 = new Discretize();
      discretize0.setBins(60);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      discretize0.getBinRangesString(6);
      Discretize discretize1 = new Discretize();
      discretize1.setFindNumBins(true);
      discretize0.getOptions();
      assertEquals(60, discretize0.getBins());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SystemInUtil.addInputLine("~K/ECZpkrUaq");
      SystemInUtil.addInputLine("SBw=j-");
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      String string0 = discretize0.globalInfo();
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      Discretize discretize0 = new Discretize();
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SystemInUtil.addInputLine("^w){I$ir`/d0;");
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((Instance) binarySparseInstance2);
      Discretize discretize0 = new Discretize("\nOriginal dataset:\n");
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = true;
      String string0 = discretize0.attributeIndicesTipText();
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Discretize discretize0 = new Discretize("<4@#OQCkq5A^B");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1277);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "The class index will be unset temporarily before the filter is applied.");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("4K");
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      
      discretize0.setUseEqualFrequency(false);
      discretize0.listOptions();
      String string1 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SystemInUtil.addInputLine("^w){I$ir`/d0;");
      Discretize discretize0 = new Discretize("7ekHObK_G.3nk");
      discretize0.setFindNumBins(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      int int0 = 10;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 10;
      doubleArray0[1] = 6.7;
      doubleArray0[2] = (double) (-23);
      doubleArray0[3] = (double) (-23);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (double) (-23);
      doubleArray0[6] = (double) 10;
      SparseInstance sparseInstance0 = new SparseInstance((-23), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        sparseInstance1.relationalValue(80);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "?\"C#24dGLo;<?xL=f1&";
      stringArray0[1] = "?\"C#24dGLo;<?xL=f1&";
      discretize0.setInvertSelection(false);
      stringArray0[2] = "?\"C#24dGLo;<?xL=f1&";
      stringArray0[3] = "?\"C#24dGLo;<?xL=f1&";
      stringArray0[4] = "?\"C#24dGLo;<?xL=f1&";
      stringArray0[5] = "?\"C#24dGLo;<?xL=f1&";
      Filter.runFilter(discretize0, stringArray0);
      MultiFilter multiFilter0 = new MultiFilter();
      int int0 = 1660;
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(1660);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1660
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-22.6659), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((-2028178998), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance1);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.useBinNumbersTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tt*u7n");
      Discretize discretize0 = new Discretize("~CJ4pb");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3646032327093085
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      SystemInUtil.addInputLine("Yh$sXp.U.p3Imw");
      SystemInUtil.addInputLine("a`l6s'9e");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a`l6s'9e");
      Discretize discretize1 = new Discretize("B");
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getFindNumBins());
      
      String[] stringArray0 = discretize0.getOptions();
      Filter.runFilter(discretize1, stringArray0);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals(6, stringArray0.length);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
      
      System.setCurrentTimeMillis(1371L);
      System.setCurrentTimeMillis(1371L);
      discretize0.getCapabilities();
      discretize0.getCutPoints(10);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'B2of2'";
      stringArray0[1] = "";
      stringArray0[2] = "~k_-<ldU3lH}&R";
      stringArray0[3] = "";
      stringArray0[4] = "<iI}HjWj,\"";
      stringArray0[5] = "D";
      Discretize.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize("SBw=j-");
      discretize0.getMakeBinary();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("{;>1YRtM<h!)OWE?Y\"", protectedProperties0);
      attribute0.copy();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-115);
      System.setCurrentTimeMillis(4);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(867.0506194097679, doubleArray0);
      sparseInstance0.dataset();
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "{;>1YRtM<h!)OWE?Y\"";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize("{;>1YRtM<h!)OWE?Y\"");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
