/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 30 08:10:11 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.184238080487364
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity(1);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate0.or(predicate3);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate6 = predicate5.negate();
      Object object1 = new Object();
      Predicate<String> predicate7 = Predicate.isEqual(object1);
      Predicate<String> predicate8 = predicate0.and(predicate1);
      Predicate<String> predicate9 = predicate5.and(predicate8);
      Predicate<String> predicate10 = predicate7.negate();
      predicate6.or(predicate8);
      Predicate<Object> predicate11 = predicate2.and(predicate1);
      predicate3.or(predicate11);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<String> predicate13 = predicate4.negate();
      Predicate<String> predicate14 = predicate6.or(predicate12);
      predicate13.negate();
      predicate9.and(predicate10);
      predicate13.or(predicate14);
      predicate12.negate();
      jSTerm0.add((Object) "cguAA=In}j%E?I?b");
      predicate0.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      boolean boolean0 = jSTerm1.isGround();
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean1 == boolean0);
      
      jSTerm0.add((Object) predicate9);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution1.fail());
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(19, stringBuffer0.length());
      
      boolean boolean2 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate<String> predicate1 = Predicate.isEqual((Object) predicate0);
      Object object2 = new Object();
      Object object3 = new Object();
      Predicate<String> predicate2 = Predicate.isEqual(object3);
      jSTerm0.add((Object) predicate1);
      predicate0.test(predicate1);
      Predicate<String> predicate3 = Predicate.isEqual(object3);
      Predicate<String> predicate4 = predicate1.or(predicate0);
      Predicate<String> predicate5 = predicate4.and(predicate0);
      Predicate<String> predicate6 = predicate4.or(predicate5);
      Predicate<String> predicate7 = predicate6.and(predicate2);
      Predicate<String> predicate8 = predicate7.negate();
      Object object4 = jSTerm0.clone();
      Predicate<Object> predicate9 = Predicate.isEqual(object4);
      Predicate<String> predicate10 = predicate4.or(predicate9);
      predicate7.or(predicate1);
      Predicate<String> predicate11 = predicate4.negate();
      predicate10.and(predicate0);
      Predicate<String> predicate12 = predicate4.and(predicate1);
      Predicate<String> predicate13 = predicate12.and(predicate3);
      predicate3.test("bh-3Zt03xI*$Y");
      predicate13.negate();
      predicate4.and(predicate6);
      predicate4.negate();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      predicate1.negate();
      jSTerm1.listIterator();
      predicate11.negate();
      predicate9.or(predicate0);
      jSTerm1.removeIf(predicate8);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate1);
      Object object2 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object3 = new Object();
      Predicate<String> predicate3 = Predicate.isEqual(object3);
      Predicate<String> predicate4 = predicate0.negate();
      jSTerm0.add((Object) predicate2);
      Predicate<String> predicate5 = predicate0.negate();
      Predicate<String> predicate6 = predicate4.and(predicate2);
      Predicate<String> predicate7 = predicate5.negate();
      Predicate<String> predicate8 = predicate2.or(predicate3);
      predicate7.or(predicate5);
      predicate1.test(predicate2);
      Predicate<String> predicate9 = Predicate.isEqual(object3);
      predicate9.negate();
      predicate8.or(predicate6);
      predicate3.negate();
      predicate2.or(predicate7);
      Predicate.isEqual(object3);
      Predicate<String> predicate10 = predicate9.negate();
      Predicate<String> predicate11 = predicate10.and(predicate9);
      predicate5.and(predicate9);
      predicate2.negate();
      Predicate<String> predicate12 = predicate11.negate();
      Predicate<String> predicate13 = predicate8.and(predicate7);
      Predicate<String> predicate14 = predicate7.and(predicate13);
      predicate12.negate();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      predicate6.negate();
      jSTerm0.removeIf(predicate14);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.666332585328325
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate6 = predicate5.negate();
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate2);
      Predicate.isEqual(object1);
      Predicate<String> predicate7 = predicate5.or(predicate6);
      Predicate<String> predicate8 = predicate0.and(predicate1);
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = predicate6.or(predicate8);
      Predicate<Object> predicate11 = predicate2.and(predicate1);
      predicate4.or(predicate11);
      predicate10.negate();
      jSTerm0.makeEval(true);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<String> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = predicate6.or(predicate12);
      Predicate<String> predicate15 = predicate9.and(predicate0);
      predicate13.or(predicate14);
      predicate12.negate();
      jSTerm0.add((Object) "cguAA=In}j%E?I?b");
      predicate15.negate();
      predicate0.negate();
      System.setCurrentTimeMillis(4710L);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9133036567531658
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(52);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<String> predicate2 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<String> predicate6 = predicate2.and(predicate4);
      Predicate<String> predicate7 = predicate0.or(predicate6);
      Predicate<String> predicate8 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate1);
      predicate7.negate();
      Predicate<String> predicate11 = predicate6.negate();
      Predicate<String> predicate12 = predicate5.negate();
      predicate6.or(predicate12);
      Predicate<String> predicate13 = predicate8.and(predicate10);
      Predicate<String> predicate14 = predicate13.negate();
      predicate14.or(predicate9);
      predicate7.or(predicate9);
      Predicate<String> predicate15 = predicate11.negate();
      predicate2.and(predicate10);
      Predicate<String> predicate16 = predicate8.and(predicate6);
      Predicate<String> predicate17 = predicate12.and(predicate16);
      predicate12.test("bh-3Zt03xI*$Y");
      Predicate.isEqual((Object) predicate16);
      jSTerm0.add((Object) predicate15);
      predicate8.negate();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm0.add((Object) predicate17);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$45/1909448762 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate<String> predicate1 = Predicate.isEqual((Object) predicate0);
      Object object2 = new Object();
      Object object3 = new Object();
      Predicate<String> predicate2 = Predicate.isEqual(object3);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate2);
      predicate0.or(predicate3);
      jSTerm0.add((Object) predicate1);
      predicate0.test(predicate1);
      Predicate<String> predicate4 = Predicate.isEqual(object3);
      Predicate<String> predicate5 = predicate4.negate();
      predicate1.negate();
      Predicate.isEqual(object3);
      predicate4.negate();
      Integer integer0 = new Integer(2364);
      Predicate.isEqual((Object) integer0);
      predicate2.negate();
      jSTerm0.add((Object) predicate5);
      Predicate.isEqual((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$47/934245927 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8734517375545654
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity(1);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate0.and(predicate3);
      predicate0.or(predicate1);
      Predicate<String> predicate4 = Predicate.isEqual((Object) predicate2);
      predicate4.negate();
      Predicate.isEqual(object0);
      Predicate<String> predicate5 = predicate0.and(predicate1);
      predicate5.or(predicate1);
      Predicate<String> predicate6 = predicate4.and(predicate5);
      Object object1 = new Object();
      Predicate<String> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate8 = predicate6.negate();
      predicate8.negate();
      jSTerm0.add((Object) predicate4);
      predicate7.negate();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) jSTerm0);
      jSTerm1.toStr();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals(0, jSSubstitution0.size());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.4162539418985833
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      JSJshopVars.leftBrac = 32;
      streamTokenizer0.ttype = 1585;
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.wordChars(93, 91);
      JSJshopVars.interrogation = 32;
      streamTokenizer0.slashSlashComments(true);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      streamTokenizer0.nval = (double) 91;
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution1.addElements(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.call();
      JSTerm jSTerm4 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm4.matches(jSTerm5);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm5.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.022456924203762
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate6 = predicate5.negate();
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate2);
      Predicate.isEqual(object1);
      Predicate<String> predicate7 = predicate5.or(predicate6);
      Predicate<String> predicate8 = predicate0.and(predicate1);
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = predicate6.or(predicate8);
      Predicate<Object> predicate11 = predicate2.and(predicate1);
      predicate4.or(predicate11);
      predicate10.negate();
      jSTerm0.makeEval(true);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<String> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = predicate6.or(predicate12);
      Predicate<String> predicate15 = predicate9.and(predicate0);
      predicate13.or(predicate14);
      predicate12.negate();
      jSTerm0.add((Object) "cguAA=In}j%E?I?b");
      predicate15.negate();
      predicate0.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(0L);
      jSTerm0.cloneT();
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6924088629865501
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity(1);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate0.or(predicate4);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate6 = predicate5.negate();
      Object object1 = new Object();
      Predicate<String> predicate7 = Predicate.isEqual(object1);
      Predicate<String> predicate8 = predicate0.and(predicate1);
      predicate5.and(predicate8);
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = predicate6.or(predicate8);
      Predicate<String> predicate11 = predicate9.and(predicate3);
      Predicate<String> predicate12 = predicate5.and(predicate11);
      predicate10.negate();
      predicate3.and(predicate1);
      predicate5.and(predicate9);
      jSTerm0.add((Object) predicate9);
      Predicate<String> predicate13 = Predicate.isEqual(object0);
      predicate13.negate();
      jSTerm0.makeEval(true);
      jSTerm0.removeIf(predicate12);
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.282374376159249
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      predicate0.negate();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      Predicate.isEqual((Object) "cgAA=In}j%E?I?b");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      jSTerm1.call();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0075210235668903
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity(1);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate0.or(predicate3);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate6 = predicate5.negate();
      Object object1 = new Object();
      Predicate<String> predicate7 = Predicate.isEqual(object1);
      Predicate<String> predicate8 = predicate0.and(predicate1);
      Predicate<String> predicate9 = predicate5.and(predicate8);
      Predicate<String> predicate10 = predicate7.negate();
      predicate6.or(predicate8);
      Predicate<Object> predicate11 = predicate2.and(predicate1);
      predicate3.or(predicate11);
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<String> predicate13 = predicate4.negate();
      Predicate<String> predicate14 = predicate6.or(predicate12);
      Predicate<String> predicate15 = predicate9.and(predicate10);
      predicate13.or(predicate14);
      predicate12.negate();
      jSTerm0.add((Object) "cguAA=In}j%E?I?b");
      predicate15.negate();
      predicate0.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      boolean boolean0 = jSTerm1.isGround();
      boolean boolean1 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean1 == boolean0);
      
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(19, stringBuffer0.length());
      
      jSTerm1.isEval();
      jSTerm0.isGround();
      boolean boolean2 = jSTerm1.isFunction();
      assertTrue(boolean2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0577223167610805
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "jwWC!s`{yCz");
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      Predicate<String> predicate5 = predicate0.negate();
      predicate1.negate();
      predicate1.or(predicate4);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate3);
      Predicate<String> predicate7 = predicate0.or(predicate3);
      Predicate.isEqual((Object) predicate7);
      Predicate<String> predicate8 = Predicate.isEqual((Object) predicate3);
      Predicate<String> predicate9 = predicate8.negate();
      Predicate<String> predicate10 = predicate0.negate();
      Predicate<String> predicate11 = predicate9.and(predicate4);
      Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate12 = predicate8.or(predicate6);
      Predicate<String> predicate13 = predicate11.and(predicate8);
      predicate5.negate();
      predicate12.negate();
      Predicate.isEqual((Object) predicate13);
      predicate10.negate();
      predicate11.and(predicate5);
      predicate11.negate();
      jSTerm0.add((Object) predicate5);
      predicate11.negate();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertEquals(61, stringBuffer0.length());
      
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm1, jSTerm3);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      String string0 = "bh-3Zt03xI*$Y";
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate1);
      Object object2 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object3 = new Object();
      Predicate.isEqual(object3);
      predicate0.negate();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      JSJshopVars.dot = (-1);
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9133036567531658
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity(1);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate6 = predicate0.or(predicate4);
      Predicate<String> predicate7 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = Predicate.isEqual(object0);
      Predicate<String> predicate10 = predicate0.and(predicate1);
      Predicate<String> predicate11 = predicate10.or(predicate1);
      Predicate<String> predicate12 = predicate10.or(predicate6);
      predicate5.and(predicate3);
      Predicate<Object> predicate13 = predicate5.and(predicate1);
      predicate13.or(predicate2);
      predicate8.negate();
      predicate11.negate();
      Predicate<String> predicate14 = predicate7.or(predicate9);
      Predicate<String> predicate15 = predicate8.negate();
      Predicate<String> predicate16 = predicate15.and(predicate12);
      predicate9.or(predicate14);
      predicate10.negate();
      jSTerm0.add((Object) predicate13);
      predicate15.negate();
      predicate16.negate();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$45/1909448762 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8708180924624367
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object0);
      Predicate<String> predicate1 = predicate0.or(predicate0);
      predicate1.test("nil");
      Predicate<String> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate2);
      predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate1.negate();
      Predicate<String> predicate5 = predicate4.negate();
      predicate0.and(predicate5);
      Predicate<String> predicate6 = predicate2.and(predicate0);
      Predicate<String> predicate7 = predicate3.negate();
      predicate0.and(predicate1);
      jSTerm0.add(object0);
      predicate2.and(predicate7);
      StringReader stringReader0 = new StringReader("w'`lR7#$%b2wc'}{c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      assertFalse(jSTerm1.isEval());
      
      predicate3.negate();
      predicate6.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertTrue(jSTerm3.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertTrue(jSTerm3.equals((Object)jSTerm2));
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isConstant());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object1 = new Object();
      Predicate<String> predicate1 = Predicate.isEqual(object1);
      Object object2 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<String> predicate2 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<String> predicate3 = predicate1.negate();
      jSTerm0.add((Object) predicate3);
      Predicate<String> predicate4 = predicate1.negate();
      predicate1.and(predicate4);
      predicate4.negate();
      Object object3 = new Object();
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate3);
      Predicate<String> predicate6 = Predicate.isEqual((Object) predicate1);
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate2.negate();
      Predicate<String> predicate9 = predicate4.or(predicate5);
      Predicate<String> predicate10 = predicate8.or(predicate3);
      Predicate<String> predicate11 = predicate0.and(predicate10);
      Predicate<String> predicate12 = predicate7.or(predicate3);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate12);
      Predicate<Object> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate13.and(predicate14);
      predicate11.or(predicate15);
      predicate6.negate();
      Object object4 = new Object();
      jSTerm0.add((Object) predicate9);
      predicate9.negate();
      predicate9.negate();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Predicate$$Lambda$46/2033028457 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4416083837896005
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(".llF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      JSJshopVars.leftBrac = (-2);
      streamTokenizer0.ttype = 1585;
      JSJshopVars.rightBrac = 1585;
      streamTokenizer0.wordChars(1585, 91);
      JSJshopVars.interrogation = (-2);
      streamTokenizer0.slashSlashComments(true);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.exclamation = 1300;
      jSSubstitution1.addElements(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.matches(jSTerm2);
      jSTerm3.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.call();
      assertTrue(jSTerm0.isVariable());
      assertEquals(1, jSTerm4.capacity());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.494199329398905
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      JSJshopVars.leftBrac = 32;
      streamTokenizer0.ttype = 32;
      JSJshopVars.rightBrac = 32;
      JSJshopVars.interrogation = 32;
      streamTokenizer0.slashSlashComments(true);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution1.addElements(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual(object3);
      Predicate<String> predicate1 = Predicate.isEqual(object3);
      predicate1.negate();
      Predicate<String> predicate2 = predicate0.negate();
      Predicate.isEqual(object3);
      Predicate<String> predicate3 = predicate1.negate();
      predicate3.and(predicate1);
      predicate2.negate();
      System.setCurrentTimeMillis(4710L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeAll(jSSubstitution0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1352402575267164
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(".llF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      JSJshopVars.leftBrac = (-2);
      streamTokenizer0.ttype = 1585;
      JSJshopVars.rightBrac = 1585;
      streamTokenizer0.wordChars(1585, 91);
      JSJshopVars.interrogation = (-2);
      streamTokenizer0.slashSlashComments(true);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm4.isFunction());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(".llF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.lastElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "0.0");
      Object object0 = new Object();
      Predicate<String> predicate1 = Predicate.isEqual((Object) streamTokenizer0);
      Object object1 = new Object();
      Object object2 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) streamTokenizer0);
      predicate0.test((Object) null);
      Predicate.isEqual((Object) streamTokenizer0);
      Predicate<String> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate1.negate();
      Object object3 = jSTerm1.clone();
      Predicate.isEqual(object3);
      Predicate<String> predicate4 = predicate2.negate();
      Predicate<String> predicate5 = predicate1.and(predicate4);
      predicate3.and(predicate5);
      predicate5.negate();
      predicate2.negate();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      jSSubstitution1.add((Object) jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9722469794234416
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity((-2017));
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ") ");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.or(predicate0);
      StringReader stringReader0 = new StringReader(") ");
      Predicate.isEqual(object0);
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      assertEquals(1, jSTerm0.size());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2148896539491203
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity(1);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate0.or(predicate3);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate6 = predicate4.negate();
      Object object1 = new Object();
      Predicate<String> predicate7 = Predicate.isEqual(object1);
      Predicate<String> predicate8 = predicate0.and(predicate1);
      Predicate<String> predicate9 = predicate5.and(predicate8);
      Predicate<String> predicate10 = predicate7.negate();
      Predicate<String> predicate11 = predicate6.or(predicate8);
      Predicate<Object> predicate12 = predicate2.and(predicate1);
      predicate3.or(predicate12);
      Predicate<String> predicate13 = predicate8.negate();
      predicate13.or(predicate11);
      Predicate<String> predicate14 = predicate4.negate();
      Predicate<String> predicate15 = predicate6.or(predicate13);
      Predicate<String> predicate16 = predicate9.and(predicate10);
      predicate14.or(predicate15);
      predicate13.negate();
      jSTerm0.add((Object) "cguAA=In}j%E?I?b");
      predicate16.negate();
      predicate13.negate();
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1935496040981333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(~L/?I1xne");
      stringReader0.reset();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("term");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "(~L/?I1xne";
      objectArray0[4] = object0;
      objectArray0[5] = (Object) jSSubstitution1;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) stringReader0;
      objectArray0[8] = object0;
      jSTerm0.toArray(objectArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(52);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<String> predicate3 = predicate0.or(predicate2);
      Predicate<String> predicate4 = predicate0.negate();
      Predicate<String> predicate5 = predicate0.negate();
      Predicate<String> predicate6 = Predicate.isEqual(object0);
      jSTerm0.addElement((Object) null);
      predicate4.negate();
      Predicate<String> predicate7 = predicate0.and(predicate1);
      Predicate.isEqual(object0);
      predicate4.and(predicate7);
      predicate6.negate();
      predicate5.or(predicate7);
      predicate3.negate();
      predicate7.negate();
      Predicate<String> predicate8 = predicate3.negate();
      predicate8.or(predicate5);
      predicate7.test("bh-3Zt03xI*$Y");
      jSTerm0.add((Object) "cgAA=In}j%E?I?b");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2963611597910563
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("T?~UB4dLtpc)UKCE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.retainAll(jSTerm1);
      jSTerm0.setSize(1144);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSJshopVars.dot = (-3);
      StringReader stringReader0 = new StringReader("4WV8\"v{F~}Y9k5 #^XXn");
      stringReader0.close();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(52);
      Object object0 = new Object();
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9072839993213795
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      String string0 = "bh-3Zt03xI*$Y";
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate.isEqual(object0);
      Object object1 = new Object();
      predicate0.negate();
      Object object2 = new Object();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 1;
      stringReader0.markSupported();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.162225544921092
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(52);
      Object object0 = new Object();
      Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate.isEqual(object0);
      String string0 = "%uvi";
      StringReader stringReader0 = new StringReader("%uvi");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "term";
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      System.setCurrentTimeMillis((-636L));
      System.setCurrentTimeMillis((-1L));
      jSSubstitution3.assignFailure();
      jSTerm0.call();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 1282;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution6 = jSTerm1.matches(jSTerm0);
      jSSubstitution6.retainAll(jSTerm0);
      JSSubstitution jSSubstitution7 = jSTerm0.matches(jSTerm1, jSSubstitution6);
      assertTrue(jSSubstitution6.fail());
      assertTrue(jSSubstitution7.fail());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 52;
      jSTerm0.ensureCapacity(52);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate2.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = predicate9.negate();
      Predicate<String> predicate11 = predicate6.or(predicate10);
      Predicate<String> predicate12 = predicate0.and(predicate1);
      Predicate<String> predicate13 = predicate6.and(predicate12);
      Predicate<String> predicate14 = predicate8.negate();
      Predicate<String> predicate15 = predicate0.negate();
      predicate5.negate();
      predicate12.negate();
      predicate14.negate();
      Predicate<String> predicate16 = predicate11.or(predicate12);
      predicate13.negate();
      Predicate<String> predicate17 = predicate16.negate();
      predicate9.or(predicate4);
      predicate15.test("bh-3Zt03xI*$Y");
      predicate17.negate();
      jSTerm0.add((Object) predicate8);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.839789586841252
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSJshopVars.dot = (-3);
      JSJshopVars.coma = (-3);
      StringReader stringReader0 = new StringReader("4WV8\"v{F~}Y9k5 #^XXn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.lowerCaseMode(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      char[] charArray0 = new char[9];
      charArray0[0] = '^';
      charArray0[1] = ')';
      charArray0[2] = '^';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.11336892717262
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity(52);
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      Predicate<String> predicate6 = predicate0.negate();
      Predicate<String> predicate7 = predicate0.negate();
      Predicate<String> predicate8 = predicate2.negate();
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = predicate9.negate();
      predicate6.or(predicate10);
      Predicate<String> predicate11 = predicate0.and(predicate1);
      predicate6.and(predicate11);
      Predicate<String> predicate12 = predicate8.negate();
      predicate0.negate();
      predicate5.negate();
      Predicate<String> predicate13 = predicate12.negate();
      predicate13.or(predicate9);
      Predicate<String> predicate14 = predicate7.negate();
      predicate2.negate();
      predicate13.or(predicate14);
      predicate11.test("bh-3Zt03xI*$Y");
      predicate0.negate();
      jSTerm0.add((Object) "cgAA=In}j%E?I?b");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      System.setCurrentTimeMillis(52);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSJshopVars.leftBrac = 52;
      System.setCurrentTimeMillis(52);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm2.matches(jSTerm3);
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm2);
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.156822323858923
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8x\"_x_qgF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      jSTerm0.lastElement();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "8.0");
      Predicate<Object> predicate1 = predicate0.negate();
      jSTerm0.firstElement();
      Predicate.isEqual((Object) "8.0");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      jSSubstitution0.removeIf(predicate2);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.matches(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm2.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5810937501718236
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSJshopVars.dot = (-5416);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.matches(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution5);
      jSTerm1.parallelStream();
      JSSubstitution jSSubstitution6 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution6.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2744747270982977
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(".llF");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm0);
      JSJshopVars.leftBrac = (-2);
      streamTokenizer0.ttype = 1585;
      JSJshopVars.rightBrac = 1585;
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSSubstitution1.addElements(jSSubstitution0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2);
      jSSubstitution2.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm0, jSSubstitution2);
      assertFalse(jSSubstitution2.fail());
      assertFalse(jSTerm1.isEval());
      assertEquals("[]", jSSubstitution3.toString());
      
      JSTerm jSTerm4 = jSTerm3.call();
      assertFalse(jSTerm4.isFunction());
      assertNotSame(jSTerm3, jSTerm0);
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      int int0 = 52;
      jSTerm0.listIterator();
      jSTerm0.ensureCapacity(52);
      String string0 = "bh-3Zt03xI*$Y";
      jSTerm0.makeEval(false);
      // Undeclared exception!
      try { 
        jSTerm0.set(52, "bh-3Zt03xI*$Y");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 52
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isFunction();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.151466403024293
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Expecting elements of the list");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm2, jSSubstitution1);
      JSSubstitution jSSubstitution3 = jSTerm2.matches(jSTerm1);
      assertTrue(jSSubstitution3.fail());
      
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution2);
      assertTrue(jSTerm4.isConstant());
      
      JSTerm jSTerm5 = jSTerm3.cloneT();
      assertFalse(jSTerm5.isVariable());
      
      JSSubstitution jSSubstitution4 = jSTerm3.matches(jSTerm0, jSSubstitution2);
      assertNotSame(jSSubstitution4, jSSubstitution2);
      assertTrue(jSSubstitution4.fail());
      assertEquals(1, jSTerm3.size());
      
      JSTerm jSTerm6 = jSTerm5.standardizerTerm();
      assertFalse(jSTerm6.isFunction());
      assertNotSame(jSTerm5, jSTerm3);
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm5.isEval());
      assertNotSame(jSTerm6, jSTerm5);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.removeAll(jSSubstitution0);
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("t;[.c.Dgd1D;Ge");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("%%% ", stringBuffer0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSJshopVars.minus = 2552;
      JSJshopVars.dot = (-1);
      JSJshopVars.coma = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.interrogation = 91;
      JSJshopVars.exclamation = 1300;
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSJshopVars.dot = (-1);
      JSJshopVars.coma = (-1);
      StringReader stringReader0 = new StringReader("4WV\"v{F~}Y9k5 #^XXn");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      int int0 = (-3);
      StringReader stringReader0 = new StringReader("4WV8\"v{F~}Y9k5 #^XXn");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[3];
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        stringReader0.read((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.0679759122939765
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity((-12));
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate0.or(predicate3);
      Predicate<String> predicate5 = predicate0.negate();
      predicate2.or(predicate3);
      Object object1 = new Object();
      Predicate<String> predicate6 = Predicate.isEqual(object1);
      Predicate<String> predicate7 = predicate0.and(predicate1);
      predicate6.negate();
      predicate5.or(predicate7);
      predicate4.negate();
      Predicate<String> predicate8 = predicate7.negate();
      Predicate<String> predicate9 = predicate4.negate();
      Predicate<String> predicate10 = predicate8.negate();
      predicate4.negate();
      predicate9.or(predicate10);
      predicate7.test("bh-3Zt03xI*$Y");
      jSTerm0.add((Object) predicate0);
      predicate6.negate();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.toStr();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) predicate7);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSJshopVars.dot = (-3);
      JSJshopVars.coma = (-3);
      char[] charArray0 = new char[3];
      StringReader stringReader0 = new StringReader("member");
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.25731864054383163
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      StringReader stringReader0 = new StringReader("(~L/?I1xne");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(~L/?I1xne");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Object object0 = new Object();
      Predicate<String> predicate0 = Predicate.isEqual((Object) "bh-3Zt03xI*$Y");
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate2);
      Predicate<String> predicate6 = predicate5.negate();
      Object object1 = new Object();
      Predicate.isEqual((Object) predicate2);
      Predicate.isEqual(object1);
      Predicate<String> predicate7 = predicate5.or(predicate6);
      Predicate<String> predicate8 = predicate0.and(predicate1);
      Predicate<String> predicate9 = predicate7.negate();
      Predicate<String> predicate10 = predicate6.or(predicate8);
      Predicate<Object> predicate11 = predicate2.and(predicate1);
      predicate4.or(predicate11);
      predicate10.negate();
      Predicate<String> predicate12 = predicate8.negate();
      Predicate<String> predicate13 = predicate10.negate();
      Predicate<String> predicate14 = predicate6.or(predicate12);
      Predicate<String> predicate15 = predicate9.and(predicate0);
      predicate13.or(predicate14);
      predicate12.negate();
      predicate15.negate();
      predicate0.negate();
      System.setCurrentTimeMillis(4710L);
      StringReader stringReader0 = new StringReader("/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0905994737794786
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      JSJshopVars.dot = 10;
      JSJshopVars.coma = 10;
      StringReader stringReader0 = new StringReader("4WV8\"v{F~}Y9k5 #^XXn");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      StringReader stringReader0 = new StringReader("(~L/?I1xne");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("(~L/?I1xne");
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.flagLevel = 63;
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Expecting elements of the lit");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      JSJshopVars.leftBrac = (-4);
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0905994737794786
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      int int0 = (-3);
      JSJshopVars.dot = (-3);
      StringReader stringReader0 = new StringReader("4WV8\"v{F~}Y9k5 #^XXn");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L");
      stringReader0.skip((-20L));
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.greaterT = 60;
      JSJshopVars.lessT = (-3260);
      JSJshopVars.apostrophe = 96;
      jSTerm0.listIterator();
      jSTerm0.ensureCapacity(96);
      jSTerm0.add((Object) "bh-3Zt03xI*$Y");
      jSTerm0.print();
      assertEquals(96, jSTerm0.capacity());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.interrogation = 91;
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.VarCounter = 392;
      JSJshopVars.whiteSpace = (-3);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSJshopVars.dot = (-5416);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSJshopVars.backquote = (-1);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "(~L/?I1xne";
      StringReader stringReader0 = new StringReader("FF4}@)e*n,RG`?");
      stringReader0.reset();
      String string1 = "[!_(?Bb3i['%";
      StringReader stringReader1 = new StringReader("[!_(?Bb3i['%");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
