/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:32:58 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = true;
      int int0 = (-2825);
      int int1 = 106;
      streamTokenizer0.wordChars((-2825), 106);
      long long0 = 0L;
      stringReader0.skip(0L);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.lowerCaseMode(true);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4199860597938185
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      String string0 = "expecting";
      jSTerm0.add((Object) "expecting");
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.541593284503016
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      JSJshopVars.flagLevel = 0;
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) null);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7057607220369255
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = jSTerm1.firstElement();
      jSTerm0.add(object0);
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis(1L);
      jSTerm3.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6679723289972967
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oSc;{#$)^PH");
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      jSTerm1.addElement(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm1);
      jSSubstitution0.iterator();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6961110580996275
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oSc;{#$)^PH");
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) streamTokenizer0;
      objectArray0[5] = (Object) streamTokenizer0;
      jSTerm0.toArray(objectArray0);
      boolean boolean0 = jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.isEval();
      boolean boolean1 = jSTerm2.isFunction();
      assertTrue(boolean1 == boolean0);
      
      jSTerm0.matches(jSTerm2, jSSubstitution1);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.432740985625438
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oSc;{#$)^PH");
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.clonePF();
      jSSubstitution0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.936682770773788
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oSc;{#$)^PH");
      jSTerm0.isGround();
      streamTokenizer1.wordChars(0, (-4));
      streamTokenizer1.wordChars(1746, 37);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isGround();
      streamTokenizer2.ordinaryChars(37, (-4));
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer0);
      jSTerm0.equals(jSTerm2);
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.clonePF();
      assertEquals(41, streamTokenizer0.ttype);
      
      jSTerm1.call();
      jSTerm0.call();
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6778658927083114
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "8y;v@OBks/dh!VK");
      jSTerm0.isGround();
      JSJshopVars.flagLevel = 2308;
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT((JSSubstitution) null);
      jSTerm1.matches(jSTerm2, (JSSubstitution) null);
      jSTerm0.standardizerTerm();
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      assertEquals("[8y;v@OBks/dh!VK, [8y;v@OBks/dh!VK]]", jSTerm0.toString());
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.497906491451203
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.370640645235503
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity((-2017));
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.318265268899535
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6204086093677565
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oSc;{#$)^PH");
      jSTerm0.isGround();
      int int0 = 1746;
      StringReader stringReader1 = new StringReader("(XTN");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.add((Object) streamTokenizer2);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2296369387291577
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.isGround();
      JSJshopVars.flagLevel = 0;
      StringReader stringReader0 = new StringReader("5dj\bGLHmMw");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.464427651816182
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "8y;v@OBks/dh!VK");
      jSTerm0.isGround();
      JSJshopVars.flagLevel = 2308;
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      StringReader stringReader0 = new StringReader("word");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm3.applySubstitutionT(jSSubstitution0);
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("[8y;v@OBks/dh!VK, [8y;v@OBks/dh!VK]]", jSTerm0.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6721708036977385
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      jSTerm1.addElement(jSTerm0);
      jSTerm0.makeConstant();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm0.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.633992576588519
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.print();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.636883163003392
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "");
      SystemInUtil.addInputLine("");
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSSubstitution0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm2.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7751986207553445
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oSc;{#$)^PH");
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals("[[oSc;{#$)^PH]]", jSSubstitution0.toString());
      
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis((-1167L));
      jSTerm1.call();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      String string0 = "%";
      StringReader stringReader0 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = true;
      jSSubstitution0.add((Object) "8^oMSNdrYhj=dwPW");
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      boolean boolean0 = true;
      int int0 = 94;
      streamTokenizer0.wordChars(94, 94);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2102221778318225
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.addElement(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1497925668968247
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      System.setCurrentTimeMillis(0L);
      jSTerm1.ensureCapacity(63);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(1294, 41);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.slashSlashComments(true);
      JSTerm jSTerm2 = jSTerm1.parseList(streamTokenizer1);
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[nil]", jSTerm2.toString());
      
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7911766841681094
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      stringReader0.skip(599L);
      stringReader0.markSupported();
      stringReader0.skip((-1));
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1);
      assertEquals(1, jSSubstitution2.size());
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(boolean0);
      
      JSTerm jSTerm2 = jSTerm1.call();
      assertEquals("[?%%%]", jSTerm2.toString());
      
      System.setCurrentTimeMillis(1490L);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertNotSame(jSTerm3, jSTerm1);
      assertTrue(jSTerm3.isVariable());
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'q';
      charArray0[1] = 'Q';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.987262952066084
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "8y;v@OBks/dh!VK");
      jSTerm0.isGround();
      jSTerm0.isVariable();
      jSTerm0.isFunction();
      jSTerm0.isVariable();
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm0.equals(jSTerm1);
      jSTerm0.capacity();
      jSTerm0.print();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      StringReader stringReader0 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.isGround();
      streamTokenizer0.ordinaryChars(960, 992);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.573003941277561
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      int int0 = (-1489);
      streamTokenizer0.wordChars((-1489), 638);
      streamTokenizer0.lowerCaseMode(true);
      JSJshopVars.exclamation = (-1);
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.206552161926179
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity((-2017));
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3804148135044927
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate1.or(predicate2);
      predicate3.or(predicate0);
      jSTerm0.removeIf(predicate0);
      StringReader stringReader0 = new StringReader("9^&BW9Z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isVariable();
      jSTerm2.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.731990606765134
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.standardizerTerm();
      jSTerm1.matches(jSTerm2, jSSubstitution2);
      jSTerm2.isGround();
      streamTokenizer1.ordinaryChars(62, 1043);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8090154023041527
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      JSJshopVars.leftPar = (-3);
      char[] charArray0 = new char[22];
      charArray0[0] = 'q';
      charArray0[1] = 'Q';
      stringReader0.read(charArray0);
      jSTerm0.isEval();
      jSTerm0.isVariable();
      streamTokenizer0.wordChars(3842, 3842);
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      jSTerm0.toStr();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4439923457092316
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SystemInUtil.addInputLine("Mpx>$p2|M1]V7^)LWZ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("?!d:@<3|A^~");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.ensureCapacity((-1));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.256010356179464
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.isGround();
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.673561441895283
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "8y;v@OBks/dh!VK");
      jSTerm0.isGround();
      JSJshopVars.flagLevel = 2308;
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(2308);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isFunction());
      
      boolean boolean1 = jSTerm2.isGround();
      assertTrue(jSTerm2.isFunction());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.873169749387895
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.isConstant();
      StringReader stringReader1 = new StringReader("- ");
      stringReader0.read();
      jSTerm0.print();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      jSTerm0.cloneT();
      jSTerm0.isGround();
      streamTokenizer0.ordinaryChars(58, 43);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.8821103874851657
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HBxk&AuYYa}e{u*N");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      stringReader0.skip((-2245L));
      streamTokenizer0.resetSyntax();
      StringReader stringReader1 = new StringReader("pPi");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.quoteChar(63);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      assertEquals(1, jSTerm1.size());
      assertNotSame(jSTerm1, jSTerm0);
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.605767408396337
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeConstant();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader0 = new StringReader("O@y]l?#AKAkV;");
      JSTerm jSTerm2 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(true);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2o((wJO");
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '6';
      charArray0[2] = '6';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      jSTerm0.makeVariable();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      assertEquals("[]", jSSubstitution0.toString());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.287365393600992
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oSc;{#$)^PH");
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm1.capacity();
      jSTerm2.print();
      jSTerm1.toStr();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm3.isGround();
      streamTokenizer1.ordinaryChars(960, (-3295));
      jSTerm0.parseList(streamTokenizer1);
      jSTerm1.clonePF();
      jSTerm3.call();
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals(1, jSTerm0.size());
      assertEquals("(oSc;{#$)^PH )", stringBuffer0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.01637576574308
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.equalT = (-2989);
      jSTerm0.add((Object) jSSubstitution1);
      StringReader stringReader0 = new StringReader("W[>3A[JU");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.matches(jSTerm2);
      int int0 = (-1489);
      streamTokenizer0.wordChars((-1489), (-1489));
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.whitespaceChars((-4), (-5331));
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) streamTokenizer1;
      objectArray0[2] = (Object) streamTokenizer1;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) stringReader0;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "+I=BF\\7R{B";
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.298702940842716
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "oSc;{#$)^PH");
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.print();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.isGround();
      jSTerm0.equals(jSTerm2);
      jSTerm1.print();
      jSTerm2.toStr();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm0.equals(jSTerm2);
      assertTrue(jSTerm1.isVariable());
      
      jSTerm0.call();
      StringBuffer stringBuffer0 = jSTerm3.toStr();
      assertEquals(14, stringBuffer0.length());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(32, (-1234));
      stringReader0.skip(0L);
      streamTokenizer1.lowerCaseMode(false);
      System.setCurrentTimeMillis(32);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("Expecting ", stringBuffer0.toString());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) stringReader0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "oSc;{#$)^PH";
      objectArray0[5] = (Object) "oSc;{#$)^PH";
      jSTerm0.toArray(objectArray0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars((-4), (-4));
      stringReader0.skip((-803));
      streamTokenizer3.lowerCaseMode(true);
      System.setCurrentTimeMillis((-2979L));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("F");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(94, 94);
      stringReader0.skip((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.lowerCaseMode(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-1));
      jSTerm0.ensureCapacity((-1));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars(94, 3118);
      streamTokenizer1.slashSlashComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(1746, 37);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.960841804955975
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.4414857625667867
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StringReader stringReader1 = new StringReader("A^I&HRJJ$gz]5N%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader1);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      jSTerm2.equals(jSTerm1);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.669437548207739
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertEquals(32, streamTokenizer1.ttype);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.665515979580288
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.ordinaryChars(41, 41);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.whitespaceChars(41, (-5331));
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) streamTokenizer1;
      objectArray0[2] = (Object) streamTokenizer1;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) stringReader0;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution1.isEmpty());
      assertFalse(jSTerm0.isEval());
      assertNotSame(jSSubstitution1, jSSubstitution0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HBxk&AuYYa}e{u*N");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar((-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-3));
      System.setCurrentTimeMillis((-3));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertTrue(jSTerm1.isConstant());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.ensureCapacity((-2017));
      JSJshopVars.equalT = (-2017);
      JSJshopVars.dot = (-1);
      JSJshopVars.semicolon = (-2017);
      JSJshopVars.coma = (-1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.8053415898278653
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oSc;{#$)^PH");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isFunction();
      Object[] objectArray0 = new Object[7];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "oSc;";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = (Object) streamTokenizer0;
      objectArray0[3] = (Object) streamTokenizer0;
      objectArray0[4] = (Object) "oSc;{#$)^PH";
      objectArray0[5] = (Object) "oSc;{#$)^PH";
      objectArray0[6] = (Object) "oSc;{#$)^PH";
      jSTerm0.toArray(objectArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(2170, 2648);
      stringReader0.skip(1444L);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HBxk&AuYYa}e{u*N");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar((-3));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.ensureCapacity((-3));
      System.setCurrentTimeMillis((-3));
      JSTerm jSTerm1 = jSTerm0.call();
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      StringReader stringReader1 = new StringReader(" Expecting word as term");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis(32);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.apostrophe = 39;
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      char[] charArray0 = new char[22];
      charArray0[0] = 'q';
      charArray0[1] = 'Q';
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }
}
