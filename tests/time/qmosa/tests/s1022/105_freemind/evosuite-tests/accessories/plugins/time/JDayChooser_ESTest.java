/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:09:46 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.ClonePlugin;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.actions.generated.instance.JiBX_bindingFactory;
import freemind.main.FreeMindApplet;
import freemind.modes.MindIcon;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.schememode.SchemeController;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.ContainerListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.text.ParsePosition;
import java.util.Comparator;
import java.util.Date;
import java.util.Locale;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.SwingConstants;
import javax.swing.border.EtchedBorder;
import javax.swing.border.LineBorder;
import javax.swing.border.SoftBevelBorder;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.GlyphView;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeCellEditor;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeCellEditor;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.ext.awt.color.ICCColorSpaceExt;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.fop.pdf.PDFInfo;
import org.apache.fop.svg.PDFDocumentGraphics2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      SystemColor systemColor0 = SystemColor.desktop;
      jDayChooser0.setForeground(systemColor0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      Font font0 = new Font("day", 46, 14);
      font0.getPSName();
      jDayChooser0.setFont(font0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1777589076283346
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-173));
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.301203533277213
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHeight();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jDayChooser0.setEnabled(true);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.setSubject("day");
      pDFInfo0.getCreationDate();
      jDayChooser0.setMinSelectableDate((Date) null);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isDoubleBuffered();
      jDayChooser_DecoratorButton0.isFocusable();
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1326303323964093
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      String string0 = "% I:Y";
      jDayChooser0.isFocusOwner();
      jDayChooser0.requestFocus();
      jDayChooser0.setEnabled(false);
      JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      String string1 = "#b\\cXDN^#\"g/p;S)(x";
      // Undeclared exception!
      try { 
        unmarshallingContext0.attributeDate("#bcXDN^#\"g/p;S)(x", "JDayChooser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 335;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(335, 335, 335, 335, 335, 335);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getComponentPopupMenu();
      int int1 = 10;
      FocusEvent focusEvent0 = null;
      try {
        focusEvent0 = new FocusEvent((Component) null, 10, false, jDayChooser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1815269804617574
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Dimension dimension0 = gridBagLayout0.maximumLayoutSize(jDayChooser0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setMaximumSize(dimension0);
      jDayChooser0.setDay((-2932));
      jDayChooser0.setMaxDayCharacters((-67));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.205447973345968
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke("1");
      jDayChooser0.unregisterKeyboardAction(keyStroke0);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isDecorationBordersVisible();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setAutoscrolls(true);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      assertEquals(210, color0.getRed());
      
      Date date0 = jDayChooser0.getMaxSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Insets insets0 = jDayChooser_DecoratorButton0.getMargin();
      jDayChooser0.getInsets(insets0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(26);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      Date date1 = jDayChooser0.setMinSelectableDate((Date) null);
      assertNotSame(date1, date0);
      
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1708624547780904
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(5283);
      MockDate mockDate0 = new MockDate();
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(5283);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Insets insets0 = jDayChooser_DecoratorButton0.getMargin();
      Insets insets1 = softBevelBorder0.getBorderInsets((Component) jDayChooser0, insets0);
      Insets insets2 = softBevelBorder0.getBorderInsets((Component) jDayChooser_DecoratorButton0, insets1);
      EtchedBorder etchedBorder0 = new EtchedBorder();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getInsets(insets2);
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.drawWeeks();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.20688236434912
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setYear(5283);
      MockDate mockDate0 = new MockDate();
      Color color0 = Color.darkGray;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(5283);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Insets insets0 = jDayChooser_DecoratorButton0.getMargin();
      Insets insets1 = softBevelBorder0.getBorderInsets((Component) jDayChooser0, insets0);
      softBevelBorder0.getBorderInsets((Component) jDayChooser_DecoratorButton0, insets1);
      EtchedBorder etchedBorder0 = new EtchedBorder();
      LineBorder lineBorder0 = new LineBorder(color0, 114, false);
      jDayChooser0.setDay(1081);
      jDayChooser0.setMaxDayCharacters(4);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.setDay(1081);
      assertEquals(4, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setYear(23);
      MockDate mockDate0 = new MockDate();
      MockDate mockDate1 = new MockDate(168, 168, (-1437625606));
      mockDate0.clone();
      mockDate0.getTime();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 228, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.getDecorationBackgroundColor();
      int int0 = SwingConstants.SOUTH_EAST;
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("OuZ)", styleContext_NamedStyle0);
      StyleContext.NamedStyle styleContext_NamedStyle2 = styleContext0.new NamedStyle();
      AttributeSet attributeSet0 = styleContext_NamedStyle2.copyAttributes();
      defaultStyledDocument0.getFont(attributeSet0);
      Font font0 = Font.decode((String) null);
      jDayChooser0.setFont(font0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1336666818916004
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addListeners(0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) jDayChooser0;
      objectArray0[1] = (Object) jDayChooser0;
      objectArray0[2] = (Object) jDayChooser0;
      objectArray0[3] = (Object) jDayChooser0;
      JTree jTree0 = new JTree(objectArray0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellEditor defaultTreeCellEditor0 = new DefaultTreeCellEditor(jTree0, defaultTreeCellRenderer0, (TreeCellEditor) null);
      Component component0 = defaultTreeCellEditor0.getTreeCellEditorComponent(jTree0, (Object) null, true, true, false, 90);
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(component0, (-2703), (-5441L), (-2703), 164, 'q', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.164716064020948
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, Integer.MIN_VALUE, true);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      focusEvent0.paramString();
      AWTEventMulticaster.remove((HierarchyListener) null, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(1467);
      ActionEvent actionEvent0 = new ActionEvent(hierarchyListener1, (-1767), "org.mozilla.javascript.tools.debugger.Main");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.AWTEventMulticaster cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setFocus();
      jDayChooser0.getDayPanel();
      StyledEditorKit styledEditorKit0 = new StyledEditorKit();
      styledEditorKit0.getCharacterAttributeRun();
      GlyphView glyphView0 = null;
      try {
        glyphView0 = new GlyphView((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.text.GlyphView", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ClonePlugin clonePlugin0 = new ClonePlugin();
      MindMapMode mindMapMode0 = new MindMapMode();
      SchemeController schemeController0 = null;
      try {
        schemeController0 = new SchemeController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 345;
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocusable(false);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.drawDays();
      jDayChooser0.drawWeeks();
      String[] stringArray0 = new String[8];
      jDayChooser0.getVerifyInputWhenFocusTarget();
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      stringArray0[6] = "day";
      stringArray0[7] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2063644312987516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      long long0 = 2448L;
      Color color0 = Color.MAGENTA;
      NamedProfileCache namedProfileCache0 = NamedProfileCache.getDefaultCache();
      String string0 = "C";
      ICCColorSpaceExt iCCColorSpaceExt0 = namedProfileCache0.request("C");
      float[] floatArray0 = new float[7];
      jDayChooser0.setMonth(iCCColorSpaceExt0.RELATIVE_COLORIMETRIC);
      namedProfileCache0.isDone(jDayChooser0.DAY_PROPERTY);
      namedProfileCache0.put(string0, iCCColorSpaceExt0);
      float float0 = 0.0F;
      String string1 = "+Q|G";
      namedProfileCache0.isDone(string1);
      floatArray0[0] = float0;
      floatArray0[1] = (float) iCCColorSpaceExt0.AUTO;
      jDayChooser0.removeNotify();
      floatArray0[2] = (float) long0;
      floatArray0[3] = (float) iCCColorSpaceExt0.SATURATION;
      floatArray0[4] = (float) iCCColorSpaceExt0.AUTO;
      floatArray0[5] = (float) iCCColorSpaceExt0.SATURATION;
      String string2 = "__z~Sh =c#|";
      namedProfileCache0.put(string2, iCCColorSpaceExt0);
      int int0 = 49;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, int0);
      jDayChooser0.focusGained(focusEvent0);
      boolean boolean0 = true;
      JDayChooser jDayChooser1 = new JDayChooser(boolean0);
      int int1 = 6;
      jDayChooser1.setDay(int1);
      int int2 = 35;
      String string3 = "p[:{EJnp";
      ActionEvent actionEvent0 = new ActionEvent(string1, int2, string3);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      jDayChooser0.setLocale(locale0);
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAlignmentY((-648.35F));
      jDayChooser0.repaint();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      MockDate mockDate0 = new MockDate();
      // Undeclared exception!
      try { 
        MockDate.parse("bv>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2404518496976933
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 345, 345, 312, 345, '^');
      jDayChooser0.keyPressed(keyEvent0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      MindIcon mindIcon0 = MindIcon.factory("day");
      mindIcon0.getKeyStroke();
      MindIcon.factory("day");
      JiBX_bindingFactory.getInstance();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDay(6);
      jDayChooser0.getDaysInMonth();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      StyleContext.NamedStyle styleContext_NamedStyle0 = styleContext0.new NamedStyle();
      StyleContext.NamedStyle styleContext_NamedStyle1 = styleContext0.new NamedStyle("", styleContext_NamedStyle0);
      styleContext_NamedStyle0.copyAttributes();
      Font font0 = defaultStyledDocument0.getFont(styleContext_NamedStyle1);
      jDayChooser0.setFont(font0);
      assertEquals(6, jDayChooser0.getDay());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawDays();
      jDayChooser0.getInputMap();
      Color color0 = Color.red;
      jDayChooser0.setFocus();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      JiBX_bindingFactory.getInstance();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      // Undeclared exception!
      try { 
        unmarshallingContext0.attributeDate("day", "day");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jibx.runtime.impl.UnmarshallingContext", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1700989912782065
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.updateUI();
      jDayChooser0.getMinSelectableDate();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = true;
      PDFDocumentGraphics2D pDFDocumentGraphics2D0 = new PDFDocumentGraphics2D();
      PDFDocumentGraphics2D pDFDocumentGraphics2D1 = null;
      try {
        pDFDocumentGraphics2D1 = new PDFDocumentGraphics2D(pDFDocumentGraphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.ext.awt.g2d.AbstractGraphics2D", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1338126229071066
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setAutoscrolls(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getMaxSelectableDate();
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      jDayChooser0.removeContainerListener((ContainerListener) null);
      jDayChooser0.setDecorationBordersVisible(true);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.199985931810996
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDay();
      jDayChooser0.getMaxDayCharacters();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1767), false);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      focusEvent0.paramString();
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, "j");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1286651860090515
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1028, false);
      focusEvent0.paramString();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.remove((HierarchyListener) null, (HierarchyListener) null);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, 1028);
      jDayChooser0.focusGained(focusEvent0);
      jDayChooser0.setDay(1046);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent1, 7, "freemind.modes.mindmapmode.actions.PasteAction$ImageFlavorHandler");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.PINK;
      jDayChooser0.setWeekdayForeground(color0);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      Date date0 = jDayChooser0.defaultMaxSelectableDate;
      jDayChooser0.defaultMinSelectableDate = date0;
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.getDayPanel();
      Color color0 = jDayChooser0.getBackground();
      jDayChooser0.isDayBordersVisible();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("");
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 4;
      floatArray0[1] = (float) 2;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) 4;
      // Undeclared exception!
      try { 
        color0.getComponents((ColorSpace) null, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.1237333436013732
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getVerifyInputWhenFocusTarget();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      defaultFocusTraversalPolicy0.setImplicitDownCycleTraversal(true);
      jDayChooser0.setFocusTraversalPolicy(defaultFocusTraversalPolicy0);
      jDayChooser0.getFocusTraversalKeys(0);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      Color color0 = Color.darkGray;
      SoftBevelBorder softBevelBorder0 = new SoftBevelBorder(0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Insets insets0 = jDayChooser_DecoratorButton0.getMargin();
      Insets insets1 = softBevelBorder0.getBorderInsets((Component) jPanel0, insets0);
      EtchedBorder etchedBorder0 = new EtchedBorder();
      etchedBorder0.getBorderInsets((Component) jDayChooser0, insets1);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDecorationBordersVisible(true);
      jDayChooser0.updateUI();
      System.setCurrentTimeMillis(2);
  }
}
