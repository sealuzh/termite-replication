/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:38:05 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1622924997430673
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.colon();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.mod();
      xPathLexer0.mod();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.number();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-2735));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8539879161196617
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) ($)");
      xPathLexer1.setPreviousToken(token0);
      Token token2 = xPathLexer1.doubleColon();
      assertEquals("[ ", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer1.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) ($)", string0);
      
      Token token4 = xPathLexer0.star();
      assertEquals("S", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals("/", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer1.rightParen();
      assertEquals("1", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals("[", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("3)", token9.getTokenText());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals(".", token10.getTokenText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.727274895013307
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      Token token0 = xPathLexer0.colon();
      String string0 = token0.toString();
      assertEquals("[ (18) (B)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("sSFTh*");
      Token token1 = new Token(18, "[ (18) (B)", 18, 18);
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("^w", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("0SvIO06A?7*");
      xPathLexer2.pipe();
      xPathLexer2.colon();
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.consume(1356);
      xPathLexer2.div();
      Token token4 = xPathLexer2.pipe();
      assertEquals("?", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("s", token5.getTokenText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.283733797214921
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("W8${,z\"fsLHqS");
      xPathLexer0.and();
      xPathLexer0.pipe();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.whitespace();
      xPathLexer0.consume((-1208));
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8445615232675234
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bjfHMO)");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9500429329990387
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) ($)");
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.doubleColon();
      xPathLexer1.plus();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.at();
      xPathLexer1.colon();
      xPathLexer1.equals();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer1.nextToken();
      xPathLexer0.consume(2977);
      assertEquals("$#Sq/{[.i?x", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8186604227231333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.colon();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("sSFTh*");
      Token token1 = new Token(18, "[ (18) (B)", 18, 18);
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("0SvIO06A?7*");
      xPathLexer2.pipe();
      xPathLexer2.colon();
      xPathLexer1.and();
      xPathLexer2.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.consume(77);
      assertNotSame(xPathLexer0, xPathLexer2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7508843374420835
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.operatorName();
      String string0 = token0.toString();
      assertEquals("[ (3) (B)", string0);
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("z", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("^w", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      String string1 = token3.toString();
      assertEquals("[ (16) (*)", string1);
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("_RL", token4.getTokenText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8178300344994813
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.colon();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("sSFTh*");
      Token token1 = new Token(18, "[ (18) (B)", 18, 18);
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("0SvIO06A?7*");
      xPathLexer2.pipe();
      xPathLexer2.colon();
      xPathLexer1.and();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer2.consume(18);
      assertNotSame(xPathLexer2, xPathLexer3);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6189150917676396
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume();
      xPathLexer0.consume(2205);
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.LA(107);
      Token token0 = xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.doubleColon();
      xPathLexer1.hasMoreChars();
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.literal();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.nextToken();
      xPathLexer1.consume(55);
      assertNotSame(xPathLexer1, xPathLexer2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7724481573021829
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.endPosition();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      Token token0 = xPathLexer1.whitespace();
      token0.toString();
      Token token1 = xPathLexer1.pipe();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer1.doubleColon();
      xPathLexer0.hasMoreChars();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.pipe();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.slashes();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.literal();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer2.nextToken();
      Token token2 = xPathLexer0.and();
      assertNull(token2);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9804154248781964
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-<[<~`ZtO>.c9a");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("<", token0.getTokenText());
      assertEquals(7, token0.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.94926754316141
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      Token token0 = xPathLexer0.colon();
      assertEquals("B", token0.getTokenText());
      assertEquals(18, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (15) (z)", string0);
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("^w", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("8J)}ULI6RML");
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.pipe();
      Token token3 = xPathLexer2.literal();
      assertNull(token3);
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      xPathLexer2.identifierOrOperatorName();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("A_RL|/0@&|@k1", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer4.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer3.not();
      assertEquals(23, token8.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3919537896274934
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      xPathLexer0.operatorName();
      xPathLexer0.and();
      Token token0 = xPathLexer0.at();
      assertEquals("$", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      char char0 = xPathLexer1.LA(100);
      assertEquals('\uFFFF', char0);
      
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken((Token) null);
      Token token2 = xPathLexer3.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertTrue(boolean0);
      
      Token token3 = xPathLexer2.colon();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer1.and();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("#Sq/{[.i?x", token4.getTokenText());
      
      Token token5 = xPathLexer4.nextToken();
      assertEquals((-1), token5.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6015782513400938
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.consume(35);
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.star();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.setXPath("W8${,z\"fsLHqS");
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.and();
      Token token6 = xPathLexer0.getPreviousToken();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.pipe();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("8", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(26, token8.getTokenType());
      assertEquals("$", token8.getTokenText());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals("{,", token9.getTokenText());
      assertEquals(19, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("z", token10.getTokenText());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      assertEquals("\"", token11.getTokenText());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8856111207623418
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.operatorName();
      String string0 = token0.toString();
      assertEquals("[ (3) (B)", string0);
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      assertEquals("z", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer2.setXPath("\"E1.bYU9fX");
      xPathLexer1.and();
      xPathLexer1.getPreviousToken();
      xPathLexer0.pipe();
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer2.dots();
      assertEquals("\"", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("w", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      xPathLexer0.consume(18);
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer2.div();
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.890074605939706
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.setXPath("W8${,z\"fsLHqS");
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.pipe();
      assertEquals("W", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.colon();
      assertEquals("$", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('&');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.04599062618212
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "]T<#2)Q?]R";
      XPathLexer xPathLexer0 = new XPathLexer("]T<#2)Q?]R");
      xPathLexer0.identifier();
      xPathLexer0.consume((-662));
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7520539799211852
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.mod();
      xPathLexer0.plus();
      xPathLexer0.hasMoreChars();
      xPathLexer1.hasMoreChars();
      xPathLexer1.doubleColon();
      xPathLexer0.colon();
      xPathLexer1.at();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.literal();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer2.consume(5);
      assertNotSame(xPathLexer2, xPathLexer0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8857162208185918
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) ($)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("#", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) ($)");
      xPathLexer1.setPreviousToken(token0);
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("[ ", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[\rKMuhOB");
      Token token3 = xPathLexer2.pipe();
      assertEquals("[", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer1.literal();
      assertNotNull(token4);
      assertEquals("13) ", token4.getTokenText());
      assertEquals(27, token4.getTokenType());
      
      xPathLexer3.literal();
      xPathLexer1.identifierOrOperatorName();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("Sq/{[.i?x", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer1.equals();
      assertEquals("$", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2783048396490257
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]T<#2)Q?]R");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      xPathLexer0.whitespace();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("#2", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("?", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("]R", token6.getTokenText());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('R', char0);
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.67138992691063
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bjfHMO)");
      Token token0 = xPathLexer0.colon();
      token0.toString();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("bjfHMO)");
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-557));
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7326817859953703
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      int int0 = xPathLexer0.endPosition();
      assertEquals(18, int0);
      
      Token token0 = xPathLexer0.colon();
      String string0 = token0.toString();
      assertEquals("[ (18) (B)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("sSFTh*");
      Token token1 = new Token(18, "[ (18) (B)", 18, 18);
      Token token2 = xPathLexer0.nextToken();
      assertEquals("z", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals("^w", token3.getTokenText());
      assertEquals(22, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("0SvIO06A?7*");
      xPathLexer2.colon();
      xPathLexer1.and();
      xPathLexer2.div();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("*", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9052161857973686
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.colon();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("s`SF'T*");
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("0SvIO06A?7*");
      xPathLexer2.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.nextToken();
      xPathLexer3.consume((-276));
      // Undeclared exception!
      try { 
        xPathLexer3.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.leftParen();
      xPathLexer0.consume((-888));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.661366815324857
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.LA(18);
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.pipe();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9764473797665558
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bjfHMO)");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("b", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("j", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("f", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals("H", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      String string0 = token4.toString();
      assertEquals("[ (1) (M)", string0);
      
      xPathLexer0.setXPath("bjfHMO)");
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.pipe();
      assertEquals("b", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("j", token6.getTokenText());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("fHMO", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      xPathLexer0.consume(4);
      xPathLexer0.div();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.393205859600835
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.consume();
      xPathLexer0.consume(2205);
      xPathLexer0.setXPath("com.werken.saxpathToken");
      char char0 = xPathLexer0.LA(107);
      assertEquals('\uFFFF', char0);
      
      Token token0 = xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer1.hasMoreChars();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer1.and();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer0.rightParen();
      assertEquals("m", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals(".", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("we", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer2.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals("r", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.845989905719393
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8394356906448848
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.consume(35);
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.setXPath("W8${,z\"fsLHqS");
      xPathLexer0.and();
      xPathLexer0.getPreviousToken();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.consume((-1386));
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5120159438542
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]T<#2)Q?]R");
      xPathLexer0.identifier();
      xPathLexer0.consume(0);
      xPathLexer0.rightParen();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.doubleColon();
      token0.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.at();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer("[ (19) (2))");
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token1);
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer1.operatorName();
      assertNull(token2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0920555502882006
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "kc<}& YWE";
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.consume((-872));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.922316752607046
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.consume(857);
      xPathLexer0.setXPath(") (");
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8865036339051326
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
      
      xPathLexer0.div();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.consume();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(0);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8868080861778673
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Bz^w*A_RL|/0@&|@k1");
      xPathLexer0.endPosition();
      Token token0 = xPathLexer0.leftBracket();
      token0.toString();
      xPathLexer0.operatorName();
      String string0 = token0.toString();
      assertEquals("[ (3) (B)", string0);
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("z", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("^w", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      token3.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      String string1 = token3.toString();
      assertEquals("[ (16) (*)", string1);
      
      xPathLexer0.identifier();
      xPathLexer0.at();
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("/", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals("0", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("&|@k1", token6.getTokenText());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7671338180940224
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.leftParen();
      assertEquals("$", token0.getTokenText());
      
      xPathLexer0.consume(35);
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      xPathLexer1.setXPath("\"E1.bYU9fX");
      xPathLexer0.and();
      xPathLexer1.getPreviousToken();
      Token token5 = xPathLexer1.pipe();
      assertEquals("\"", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.dots();
      assertEquals("E", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals(31, token8.getTokenType());
      assertEquals("1.", token8.getTokenText());
      
      xPathLexer0.consume(69);
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("bY", token9.getTokenText());
      
      xPathLexer0.div();
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.227689573081223
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("PnYhS`hNo");
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.dots();
      xPathLexer0.number();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume();
      assertEquals("PnYhS`hNo", xPathLexer0.getXPath());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9543337984063291
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.div();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      xPathLexer0.consume();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.setXPath("a(S;Rp$.HwcOef");
      Token token6 = xPathLexer0.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals("(", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.isIdentifierChar(')');
      Token token9 = xPathLexer0.comma();
      assertEquals("S", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.460229445712964
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.and();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.endPosition();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      xPathLexer0.minus();
      xPathLexer0.minus();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3316858974867296
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]T<#2)Q?]R");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      xPathLexer0.consume(0);
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals("<", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("2", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(")Q", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("?", token7.getTokenText());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals("]R", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6511351440615436
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-516));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0761281701120717
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "kc<}& YWE";
      XPathLexer xPathLexer0 = new XPathLexer("kc<}& YWE");
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.mod();
      xPathLexer0.colon();
      xPathLexer0.literal();
      xPathLexer0.consume((-872));
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0890821810182727
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.leftParen();
      token0.toString();
      xPathLexer0.star();
      Token token1 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      xPathLexer0.dollar();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.minus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.mod();
      assertNull(token2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.898689142131915
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.not();
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(7, int0);
      
      xPathLexer0.div();
      xPathLexer0.and();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.star();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      xPathLexer0.identifier();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      Token token12 = xPathLexer0.equals();
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.422820433195838
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.consume();
      xPathLexer0.consume(2205);
      xPathLexer0.setXPath(") (");
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.minus();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.rightBracket();
      xPathLexer1.minus();
      xPathLexer1.not();
      xPathLexer1.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-244));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.5556945977639067
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bjfHMO)");
      Token token0 = xPathLexer0.colon();
      String string0 = token0.toString();
      assertEquals("[ (18) (b)", string0);
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("bjfHMO)");
      Token token2 = xPathLexer0.leftParen();
      assertEquals("f", token2.getTokenText());
      
      Token token3 = xPathLexer1.slashes();
      assertEquals("b", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("H", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("M", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("O", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(")", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      Token token8 = xPathLexer2.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("c", token8.getTokenText());
      
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("o", token9.getTokenText());
      
      Token token10 = xPathLexer1.rightBracket();
      assertEquals("j", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer2.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer1.not();
      assertEquals("f", token12.getTokenText());
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      
      xPathLexer2.LA(1);
      xPathLexer2.operatorName();
      Token token14 = xPathLexer1.dots();
      assertEquals(13, token14.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3179585049243805
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("bjfHMO)");
      Token token0 = xPathLexer0.not();
      token0.toString();
      token0.toString();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.comma();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.LA(2080);
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1253177896772533
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("PnYhS`hNo");
      Token token0 = xPathLexer0.equals();
      assertEquals("P", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals("n", token1.getTokenText());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("h", token3.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.dots();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      xPathLexer0.pipe();
      xPathLexer0.star();
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer0.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.star();
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.hasMoreChars();
      xPathLexer0.and();
      xPathLexer0.consume();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      xPathLexer0.not();
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('u');
      assertTrue(boolean0);
      
      xPathLexer0.operatorName();
      Token token13 = xPathLexer0.star();
      assertEquals(20, token13.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.7381437598286291
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.colon();
      xPathLexer0.equals();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.nextToken();
      Token token1 = xPathLexer1.or();
      assertNull(token1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.791497762032459
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.mod();
      Token token0 = xPathLexer0.plus();
      assertEquals("#", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.hasMoreChars();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
      
      Token token1 = xPathLexer1.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer1.and();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("[", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.rightParen();
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6909741352352925
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]T<#2)Q?]R");
      XPathLexer xPathLexer1 = new XPathLexer("F5</1SPuD+?gvw53ep");
      Token token0 = xPathLexer1.colon();
      String string0 = token0.toString();
      assertEquals("[ (18) (F)", string0);
      
      Token token1 = xPathLexer1.star();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.comma();
      Token token3 = xPathLexer1.pipe();
      String string1 = token3.toString();
      assertEquals("[ (17) (<)", string1);
      
      Token token4 = xPathLexer1.rightParen();
      assertEquals("/", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer1.identifier();
      xPathLexer1.setPreviousToken(token5);
      Token token6 = xPathLexer0.doubleColon();
      xPathLexer1.at();
      xPathLexer0.getPreviousToken();
      token2.toString();
      String string2 = token6.toString();
      assertEquals("[ (19) (T<)", string2);
      
      String string3 = token2.toString();
      assertEquals("[ (32) (])", string3);
      
      xPathLexer0.relationalOperator();
      xPathLexer1.and();
      Token token7 = xPathLexer1.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer1.at();
      assertEquals("?", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer1.equals();
      assertEquals("g", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token1);
      assertEquals(20, token1.getTokenType());
      assertEquals("5", token1.getTokenText());
      
      xPathLexer1.consume();
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("#", token10.getTokenText());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8804282873932032
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) ($)");
      xPathLexer1.setPreviousToken(token0);
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("[ ", token2.getTokenText());
      
      xPathLexer0.at();
      String string0 = token0.toString();
      assertEquals("[ (13) ($)", string0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer1.equals();
      assertEquals("(", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("{[.i?x", token8.getTokenText());
      
      xPathLexer1.pipe();
      Token token9 = xPathLexer0.pipe();
      assertEquals("{", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3381015806878813
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("]T<#2)Q?]R");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume(0);
      Token token1 = xPathLexer0.rightParen();
      assertEquals("]", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      xPathLexer0.whitespace();
      Token token3 = xPathLexer0.pipe();
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("2)", token4.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.whitespace();
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("]", token6.getTokenText());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.div();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3947095151831044
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) ($)");
      xPathLexer1.setPreviousToken(token0);
      xPathLexer1.doubleColon();
      token0.toString();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.at();
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      xPathLexer1.isIdentifierStartChar('\\');
      xPathLexer2.doubleColon();
      Token token1 = xPathLexer2.and();
      assertNull(token1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8687799964952048
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer1.comma();
      assertEquals(32, token3.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.setXPath("2");
      xPathLexer0.and();
      xPathLexer1.getPreviousToken();
      xPathLexer1.pipe();
      Token token4 = xPathLexer1.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer2 = new XPathLexer("W8${,z\"fsLHqS");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.consume(1);
      xPathLexer0.div();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer2.not();
      assertEquals("$", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      boolean boolean0 = xPathLexer0.isIdentifierChar('z');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.6373506793208
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("VX1RVy!L.p");
      Token token0 = xPathLexer0.colon();
      token0.toString();
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.comma();
      token1.toString();
      Token token2 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.at();
      xPathLexer0.getPreviousToken();
      token2.toString();
      token3.toString();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.identifier();
      xPathLexer0.at();
      xPathLexer0.equals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.consume();
      Token token4 = xPathLexer0.operatorName();
      assertNull(token4);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.4110840528630249
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9777297271304093
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("#", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) ($)");
      xPathLexer1.setPreviousToken(token0);
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("[ ", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("S", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (13) ($)", string0);
      
      Token token4 = xPathLexer0.star();
      assertEquals("q", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer1.nextToken();
      assertEquals("(", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      xPathLexer1.consume(124);
      Token token8 = xPathLexer1.rightBracket();
      assertEquals(4, token8.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9376751758936521
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.div();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Zc&YXk.tw'}z");
      xPathLexer1.operatorName();
      xPathLexer0.div();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals("Z", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer1.consume(102);
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer1.star();
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8914157941663694
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token4);
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.492531939118463
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.consume(35);
      xPathLexer0.consume(35);
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.mod();
      xPathLexer0.whitespace();
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer1.notEquals();
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token6 = xPathLexer3.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(",H1?4}@_+uT-a4");
      xPathLexer4.div();
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0929419045201723
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.960938109715165
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("$#Sq/{[.i?x");
      Token token0 = xPathLexer0.dots();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer1 = new XPathLexer("[ (13) ($)");
      xPathLexer1.setPreviousToken(token0);
      Token token1 = xPathLexer1.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("[ ", token1.getTokenText());
      
      Token token2 = xPathLexer1.plus();
      assertEquals("(", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (13) ($)", string0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.identifier();
      assertEquals("q", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals("/", token5.getTokenText());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("1", token6.getTokenText());
      
      Token token7 = xPathLexer1.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("3", token7.getTokenText());
      
      xPathLexer0.pipe();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals("[", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
      
      xPathLexer1.rightParen();
      Token token10 = xPathLexer0.pipe();
      assertEquals(".", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      assertEquals(" (", token11.getTokenText());
      
      Token token12 = xPathLexer1.rightParen();
      assertEquals("$", token12.getTokenText());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.3147277672036295
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.0861264186338717
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token1);
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("rmAt<,IsN|R:GrOS");
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.8898281577711917
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.pipe();
      xPathLexer0.at();
      xPathLexer0.operatorName();
      xPathLexer0.and();
      xPathLexer0.star();
      xPathLexer0.dots();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
