/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:47:06 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.528413826757499
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 127L;
      Range range0 = Range.of(127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long1 = (-24L);
      Range.of((-24L), 127L);
      // Undeclared exception!
      try { 
        Range.parseRange("$VALUES", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $VALUES into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.409219584492206
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      long long0 = (-4218L);
      Range range0 = Range.of((-4218L));
      range0.spliterator();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.299145180131708
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-18L));
      range0.spliterator();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.583083582667372
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.ofLength(9223372036854775805L);
      Range.of((-4538L), (-4538L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775138L, (-1280L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1280 would make range [9223372036854775138 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.880556069723468
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775138L, 9223372036854775138L);
      range0.startsBefore(range0);
      Range range1 = Range.of(9223372036854775138L, 9223372036854775138L);
      range0.isEmpty();
      Range.ofLength(9223372036854775138L);
      // Undeclared exception!
      try { 
        range0.complement(range1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.127578693022535
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(2705L);
      range0.split(2705L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854710272L, 9223372036854710272L);
      Range range2 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 65535L, 9223372036854775807L);
      range1.complement(range2);
      Range range4 = Range.of(65535L);
      List<Range> list0 = range3.complement(range4);
      range3.complementFrom(list0);
      Range.ofLength(175L);
      range3.asRange();
      Range.Builder range_Builder0 = new Range.Builder(1579L);
      range_Builder0.expandEnd(9223372036854710272L);
      Range range5 = range_Builder0.build();
      Range range6 = Range.ofLength(65535L);
      range6.split(1353L);
      Object object0 = new Object();
      boolean boolean0 = range5.equals(object0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7386426191761926
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range range1 = Range.ofLength(4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.split(4294967295L);
      range1.split(4294967295L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.022174312452111
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(0L, 0L);
      boolean boolean0 = range1.intersects(range0);
      Range range2 = Range.ofLength(0L);
      long long0 = range2.getBegin();
      assertEquals(0L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 0L, 1784L);
      range_Builder0.shift(0L);
      Range range3 = range_Builder0.build();
      range3.iterator();
      boolean boolean1 = range0.isSubRangeOf(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean1);
      
      Range.ofLength(1784L);
      boolean boolean2 = range0.startsBefore(range3);
      assertFalse(boolean2 == boolean0);
      assertFalse(range0.isEmpty());
      
      Range range4 = Range.ofLength(1784L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range4.getEnd(range_CoordinateSystem2);
      assertEquals(1784L, long1);
      
      Range range5 = range3.asRange();
      assertNotSame(range5, range1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.09059343694952
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of((-18L));
      Spliterator<Long> spliterator0 = range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range range2 = Range.of((-18L));
      Range range3 = range2.asRange();
      boolean boolean0 = range0.endsBefore(range3);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.expandEnd((-1607L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getBegin(range_CoordinateSystem1);
      assertEquals((-2147483648L), long0);
      
      Range.of((-1607L), 255L);
      boolean boolean1 = range0.equals(spliterator0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5067644920221563
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.iterator();
      range0.getLength();
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=4.056907082241964
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(2705L);
      range0.split(2705L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854710272L;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854710272L, 9223372036854710272L);
      long long1 = 65535L;
      Range range2 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 65535L, 9223372036854775807L);
      range1.complement(range2);
      Range range4 = Range.of(65535L);
      range4.split(1L);
      List<Range> list0 = range3.complement(range4);
      range3.complementFrom(list0);
      Range.ofLength(175L);
      range3.asRange();
      long long2 = 1579L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6809181348888886
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-539L), (-539L));
      long long0 = 4294965942L;
      Range range1 = Range.ofLength(4294965942L);
      range0.endsBefore(range1);
      Range.of(656L, 656L);
      try { 
        Long.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.62672249369286
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of((-128L));
      Range.ofLength(1508L);
      Range.of(range_CoordinateSystem0, 1508L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1814L, 209L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.554830868289439
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-128L));
      Range.of(range_CoordinateSystem0, 4406L, 4294967295L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.550202727019722
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1353L;
      Range.of(range_CoordinateSystem0, 0L, 1353L);
      Range.of(range_CoordinateSystem0, 441L, 65535L);
      Range.of(3733L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854775807L, (-693L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -694 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.7602618719707355
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of((-361L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-523L), (-67L));
      Range.ofLength(9223372036854775790L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("JR6*.d0EU=o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.JR6*.d0EU=o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6349532852735287
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-128L);
      Range range1 = Range.of(range_CoordinateSystem1, (-128L), (-128L));
      range0.intersection(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 65535L, 876L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 0L;
      range_Builder0.expandEnd((-211L));
      range_Builder0.expandEnd(1L);
      range_Builder0.shift(0L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.725926589313608
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(65535L);
      range_Builder0.expandBegin(304L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.contractBegin((-1271L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-9223372036854772013L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2368L, (-9223372036854772013L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.724941629979284
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.of(127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2379L), 65535L);
      Range range0 = Range.of(0L);
      range0.getLength();
      Range.of(0L, 127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3132129167647393
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 9223372036854775138L;
      Range range0 = Range.of(2300L, 9223372036854775138L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.parseRange("$VALUES", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse $VALUES into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.7401879981746897
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(3706L, 3706L);
      Range range1 = Range.of(242L, 242L);
      range0.split(242L);
      Range range2 = range1.asRange();
      range2.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range2.isEmpty();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.9785825921201985
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-201L), (-201L));
      Range range1 = Range.of((-201L));
      range1.getEnd();
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      long long0 = 4294967295L;
      Range range2 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 2231L;
      range2.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range1.split((-201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.5078498073572075
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = 127L;
      Range.Builder range_Builder0 = new Range.Builder(127L, 9223372036854775807L);
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854724394L, 9223372036854724394L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("UTF-8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.UTF-8
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6891342104608156
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of((-361L), 0L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of((-523L), (-67L));
      Range.ofLength(9223372036854775807L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("JR6*.d0EU=o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.JR6*.d0EU=o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.7443905190889817
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-201L), (-201L));
      Range range0 = Range.of((-201L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(4294967295L);
      long long0 = 255L;
      Range range1 = Range.of(range_CoordinateSystem1, (-201L), 255L);
      range1.intersection(range0);
      range0.spliterator();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(32767L, (-201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.815905709456989
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-361L), 0L);
      Range range1 = Range.of((-361L));
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range1.complement(range2);
      range0.complementFrom(list0);
      range0.isSubRangeOf(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2825L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3545344305579157
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-119L));
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1321L, (-119L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.645014408991047
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(670L);
      Range.ofLength(65535L);
      range_Builder0.expandBegin(304L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.contractBegin((-1271L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem.values();
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.7261794604741216
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(255L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_CoordinateSystem0.toString();
      Range.of((-361L));
      range_Builder1.expandEnd((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.134587134513679
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of((-18L));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-18L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      range2.getBegin(range_CoordinateSystem3);
      Range range3 = range2.asRange();
      range0.complementFrom(list1);
      Range range4 = Range.of(range_CoordinateSystem2, 21L, 9223372036854710271L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.224472560413599
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1070L), 2578L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertFalse(list1.contains(range1));
      
      range1.endsBefore(range0);
      Range range2 = Range.ofLength(65535L);
      Range range3 = range2.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-2588L), 1020L);
      range_Builder0.shift(2578L);
      Range range4 = range_Builder0.build();
      range4.iterator();
      range2.isSubRangeOf(range2);
      List<Range> list2 = range3.complement(range1);
      //  // Unstable assertion: assertFalse(list2.equals((Object)list0));
      //  // Unstable assertion: assertEquals(1, list2.size());
      //  // Unstable assertion: assertTrue(list2.contains(range2));
      
      Range.ofLength(9223372036854774024L);
      boolean boolean0 = range0.startsBefore(range1);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.683060131946162
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(140L, 140L);
      Range range1 = Range.ofLength(3674L);
      range1.intersects(range0);
      Range range2 = Range.of((-62957L), 140L);
      range0.equals(range2);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=4.075003178273716
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-201L), (-201L));
      Range range0 = Range.of((-201L));
      Range range1 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1784L, 65535L);
      List<Range> list0 = range2.complement(range1);
      assertTrue(list0.contains(range2));
      assertEquals(1, list0.size());
      
      Range range3 = Range.of((-361L));
      List<Range> list1 = range0.complement(range2);
      List<Range> list2 = range3.complementFrom(list1);
      assertTrue(list2.contains(range0));
      
      Range range4 = Range.ofLength(1784L);
      range3.asRange();
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.expandEnd(0L);
      range_Builder0.build();
      Range range5 = Range.ofLength(2221L);
      assertNotSame(range5, range4);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.8710764774204374
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.of(140L, 140L);
      Range range0 = Range.ofLength(3681L);
      Range range1 = Range.ofLength(3681L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.isEmpty());
      assertSame(range1, range0);
      
      Range.Builder range_Builder0 = new Range.Builder(140L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range range2 = Range.ofLength(2147483647L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.063960615906705
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of((-18L));
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of((-18L));
      Range range3 = range2.asRange();
      range0.endsBefore(range3);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1607L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem2, (-32768L), (-1607L));
      range1.isSubRangeOf(range3);
      range1.complementFrom(list0);
      range4.spliterator();
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.901358255246287
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-119L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-119L), 9223372036854775368L);
      long long0 = 3810L;
      Range range0 = Range.of(3810L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2633L, 2633L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 9223372036854775807L, 441L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.7069083230178523
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 1353 ]/RB", range_CoordinateSystem1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.parseRange("[ 0 .. 1353 ]/RB", range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.ofLength((-228L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.5925683308850638
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.of(670L, 1110L);
      Range range1 = Range.ofLength(670L);
      range1.isEmpty();
      // Undeclared exception!
      try { 
        range0.split((-3667L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.476146591389015
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(140L, 140L);
      Range range1 = Range.ofLength(140L);
      range0.endsBefore(range0);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("JR6*.d0EU=o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.JR6*.d0EU=o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.461843372148494
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.shift((-18L));
      Range range1 = range_Builder1.build();
      // Undeclared exception!
      try { 
        range1.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.144394469008979
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      Range range1 = Range.of(255L);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(2, list0.size());
      assertTrue(list1.isEmpty());
      
      Range.ofLength(255L);
      range1.asRange();
      Range range2 = Range.ofLength(1353L);
      Range range3 = range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder(504L);
      Range.Builder range_Builder1 = new Range.Builder(255L);
      range_Builder0.build();
      Range.of(185L);
      List<Range> list2 = range3.complement(range2);
      assertEquals(1, list2.size());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.072368836737514
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.ofLength(2705L);
      range0.split(2705L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9223372036854710272L;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854710272L, 9223372036854710272L);
      long long1 = 65535L;
      Range range2 = Range.of(65535L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 65535L, 9223372036854775807L);
      range1.complement(range2);
      Range range4 = Range.of(65535L);
      List<Range> list0 = range3.complement(range4);
      range3.complementFrom(list0);
      long long2 = 175L;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1470823338168756
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(4294967296L, long0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.574133519057304
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(0L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1250L;
      Range.of(range_CoordinateSystem0, 0L, 1250L);
      long long1 = 689L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1250L, 689L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.7055886226840244
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of(140L, 140L);
      Range.ofLength(3674L);
      long long0 = range0.getEnd();
      assertEquals(140L, long0);
      
      boolean boolean0 = range0.endsBefore(range0);
      Range range1 = Range.of((-62957L), 255L);
      boolean boolean1 = range0.equals(range1);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.277672146454942
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.9615260207469762
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-200L), 3609L);
      Range range1 = Range.of((-200L));
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1252L, 3609L);
      range0.asRange();
      range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 0L, 2329L);
      String string0 = range0.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ -201 .. 3608 ]/0B", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.5543043435403296
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(670L);
      List<Range> list0 = range0.split(670L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3040938155088355
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(670L);
      Range range0 = Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        range0.split((-3667L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3987215462100493
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      long long0 = (-1302L);
      Range range0 = Range.of((-1302L), (-1302L));
      Range.of((-1302L), 202L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.937078408215539
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775138L, 9223372036854775138L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of(9223372036854775138L, 9223372036854775138L);
      range1.intersects(range0);
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      List<Range> list0 = range2.complement(range0);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range.ofLength(9223372036854774455L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1412L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967295L, (-1412L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.366031647607837
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.ofLength(2578L);
      range0.getBegin();
      range0.iterator();
      range0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.7732129871433546
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range range0 = Range.of((-361L), 0L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      range0.getLength();
      range_Builder0.build();
      Range range1 = Range.of(range_CoordinateSystem0, 5L, 932L);
      // Undeclared exception!
      try { 
        range1.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.6294439062862835
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(140L, 140L);
      Range range1 = Range.ofLength(3674L);
      long long0 = range1.getLength();
      assertEquals(3674L, long0);
      
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      assertTrue(range2.isEmpty());
      
      range0.split(1783L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.9420555283839915
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-201L), (-201L));
      Range range1 = Range.of(range_CoordinateSystem0, (-201L), (-201L));
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range range2 = Range.ofLength(4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-201L), 4294967295L);
      range2.split(4294967295L);
      range1.getLength();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 1L, 4294967295L);
      Range range3 = range_Builder1.build();
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.5921902581164877
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1353L, 4294967295L);
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.ofLength(33L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.610379712448225
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.ofLength(127L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.6191766046762717
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(127L);
      range1.spliterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3640704150202208
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(3223L);
      Range range1 = range0.asRange();
      range1.getBegin();
      Range range2 = Range.ofLength(1040L);
      range2.getBegin();
      // Undeclared exception!
      try { 
        range1.split((-1273L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.820849973981229
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775805L);
      Range range1 = Range.of((-4538L), (-4538L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5583688483322864
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-119L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1212L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-119L), (-1L));
      Range range3 = range0.asRange();
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, (-119L), (-1L));
      assertNotSame(range4, range3);
      assertSame(range4, range2);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.087798156821038
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-200L), 3609L);
      Range range1 = Range.of((-200L));
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range range2 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-2147483648L), 4294967295L);
      range3.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.Builder range_Builder0 = new Range.Builder(3609L, 3609L);
      range2.getLength();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.5086115792659407
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-201L), (-201L));
      Range range0 = Range.of((-201L));
      // Undeclared exception!
      try { 
        range0.split((-201L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.7736832903459967
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range range0 = Range.of(140L, 140L);
      Range range1 = Range.of(3674L, 3674L);
      range0.endsBefore(range0);
      Range range2 = Range.of((-62957L), 255L);
      range2.split(9223372036854710271L);
      range2.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        range2.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=4.168271416638657
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1070L), 2578L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      range1.endsBefore(range0);
      Range range2 = Range.ofLength(65535L);
      Range range3 = range2.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, (-2588L), 1020L);
      range_Builder0.shift(2578L);
      range_Builder0.build();
      Range range4 = Range.of(range_CoordinateSystem0, (-2588L), (-1070L));
      range4.iterator();
      range4.isSubRangeOf(range2);
      range3.complement(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-2685L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.437240382221239
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.of(2299L, 9223372036854775138L);
      Range range0 = Range.of(1508L, 1508L);
      Object object0 = new Object();
      Long long0 = new Long(9223372036854775807L);
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.7442783487206652
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.ofLength(2705L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2705L, 2705L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 2705L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.9900199409279136
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      Range range1 = Range.of(range_CoordinateSystem0, 441L, 65535L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.of(range_CoordinateSystem0, 710L, 65535L);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("ARRIVAL", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ARRIVAL into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.8057247245309416
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-131L), (-131L));
      long long0 = 876L;
      Range range0 = Range.of(32767L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-131L), 32767L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 106165764L, 876L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.3930196663871794
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1353L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1353L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of((-18L), (-280L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.667709624329785
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      Range range1 = range0.asRange();
      Range.of(127L, 127L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-323L), (-323L));
      Range range2 = Range.ofLength(127L);
      boolean boolean0 = range1.startsBefore(range2);
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.798628958903063
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.of((-361L), 0L);
      Range range1 = Range.ofLength(0L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range1.complement(range2);
      range0.complementFrom(list0);
      range2.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-2825L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.312890287952035
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.of(0L);
      Range range0 = Range.of(2299L);
      range0.spliterator();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.9106161325124247
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.of((-361L), 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-1457L));
      Range range1 = Range.ofLength(2196L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, (-361L), (-361L));
      Range.Builder range_Builder2 = range_Builder1.expandBegin(3333L);
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder4.contractBegin(2196L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-9223372036854775808L), 2368L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.303248073639753
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-459L), 3333L);
      long long0 = range0.getBegin();
      assertEquals((-459L), long0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-758L);
      range_Builder0.shift(215L);
      range_Builder0.expandBegin((-758L));
      range_Builder0.contractEnd((-758L));
      range_Builder0.expandBegin((-758L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.6413752138480158
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      List<Range> list0 = range0.complement(range1);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range0));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.8459429275992174
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range range0 = Range.of(140L, 140L);
      Range range1 = Range.ofLength(3674L);
      range0.endsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = Range.of(range_CoordinateSystem0, 140L, 558L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-3263L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.645014408991047
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(670L);
      Range.ofLength(65535L);
      range_Builder0.expandBegin(304L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.contractBegin((-1271L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 670L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.575425801945646
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd(0L);
      Range range0 = Range.ofLength(0L);
      Range range1 = range0.asRange();
      range1.getBegin();
      Range range2 = Range.ofLength(0L);
      Range.Builder range_Builder1 = new Range.Builder(0L, 255L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      long long0 = range2.getLength();
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=4.078414934665502
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1070L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1070L), 2578L);
      Range range1 = Range.of(65535L);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range range2 = Range.ofLength(65535L);
      range2.asRange();
      Range.Builder range_Builder0 = new Range.Builder(2578L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.460766086733638
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(710L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range range0 = Range.of(710L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.491651878591049
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.of(9223372036854775805L, 9223372036854775805L);
      Range.of(9223372036854775805L, 9223372036854775805L);
      Range.of(105838088L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("SPACE_BASED");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.SPACE_BASED
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.431650417855226
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(127L, 9223372036854775807L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(1556L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.5266854430001895
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-119L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-119L), 9223372036854775368L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 2455L, (-1036L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.462491124448014
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Range.of((-361L), 0L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-523L), (-67L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("JR6*.d0EU=o");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.JR6*.d0EU=o
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.4966733359946383
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-1070L);
      Range.of(range_CoordinateSystem0, (-1070L), 2578L);
      Range.of((-1070L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.internal.core.util.Caches$AbstractReferencedCache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
