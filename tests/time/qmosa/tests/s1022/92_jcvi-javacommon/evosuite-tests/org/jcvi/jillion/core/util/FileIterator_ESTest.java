/*
 * This file was automatically generated by EvoSuite
 * Wed Dec 04 06:37:21 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.net.URI;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6754732042072185
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.getCanonicalPath();
      mockFile0.mkdirs();
      MockFile mockFile1 = new MockFile("");
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile1);
      mockFile0.setWritable(true, true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.next();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      fileIterator0.setUpInitialState(mockFile1);
      // Undeclared exception!
      try { 
        MockURI.resolve((URI) null, (URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.8399037168122385
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.spliterator();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.hasNext();
      fileIterator1.getNextFile();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder1.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(false);
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator2.hasNext();
      fileIterator1.spliterator();
      MockFile mockFile1 = new MockFile("<d^+");
      MockFile mockFile2 = new MockFile("t'+2STmA'Q");
      fileIterator1.setUpInitialState(mockFile2);
      FileIterator fileIterator3 = fileIterator_FileIteratorBuilder0.build();
      mockFile0.toPath();
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile2);
      MockFile mockFile3 = new MockFile(mockFile2, "t'+2STmA'Q");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator3.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.729405177018384
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.spliterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator0.hasNext();
      fileIterator0.spliterator();
      MockFile mockFile1 = new MockFile("N{^io6ACJ>$zUNz6&G");
      fileIterator0.setUpInitialState(mockFile1);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      mockFile0.toPath();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      MockFile mockFile2 = new MockFile("", "org.jcvi.jillion.core.util.FileIterator$NonDirectoryFileFilter");
      MockFile mockFile3 = new MockFile(mockFile2, "org.jcvi.jillion.core.util.FileIterator$NonDirectoryFileFilter");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile3);
      Iterator<File> iterator0 = fileIterator1.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.7739545295344037
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.hasNext();
      fileIterator0.spliterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.hasNext();
      fileIterator0.spliterator();
      MockFile mockFile1 = new MockFile("3]--FBrL:8\"");
      fileIterator0.setUpInitialState(mockFile1);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      mockFile1.toPath();
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      File file0 = fileIterator1.next();
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      fileIterator_FileIteratorBuilder0.build();
      File file1 = fileIterator1.getNextFile();
      assertNotSame(file1, mockFile0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.53458630654721
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.getCanonicalPath();
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setWritable(false, false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.538643101679056
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator");
      mockFile0.getCanonicalPath();
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      mockFile0.setWritable(true, true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator1.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.764400996966554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.hasNext();
      fileIterator1.spliterator();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.hasNext();
      fileIterator1.getNextFile();
      fileIterator_FileIteratorBuilder1.build();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8420905954707214
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>(linkedList1);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      linkedList1.add((FileFilter) multipleFileFilter2);
      linkedList3.retainAll(linkedList1);
      FileFilter[] fileFilterArray0 = new FileFilter[2];
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter5;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(linkedList4);
      assertFalse(multipleFileFilter16.equals((Object)multipleFileFilter2));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.22215863611849
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      MockFile mockFile1 = new MockFile("");
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      mockFile0.toPath();
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      MockFile mockFile2 = new MockFile(mockFile0, "3]--FBrL:8\"");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile2);
      Iterator<File> iterator0 = fileIterator0.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8319619739995243
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder1.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator0.spliterator();
      fileIterator_FileIteratorBuilder2.includeDirectories(true);
      fileIterator0.setUpInitialState(mockFile0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      mockFile0.toPath();
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      mockFile0.setReadOnly();
      MockFile mockFile1 = new MockFile(mockFile0, "");
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      Iterator<File> iterator0 = fileIterator1.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.6537145912653215
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.hasNext();
      fileIterator0.spliterator();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator0.hasNext();
      fileIterator0.getNextFile();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator$RecursiveFileIterator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.274362714574081
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator", "no elements in empty iterator");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.getCanonicalPath();
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setWritable(true, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.689283111966663
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator0.getNextFile();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator0.getNextFile();
      assertEquals("/home", file0.getParent());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.619968170113862
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.hasNext();
      fileIterator0.spliterator();
      mockFile0.toPath();
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator0.getNextFile();
      mockFile0.setWritable(true, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      fileIterator1.setUpInitialState(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator1.next();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertNotSame(fileIterator_FileIteratorBuilder3, fileIterator_FileIteratorBuilder2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.488994635556055
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile((String) null, "");
      mockFile0.getCanonicalPath();
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setWritable(false, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder3.equals((Object)fileIterator_FileIteratorBuilder2));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.675553236220023
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEach(consumer0);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      FileFilter[] fileFilterArray0 = new FileFilter[7];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>(linkedList2);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList2);
      assertFalse(multipleFileFilter12.equals((Object)multipleFileFilter0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>(linkedList0);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      FileFilter[] fileFilterArray0 = new FileFilter[3];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(fileFilterArray0);
      FileFilter[] fileFilterArray1 = new FileFilter[0];
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList0);
      assertFalse(multipleFileFilter12.equals((Object)multipleFileFilter0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.274362714574081
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("org.jcvi.jillion.core.util.LIFOQueue", "");
      MockFile mockFile1 = new MockFile(mockFile0, "org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator");
      mockFile0.getCanonicalPath();
      mockFile0.mkdirs();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      mockFile0.setWritable(false, false);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4450047939551998
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList2);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[8] = (FileFilter) multipleFileFilter8;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter9);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>(linkedList4);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList6);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>(linkedList6);
      List<FileFilter> list0 = null;
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList7);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList5);
      linkedList6.offer(multipleFileFilter11);
      MultipleFileFilter multipleFileFilter13 = null;
      try {
        multipleFileFilter13 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("xE*rt@", "org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator");
      MockFile mockFile1 = new MockFile(mockFile0, "D");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("xE*rt@/org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator/D");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile1);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4466856169199285
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder2.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4450047939551998
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      fileIterator_FileIteratorBuilder1.build();
      mockFile0.setReadable(false, false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("xE*rt@/org.jcvi.jillion.core.util.iter.IteratorUtil$EmptyIterator/D");
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("!f>-#;K0SaeW+/c", "!f>-#;K0SaeW+/c");
      MockFile mockFile1 = new MockFile(mockFile0, "seE");
      File file0 = MockFile.createTempFile("!f>-#;K0SaeW+/c", "!f>-#;K0SaeW+/c", (File) mockFile1);
      mockFile0.setExecutable(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.383326171050334
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>(linkedList0);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>(linkedList1);
      MultipleFileFilter multipleFileFilter1 = null;
      try {
        multipleFileFilter1 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("UP#>6d", "UP#>6d");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      File file0 = null;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder1.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.383326171050334
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      mockFile0.setReadOnly();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileFilter[] fileFilterArray0 = new FileFilter[8];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>(linkedList0);
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter10 = null;
      try {
        multipleFileFilter10 = new MultipleFileFilter((List<FileFilter>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
