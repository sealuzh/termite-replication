/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:35:42 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.Dialog;
import java.awt.RenderingHints;
import java.awt.event.ContainerListener;
import java.awt.geom.AffineTransform;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.renderable.ParameterBlock;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.FileNotFoundException;
import java.io.PushbackInputStream;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.KeyStroke;
import javax.swing.plaf.basic.BasicComboBoxUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0941693886928134
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.moveUpIndex(2);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[4];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualListModel0.setData(visualPageListItemArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.537566897694364
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      visualListModel0.subList((-1), (-4496));
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 102;
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      AffineTransform.getRotateInstance((double) 102.0F);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndex(794);
      RenderingHints renderingHints1 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      visualListModel1.removeElements((-4496), (-4496), true);
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(6, visualListModel0.getSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8358075012989734
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      intArray0[1] = 4;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.moveDownIndexes(intArray0);
      intArray0[2] = 4;
      intArray0[3] = 0;
      intArray0[4] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      intArray0[5] = 0;
      intArray0[6] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(0, 0, true);
      int[] intArray1 = new int[5];
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.removeElements(0, (-1), true);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.undeleteElements(intArray1);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>(comparator0);
      treeSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(treeSet0);
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-2777));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.242212190971484
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      visualListModel0.subList((-1), (-4496));
      int[] intArray0 = new int[4];
      visualListModel0.reverseElements(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (-1.0F);
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      floatArray0[6] = (float) (-4496);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      AffineTransform.getRotateInstance((double) (-1.0F));
      visualListModel0.moveDownIndex((-4496));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RenderingHints renderingHints1 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-33);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2777), (byte) (-33));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        renderingHints0.putIfAbsent((Object) null, pushbackInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0608333657846836
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 2;
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      visualListModel0.removeListDataListener(jComboBox0);
      VisualListModel visualListModel1 = new VisualListModel();
      int int1 = (-1);
      visualListModel1.subList((-1), (-4496));
      int[] intArray0 = new int[1];
      intArray0[0] = (-4496);
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4496
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.218743692541794
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      visualListModel0.removeListDataListener(jComboBox0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.subList((-1), (-4496));
      visualListModel0.addAllElements(2, (Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[6];
      intArray0[0] = (-4496);
      intArray0[1] = 2;
      intArray0[2] = (-1);
      intArray0[3] = 2;
      intArray0[4] = (-4496);
      intArray0[5] = 2;
      try { 
        visualListModel0.reverseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4496
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1474346503786346
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      visualListModel0.subList((-1), (-4496));
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3419408569062177
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements((-335), (Collection<VisualPageListItem>) priorityQueue0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.clearData();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayList0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      int int0 = visualListModel1.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-335);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel1.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7321184591665695
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<Object> stack1 = new Stack<Object>();
      stack1.spliterator();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      Integer integer0 = new Integer((-2717));
      jComboBox0.removeContainerListener((ContainerListener) null);
      jComboBox0.setEnabled(false);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.getValidElements();
      visualListModel1.getElements();
      visualListModel0.getElementAt(0);
      visualListModel0.updateElementAt(2260, (VisualPageListItem) null);
      visualListModel1.addElementAt((VisualPageListItem) null, 0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      visualListModel0.moveDownIndex(0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4089921585327536
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateClockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveDownIndexes(intArray0);
      visualListModel1.removeElements(2110, 80, false);
      visualListModel2.moveDownIndexes(intArray0);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.rotateClockwiseElements(intArray0);
      visualListModel2.moveDownIndexes(intArray0);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        visualListModel3.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(org.pdfsam.guiclient.dto.VisualPageListItem.class) , any(org.pdfsam.guiclient.dto.VisualPageListItem.class));
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      stack0.sort(comparator0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      ArrayList<VisualPageListItem> arrayList1 = null;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int int0 = 9;
      int int1 = (-3682);
      visualListModel0.removeElements((-3682), 9, true);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-3682), "ZsIaz#`V_=r", "org.pdfsam.guiclient.commons.models.VisualListModel");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.8234757337139067
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getSources();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(vector0);
      vector0.spliterator();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      jComboBox0.removeContainerListener((ContainerListener) null);
      jComboBox0.setEnabled(true);
      visualListModel0.getValidElements();
      visualListModel0.getElements();
      visualListModel0.getElementAt(0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[2] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.updateElementAt(0, (VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 1);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel1.rotateClockwiseElements(intArray0);
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      vector1.add((VisualPageListItem) null);
      visualListModel0.setData(vector1);
      visualListModel1.moveUpIndexes(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.setData(visualPageListItemArray0);
      assertEquals(6, visualListModel0.getSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements(1104, (Collection<VisualPageListItem>) arrayDeque0);
      visualListModel0.addElement((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      visualListModel0.removeElements((-932), 255, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4407696753202024
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.removeElements(51, (-328), true);
      int[] intArray0 = new int[9];
      intArray0[0] = 51;
      intArray0[1] = 51;
      intArray0[2] = (-328);
      intArray0[3] = 51;
      visualListModel0.addElementAt((VisualPageListItem) null, (-1481));
      intArray0[4] = (-328);
      intArray0[5] = 51;
      intArray0[6] = 51;
      intArray0[7] = 51;
      intArray0[8] = (-328);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>(2657);
      vector0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      visualListModel0.moveDownIndex(51);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-328), 51, false);
      assertNull(collection0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(3);
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      DefaultTableModel[] defaultTableModelArray0 = new DefaultTableModel[0];
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>(defaultTableModelArray0);
      Vector<Integer> vector0 = new Vector<Integer>();
      JComboBox<Integer> jComboBox2 = new JComboBox<Integer>(vector0);
      MetalComboBoxUI metalComboBoxUI0 = (MetalComboBoxUI)jComboBox2.getUI();
      // Undeclared exception!
      try { 
        metalComboBoxUI0.unconfigureEditor();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.plaf.basic.BasicComboBoxUI", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      visualListModel0.reverseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      Stack<Object> stack0 = new Stack<Object>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      jComboBox1.setUI(basicComboBoxUI0);
      jComboBox0.getMouseListeners();
      visualListModel0.removeListDataListener(jComboBox0);
      ParameterBlock parameterBlock0 = new ParameterBlock(stack0, stack0);
      Vector<Object> vector0 = parameterBlock0.getSources();
      Vector<Object> vector1 = parameterBlock0.getParameters();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      parameterBlock0.addSource(integer0);
      KeyStroke.getKeyStroke("ZdRZ");
      vector0.add((Object) jComboBox1);
      JComboBox<Object> jComboBox2 = new JComboBox<Object>(vector1);
      assertTrue(jComboBox2.getFocusTraversalKeysEnabled());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<Object> stack1 = new Stack<Object>();
      stack1.spliterator();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements((int[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements((-554), (-554), false);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      basicComboBoxUI0.contains(jComboBox0, (-1), (-1));
      jComboBox0.getAlignmentX();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      jComboBox0.setUI(basicComboBoxUI0);
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>();
      JComboBox<DefaultTableModel> jComboBox2 = new JComboBox<DefaultTableModel>();
      jComboBox2.getMouseListeners();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, visualListModel0);
      Object object0 = null;
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream(">)xoW");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7962284387340903
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(2);
      int int0 = 3978;
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3978;
      floatArray0[1] = (float) 3978;
      floatArray0[2] = (float) 2;
      floatArray0[3] = (float) 2;
      floatArray0[4] = (float) 3978;
      floatArray0[5] = (float) 3978;
      floatArray0[6] = (float) 3978;
      RenderingHints renderingHints0 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      RescaleOp rescaleOp0 = new RescaleOp(floatArray0, floatArray0, renderingHints0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) linkedHashSet0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      AffineTransform.getRotateInstance((double) 3978.0F);
      visualListModel0.moveDownIndex(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      RenderingHints renderingHints1 = new RenderingHints((Map<RenderingHints.Key, ?>) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      // Undeclared exception!
      try { 
        renderingHints1.putIfAbsent(sunHints_Key0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null incompatible with Global antialiasing enable key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      Object object0 = new Object();
      Object object1 = new Object();
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, visualListModel0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-2539), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-2539)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack0.sort(comparator0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[0];
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int int0 = 1363;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8063294488351005
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Stack<Object> stack1 = new Stack<Object>();
      stack1.spliterator();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 854;
      intArray0[1] = (-1931);
      intArray0[2] = 2201;
      intArray0[3] = 1635;
      intArray0[4] = 854;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      jComboBox0.getMouseListeners();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeListDataListener(jComboBox0);
      int[] intArray1 = new int[4];
      intArray1[0] = 854;
      intArray1[1] = (-743);
      intArray1[2] = 1635;
      intArray1[3] = 854;
      visualListModel1.reverseElements(intArray1);
      visualListModel0.moveUpIndexes(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel1.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[][] objectArray0 = new Object[3][1];
      Object[] objectArray1 = new Object[4];
      objectArray1[0] = object1;
      objectArray1[1] = (Object) null;
      objectArray1[2] = (Object) sunHints_Key0;
      objectArray1[3] = (Object) visualListModel0;
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[4];
      objectArray2[0] = (Object) null;
      objectArray2[1] = (Object) null;
      objectArray2[2] = (Object) sunHints_Key0;
      objectArray2[3] = (Object) sunHints_Key0;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[1];
      objectArray3[0] = (Object) null;
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[3];
      visualListModel0.moveUpIndexes(intArray0);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(objectArray4);
      Dialog.ModalExclusionType dialog_ModalExclusionType0 = Dialog.ModalExclusionType.NO_EXCLUDE;
      defaultComboBoxModel0.setSelectedItem(dialog_ModalExclusionType0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      Stack<DefaultTableModel> stack0 = new Stack<DefaultTableModel>();
      PriorityQueue<DefaultTableModel> priorityQueue1 = new PriorityQueue<DefaultTableModel>(stack0);
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.remove((Object) priorityQueue1);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) priorityQueue0);
      arrayDeque0.pollFirst();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "/ZxH%D'7,");
      Object object0 = new Object();
      Object object1 = new Object();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) priorityQueue0);
      assertEquals(0, priorityQueue0.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(765, 765, false);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      Object object0 = new Object();
      Object object1 = new Object();
      Object[][] objectArray0 = new Object[1][1];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) sunHints_Key0;
      objectArray1[1] = (Object) sunHints_Key0;
      Object object2 = new Object();
      objectArray1[2] = object2;
      objectArray0[0] = objectArray1;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, (Object) null);
      LookupOp lookupOp0 = null;
      try {
        lookupOp0 = new LookupOp((LookupTable) null, renderingHints0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.LookupOp", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.trimToSize();
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-329));
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-1), 1679, true);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      Object object0 = new Object();
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.add(1679);
      // Undeclared exception!
      try { 
        AWTKeyStroke.getAWTKeyStroke("5Xhoen0qMW\"!Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String formatted incorrectly
         //
         verifyException("java.awt.AWTKeyStroke", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.016496301416993
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.prependAllElements(priorityQueue0);
      PriorityQueue<VisualPageListItem> priorityQueue1 = new PriorityQueue<VisualPageListItem>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addAllElements(2524, (Collection<VisualPageListItem>) priorityQueue0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.elementsChanged();
      visualListModel2.clearData();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel3.getSize();
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayList0);
      assertNotSame(visualListModel0, visualListModel1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getSources();
      ParameterBlock parameterBlock1 = new ParameterBlock(vector0, vector0);
      Vector<Object> vector1 = parameterBlock1.getSources();
      ParameterBlock parameterBlock2 = new ParameterBlock(vector1);
      Hashtable<RenderingHints.Key, Dialog.ModalExclusionType> hashtable0 = new Hashtable<RenderingHints.Key, Dialog.ModalExclusionType>(690);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "xn~", parameterBlock2, renderingHints0, false);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"xn~\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.357285019952196
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getSources();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(vector0);
      vector0.spliterator();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      HashSet<VisualPageListItem> hashSet0 = new HashSet<VisualPageListItem>();
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MIN_VALUE;
      intArray0[1] = 8;
      intArray0[2] = (-831);
      intArray0[3] = 8;
      intArray0[4] = 9;
      intArray0[5] = 1704;
      intArray0[6] = 9;
      intArray0[7] = 8;
      intArray0[8] = 8;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.moveDownIndex(1);
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(vector0);
      visualListModel0.addListDataListener(jComboBox0);
      jComboBox0.getInheritsPopupMenu();
      jComboBox0.getHeight();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>(vector0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)107, 20000);
      BufferedInputStream bufferedInputStream0 = null;
      try {
        bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox0.setLightWeightPopupEnabled(false);
      jComboBox0.getMinimumSize();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-1288), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) defaultComboBoxModel0;
      objectArray0[1] = (Object) jComboBox0;
      objectArray0[2] = (Object) visualListModel0;
      objectArray0[3] = (Object) defaultComboBoxModel0;
      objectArray0[4] = (Object) defaultComboBoxModel0;
      objectArray0[5] = (Object) jComboBox0;
      objectArray0[6] = (Object) defaultComboBoxModel0;
      JComboBox<Object> jComboBox1 = new JComboBox<Object>(objectArray0);
      jComboBox1.getMinimumSize();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-1120), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1120
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7741057932992024
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.moveUpIndex(3786);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(1951, 1951);
      assertNull(collection0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.subList(0, 0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      String string0 = "K|pKn\\'h@s&/,oaT~(O";
      int int1 = 1;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      // Undeclared exception!
      try { 
        visualListModel0.subList(4, (-2719), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(4) > toIndex(-2719)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        visualListModel0.subList(1951, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1951) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      Stack<DefaultTableModel> stack1 = new Stack<DefaultTableModel>();
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>(stack1);
      jComboBox0.setUI(basicComboBoxUI0);
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>();
      jComboBox1.getMouseListeners();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      Object object0 = new Object();
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, object0);
      visualListModel0.getElementAt(1679);
      // Undeclared exception!
      try { 
        renderingHints0.put(basicComboBoxUI0, (Object) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.plaf.basic.BasicComboBoxUI cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements(116, (Collection<VisualPageListItem>) priorityQueue0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.elementChanged((VisualPageListItem) null);
      float[] floatArray0 = new float[2];
      floatArray0[0] = 2331.26F;
      floatArray0[1] = (float) (-1);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(116, (-1), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.removeElements(1, 1, true);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeElements((-1), (-2969), false);
      assertEquals(0, visualListModel1.getSize());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8063294488351005
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Stack<Object> stack1 = new Stack<Object>();
      stack1.spliterator();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int[] intArray0 = new int[5];
      intArray0[0] = 854;
      intArray0[1] = (-1931);
      intArray0[2] = 2201;
      intArray0[3] = 1635;
      intArray0[4] = 854;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      jComboBox0.getMouseListeners();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.removeListDataListener(jComboBox0);
      int[] intArray1 = new int[4];
      intArray1[0] = 854;
      intArray1[1] = (-743);
      intArray1[2] = 1635;
      intArray1[3] = 854;
      visualListModel1.reverseElements(intArray1);
      visualListModel0.moveUpIndexes(intArray1);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LookupTable lookupTable0 = null;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      Object object0 = new Object();
      Object object1 = new Object();
      visualListModel0.removeElements(34, (-1949), true);
      JComboBox<DefaultTableModel> jComboBox0 = new JComboBox<DefaultTableModel>();
      BasicComboBoxUI basicComboBoxUI0 = new BasicComboBoxUI();
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      MetalComboBoxEditor.UIResource metalComboBoxEditor_UIResource0 = new MetalComboBoxEditor.UIResource();
      jComboBox0.setUI(basicComboBoxUI0);
      JComboBox<DefaultTableModel> jComboBox1 = new JComboBox<DefaultTableModel>();
      jComboBox0.getMouseListeners();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key1, (Object) null);
      // Undeclared exception!
      try { 
        renderingHints0.put(jComboBox0, jComboBox0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.JComboBox cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Comparator<VisualPageListItem> comparator0 = (Comparator<VisualPageListItem>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Stack<Object> stack1 = new Stack<Object>();
      stack1.spliterator();
      ContainerListener containerListener0 = mock(ContainerListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(containerListener0, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.remove((ContainerListener) null, containerListener0);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      AWTEventMulticaster.add((ContainerListener) null, (ContainerListener) null);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.238349707583447
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[7];
      intArray0[0] = 50;
      intArray0[1] = 50;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.moveDownIndexes(intArray0);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1;
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }
}
