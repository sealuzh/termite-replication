/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:12:33 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9850550847754818
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleNode simpleNode0 = new SimpleNode(52);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      simpleNode0.toString();
      simpleNode0.setIdentifier("<<");
      simpleNode0.setIdentifier(" : ");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)72;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte) (-61);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)72;
      byteArray0[8] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<PipedInputStream> enumeration1 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sequenceInputStream1.close();
      simpleNode0.dump("@h`q@h/w:K", stringWriter0);
      assertEquals("<UnaryExpression>\n  <identifier>*lshft</identifier>\n  <identifier> : </identifier>\n</UnaryExpression>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      SystemInUtil.addInputLine("KT:&Y|Fj");
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      StringReader stringReader0 = new StringReader("\"@\"");
      simpleNode0.setIdentifier("&&");
      StringWriter stringWriter0 = new StringWriter(1);
      StringWriter stringWriter1 = new StringWriter(10);
      simpleNode0.dump("UnaryExpressionNotPlusMinus", stringWriter1);
      assertEquals("<PackageDeclaration>\n  <identifier>*amp</identifier>\n</PackageDeclaration>\n", stringWriter1.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("PackageDeclaration : &&", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2283766931186737
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(66);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('-');
      stringWriter1.flush();
      simpleNode0.setIdentifier("FodXI+_}");
      simpleNode0.setIdentifier("&");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)72;
      byteArray0[2] = (byte) (-61);
      byteArray0[3] = (byte) (-61);
      byteArray0[4] = (byte)72;
      byteArray0[5] = (byte)72;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      sequenceInputStream0.close();
      simpleNode0.dump("&TBV", stringWriter1);
      assertEquals("-<Arguments>\n  <identifier>FodXI+_}</identifier>\n  <identifier>*amp</identifier>\n</Arguments>\n", stringWriter1.toString());
      
      String string0 = simpleNode0.toString("&");
      assertEquals("&Arguments : FodXI+_} : &", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2438228280066395
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(66);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('0');
      stringWriter1.flush();
      stringWriter0.flush();
      stringWriter0.close();
      StringWriter stringWriter2 = new StringWriter('0');
      stringWriter1.write((-670));
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      simpleNode0.setIdentifier("<=");
      simpleNode0.dump("MemberValuePair : =", stringWriter1);
      assertEquals("0\uFD62<Arguments>\n  <identifier>*le</identifier>\n</Arguments>\n", stringWriter1.toString());
      
      String string0 = simpleNode0.toString("TypeArguments");
      assertEquals("TypeArgumentsArguments : <=", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(8);
      StringWriter stringWriter0 = new StringWriter(1206);
      stringWriter0.flush();
      simpleNode0.setIdentifier(">");
      StringWriter stringWriter1 = new StringWriter(28);
      stringWriter1.write((-1103981311));
      stringWriter1.flush();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) ">");
      stringWriter2.close();
      simpleNode0.dump("-n&7@5", stringWriter2);
      SimpleNode simpleNode1 = new SimpleNode((-1089448507));
      StringReader stringReader0 = new StringReader("break");
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.589073251357587
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleNode simpleNode0 = new SimpleNode(66);
      StringWriter stringWriter0 = new StringWriter();
      byte[] byteArray0 = new byte[5];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ">,Z");
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ">=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      simpleNode0.setIdentifier("{");
      simpleNode0.toString("D[R3gz");
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "D[R3gzArguments : {");
      stringWriter1.append((CharSequence) "D[R3gzArguments : {");
      simpleNode0.dump((String) null, stringWriter0);
      assertEquals("D[R3gzArguments : {D[R3gzArguments : {<Arguments>\n</Arguments>\n", stringWriter0.toString());
      
      String string0 = simpleNode0.toString();
      assertEquals("Arguments : {", string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4558921533008302
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      StringWriter stringWriter0 = new StringWriter(100);
      stringWriter0.flush();
      simpleNode0.jjtGetNumChildren();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      javaParser0.ReInit((JavaParserTokenManager) null);
      Node node0 = javaParser0.currNode;
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      Node node1 = javaParser1.currNode;
      simpleNode0.jjtAddChild((Node) null, 100);
      simpleNode0.dump("", stringWriter0);
      simpleNode0.jjtGetChild(100);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      simpleNode0.dump("", stringWriter0);
      assertEquals("<MemberValuePair></MemberValuePair>\n<MemberValuePair></MemberValuePair>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9946571675310574
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      StringWriter stringWriter0 = new StringWriter(100);
      stringWriter0.flush();
      stringWriter0.flush();
      stringWriter0.close();
      StringReader stringReader0 = new StringReader("EmptyStatemnt");
      stringReader0.close();
      simpleNode0.setIdentifier("");
      StringWriter stringWriter1 = new StringWriter(75);
      StringWriter stringWriter2 = new StringWriter();
      stringWriter2.flush();
      simpleNode0.dump("", stringWriter2);
      assertEquals("<MemberValuePair>\n</MemberValuePair>\n", stringWriter2.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.23742646687433
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleNode simpleNode0 = new SimpleNode(66);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[5];
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.read(byteArray0);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream1);
      sequenceInputStream2.read(byteArray0);
      simpleNode0.toString("xEKQ3sD!ebg");
      simpleNode0.setIdentifier("xEKQ3sD!ebg");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      simpleNode0.toString();
      simpleNode0.setIdentifier("n`ndz");
      simpleNode0.setIdentifier(">=");
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      sequenceInputStream3.read();
      sequenceInputStream3.read(byteArray0, 66, 531);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration2);
      sequenceInputStream3.close();
      simpleNode0.dump("VPZ#@+b&ex'</&", stringWriter0);
      assertEquals("<Arguments>\n  <identifier>xEKQ3sD!ebg</identifier>\n  <identifier>n`ndz</identifier>\n  <identifier>*ge</identifier>\n</Arguments>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleNode simpleNode0 = new SimpleNode(66);
      sequenceInputStream0.available();
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[5];
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.read(byteArray0);
      sequenceInputStream1.read(byteArray0, 13, (-580));
      SimpleNode simpleNode1 = new SimpleNode(85);
      simpleNode0.setIdentifier((String) null);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.read();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(sequenceInputStream1, pipedInputStream0);
      sequenceInputStream5.close();
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump((String) null, stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5890216965316935
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      StringWriter stringWriter0 = new StringWriter(100);
      stringWriter0.flush();
      stringWriter0.write(3);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.flush();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter2 = new StringWriter(100);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      simpleNode0.parser = javaParser0;
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 0);
      stringWriter1.flush();
      simpleNode0.dump("", stringWriter2);
      int int0 = 0;
      simpleNode0.jjtAddChild((Node) null, 3);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4048159937786893
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      String string0 = "WildcardBounds";
      StringReader stringReader0 = new StringReader("WildcardBounds");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode1 = new SimpleNode((-1));
      JavaParser javaParser1 = new JavaParser(javaParserTokenManager0);
      Node node0 = javaParser0.currNode;
      simpleNode0.jjtAddChild((Node) null, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      simpleNode0.jjtAddChild(simpleNode0, 100);
      // Undeclared exception!
      try { 
        simpleNode1.jjtGetChild(100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter(100);
      simpleNode0.jjtAddChild(simpleNode0, 0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      simpleNode0.jjtAddChild((Node) null, 0);
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1757));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1757
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5964096454963035
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("[m;ET2Mi<");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      stringReader0.read();
      stringReader0.close();
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 91);
      simpleNode0.jjtGetNumChildren();
      StringWriter stringWriter0 = new StringWriter(0);
      stringWriter0.flush();
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      simpleNode0.jjtAddChild(simpleNode1, 91);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringWriter0.flush();
      // Undeclared exception!
      simpleNode0.dump("[m;ET2Mi<", stringWriter0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleNode simpleNode0 = new SimpleNode((-1));
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(7, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.8249506629220404
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      String string0 = "@1";
      StringWriter stringWriter0 = new StringWriter(100);
      stringWriter0.flush();
      simpleNode0.setIdentifier("@1");
      StringWriter stringWriter1 = new StringWriter(77);
      stringWriter1.flush();
      String string1 = "R|Dh~J-W,r1[)6>";
      simpleNode0.dump("R|Dh~J-W,r1[)6>", stringWriter0);
      int int0 = (-1012);
      SimpleNode simpleNode1 = new SimpleNode((-1010));
      // Undeclared exception!
      try { 
        stringWriter1.append((CharSequence) "R|Dh~J-W,r1[)6>", (-30663160), 1691);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)90;
      SimpleNode simpleNode0 = new SimpleNode((byte)0);
      simpleNode0.setIdentifier("<");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<PipedInputStream> enumeration1 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      Enumeration<PipedInputStream> enumeration2 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.close();
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("<", stringWriter0);
      assertEquals("<CompilationUnit>\n  <identifier>*lt</identifier>\n</CompilationUnit>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SimpleNode simpleNode0 = new SimpleNode((-3287));
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtGetParent();
      simpleNode0.jjtAddChild((Node) null, 0);
      String string0 = "<";
      simpleNode0.jjtSetParent((Node) null);
      // Undeclared exception!
      try { 
        simpleNode0.toString("<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3287
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7646308653001805
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(2605);
      StringWriter stringWriter0 = new StringWriter(2605);
      stringWriter0.flush();
      simpleNode0.dump("", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(2605);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode0.jjtClose();
      Node node0 = simpleNode1.jjtGetParent();
      assertSame(node0, simpleNode0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JavaParser javaParser0 = new JavaParser(";");
      StringWriter stringWriter0 = new StringWriter(10);
      StringWriter stringWriter1 = new StringWriter(10);
      Enumeration<PipedInputStream> enumeration0 = (Enumeration<PipedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.available();
      sequenceInputStream0.close();
      SimpleNode simpleNode0 = new SimpleNode((byte) (-29));
      SimpleNode simpleNode1 = new SimpleNode(1645);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (byte) (-29));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7697590704283859
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(100);
      StringWriter stringWriter0 = new StringWriter(100);
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter(100);
      stringWriter1.flush();
      simpleNode0.dump(" : ", stringWriter0);
      SimpleNode simpleNode1 = new SimpleNode(3);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode0.jjtClose();
      SimpleNode simpleNode2 = new SimpleNode(90);
      Node node0 = simpleNode2.jjtGetParent();
      assertNull(node0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      JavaParser javaParser0 = new JavaParser(sequenceInputStream0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 1);
      JavaParser javaParser1 = new JavaParser(sequenceInputStream0);
      JavaCharStream javaCharStream0 = javaParser1.jj_input_stream;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser2 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode1 = (SimpleNode)javaParser0.currNode;
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 863;
      SimpleNode simpleNode0 = new SimpleNode(863);
      Node node0 = simpleNode0.parent;
      simpleNode0.parent = null;
      simpleNode0.jjtOpen();
      simpleNode0.jjtOpen();
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 863
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SystemInUtil.addInputLine("KT:&Y|Fj");
      StringReader stringReader0 = new StringReader("\"@\"");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "</identifier>");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6aMbHokA>JQ'S]");
      StringWriter stringWriter0 = new StringWriter(74);
      SimpleNode simpleNode0 = new SimpleNode((-2294));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)56;
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      SimpleNode simpleNode1 = new SimpleNode(255);
      nodeArray0[4] = (Node) simpleNode1;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      byteArray0[6] = (byte) (-107);
      byteArray0[7] = (byte)33;
      byteArray0[8] = (byte)28;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        simpleNode0.dump("</identifier>", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)103;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)78;
      byte byte0 = (byte)36;
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (byte)78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser("._2K>");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("._2K>");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 3707);
      SimpleNode simpleNode1 = new SimpleNode(63);
      simpleNode0.jjtAddChild(simpleNode1, 47);
      assertEquals(48, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4438693327287826
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|=\"");
      JavaParser javaParser0 = new JavaParser(stringReader0);
      int int0 = 34;
      javaParser0.ArgumentList();
      try { 
        javaParser0.ExtendsList(true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parse error at line 1, column 4.  Encountered: <EOF>
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 3;
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      javaParserTokenManager0.MoreLexicalActions();
      pipedInputStream0.markSupported();
      SimpleNode simpleNode1 = new SimpleNode(javaParser0, 3);
      simpleNode1.toString("86CR[..");
      JavaParser javaParser1 = new JavaParser(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
