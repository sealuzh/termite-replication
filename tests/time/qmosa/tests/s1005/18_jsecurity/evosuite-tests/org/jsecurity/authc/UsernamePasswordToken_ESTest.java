/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:54:00 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '9';
      charArray0[1] = 'b';
      charArray0[2] = 'w';
      charArray0[3] = 'Y';
      charArray0[4] = '_';
      charArray0[5] = 'w';
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, inetAddress0);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '>';
      charArray0[1] = '0';
      charArray0[2] = 'Q';
      charArray0[3] = '=';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0595566645933836
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      char[] charArray0 = new char[0];
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.toString();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setPassword(charArray0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      usernamePasswordToken0.setUsername("Lk~h`M^5EN6t");
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("L", charArray0);
      usernamePasswordToken0.getCredentials();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", "L", inetAddress0);
      usernamePasswordToken2.getPrincipal();
      usernamePasswordToken1.setUsername("");
      usernamePasswordToken1.clear();
      usernamePasswordToken2.getUsername();
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken();
      usernamePasswordToken1.setUsername("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      usernamePasswordToken1.toString();
      char[] charArray1 = new char[2];
      charArray1[0] = 'n';
      charArray1[1] = '\'';
      usernamePasswordToken1.setPassword(charArray1);
      usernamePasswordToken3.setUsername("");
      usernamePasswordToken1.toString();
      usernamePasswordToken2.clear();
      String string1 = usernamePasswordToken1.toString();
      assertFalse(usernamePasswordToken1.isRememberMe());
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false, rememberMe=false", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[1] = 'P';
      charArray0[2] = '$';
      charArray0[3] = '/';
      charArray0[4] = 'k';
      charArray0[5] = ')';
      charArray0[6] = ':';
      charArray0[7] = 'E';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("|F", charArray0, true);
      usernamePasswordToken0.setUsername("|F");
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getUsername();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'A';
      charArray0[2] = 'L';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.setUsername((String) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPassword();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("C\"SFBa");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("QHzIJujFNbHWV", "", true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("dmzGlGZ-+spwifO8>T/", "dmzGlGZ-+spwifO8>T/", true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("ZF,pc5");
      MockInetAddress.getByName("Nci=");
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[9];
      charArray0[1] = '+';
      charArray0[2] = '$';
      charArray0[3] = ']';
      charArray0[4] = '+';
      charArray0[5] = '^';
      charArray0[6] = ':';
      charArray0[7] = 'e';
      charArray0[8] = '?';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "Nci=", true);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("*6pB5=YRi?s.; O", (String) null, true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - *6pB5=YRi?s.; O, rememberMe=true", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("#o&E84?&(JbSz");
      MockInetAddress.getByName("C\"SFBa");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("6{`", "", true, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = 'd';
      charArray0[2] = ' ';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("!BU(sVNi", "iwf)](xi>,L%Zx|7~=", true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("#o&E8,?dJbU");
      MockInetAddress.getByName("C\"SFBa");
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("#o&E8,?dJbU", (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("#o&E84?&(JbSz");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("#o&E84?&(JbSz", "#o&E84?&(JbSz", false, inetAddress0);
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[2] = '0';
      charArray0[3] = '0';
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[16];
      charArray0[0] = 'p';
      charArray0[1] = 'b';
      charArray0[2] = 'A';
      charArray0[3] = '1';
      charArray0[4] = ',';
      charArray0[3] = '~';
      charArray0[6] = 'B';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("xPR{lyvVYh`bcTo%!", charArray0, true);
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setPassword(charArray0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "IEeSFElCjHtSR^Gj3", true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=true", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByName("ZF,pc5");
      MockInetAddress.getByName("Nci=");
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[0];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Nci=", charArray0, true, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - Nci=, rememberMe=true (ZF,pc5/200.42.42.0)", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '+';
      charArray0[1] = '0';
      charArray0[2] = 'W';
      charArray0[3] = 'M';
      charArray0[4] = '|';
      charArray0[5] = 'W';
      charArray0[6] = '{';
      charArray0[7] = '$';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("w!Y~Q(J@KO}%a6Iy>NI", charArray0, true);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - w!Y~Q(J@KO}%a6Iy>NI, rememberMe=true", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.502808529414704
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("l>1%m?<$~?l(,2Vjmr=", "l>1%m?<$~?l(,2Vjmr=");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - l>1%m?<$~?l(,2Vjmr=, rememberMe=false", string0);
      
      usernamePasswordToken0.setUsername(")");
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getPrincipal();
      String string1 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.setRememberMe(true);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Dr! kS?PTquDd", "C(^\u0007Dzpob'a*");
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      usernamePasswordToken0.setInetAddress(inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.setInetAddress(inetAddress1);
      MockInetAddress.anyLocalAddress();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-110);
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [-110]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Dr!kS?Tqu4D", "C(^\u0007Dzpob'a*");
      usernamePasswordToken0.toString();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.getCredentials();
      InetAddress inetAddress0 = MockInetAddress.getByName("C(^\u0007Dzpob'a*");
      assertFalse(inetAddress0.isSiteLocalAddress());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'A';
      charArray0[2] = 'L';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, charArray0);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("#o&E84?&(JbSz");
      MockInetAddress.getByName("C\"SFBa");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(")", "", true, inetAddress0);
      usernamePasswordToken0.setUsername((String) null);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("C\"SFBa");
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (char[]) null, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("");
      MockInetAddress.getByName("xH.r`k!");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("xH.r`k!", "C\"SFBa", true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3381514637755787
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'q';
      charArray0[2] = '$';
      charArray0[3] = '/';
      charArray0[4] = 'k';
      charArray0[5] = ')';
      charArray0[6] = ':';
      charArray0[7] = 'E';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("|F", charArray0, true);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("ZF,pc5");
      MockInetAddress.getByName("Nci=");
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[7];
      charArray0[0] = '2';
      charArray0[1] = 'S';
      charArray0[2] = 'N';
      charArray0[3] = 'i';
      charArray0[4] = '%';
      charArray0[5] = ';';
      charArray0[6] = 'N';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByName("ZF,pc5");
      MockInetAddress.getByName("Nci=");
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("C\"SFBa", "Nci=", true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = '=';
      charArray0[2] = '>';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("uB}ea112K.hpbuiKWC", "uB}ea112K.hpbuiKWC", true);
      usernamePasswordToken0.getPrincipal();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }
}
