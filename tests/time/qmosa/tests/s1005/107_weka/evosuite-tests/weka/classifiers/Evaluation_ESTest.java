/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:49:36 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.util.Random;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.Stacking;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.AbstractInstance;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.Loader;
import weka.core.converters.SVMLightLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.396753078621428
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "`VYGK\"<D[a");
      double double1 = evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      String string0 = evaluation0.toSummaryString(" is no comatible with ", true);
      assertEquals(" is no comatible with \nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.confusionMatrix();
      evaluation0.setPriors(instances0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6308731393221025
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_SumSqrPredicted;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      double double1 = evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      String string0 = evaluation0.toSummaryString(" is no comatible with ", true);
      assertEquals(" is no comatible with \nTotal Number of Instances                0     \n", string0);
      
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double1, 0.01);
      
      double[][] doubleArray0 = evaluation1.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double3 = evaluation0.falseNegativeRate(18);
      double double4 = evaluation0.totalCost();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation.makeOptionString((Classifier) null, true);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.461934648705106
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[0];
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      evaluation0.KBInformation();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.3, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3407425545624365
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.getRevision();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = new Capabilities(zeroR0);
      TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      evaluation0.confusionMatrix();
      Evaluation.handleCostOption((String) null, (-2));
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      evaluation2.incorrect();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1966.9653655);
      C45Loader c45Loader0 = new C45Loader();
      try { 
        c45Loader0.getNextInstance(instances1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.C45Loader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3151843192390613
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      double double0 = evaluation0.m_SumPriorEntropy;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.m_SumAbsErr;
      evaluation2.priorEntropy();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Evaluation.handleCostOption("", 25);
      Evaluation evaluation3 = null;
      try {
        evaluation3 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.619131950820971
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      evaluation0.m_MarginCounts = doubleArray0;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumErr = 2.0;
      evaluation1.weightedPrecision();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      evaluation1.coverageOfTestCasesByPredictedRegions();
      evaluation1.unweightedMicroFmeasure();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0134399594822057
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      instances0.deleteStringAttributes();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 496);
      vector0.add((SparseInstance) binarySparseInstance0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.unweightedMicroFmeasure();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      XRFFLoader xRFFLoader1 = new XRFFLoader();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      try { 
        xRFFLoader1.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3609728818229474
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      instances0.deleteStringAttributes();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 496);
      vector0.add((SparseInstance) binarySparseInstance0);
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      evaluation0.KBInformation();
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "y5(VaS* Hu";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = "@relation";
      Evaluation.main(stringArray0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(Double.NaN, double0, 0.01);
      
      String string1 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string1);
      
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.725166618401354
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      instances0.resample(mockRandom1);
      evaluation1.KBInformation();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8624911671521485
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom0);
      String[] stringArray0 = new String[1];
      textDirectoryLoader0.getOptions();
      Evaluation.main(stringArray0);
      double double1 = evaluation0.numTruePositives(0);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances1);
      double double2 = evaluation1.fMeasure(0);
      assertEquals(double2, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.271038285819512
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.getRevision();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = new Capabilities(zeroR0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      evaluation0.incorrect();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-1966.9653655);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.5145372732412534
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.makeDistribution(0.0);
      evaluation1.toCumulativeMarginDistributionString();
      instances0.deleteStringAttributes();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation1.toMatrixString(".cost");
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier0, instances0, 3393, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6280183561428703
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-1));
      vector0.add((SparseInstance) binarySparseInstance0);
      evaluation1.m_ClassNames = testInstances0.DEFAULT_WORDS;
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      J48 j48_0 = new J48();
      try { 
        evaluation0.evaluateModel((Classifier) j48_0, instances0, (Object[]) evaluation1.m_ClassNames);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.430147414353001
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Double double0 = new Double(0.0);
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2.0), (int[]) null, (-911));
      vector0.add((SparseInstance) binarySparseInstance0);
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      J48 j48_0 = new J48();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) j48_0, instances0, objectArray0);
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.883321747098406
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Double double0 = new Double(0.0);
      instances0.parallelStream();
      evaluation0.recall(2347);
      evaluation0.KBInformation();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[5] = ".arff";
      evaluation0.SFEntropyGain();
      evaluation0.pctCorrect();
      evaluation0.fMeasure(2);
      evaluation0.SFSchemeEntropy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-31);
      byteArray0[2] = (byte) (-24);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      evaluation0.SFMeanPriorEntropy();
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5649347706402224
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      instances0.deleteStringAttributes();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 496);
      vector0.add((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6, (int[]) null, 24);
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFalsePositiveRate();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      String[] stringArray0 = new String[6];
      stringArray0[0] = " -1       0    \n";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[3] = "kPIf;c]~}HR)/AW*";
      stringArray0[4] = "@data";
      stringArray0[5] = "@relation";
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel(" -1       0    \n", instances1, 488, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:  -1       0    
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.810112975773553
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedPrecision();
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-1));
      vector0.add((SparseInstance) binarySparseInstance0);
      evaluation1.m_ClassNames = testInstances0.DEFAULT_WORDS;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2029.286419891472, (int[]) null, 6);
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation1.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.addNumericTrainClass((-1), Double.NaN);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.685676133883035
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      int[] intArray0 = new int[3];
      intArray0[0] = 24;
      intArray0[1] = 24;
      intArray0[2] = 24;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(909.591, intArray0, 2401);
      evaluation0.relativeAbsoluteError();
      double double1 = evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFalsePositiveRate();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      evaluation0.relativeAbsoluteError();
      double double2 = evaluation0.m_SumSqrClass;
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(double3, double1, 0.01);
      
      double double4 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double4, double0, 0.01);
      
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.setDiscardPredictions(false);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.567637005227583
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      int[] intArray0 = new int[5];
      intArray0[0] = 493;
      intArray0[1] = 496;
      intArray0[2] = 496;
      intArray0[3] = 496;
      intArray0[4] = 496;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(718.61542541857, intArray0, 496);
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      vector0.add((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(493, intArray0, (-999));
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFalsePositiveRate();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.m_SumSqrClass;
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFalsePositiveRate();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1078597010297697
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation1.toMatrixString();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = new Capabilities(zeroR0);
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, (int[]) null, (-1));
      double double0 = evaluation1.meanPriorAbsoluteError();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Evaluation.wekaStaticWrapper(zeroR0, ".bsi");
      double double1 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6563802341671194
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      String string0 = evaluation0.toClassDetailsString("@relation");
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = new Capabilities(zeroR0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Capabilities.forInstances(instances0);
      testInstances1.generate();
      evaluation0.weightedTrueNegativeRate();
      String string1 = Evaluation.makeOptionString(zeroR0, true);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7221489918454203
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-0.9189385332046727), (int[]) null, 457);
      vector0.add((SparseInstance) binarySparseInstance0);
      double double0 = 6.0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6.0, (int[]) null, 470);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      vector0.add((SparseInstance) binarySparseInstance1);
      instances0.retainAll(vector0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 1002, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.717105633641207
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      evaluation0.matthewsCorrelationCoefficient((-631));
      evaluation0.numTrueNegatives(120);
      evaluation0.numTruePositives(943);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(943);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 943
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.641090650095412
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.weightedPrecision();
      double double1 = evaluation0.weightedFalsePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      sVMLightLoader0.getRevision();
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = new Capabilities(zeroR0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      evaluation0.weightedTrueNegativeRate();
      double double2 = evaluation0.numInstances();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation1.m_PriorEstimator = univariateKernelEstimator0;
      evaluation1.m_ComplexityStatisticsAvailable = false;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      int int0 = 0;
      MockRandom mockRandom0 = new MockRandom();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9186";
      stringArray0[1] = ".bsi";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".arff";
      stringArray0[4] = "U2xcv5?D";
      Evaluation.main(stringArray0);
      evaluation0.num2ShortID((-4378), (char[]) null, 0);
      Stacking stacking0 = new Stacking();
      // Undeclared exception!
      try { 
        stacking0.getClassifier(463);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 463
         //
         verifyException("weka.classifiers.MultipleClassifiersCombiner", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.weightedFalsePositiveRate();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte) (-31);
      byteArray0[3] = (byte) (-24);
      byteArray0[4] = (byte) (-14);
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte) (-111);
      byteArray0[7] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.weightedFalsePositiveRate();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1574.9115;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1966.9653655);
      double double1 = evaluation0.m_TotalCost;
      REPTree rEPTree0 = new REPTree();
      try { 
        Evaluation.wekaStaticWrapper(rEPTree0, ".arff");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // REPTree: No model built yet.
         //
         verifyException("weka.classifiers.trees.REPTree", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.261584326352595
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances0);
      evaluation1.weightedPrecision();
      instances0.parallelStream();
      // Undeclared exception!
      try { 
        evaluation0.recall((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2675632284814613
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Classifier classifier0 = null;
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation.makeOptionString((Classifier) null, false);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.019482983210203
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.makeDistribution(0.0);
      evaluation1.toCumulativeMarginDistributionString();
      instances0.deleteStringAttributes();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, (-2));
      vector0.add((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-81.216036), (int[]) null, (-2));
      evaluation1.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      evaluation1.weightedAreaUnderROC();
      evaluation1.weightedFalsePositiveRate();
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3936571033892298
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.toMatrixString("9186");
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.unclassified();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2538.0);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-694), (-2538.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -694
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3651357485351863
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      
      evaluation0.m_ComplexityStatisticsAvailable = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 100.0);
      evaluation0.KBInformation();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".bsi";
      stringArray0[3] = ".bsi";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@data";
      Evaluation.main(stringArray0);
      evaluation0.KBRelativeInformation();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5959004709021456
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFalsePositiveRate();
      try { 
        Evaluation.evaluateModel((Classifier) adaBoostM1_0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdaBoostM1:
         // 
         // -P <num>
         // \tPercentage of weight mass to base training on.
         // \t(default 100, reduce to around 90 speed up)
         // -Q
         // \tUse resampling for boosting.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.trees.DecisionStump:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.543830775191058
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      instances0.deleteStringAttributes();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 496);
      vector0.add((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6, (int[]) null, 24);
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderROC();
      evaluation0.weightedFalsePositiveRate();
      textDirectoryLoader0.getDataSet();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      String[] stringArray0 = new String[6];
      stringArray0[0] = " -1       0    \n";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@data";
      stringArray0[3] = "kPIf;c]~}HR)/AW*";
      stringArray0[4] = "@data";
      stringArray0[5] = "@relation";
      MockRandom mockRandom0 = new MockRandom(0L);
      SimpleLogistic simpleLogistic1 = new SimpleLogistic();
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.SimpleLogistic:
         // 
         // -I <iterations>
         // \tSet fixed number of iterations for LogitBoost
         // -S
         // \tUse stopping criterion on training set (instead of
         // \tcross-validation)
         // -P
         // \tUse error on probabilities (rmse) instead of
         // \tmisclassification error for stopping criterion
         // -M <iterations>
         // \tSet maximum number of boosting iterations
         // -H <iterations>
         // \tSet parameter for heuristic for early stopping of
         // \tLogitBoost.
         // \tIf enabled, the minimum is selected greedily, stopping
         // \tif the current minimum has not changed for iter iterations.
         // \tBy default, heuristic is enabled with value 50. Set to
         // \tzero to disable heuristic.
         // -W <beta>
         // \tSet beta for weight trimming for LogitBoost. Set to 0 for no weight trimming.
         // 
         // -A
         // \tThe AIC is used to choose the best iteration (instead of CV or training error).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 496);
      vector0.add((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6, (int[]) null, 24);
      textDirectoryLoader0.getDataSet();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "kPIf;c]~}HR)/AW*";
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        Evaluation.evaluateModel((Classifier) simpleLogistic0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.992904051929208
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setDebug(true);
      DecisionTable decisionTable0 = new DecisionTable();
      costSensitiveClassifier0.setClassifier(decisionTable0);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.makeDistribution(0.0);
      double double1 = evaluation0.m_SumSqrPredicted;
      double double2 = evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double double3 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.018196163842822
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_TrainClassWeights;
      evaluation1.toCumulativeMarginDistributionString();
      instances0.deleteStringAttributes();
      double double0 = evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double double1 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = 1.0E75;
      Double double0 = new Double(1.0E75);
      textDirectoryLoader0.setOutputFilename(false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 517.40032488;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.01);
      double double1 = evaluation0.m_SumSqrClass;
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      Evaluation.main(stringArray0);
      evaluation0.m_ClassPriors = doubleArray0;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(673, (char[]) null, 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.207725884452758
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Instances instances0 = ConverterUtils.DataSource.read((Loader) textDirectoryLoader0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation1.makeDistribution(Double.NaN);
      evaluation0.toCumulativeMarginDistributionString();
      instances0.deleteStringAttributes();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, (int[]) null, 17);
      vector0.add((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1228.40456564), (int[]) null, 1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      vector0.add((SparseInstance) binarySparseInstance1);
      instances0.retainAll(vector0);
      int int0 = 484;
      // Undeclared exception!
      try { 
        evaluation1.updateMargins(doubleArray0, 484, 484);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 484
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "University of Cambridge Computer Laboratory Technical Report No. 209";
      stringArray0[1] = "University of Cambridge Computer Laboratory Technical Report No. 209";
      stringArray0[2] = "   * @param args the commandline arguments\n";
      stringArray0[3] = "University of Cambridge Computer Laboratory Technical Report No. 209";
      stringArray0[4] = "University of Cambridge Computer Laboratory Technical Report No. 209";
      stringArray0[5] = "University of Cambridge Computer Laboratory Technical Report No. 209";
      stringArray0[6] = "University of Cambridge Computer Laboratory Technical Report No. 209";
      stringArray0[7] = "University of Cambridge Computer Laboratory Technical Report No. 209";
      try { 
        Evaluation.evaluateModel("University of Cambridge Computer Laboratory Technical Report No. 209", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name University of Cambridge Computer Laboratory Technical Report No. 209.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      MockRandom mockRandom0 = new MockRandom();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      textDirectoryLoader0.getDirectory();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = (double) 12;
      doubleArray0[2] = (double) 12;
      doubleArray0[3] = (double) 12;
      SparseInstance sparseInstance0 = new SparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.9018927541736046
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3073);
      vector0.add((SparseInstance) binarySparseInstance0);
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(Double.NaN, intArray0, (-1));
      vector0.add((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2029.286419891472, (int[]) null, 6);
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      evaluation0.weightedAreaUnderROC();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.94207540052751
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "`VYGK\"<D[a");
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double double1 = evaluation0.matthewsCorrelationCoefficient((-631));
      double double2 = evaluation0.numTrueNegatives(475);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.numTruePositives(120);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation0.fMeasure(480);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7758772221764683
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation1.m_PriorEstimator = univariateKernelEstimator0;
      evaluation1.m_ComplexityStatisticsAvailable = false;
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.SFEntropyGain();
      evaluation0.pctCorrect();
      evaluation0.fMeasure(0);
      evaluation0.SFSchemeEntropy();
      evaluation1.correct();
      System.setCurrentTimeMillis((-458L));
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.496504249556068
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      int[] intArray0 = new int[3];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, (-1));
      vector0.add((SparseInstance) binarySparseInstance0);
      evaluation1.m_ClassNames = testInstances0.DEFAULT_WORDS;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2029.286419891472, (int[]) null, 6);
      evaluation0.confusionMatrix();
      evaluation0.incorrect();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (-26.57066874551);
      doubleArray0[2] = 2029.286419891472;
      doubleArray0[3] = (double) 6;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance2.attributeSparse(6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3904281137149868
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.makeDistribution(0.0);
      evaluation1.toCumulativeMarginDistributionString();
      instances0.deleteStringAttributes();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation1.getRevision();
      MockRandom mockRandom0 = new MockRandom();
      Capabilities capabilities0 = new Capabilities(costSensitiveClassifier0);
      SGD sGD0 = new SGD();
      Capabilities capabilities1 = sGD0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances0.setClassType((-2));
      Instances instances1 = testInstances1.generate();
      assertFalse(instances1.checkForStringAttributes());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7436979963351074
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double double0 = evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      ZeroR zeroR0 = new ZeroR();
      Capabilities capabilities0 = new Capabilities(zeroR0);
      SGD sGD0 = new SGD();
      Capabilities capabilities1 = sGD0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities1);
      testInstances1.setClassType((-1));
      testInstances0.generate();
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3161898467802446
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0E75;
      doubleArray1[1] = 1.3;
      doubleArray1[2] = 1.0E75;
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      doubleArray1[3] = 1.0E75;
      doubleArray1[4] = 517.40032488;
      doubleArray1[5] = 1.3;
      doubleArray1[6] = 517.40032488;
      doubleArray1[7] = Double.NaN;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 1.3);
      double double0 = evaluation0.KBInformation();
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      evaluation0.KBRelativeInformation();
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.951425628453421
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom();
      Instances instances1 = instances0.resample(mockRandom0);
      String[] stringArray0 = new String[1];
      textDirectoryLoader0.getOptions();
      Evaluation.main(stringArray0);
      double double1 = evaluation0.numTruePositives(0);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances1);
      double double2 = evaluation1.fMeasure(0);
      double double3 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      evaluation0.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.weightedPrecision(), 0.01);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.587148170159149
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      instances0.deleteStringAttributes();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, 496);
      vector0.add((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, (int[]) null, 496);
      vector0.add((SparseInstance) binarySparseInstance1);
      int[] intArray0 = new int[5];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 2000;
      AbstractInstance.s_numericAfterDecimalPoint = 6;
      intArray0[4] = (-9);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, intArray0, 494);
      evaluation0.relativeAbsoluteError();
      double double0 = evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.weightedAreaUnderROC();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.addNumericTrainClass(2.0, 0.0);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0804609058195216
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int int0 = (-2141);
      double[] doubleArray0 = new double[23];
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toSummaryString("", false);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      evaluation0.toMatrixString();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Null null0 = new Null();
      M5Rules m5Rules0 = new M5Rules();
      Capabilities capabilities0 = m5Rules0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = 1.0E75;
      evaluation0.weightedPrecision();
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = 1.0E75;
      doubleArray0[1] = 517.40032488;
      doubleArray0[2] = 1.0E75;
      doubleArray0[3] = 1.0E75;
      doubleArray0[4] = 1.0E75;
      doubleArray0[5] = 1.0E75;
      doubleArray0[6] = 1.0E75;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 1.3;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0E75);
      evaluation0.recall(2347);
      Stacking stacking0 = new Stacking();
      // Undeclared exception!
      try { 
        stacking0.getClassifier(68);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 68
         //
         verifyException("weka.classifiers.MultipleClassifiersCombiner", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7080988763265408
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Vector<SparseInstance> vector0 = new Vector<SparseInstance>();
      vector0.add((SparseInstance) null);
      SparseInstance sparseInstance0 = null;
      int int0 = 18;
      SparseInstance sparseInstance1 = new SparseInstance(18);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance1);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-122);
      byteArray0[6] = (byte)7;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      vector0.add((SparseInstance) binarySparseInstance0);
      instances0.retainAll(vector0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 18);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedPrecision();
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      double double1 = evaluation0.KBInformation();
      assertEquals(0.0, double1, 0.01);
      
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      instances0.getRevision();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation1.crossValidateModel((Classifier) adaBoostM1_0, instances0, 258, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.32290148087126
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.priorEntropy();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      MockRandom mockRandom0 = new MockRandom((-1));
      MockRandom mockRandom1 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) filteredClassifier0, instances0, 10001, (Random) mockRandom1, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.1963029825642364
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.m_SumAbsErr;
      evaluation0.priorEntropy();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      MockRandom mockRandom0 = new MockRandom((-5339));
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) textDirectoryLoader0;
      try { 
        evaluation0.crossValidateModel((Classifier) filteredClassifier0, instances1, (-5339), (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.5295291652033653
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "`VYGK\"<D[a");
      evaluation0.weightedFalsePositiveRate();
      SVMLightLoader sVMLightLoader0 = new SVMLightLoader();
      evaluation0.toSummaryString(" is no comatible with ", true);
      evaluation0.weightedMatthewsCorrelation();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      evaluation0.confusionMatrix();
      try { 
        Evaluation.handleCostOption(";jck8?P,]riF26Q-Z", 104);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      textDirectoryLoader0.getStructure();
      try { 
        Evaluation.handleCostOption(".bsi", 11);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
