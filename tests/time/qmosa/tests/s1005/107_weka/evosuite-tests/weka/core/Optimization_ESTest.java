/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:59:13 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1591.0);
      doubleArray0[0] = 1526.967060275;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(5, 5);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(5, 5);
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = false;
      matrix1.arrayLeftDivideEquals(matrix0);
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      Locale locale0 = new Locale("TECHREPORT");
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      parsePosition0.setIndex(5);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      parsePosition0.setIndex((-1679));
      parsePosition0.setIndex(5);
      parsePosition0.setIndex(19);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      numberFormat0.parseObject("TECHREPORT", parsePosition0);
      matrix1.print(numberFormat0, (-3842));
      double[] doubleArray1 = Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray0);
      assertArrayEquals(new double[] {0.0, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      
      double[] doubleArray2 = Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray1);
      assertArrayEquals(new double[] {1526.967060275, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1591.0);
      doubleArray0[0] = 1526.967060275;
      weka.core.matrix.Matrix.random(5, 5);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(5, 5);
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      weka.core.matrix.Matrix.identity(5, 5);
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      Locale locale0 = new Locale("ECHREPORT");
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      parsePosition0.setIndex(5);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      parsePosition0.setIndex((-1674));
      parsePosition0.setIndex(5);
      parsePosition0.setIndex(19);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      numberFormat0.parseObject("ECHREPORT", parsePosition0);
      Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray1);
      Random.setNextRandom((-3842));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte) (-25);
      byteArray0[7] = (byte) (-25);
      byteArray0[8] = (byte) (-25);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cannot find feasible lambda");
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(1242, 729);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      assertNotSame(doubleArray0, doubleArray1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1591.0);
      doubleArray0[0] = 1526.967060275;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(5, 5);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(5, 5);
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      matrix1.arrayLeftDivideEquals(matrix0);
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      Locale locale0 = new Locale("TECHREPORT");
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      parsePosition0.setIndex(5);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      parsePosition0.setIndex((-1679));
      parsePosition0.setIndex(5);
      parsePosition0.setIndex(19);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      numberFormat0.parseObject("TECHREPORT", parsePosition0);
      matrix1.print(numberFormat0, (-3842));
      Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray0);
      Optimization.solveTriangle(matrix1, doubleArray0, true, booleanArray1);
      Random.setNextRandom((-3842));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1526.967060275;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(5, 5);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      booleanArray1[2] = true;
      booleanArray1[3] = true;
      Locale locale0 = new Locale("ECHREPORT");
      DecimalFormat decimalFormat0 = new DecimalFormat("ECHREPORT");
      ParsePosition parsePosition0 = new ParsePosition(5);
      Locale locale1 = Locale.CHINA;
      locale1.getDisplayVariant(locale0);
      locale0.getDisplayLanguage(locale1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      parsePosition0.setIndex(5);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      parsePosition0.setIndex(5);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      decimalFormat0.parseObject("ECHREPORT", parsePosition0);
      matrix0.print((NumberFormat) decimalFormat0, (-3842));
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      
      Random.setNextRandom((-3842));
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray1);
      assertArrayEquals(new double[] {1526.967060275, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(7);
      optimization_DynamicIntArray0.addElement(7);
      optimization_DynamicIntArray0.getRevision();
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      optimization_DynamicIntArray0.addElement(7);
      optimization_DynamicIntArray0.removeElementAt(0);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(36, 36);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, (double[]) null, true, (boolean[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(2);
      double[] doubleArray0 = new double[7];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[3] = 1.0000000000000284;
      doubleArray0[4] = (-54.98938);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 1.0000000298023224;
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle((weka.core.matrix.Matrix) null, doubleArray0, false, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1591.0);
      doubleArray0[1] = 1526.967060275;
      doubleArray0[2] = 2066.427637926983;
      doubleArray0[3] = (-2762.21);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(366, 366);
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, (boolean[]) null);
      assertArrayEquals(new double[] {Double.NEGATIVE_INFINITY, Double.NaN, Double.NaN, Double.NaN}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1591.0), 1526.967060275, 2066.427637926983, (-2762.21)}, doubleArray0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      assertEquals(0, optimization_DynamicIntArray0.size());
      
      optimization_DynamicIntArray0.addElement((-1279));
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.size();
      optimization_DynamicIntArray0.getRevision();
      assertEquals(1, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(30);
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(30);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 30
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5511620836589715
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(26);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(26, 41);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[] doubleArray0 = new double[3];
      File file0 = MockFile.createTempFile("\nUsage: ", "");
      MockFile mockFile0 = new MockFile(file0, "fr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      PrintWriter printWriter0 = mockPrintWriter0.append('>');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter0.format("", (Object[]) null);
      NumberFormat.getPercentInstance();
      Optimization.solveTriangle(matrix0, doubleArray0, false, (boolean[]) null);
      optimization_DynamicIntArray0.addElement(0);
      assertEquals(3, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.964532478280498
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1526.967060275;
      weka.core.matrix.Matrix matrix0 = weka.core.matrix.Matrix.random(5, 5);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      boolean[] booleanArray1 = new boolean[4];
      booleanArray1[0] = false;
      booleanArray1[1] = true;
      booleanArray1[2] = false;
      Locale locale0 = new Locale("ECHREPORT");
      NumberFormat numberFormat0 = NumberFormat.getInstance(locale0);
      ParsePosition parsePosition0 = new ParsePosition(5);
      Locale locale1 = Locale.ENGLISH;
      locale0.getDisplayLanguage(locale1);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      parsePosition0.setIndex(5);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1);
      parsePosition0.setIndex(5);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList3, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode0);
      numberFormat0.parseObject("ECHREPORT", parsePosition0);
      matrix0.print(numberFormat0, (-3842));
      Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
      Random.setNextRandom((-3842));
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(252);
      optimization_DynamicIntArray0.addElement(252);
      assertEquals(1, optimization_DynamicIntArray0.size());
  }
}
