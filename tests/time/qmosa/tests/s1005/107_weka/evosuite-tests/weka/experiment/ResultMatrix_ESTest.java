/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 19:08:28 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray1 = new int[2][5];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[][] intArray2 = new int[0][8];
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSummary(intArray1, intArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.309443907283561
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      double[][] doubleArray0 = new double[1][1];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      resultMatrixPlainText0.RIGHT_PARENTHESES = null;
      doubleArray1[4] = (double) 1;
      doubleArray1[5] = 1351.82473;
      doubleArray0[0] = doubleArray1;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.padString("", (-377), false);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getRowCount();
      resultMatrixPlainText0.getRowNameWidth();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9274829883654556
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.toStringKey();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML1.getAverage(6);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1, 7);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader((String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4798626130127652
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[6] = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.setCount(1, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      stringArray0[1] = ")";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixGnuPlot0.setShowStdDev(false);
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.setSize(148, 1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.233746492566828
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-1338);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      resultMatrixHTML0.setColNameWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.m_ShowAverage = true;
      resultMatrixCSV0.getOptions();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringSummary();
      resultMatrixPlainText0.getDefaultEnumerateRowNames();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3613143090675246
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[6] = 1;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getAverage(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      resultMatrixSignificance0.setSummary(intArray1, intArray1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.getRowName(1688);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot1.setSize(0, 0);
      resultMatrixGnuPlot1.setStdDevPrec(0);
      resultMatrixHTML0.setColNameWidth(1029);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixGnuPlot1);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(1, 1);
      resultMatrixCSV2.getOptions();
      resultMatrixSignificance0.getDisplayName();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7732689801301778
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getColCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getAverage(26);
      resultMatrixCSV0.getDisplayName();
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML1.setColOrder(intArray0);
      resultMatrixCSV0.globalInfo();
      resultMatrixHTML0.getRowHidden(44);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0598355140413127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixLatex0.m_EnumerateRowNames = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      stringArray0[1] = "$\bullet$";
      stringArray0[2] = " ";
      stringArray0[3] = "$circ$";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.countWidthTipText();
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance1.setMeanWidth(22);
      resultMatrixSignificance1.setCount(2, 1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.setColNameWidth(0);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 8;
      intArray0[2] = 0;
      intArray0[3] = 3401;
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixHTML0.getDefaultPrintColNames();
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4596339812355787
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[6] = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 0);
      resultMatrixSignificance0.setCount(1, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      stringArray0[1] = ")";
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixGnuPlot0.setShowStdDev(false);
      resultMatrixGnuPlot0.setMeanPrec(1693);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.setSize(148, 1);
      resultMatrixGnuPlot0.getShowStdDev();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0517008018558625
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.setCountWidth(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getAverage((-717));
      resultMatrixCSV0.getDisplayName();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 2;
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixHTML0.isStdDev(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1001, 0);
      resultMatrixPlainText0.toStringSummary();
      resultMatrixCSV0.setCount(0, (-3228.6225252));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3704655629721922
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, ")");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      resultMatrixCSV0.m_ColNameWidth = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      vector0.clone();
      vector0.add(" ");
      vector0.add("");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setRowNameWidth(0);
      resultMatrixGnuPlot0.removeFilterName("& ");
      resultMatrixCSV1.toStringRanking();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth(1111);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV2.getOptions();
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8588959059829886
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, ")");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      resultMatrixCSV0.m_ColNameWidth = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getAverage(2);
      resultMatrixCSV0.getDisplayName();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      int[] intArray0 = new int[0];
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixHTML1.getDefaultPrintColNames();
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.901966069603956
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.setCountWidth((-1));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getAverage((-717));
      resultMatrixCSV0.getDisplayName();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(resultMatrixHTML0);
      resultMatrixHTML1.m_RowNameWidth = 0;
      resultMatrixHTML1.setColOrder(intArray0);
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixHTML0.getSignificance(0, (-430));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.617572065175961
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 1);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$\bullet$";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixLatex0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      resultMatrixPlainText1.setRowOrder(intArray0);
      resultMatrixPlainText1.setOptions(stringArray0);
      resultMatrixPlainText0.toStringKey();
      resultMatrixLatex0.clear();
      resultMatrixPlainText0.removeFilterName("AuJ");
      resultMatrixLatex0.getDefaultShowAverage();
      resultMatrixLatex0.getDisplayCol(1);
      int int0 = 125;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 774);
      resultMatrixGnuPlot0.clear();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize((-476), 1663);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.691346450498788
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, ")");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      resultMatrixCSV0.m_ColNameWidth = 1;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = " ";
      stringArray0[1] = "]";
      stringArray0[2] = "-summary data not set-";
      stringArray0[3] = "*";
      stringArray0[4] = "*";
      resultMatrixPlainText0.setOptions(stringArray0);
      resultMatrixPlainText0.toStringKey();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.clear();
      resultMatrixPlainText0.removeFilterName("-summary data not set-");
      resultMatrixLatex0.getDefaultShowAverage();
      resultMatrixLatex0.getDisplayCol(3);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex1.addHeader("tNRHCc", "[");
      ResultMatrixSignificance.main(stringArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.560539527685017
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.setCountWidth((-1));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringKey();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "v";
      stringArray0[1] = "8034";
      stringArray0[2] = "*";
      resultMatrixGnuPlot0.getOptions();
      stringArray0[3] = "oInY\"?+om~w";
      stringArray0[4] = "";
      stringArray0[5] = "]";
      stringArray0[6] = "v";
      stringArray0[7] = "[";
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixGnuPlot0.setShowStdDev(false);
      resultMatrixGnuPlot0.setMeanPrec((-1));
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 1;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.setSize(125, 1);
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.rowNameWidthTipText();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.890368212529478
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_SignificanceWidth = 687;
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.padString(")", 32, true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = 687;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.setMeanPrec(259);
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      int[][] intArray1 = new int[6][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      int[] intArray2 = new int[2];
      intArray2[0] = 1;
      intArray2[1] = 1;
      intArray1[2] = intArray2;
      intArray1[3] = intArray0;
      intArray1[4] = intArray0;
      intArray1[5] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSummary(intArray1, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.636203794244866
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixLatex0.m_EnumerateRowNames = false;
      String[] stringArray0 = new String[4];
      stringArray0[0] = " ";
      stringArray0[1] = "$\bullet$";
      stringArray0[2] = " ";
      stringArray0[3] = "$circ$";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "$\bullet$";
      stringArray1[1] = "./|gkOw#%(";
      stringArray1[2] = "(";
      resultMatrixPlainText0.setOptions(stringArray1);
      resultMatrixPlainText0.TIE_STRING = "";
      resultMatrixPlainText0.toStringKey();
      resultMatrixLatex0.clear();
      resultMatrixPlainText0.removeFilterName("8!?`/Pn-l");
      resultMatrixLatex0.getDefaultShowAverage();
      resultMatrixLatex0.getDisplayCol(0);
      resultMatrixLatex0.addHeader("(", ")");
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixPlainText0.trimString("}e", (-1));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9274829883654556
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.getRevision();
      resultMatrixCSV0.setCountWidth((-1));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.setEnumerateRowNames(false);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getAverage((-1));
      resultMatrixCSV1.getDisplayName();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 40;
      intArray0[2] = 2;
      intArray0[3] = (-717);
      intArray0[4] = 1;
      resultMatrixHTML0.setColOrder(intArray0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.setRowNameWidth(40);
      resultMatrixHTML1.getDefaultPrintColNames();
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.485779555868355
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1);
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 2;
      doubleArray2[1] = (double) 1;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = (double) 1;
      doubleArray3[2] = (double) 2;
      doubleArray3[3] = (double) 2;
      doubleArray3[4] = (double) 0;
      doubleArray3[5] = (double) 2;
      doubleArray3[6] = (double) 1;
      doubleArray3[7] = (double) 1;
      doubleArray0[2] = doubleArray3;
      resultMatrixCSV0.m_Mean = doubleArray0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.getCount(1);
      ResultMatrixPlainText.main((String[]) null);
      resultMatrixCSV0.getVisibleColCount();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.941189147059528
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowName((-2569), "");
      resultMatrixCSV0.setRowName(1, "  (No. of datasets where [col] >> [row])\n");
      resultMatrixSignificance0.getColName(2259);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 1);
      resultMatrixHTML0.toStringKey();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(376, 0);
      resultMatrixHTML1.getAverage((-4322));
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML1);
      // Undeclared exception!
      try { 
        resultMatrixCSV1.setRanking((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7380783554095367
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 2);
      resultMatrixCSV1.getRevision();
      assertEquals(2, resultMatrixCSV1.getRowCount());
      
      resultMatrixCSV0.getCount((-3004));
      assertFalse(resultMatrixCSV0.getDefaultEnumerateRowNames());
      assertFalse(resultMatrixCSV0.getDefaultRemoveFilterName());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultStdDevPrec());
      assertEquals(1, resultMatrixCSV0.getColCount());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9773504612397876
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_SignificanceWidth = 687;
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getColName(0);
      resultMatrixSignificance0.padString("(1)", 32, true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[3];
      intArray0[1] = 32;
      intArray0[2] = 687;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      resultMatrixGnuPlot0.setMeanPrec(259);
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      int[][] intArray1 = new int[0][1];
      resultMatrixGnuPlot0.setColHidden(26, false);
      resultMatrixGnuPlot0.toStringRanking();
      assertTrue(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.454762770278199
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_SignificanceWidth = 687;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setSignificanceWidth(2461);
      resultMatrixCSV0.setColName(1, "(");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowNameWidth(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixCSV1);
      resultMatrixGnuPlot1.removeFilterName(" ");
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.printColNamesTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV1.getAverage(1934);
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot(2, 1);
      resultMatrixGnuPlot0.getMeanWidth();
      resultMatrixCSV0.getOptions();
      resultMatrixSignificance0.enumerateColNamesTipText();
      assertEquals(687, resultMatrixSignificance0.getSignificanceWidth());
      
      boolean boolean0 = resultMatrixGnuPlot2.getRemoveFilterName();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.535510527065355
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "+,U[d";
      stringArray0[1] = "v{Q{qtpsJi)";
      stringArray0[2] = "oit),2=-7";
      ResultMatrixHTML.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getSummaryTitle(920);
      int int0 = 8;
      resultMatrixPlainText0.m_ColNameWidth = 97;
      boolean boolean0 = true;
      resultMatrixPlainText0.m_ColNames = stringArray0;
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixPlainText0.m_HeaderValues = vector0;
      ResultMatrixSignificance resultMatrixSignificance0 = null;
      try {
        resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.189550866482298
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setColNameWidth((-1088));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(18, stringArray0.length);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.965278048559733
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_SignificanceWidth = 687;
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getColName(0);
      int int0 = 32;
      resultMatrixSignificance0.padString("(1)", 32, true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      resultMatrixSignificance0.m_RankingWins = intArray0;
      intArray0[1] = 32;
      intArray0[2] = 687;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixSignificance0.m_RankingLosses = intArray0;
      resultMatrixGnuPlot0.getColHidden((-1));
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(2761, 596);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.8004698251768687
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 0);
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.getCount(1);
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(2, resultMatrixCSV0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1238415154939942
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_RemoveFilterName = false;
      resultMatrixCSV0.setSignificanceWidth((-18));
      resultMatrixCSV0.setColName((-18), ")");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      resultMatrixCSV0.m_ColNameWidth = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setRowNameWidth(0);
      resultMatrixGnuPlot0.globalInfo();
      resultMatrixCSV1.toStringRanking();
      resultMatrixCSV1.printColNamesTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV1.stdDevPrecTipText();
      resultMatrixCSV1.getAverage(2);
      assertEquals(0, resultMatrixCSV1.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(8, 1);
      resultMatrixGnuPlot1.getMeanWidth();
      assertEquals("Whether to output column names or just numbers representing them.", resultMatrixGnuPlot1.printColNamesTipText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.252598057991523
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = (-3299);
      intArray0[6] = 2;
      intArray0[7] = 1;
      intArray0[8] = 2;
      resultMatrixSignificance0.m_RankingDiff = intArray0;
      resultMatrixSignificance0.clearHeader();
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.meanWidthTipText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixSignificance0);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals(0, resultMatrixLatex0.getCountWidth());
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0                                     &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5229967574106102
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getColName(2);
      resultMatrixSignificance0.padString("]", 373, true);
      resultMatrixSignificance0.setPrintRowNames(true);
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      
      resultMatrixSignificance0.setSignificanceWidth(606);
      resultMatrixSignificance0.countWidthTipText();
      resultMatrixSignificance0.setCount((-2524), 0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "]";
      stringArray0[1] = "[";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(2, 606);
      resultMatrixSignificance1.removeFilterNameTipText();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixSignificance1.showAverageTipText();
      assertEquals(0, resultMatrixSignificance1.getDefaultSignificanceWidth());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.788626037967038
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, ")");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      resultMatrixCSV0.m_ColNameWidth = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixGnuPlot0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.464116873194241
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, ")");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      resultMatrixCSV0.m_ColNameWidth = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setRowNameWidth(0);
      resultMatrixGnuPlot0.removeFilterName("& ");
      resultMatrixCSV1.toStringRanking();
      resultMatrixCSV1.printColNamesTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV1.stdDevPrecTipText();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixCSV0);
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getRowCount();
      assertTrue(resultMatrixCSV0.getRemoveFilterName());
      assertFalse(resultMatrixCSV0.getShowAverage());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.716977410445205
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV0.setRowName((-1), ")");
      int[] intArray1 = new int[2];
      intArray1[0] = (-1);
      intArray1[1] = 2;
      resultMatrixCSV0.m_RowOrder = intArray1;
      resultMatrixCSV0.setRowName(0, "  (No. of datasets where [col] >> [row])\n");
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getColName(2);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(2259, 2746);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.791039810954727
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(22, 22);
      resultMatrixHTML0.setColOrder((int[]) null);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.m_SignificanceWidth = 110;
      resultMatrixHTML1.setColNameWidth(22);
      assertEquals(22, resultMatrixHTML1.getColNameWidth());
      
      int[] intArray0 = new int[12];
      resultMatrixCSV0.m_RankingLosses = null;
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 22;
      intArray0[3] = 1;
      intArray0[4] = 482;
      intArray0[5] = 1;
      intArray0[6] = 482;
      intArray0[7] = 1;
      intArray0[8] = 0;
      resultMatrixHTML0.setColOrder(intArray0);
      resultMatrixHTML0.getDefaultPrintColNames();
      assertEquals(22, resultMatrixHTML0.getRowCount());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.637223118241246
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixLatex0.toArray();
      resultMatrixPlainText1.toString();
      resultMatrixLatex0.listOptions();
      resultMatrixPlainText1.setShowAverage(false);
      resultMatrixPlainText0.toArray();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ")";
      stringArray0[1] = "(";
      stringArray0[2] = "*";
      ResultMatrixPlainText.main(stringArray0);
      resultMatrixLatex0.addHeader("\footnotesize ", "Whether to output column names or just numbers representing them.");
      resultMatrixPlainText1.getOptions();
      resultMatrixPlainText0.getShowAverage();
      resultMatrixPlainText1.setRemoveFilterName(false);
      resultMatrixLatex0.setCountWidth(1617);
      resultMatrixLatex0.doubleToString(1, 3184);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      resultMatrixPlainText0.getCountWidth();
      resultMatrixPlainText0.getDefaultStdDevWidth();
      resultMatrixLatex0.toStringMatrix();
      assertEquals(1617, resultMatrixLatex0.getCountWidth());
      
      resultMatrixPlainText0.getDefaultPrintRowNames();
      resultMatrixPlainText0.headerKeys();
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4798626130127652
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getRevision();
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[7];
      intArray2[0] = (-2089);
      intArray2[1] = 1;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray2[4] = 1;
      intArray2[5] = 2;
      intArray2[6] = 1;
      intArray0[1] = intArray2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 1527);
      resultMatrixSignificance0.setCount(0, 1.0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      ResultMatrixGnuPlot.main((String[]) null);
      resultMatrixGnuPlot0.setShowStdDev(false);
      resultMatrixGnuPlot0.setMeanPrec(1527);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(0, 1529);
      resultMatrixGnuPlot1.m_StdDevWidth = 609;
      resultMatrixGnuPlot1.setRowOrder(intArray1);
      resultMatrixGnuPlot1.getPrintRowNames();
      // Undeclared exception!
      resultMatrixGnuPlot0.setSize(1553, 1529);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.508335201216428
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_SignificanceWidth = 687;
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getColName(0);
      resultMatrixSignificance0.padString("(1)", 32, true);
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.setSignificanceWidth(606);
      resultMatrixSignificance0.countWidthTipText();
      resultMatrixSignificance0.setCount(606, 0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[2] = "*";
      ResultMatrixLatex.main(stringArray0);
      resultMatrixSignificance0.removeFilterNameTipText();
      resultMatrixSignificance0.toStringSummary();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getDefaultEnumerateRowNames();
      assertEquals(606, resultMatrixSignificance0.getSignificanceWidth());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      String[][] stringArray0 = new String[6][9];
      String[] stringArray1 = new String[5];
      stringArray1[0] = "d}";
      stringArray1[1] = "*";
      stringArray1[2] = " ";
      stringArray1[3] = " ";
      stringArray1[4] = "(";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[5];
      stringArray2[0] = " ";
      stringArray2[1] = " ";
      stringArray2[2] = "(";
      stringArray2[3] = " ";
      stringArray2[4] = "d}";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[1];
      stringArray3[0] = "d}";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[1];
      stringArray4[0] = " ";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[7];
      stringArray5[0] = "(";
      stringArray5[1] = "v";
      stringArray5[2] = "*";
      stringArray5[3] = "v";
      stringArray5[4] = "gErT6zwW9{^0bt\"*";
      stringArray5[5] = "(";
      stringArray5[6] = "(";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[0];
      stringArray0[5] = stringArray6;
      int int0 = resultMatrixSignificance0.getColSize(stringArray0, (-1735));
      assertEquals(0, resultMatrixSignificance0.getSignificanceWidth());
      assertEquals(0, int0);
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8997571011430585
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_ShowAverage = false;
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, ")");
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.getColCount();
      resultMatrixCSV0.m_ColNameWidth = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringSummary();
      resultMatrixSignificance0.setSignificanceWidth((-1931));
      resultMatrixSignificance0.getDisplayName();
      resultMatrixSignificance0.RIGHT_PARENTHESES = "D/sb}&_\"XyFT*Z";
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.getSignificanceWidth();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV1.getDefaultPrintColNames();
      String[][] stringArray0 = new String[2][5];
      String[] stringArray1 = new String[7];
      stringArray1[0] = " ";
      stringArray1[1] = "[";
      stringArray1[2] = "*";
      stringArray1[3] = "-summary data not set-";
      stringArray1[4] = "D/sb}&_\"XyFT*Z";
      stringArray1[5] = "*";
      stringArray1[6] = "D/sb}&_\"XyFT*Z";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[3];
      stringArray2[0] = "[";
      stringArray2[1] = "Significance only";
      stringArray2[2] = "(";
      stringArray0[1] = stringArray2;
      int int0 = resultMatrixCSV0.getColSize(stringArray0, 2083);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9829347628102516
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.setSignificanceWidth(0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setColName((-416), "");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV1.getColCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("");
      vector0.add("");
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowNameWidth(97);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixGnuPlot0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot1.removeFilterName("");
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV2.printColNamesTipText();
      resultMatrixCSV1.stdDevPrecTipText();
      resultMatrixCSV2.stdDevPrecTipText();
      ResultMatrixCSV resultMatrixCSV3 = new ResultMatrixCSV();
      resultMatrixCSV3.getAverage((-885));
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = null;
      try {
        resultMatrixGnuPlot2 = new ResultMatrixGnuPlot((-1), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.165917516496863
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.setSignificanceWidth((-926));
      resultMatrixCSV0.setColName(2946, "");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("<");
      vector0.add("pIr`$PJ2Gmthw~");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowNameWidth(2943);
      resultMatrixGnuPlot0.removeFilterName("v");
      resultMatrixCSV1.toStringRanking();
      resultMatrixCSV0.printColNamesTipText();
      resultMatrixCSV1.stdDevPrecTipText();
      resultMatrixCSV1.stdDevPrecTipText();
      resultMatrixCSV1.getAverage(2943);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = null;
      try {
        resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(2943, (-2015));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.636435794285467
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDisplayName();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = " ";
      stringArray0[3] = "CSV";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixCSV0.getOptions();
      resultMatrixCSV0.setRowName(120, " ");
      resultMatrixCSV0.setRowName(120, "v");
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.isRowName((-13));
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.getDefaultPrintColNames();
      resultMatrixCSV0.printRowNamesTipText();
      resultMatrixCSV0.globalInfo();
      int[][] intArray0 = new int[9][9];
      int[] intArray1 = new int[3];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 1;
      intArray2[1] = 2;
      intArray2[2] = 2;
      intArray2[3] = 2;
      intArray2[4] = (-13);
      intArray0[1] = intArray2;
      int[] intArray3 = new int[2];
      intArray3[0] = (-13);
      intArray3[1] = 1;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[3];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = 1;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[1];
      intArray6[0] = 0;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[2];
      intArray7[0] = 5667;
      intArray7[1] = 10;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[0];
      intArray0[7] = intArray8;
      int[] intArray9 = new int[7];
      intArray9[0] = 10;
      intArray9[1] = 120;
      intArray9[2] = (-2018);
      intArray9[3] = 2;
      intArray9[4] = 1;
      intArray9[5] = 0;
      intArray9[6] = 2;
      intArray0[8] = intArray9;
      resultMatrixLatex0.setRanking(intArray0);
      int[][] intArray10 = new int[0][7];
      resultMatrixLatex0.m_Significance = intArray10;
      resultMatrixLatex0.m_Significance = intArray10;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader("q<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.9283325211161366
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.getColName(0);
      resultMatrixSignificance0.padString("v", 2, false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = (-2392);
      intArray0[3] = 32;
      intArray0[4] = 0;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.setMeanPrec(2971);
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize((-2392), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.165917516496863
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixCSV0.m_RemoveFilterName = true;
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, ")");
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.getColCount();
      resultMatrixCSV0.m_ColNameWidth = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.setRowNameWidth(0);
      resultMatrixCSV1.toStringRanking();
      resultMatrixCSV1.printColNamesTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV1.stdDevPrecTipText();
      resultMatrixCSV1.getAverage(2);
      assertEquals(0, resultMatrixCSV1.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(8, 1);
      resultMatrixGnuPlot1.getMeanWidth();
      int int0 = resultMatrixGnuPlot0.getCountWidth();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.425179415429069
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-1338);
      resultMatrixHTML0.m_RowOrder = intArray0;
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      resultMatrixHTML0.setColNameWidth(482);
      assertEquals(1, resultMatrixHTML0.getVisibleColCount());
      
      intArray0[8] = (-465);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(";
      stringArray0[1] = "(";
      stringArray0[2] = " ";
      ResultMatrixCSV.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSignificanceWidth();
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2314627901871082
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      String[] stringArray0 = new String[3];
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 2;
      resultMatrixGnuPlot0.m_ColOrder = intArray0;
      stringArray0[0] = "";
      Vector<String> vector0 = new Vector<String>();
      resultMatrixGnuPlot0.toStringKey();
      vector0.add("*");
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      vector0.add("");
      resultMatrixCSV0.LEFT_PARENTHESES = "";
      resultMatrixCSV0.getRowName((-657));
      stringArray0[1] = "";
      stringArray0[2] = "*";
      resultMatrixGnuPlot0.clearHeader();
      vector0.add("");
      resultMatrixCSV0.setRowNameWidth(26);
      resultMatrixGnuPlot0.removeFilterName(")/{#q)P.!b|1f&^");
      resultMatrixCSV0.m_RowNames = stringArray0;
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.printColNamesTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.getAverage(0);
      assertEquals(26, resultMatrixCSV0.getRowNameWidth());
      
      resultMatrixGnuPlot0.getMeanWidth();
      resultMatrixGnuPlot0.setStdDevWidth((-657));
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.510305126649146
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-1338);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      resultMatrixHTML0.setColNameWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "v";
      stringArray0[1] = ")";
      stringArray0[2] = "(";
      stringArray0[3] = "(";
      stringArray0[4] = " ";
      stringArray0[5] = " ";
      stringArray0[6] = ")";
      stringArray0[7] = "fS(%^X+Q3";
      stringArray0[8] = "(";
      ResultMatrixCSV.main(stringArray0);
      ResultMatrixHTML.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.516329201889268
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-1338);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      resultMatrixHTML0.setColNameWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      String[] stringArray0 = new String[0];
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8428806153171315
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 114);
      int[][] intArray1 = new int[3][7];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setRanking(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.485350416720123
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      resultMatrixSignificance0.m_EnumerateColNames = false;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      resultMatrixSignificance0.m_Counts = doubleArray0;
      resultMatrixSignificance0.getDisplayCol(0);
      String[] stringArray0 = resultMatrixSignificance0.getOptions();
      assertEquals(17, stringArray0.length);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setShowStdDev(false);
      resultMatrixPlainText0.m_EnumerateColNames = true;
      String string0 = resultMatrixPlainText0.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      
      int int0 = resultMatrixPlainText0.getMeanPrec();
      assertEquals(2, int0);
      assertFalse(resultMatrixPlainText0.getShowAverage());
      assertTrue(resultMatrixPlainText0.getPrintColNames());
      assertEquals(5, resultMatrixPlainText0.getCountWidth());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      
      resultMatrixSignificance0.getDefaultEnumerateColNames();
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9470047701612976
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 0);
      resultMatrixHTML0.m_RowNameWidth = 621;
      int int0 = (-366);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.doubleToString(0.0, (-366));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2501444518297604
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[17];
      intArray0[0] = 2;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 110);
      resultMatrixHTML0.setColNameWidth(97);
      assertEquals(97, resultMatrixHTML0.getColNameWidth());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.getOptions();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.519193492223669
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDisplayName();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "v";
      stringArray0[1] = "v";
      stringArray0[2] = " ";
      stringArray0[3] = "CSV";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixCSV0.setRowName(120, " ");
      resultMatrixCSV0.setRowName(120, "v");
      resultMatrixCSV0.toStringMatrix();
      resultMatrixCSV0.isRowName(0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.getDefaultPrintColNames();
      resultMatrixCSV0.printRowNamesTipText();
      resultMatrixCSV0.globalInfo();
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 0;
      int[] intArray1 = new int[5];
      intArray1[0] = 1;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[3] = 2;
      intArray1[4] = 0;
      int[] intArray2 = new int[1];
      intArray2[0] = 1;
      int[] intArray3 = new int[1];
      intArray3[0] = 0;
      int[] intArray4 = new int[2];
      intArray4[0] = 5667;
      intArray4[1] = 10;
      int[] intArray5 = new int[7];
      intArray5[0] = 10;
      intArray5[1] = 120;
      intArray5[2] = (-2018);
      intArray5[3] = 2;
      intArray5[4] = 1;
      intArray5[5] = 0;
      intArray5[6] = 2;
      int[][] intArray6 = new int[0][7];
      resultMatrixLatex0.m_Significance = intArray6;
      resultMatrixLatex0.m_Significance = intArray6;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader("q<");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.880058105880461
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.setRowName(3327, "  (No. of datasets where [col] >> [row])\n");
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.getColName(0);
      resultMatrixCSV0.padString("qp!ilEF=U[nk58Pi", 25);
      resultMatrixSignificance0.padString("=8^j*", 3327, true);
      resultMatrixSignificance0.m_MeanPrec = 3327;
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(4426, 3327);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.1214208180828136
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setMeanWidth((-2569));
      resultMatrixCSV0.setRowName((-2569), "Gkh/$|w}j");
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(22, 2);
      resultMatrixSignificance0.setEnumerateRowNames(true);
      resultMatrixSignificance0.setPrintRowNames(false);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.setSignificanceWidth(2);
      resultMatrixSignificance0.countWidthTipText();
      resultMatrixSignificance0.removeFilterNameTipText();
      assertFalse(resultMatrixSignificance0.getPrintRowNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixCSV0.getDefaultPrintColNames();
      assertEquals(1, resultMatrixCSV0.getRowCount());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.0054514728347828
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowName((-2569), "");
      resultMatrixCSV0.setRowName(1, "  (No. of datasets where [col] >> [row])\n");
      resultMatrixSignificance0.getColName(2259);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(45, 2);
      resultMatrixSignificance1.setPrintRowNames(true);
      resultMatrixSignificance0.setSignificanceWidth(3964);
      resultMatrixSignificance1.countWidthTipText();
      resultMatrixSignificance0.setCount((-2569), 3964);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "  (No. of datasets where [col] >> [row])\n";
      stringArray0[2] = "]";
      resultMatrixSignificance0.LEFT_PARENTHESES = "(";
      stringArray0[4] = null;
      stringArray0[5] = "";
      resultMatrixSignificance0.removeFilterNameTipText();
      assertEquals(3964, resultMatrixSignificance0.getSignificanceWidth());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixCSV0.getDefaultPrintColNames();
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.0863741003285914
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[5];
      intArray0[0] = 125;
      intArray0[1] = 0;
      intArray0[2] = 0;
      resultMatrixLatex0.setEnumerateRowNames(true);
      intArray0[3] = 2;
      intArray0[4] = 1;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setColNameWidth((-367));
      resultMatrixLatex0.clearRanking();
      resultMatrixLatex0.m_StdDev = null;
      resultMatrixLatex0.m_ColNameWidth = 2539;
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.setStdDevPrec((-367));
      resultMatrixLatex0.getRowOrder();
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.trimString("L7'8SrG`", 2090);
      assertTrue(resultMatrixLatex0.getEnumerateRowNames());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.762136040901145
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowName((-2569), "");
      resultMatrixCSV0.setRowName(1, "  (No. of datasets where [col] >> [row])\n");
      resultMatrixSignificance0.getColName(2259);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.padString((String) null, 2746, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.279289832816746
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      resultMatrixSignificance0.m_RowHidden = booleanArray0;
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.clearRanking();
      resultMatrixSignificance1.toString();
      resultMatrixSignificance1.m_SignificanceWidth = 97;
      resultMatrixSignificance1.setShowAverage(true);
      resultMatrixSignificance1.getColName(0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance1.padString((String) null, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.4577659358340624
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Z~r@)z(1fwDDAWe<fh";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      resultMatrixGnuPlot1.padString(" ", 0);
      resultMatrixGnuPlot1.getDefaultShowStdDev();
      resultMatrixGnuPlot0.isSignificance(2);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.assign(resultMatrixGnuPlot1);
      resultMatrixLatex0.globalInfo();
      assertEquals(50, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixPlainText0.getRowCount());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.5522198426784883
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[6] = 1;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getAverage(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      int[][] intArray1 = new int[4][2];
      intArray1[0] = intArray0;
      intArray1[1] = intArray0;
      intArray1[2] = intArray0;
      intArray1[3] = intArray0;
      resultMatrixSignificance0.setSummary(intArray1, intArray1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.getRowName(1688);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot1.setSize(0, 0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")";
      stringArray0[1] = " ";
      stringArray0[2] = "*";
      ResultMatrixSignificance.main(stringArray0);
      stringArray0[3] = " ";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      stringArray0[6] = ")";
      stringArray0[7] = "(";
      stringArray0[8] = "v";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3094032908615865
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toString();
      resultMatrixSignificance0.printRowNamesTipText();
      resultMatrixSignificance0.padString("", (-4500));
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 2);
      int int0 = 10;
      resultMatrixPlainText0.m_RowNameWidth = 10;
      resultMatrixPlainText0.toStringKey();
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSize(0, (-4500));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8526379562735795
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 2);
      String string0 = resultMatrixSignificance0.getColName(2);
      assertNull(string0);
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixSignificance0.getRowCount());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.9154793492940043
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      resultMatrixCSV0.m_CountWidth = 2;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.setCountWidth((-1));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringKey();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("\tThe width of the mean (0 = optimal).\n\t(default: ");
      Vector<String> vector1 = new Vector<String>();
      vector1.add("v");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      int int1 = 25;
      resultMatrixCSV0.setRowNameWidth(25);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.removeFilterName("?+h}");
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.printColNamesTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      int int2 = (-452);
      ResultMatrixCSV resultMatrixCSV2 = null;
      try {
        resultMatrixCSV2 = new ResultMatrixCSV((-452), 10);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9652780485597328
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[6] = 1;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.getAverage(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1697, 2);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.getHeader("*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.516079139110587
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[8] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-1338);
      intArray0[7] = 1;
      intArray0[6] = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.getRowName((-3627));
      resultMatrixGnuPlot0.setSize(44, 0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V?3Z3}\"[.+xy";
      stringArray0[1] = "Average";
      stringArray0[2] = "";
      stringArray0[3] = ")";
      ResultMatrixSignificance.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.432492641774624
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-1338);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      String[] stringArray0 = new String[0];
      ResultMatrixCSV.main(stringArray0);
      resultMatrixCSV0.printColNamesTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.getAverage(1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(8, 1820);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.189550866482298
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-1338);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      resultMatrixHTML0.setColNameWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      String[] stringArray0 = resultMatrixCSV0.getOptions();
      assertEquals(18, stringArray0.length);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.277851434192323
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[17];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      resultMatrixPlainText0.padString("*", (-1539), false);
      intArray0[6] = 1;
      resultMatrixPlainText0.WIN_STRING = "*";
      intArray0[7] = (-1898);
      intArray0[8] = 0;
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.LOSS_STRING = resultMatrixPlainText0.LOSS_STRING;
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getRowCount();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setSize(1041, (-1898));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.8004698251768687
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = (-1338);
      intArray0[5] = 1;
      intArray0[6] = 1;
      intArray0[7] = 1;
      double double0 = resultMatrixHTML0.getAverage(2);
      assertEquals(0.0, double0, 0.01);
      assertFalse(resultMatrixHTML0.getShowStdDev());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getRevision();
      assertEquals(1, resultMatrixSignificance0.getVisibleColCount());
      assertFalse(resultMatrixSignificance0.getDefaultRemoveFilterName());
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.7886260379670382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.setCountWidth((-1));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.setColNameWidth(0);
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(5, 844);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.411121681339632
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "\n6. mean prec to 3\n";
      stringArray0[2] = "Vgg#jo%";
      stringArray0[3] = "Generates the matrix in CSV ('comma-separated values') format.";
      stringArray0[4] = "";
      ResultMatrixCSV.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_MeanWidth = (-543);
      resultMatrixPlainText0.m_ColHidden = null;
      resultMatrixPlainText0.m_StdDevWidth = (-543);
      resultMatrixPlainText0.addHeader((String) null, (String) null);
      ResultMatrixPlainText resultMatrixPlainText1 = null;
      try {
        resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.857102837442004
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      double[] doubleArray0 = new double[6];
      resultMatrixPlainText0.removeFilterName("#set xlabel \"Datasets\"\n");
      resultMatrixPlainText0.m_RowNameWidth = 26;
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      resultMatrixPlainText0.addHeader("", (String) null);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 1;
      resultMatrixPlainText0.m_Counts = doubleArray0;
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixPlainText0.m_RowHidden = booleanArray0;
      ResultMatrixCSV resultMatrixCSV0 = null;
      try {
        resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.0370801618679657
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setPrintRowNames(false);
      resultMatrixHTML0.getColName((-1050));
      resultMatrixHTML0.removeFilterName("\tThe maximum width for the row names (0 = optimal).\n\t(default: ");
      resultMatrixHTML0.isRowName(2326);
      assertFalse(resultMatrixHTML0.getPrintRowNames());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-1050);
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 2326;
      resultMatrixLatex0.m_ColOrder = intArray0;
      resultMatrixLatex0.m_PrintColNames = false;
      resultMatrixLatex0.clear();
      boolean boolean0 = resultMatrixLatex0.getDefaultShowAverage();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3156355829141027
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int[] intArray0 = new int[17];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      resultMatrixPlainText0.setEnumerateColNames(false);
      resultMatrixPlainText0.padString("eX>Gm?cj{:=[%qAT&Q", (-1539), false);
      intArray0[6] = 1;
      resultMatrixPlainText0.WIN_STRING = "eX>Gm?cj{:=[%qAT&Q";
      intArray0[7] = (-1898);
      intArray0[8] = 0;
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.LOSS_STRING = "eX>Gm?cj{:=[%qAT&Q";
      resultMatrixPlainText0.toStringMatrix();
      resultMatrixPlainText0.getRowCount();
      resultMatrixPlainText0.getRowNameWidth();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.6969008500088405
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getColNameWidth();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.897357129212931
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      resultMatrixCSV0.m_CountWidth = 0;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 2);
      resultMatrixSignificance0.setPrintRowNames(true);
      resultMatrixSignificance0.setSignificanceWidth(0);
      resultMatrixSignificance0.countWidthTipText();
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV(0, (-1810));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2873481785640757
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.m_ShowAverage = false;
      resultMatrixCSV0.m_RemoveFilterName = false;
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, ")");
      resultMatrixCSV0.toStringSummary();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(1, 1);
      resultMatrixHTML0.setColNameWidth(1046);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV1.getOptions();
      assertEquals(1046, resultMatrixHTML0.getColNameWidth());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.521248710901985
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_SignificanceWidth = 687;
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getColName(0);
      resultMatrixSignificance0.padString("(1)", 32, true);
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.setSignificanceWidth(606);
      resultMatrixSignificance0.countWidthTipText();
      resultMatrixSignificance0.setCount(606, 0);
      assertTrue(resultMatrixSignificance0.getEnumerateRowNames());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[2] = "*";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 606);
      int int0 = resultMatrixGnuPlot0.getMeanWidth();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.618268371350764
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = (-569);
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      resultMatrixGnuPlot0.clearSummary();
      int int0 = resultMatrixGnuPlot0.getDefaultMeanPrec();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertEquals(2, int0);
      assertEquals(0, resultMatrixGnuPlot0.getDefaultCountWidth());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.1037742986214307
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      resultMatrixCSV0.countWidthTipText();
      resultMatrixCSV0.setSignificanceWidth(0);
      resultMatrixCSV0.setColName(0, "");
      resultMatrixCSV0.toStringSummary();
      int int0 = resultMatrixCSV0.getColCount();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.clearHeader();
      Vector<String> vector0 = new Vector<String>();
      vector0.add("The width of the counts (0 = optimal).");
      vector0.add("Average");
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV0.setRowNameWidth(1);
      resultMatrixGnuPlot0.removeFilterName("[");
      resultMatrixCSV1.toStringRanking();
      resultMatrixCSV1.printColNamesTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      resultMatrixCSV0.stdDevPrecTipText();
      assertEquals(1, resultMatrixCSV0.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(21, 80);
      ResultMatrixCSV resultMatrixCSV2 = new ResultMatrixCSV(resultMatrixGnuPlot1);
      resultMatrixCSV2.getAverage(0);
      ResultMatrixGnuPlot resultMatrixGnuPlot2 = new ResultMatrixGnuPlot(0, 1);
      resultMatrixGnuPlot2.getMeanWidth();
      int int1 = resultMatrixGnuPlot2.getCountWidth();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3156536237731387
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultSignificanceWidth();
      resultMatrixCSV0.m_CountWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.setCountWidth((-1));
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.toStringKey();
      resultMatrixCSV0.setStdDevWidth(0);
      resultMatrixHTML0.getAverage((-717));
      resultMatrixCSV0.getDisplayName();
      resultMatrixCSV0.getOptions();
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex((-1), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.965278048559733
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_SignificanceWidth = 687;
      resultMatrixSignificance0.setPrintRowNames(false);
      resultMatrixSignificance0.getColName(0);
      resultMatrixSignificance0.padString("(1)", 32, true);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 32;
      intArray0[2] = 687;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      resultMatrixGnuPlot0.setMeanPrec(259);
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize(32, (-405));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3412756702982427
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.padString("pN_..zINe)qqlXX", (-1539), false);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      assertEquals(1, resultMatrixPlainText1.getVisibleColCount());
      
      String string0 = resultMatrixPlainText1.toStringMatrix();
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
      
      resultMatrixPlainText0.getRowCount();
      int int0 = resultMatrixPlainText1.getRowNameWidth();
      assertEquals(2, resultMatrixPlainText1.getMeanPrec());
      assertEquals(25, int0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2270050582485554
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.clearSummary();
      resultMatrixGnuPlot0.setPrintRowNames(false);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      resultMatrixGnuPlot0.toArray();
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixSignificance0.m_RowNameWidth = 180;
      resultMatrixSignificance0.setRowOrder((int[]) null);
      resultMatrixSignificance0.getVisibleRowCount();
      resultMatrixGnuPlot0.setStdDevWidth(1);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.setRemoveFilterName(false);
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixGnuPlot0.getStdDevWidth());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.8526379562735795
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_ShowStdDev = true;
      int[] intArray0 = new int[6];
      resultMatrixGnuPlot0.setShowStdDev(false);
      intArray0[0] = 0;
      double[][] doubleArray0 = new double[8][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 632;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (double) 632;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 1;
      doubleArray2[4] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 2;
      doubleArray3[1] = (double) 632;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) 0;
      doubleArray4[1] = (double) 0;
      doubleArray4[2] = (double) 1;
      doubleArray4[3] = (double) 1;
      doubleArray4[4] = (double) 2;
      doubleArray4[5] = (double) 2;
      doubleArray4[6] = (double) 0;
      doubleArray4[7] = (double) 0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 1;
      doubleArray5[2] = (double) 0;
      doubleArray3[0] = (double) 0;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = (double) 632;
      doubleArray5[7] = (double) 632;
      doubleArray5[8] = (double) 2;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[9];
      doubleArray6[0] = (double) 0;
      doubleArray6[1] = (double) 0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (double) 0;
      doubleArray6[4] = (double) 1;
      doubleArray6[5] = (double) 1;
      doubleArray6[6] = (double) 1;
      doubleArray6[7] = (double) 2;
      doubleArray6[8] = (double) 2;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[2];
      doubleArray7[0] = (double) 2;
      doubleArray7[1] = (double) 0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[3];
      doubleArray8[0] = 0.0;
      doubleArray8[1] = (double) 0;
      doubleArray8[2] = (double) 0;
      doubleArray0[7] = doubleArray8;
      resultMatrixGnuPlot0.m_Mean = doubleArray0;
      intArray0[1] = 632;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 1;
      intArray0[5] = 2;
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.m_SignificanceWidth = 415;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.getPrintRowNames();
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSize((-1766), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.651116054762002
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = 50;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = 26;
      intArray0[6] = 2;
      resultMatrixGnuPlot0.m_RankingLosses = intArray0;
      String string0 = resultMatrixCSV0.getColName(0);
      assertNotNull(string0);
      assertEquals("col0", string0);
      
      resultMatrixCSV0.getDefaultPrintColNames();
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(50, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getDefaultCountWidth());
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.4905234623209136
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ResultMatrixSignificance.main(stringArray0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 2112);
      resultMatrixSignificance0.m_ShowStdDev = false;
      resultMatrixSignificance0.getColName(1462);
      assertEquals(2112, resultMatrixSignificance0.getRowCount());
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertFalse(resultMatrixSignificance0.getShowStdDev());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.5480403364449598
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      assertFalse(resultMatrixPlainText0.getShowStdDev());
      
      int[] intArray0 = new int[17];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 2;
      String[] stringArray0 = new String[0];
      resultMatrixPlainText0.setOptions(stringArray0);
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      resultMatrixPlainText0.padString("eX>Gm?cj{:=[%qAT&Q", (-1539), false);
      intArray0[6] = 1;
      intArray0[7] = (-1898);
      intArray0[8] = 0;
      resultMatrixPlainText0.m_ColOrder = intArray0;
      resultMatrixPlainText0.LOSS_STRING = "eX>Gm?cj{:=[%qAT&Q";
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals(1, resultMatrixPlainText0.getColCount());
      
      String string0 = resultMatrixPlainText0.toStringMatrix();
      assertEquals("Dataset                   null         \n---------------------------------------\n                           (0)   0.00 |\n---------------------------------------\n(v/ /eX>Gm?cj{:=[%qAT&Q)              |\n", string0);
      
      resultMatrixPlainText0.getRowCount();
      assertEquals(1, resultMatrixPlainText0.getVisibleRowCount());
      assertFalse(resultMatrixPlainText0.getDefaultShowAverage());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.941616952644221
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(492, 0);
      resultMatrixSignificance0.setColHidden(3923, true);
      assertTrue(resultMatrixSignificance0.getDefaultPrintRowNames());
      assertEquals(0, resultMatrixSignificance0.getDefaultSignificanceWidth());
      assertEquals(492, resultMatrixSignificance0.getColCount());
      assertEquals(2, resultMatrixSignificance0.getStdDevPrec());
      assertEquals(0, resultMatrixSignificance0.getColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getRowCount());
      assertFalse(resultMatrixSignificance0.getEnumerateRowNames());
      assertEquals(2, resultMatrixSignificance0.getDefaultMeanPrec());
      assertEquals(0, resultMatrixSignificance0.getStdDevWidth());
  }
}
