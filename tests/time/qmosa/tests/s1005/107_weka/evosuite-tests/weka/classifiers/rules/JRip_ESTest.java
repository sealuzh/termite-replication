/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:41:14 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.rules.JRip;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0557051606564785
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("m#?7sX1W{p@S^3", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-3514.013338628);
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (-1855.339614132);
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      jRip_NumericAntd0.covers(binarySparseInstance0);
      jRip0.minNoTipText();
      locale0.getExtensionKeys();
      try { 
        jRip0.rulesetForOneClass((-742.9013), (Instances) null, 0.0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, "", protectedProperties0);
      arrayList0.add(attribute0);
      BallNode ballNode0 = new BallNode(69);
      BallNode ballNode1 = ballNode0.m_Left;
      Instances instances0 = new Instances("'[.tNRHCc", arrayList0, 3127);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6847854169135204
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 469.7227636901908;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[24];
      intArray0[1] = (-1064);
      intArray0[2] = 3127;
      intArray0[3] = (-1064);
      intArray0[3] = 3127;
      intArray0[5] = 3127;
      intArray0[6] = 0;
      intArray0[7] = 3127;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.GERMANY;
      locale1.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("}dYDH``k*cl8)r%W", list0);
      locale0.clone();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean1 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "\nTZxTaO%UEP=Y*";
      stringArray0[2] = "P";
      stringArray0[3] = "eNC3[zMn";
      stringArray0[4] = "A9]w_!BXvBot!+S";
      stringArray0[5] = "s<zZ6Wz";
      stringArray0[6] = "ksyQ'SZSC}2ZtUAr:Zv";
      stringArray0[7] = "h3`/uxM:$-zh";
      stringArray0[8] = "5/[\"z7nlt,_lk8t~";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setDebug(false);
      boolean boolean0 = jRip0.getUsePruning();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5341058242422663
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.seedTipText();
      jRip0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      jRip0.setFolds(1);
      jRip0.setUsePruning(false);
      String[] stringArray0 = jRip0.getOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.debugTipText();
      jRip0.minNoTipText();
      jRip0.getMinNo();
      jRip0.setOptions(stringArray0);
      assertEquals(1, jRip0.getFolds());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.toString();
      jRip0.toString();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, 100000);
      BallNode ballNode0 = new BallNode(0);
      BallNode ballNode1 = ballNode0.m_Left;
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("SE9.F,_ug7_{2)", arrayList1, 4317);
      binarySparseInstance0.dataset();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      jRip0.getCheckErrorRate();
      System.setCurrentTimeMillis(0L);
      jRip0.setCheckErrorRate(false);
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", protectedProperties1);
      jRip_RipperRule0.toString(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.getDebug();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      Attribute.typeToString(attribute0);
      AbstractClassifier.makeCopy(bayesNet0);
      attribute0.addRelation((Instances) null);
      double double0 = 3116.289676379717;
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, (-289.45713923), 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2590752087262675
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 469.7227636901908;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("Unable to find the name of the package in the Description file for ", list1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip0.checkErrorRateTipText();
      jRip0.seedTipText();
      jRip0.setMinNo(0.0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.debugTipText();
      jRip0.minNoTipText();
      jRip0.getMinNo();
      BallNode ballNode0 = new BallNode((-742));
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute("Whether check for error rate >= 1/2 is included in stopping criterion.", "The minimum total weight of the instances in a rule.", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'T'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(2553);
      sparseInstance0.toString(2553, 125);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      try { 
        jRip0.rulesetForOneClass(6, (Instances) null, 6, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getDebug();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 766;
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-40));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Utils.SMALL = (-376.89773432);
      Attribute attribute0 = new Attribute("", arrayList0, 77);
      attribute0.enumerateValues();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttr();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.debugTipText();
      jRip0.minNoTipText();
      jRip0.getMinNo();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "The minimum total weight of the instances in a rule.";
      AbstractClassifier.makeCopies(jRip0, 11);
      stringArray0[4] = "\"+8d";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 469.7227636901908;
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setMinNo(0.0);
      assertEquals(0.0, jRip0.getMinNo(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList1);
      Instances instances0 = new Instances("J48 unpruned tree\n------------------\n", arrayList1, 5);
      Instances.mergeInstances(instances0, instances0);
      jRip0.setOptions(stringArray0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0174396456496058
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip0.enumerateMeasures();
      jRip_NumericAntd0.getAccu();
      jRip_NumericAntd0.accu = (-424.8785097687573);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("p}J3", arrayList0, 4);
      instances0.deleteWithMissing(attribute0);
      attribute0.addRelation(instances0);
      jRip0.setFolds(2);
      jRip0.setUsePruning(true);
      jRip_NumericAntd0.toString();
      jRip0.debugTipText();
      jRip0.minNoTipText();
      jRip0.getMinNo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "relational";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = "real";
      stringArray0[5] = "@relation";
      stringArray0[6] = "weka/core/Capabilities.props";
      jRip0.setOptions(stringArray0);
      jRip_NumericAntd0.getSplitPoint();
      assertEquals((-424.8785097687573), jRip_NumericAntd0.getAccu(), 0.01);
      
      jRip0.listOptions();
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.toString();
      int int0 = 1347;
      jRip0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(1347);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JRIP: No model built yet.");
      Attribute attribute0 = new Attribute(" intaces.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("JRIP: No model built yet.", arrayList0, 2459);
      try { 
        jRip0.rulesetForOneClass(0.0, instances0, 6.283185307179586, (-52.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9594045983154569
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.toString();
      jRip0.getOptions();
      jRip0.setMinNo(4.94E-321);
      AbstractClassifier.makeCopy(jRip0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("BpG;lZ:+(ZA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BpG;lZ:+(ZA not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.debugTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double double0 = 0.95;
      jRip_RipperRule0.setConsequent(0.95);
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.842607872853489
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(1347);
      jRip0.setUsePruning(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JRIP: No model built yet.");
      Attribute attribute0 = new Attribute(" intaces.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.debugTipText();
      jRip0.usePruningTipText();
      jRip0.getMinNo();
      try { 
        jRip0.rulesetForOneClass(1.3, (Instances) null, (-2475.7), 1.0E-6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      AbstractClassifier.makeCopy(jRip0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.getMinNo();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("$", arrayList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("v:IM@{we%,YL", arrayList0, protectedProperties0);
      MockFile mockFile0 = new MockFile("\tSet the number of runs of\n\toptimizations. (Default: 2)", "real");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      protectedProperties0.list((PrintWriter) mockPrintWriter0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip0.getUsePruning();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip0.setOptimizations(29);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 469.7227636901908;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[9];
      intArray0[0] = 3127;
      intArray0[1] = 766;
      intArray0[2] = 3127;
      intArray0[3] = (-1069);
      intArray0[4] = 3127;
      intArray0[5] = 3127;
      intArray0[6] = 0;
      intArray0[7] = 3127;
      intArray0[8] = 766;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1069), intArray0, 766);
      BallNode ballNode0 = new BallNode(69);
      BallNode ballNode1 = ballNode0.m_Left;
      Instances instances0 = new Instances("'[.tNRHCc", arrayList0, 3127);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Attribute attribute0 = new Attribute("@data", 1073742361);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.splitData(instances1, 0, 3127);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      boolean boolean0 = jRip0.getUsePruning();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.140016795854641
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      assertEquals(11, stringArray0.length);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(linkedList0);
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) linkedList1, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("weka.classifiers.rules.JRip$RipperRule", list1, 20);
      Attribute attribute1 = attribute0.copy("weka.classifiers.rules.JRip$RipperRule");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      jRip_NumericAntd0.getAttrValue();
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BayesNet bayesNet0 = new BayesNet();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3094.00805401;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      doubleArray0[1] = 578.55779748206;
      doubleArray0[2] = 3094.00805401;
      doubleArray0[3] = 3094.00805401;
      doubleArray0[5] = 3094.00805401;
      doubleArray0[6] = 3094.00805401;
      DenseInstance denseInstance0 = new DenseInstance(3094.00805401, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, (int[]) null, (-2294));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertTrue(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.428670366297488
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      jRip0.toString();
      int int0 = 1347;
      jRip0.toString();
      SparseInstance sparseInstance0 = new SparseInstance(1347);
      jRip0.setUsePruning(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JRIP: No model built yet.");
      Attribute attribute0 = new Attribute(" intaces.");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("JRIP: No model built yet.", arrayList0, 2459);
      try { 
        jRip0.rulesetForOneClass(0.0, instances0, 6.283185307179586, (-52.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.297687147780183
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3094.00805401;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      doubleArray0[1] = 578.55779748206;
      doubleArray0[2] = 3094.00805401;
      doubleArray0[3] = 3094.00805401;
      doubleArray0[4] = 3094.00805401;
      doubleArray0[5] = 3094.00805401;
      doubleArray0[6] = 3094.00805401;
      DenseInstance denseInstance0 = new DenseInstance(3094.00805401, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3094.00805401, (int[]) null, (-2294));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.GERMANY;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute(".arff", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "numeric");
      jRip_NumericAntd0.getRevision();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.0831221229604164
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-1.0));
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      ArrayList<Locale.LanguageRange> arrayList3 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList3, (Collection<String>) linkedList0, locale_FilteringMode0);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      JRip jRip1 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      JRip jRip2 = new JRip();
      double double0 = jRip1.getMinNo();
      assertEquals(2.0, double0, 0.01);
      
      JRip jRip3 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "t*5#R\"Tw#1_Mv=+";
      stringArray0[1] = "t*5#R\"Tw#1_Mv=+";
      stringArray0[2] = "The minimum total weight of the instances in a rule.";
      stringArray0[3] = "bibtex";
      stringArray0[4] = "The minimum total weight of the instances in a rule.";
      stringArray0[5] = "The minimum total weight of the instances in a rule.";
      stringArray0[6] = "t*5#R\"Tw#1_Mv=+";
      stringArray0[7] = "The minimum total weight of the instances in a rule.";
      JRip.RipperRule jRip_RipperRule1 = jRip1.new RipperRule();
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertFalse(jRip1.getDebug());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(88);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JRip jRip0 = new JRip();
      RandomCommittee randomCommittee0 = new RandomCommittee();
      AbstractClassifier.makeCopies(randomCommittee0, 1914);
      String string0 = jRip0.optimizationsTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals("The number of optimization runs.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("The minimum total weight of the instances in a rule.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minimum total weight of the instances in a rule. not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Instances instances0 = null;
      jRip0.setSeed(0L);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.toString();
      jRip0.foldsTipText();
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0E-6);
      Instances instances0 = null;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      jRip0.foldsTipText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      System.setCurrentTimeMillis(0L);
      jRip0.setCheckErrorRate(false);
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      jRip_RipperRule0.getRevision();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", protectedProperties1);
      jRip_RipperRule0.toString(attribute0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip0.getDebug();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      AbstractClassifier.makeCopy(bayesNet0);
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      properties0.replaceAll(biFunction0);
      attribute0.addRelation((Instances) null);
      jRip0.getRevision();
      try { 
        jRip0.rulesetForOneClass(3119.8307796668073, (Instances) null, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JRip jRip0 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3094.00805401;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      doubleArray0[1] = 578.55779748206;
      doubleArray0[2] = 3094.00805401;
      doubleArray0[3] = 3094.00805401;
      doubleArray0[4] = 3094.00805401;
      doubleArray0[5] = 3094.00805401;
      doubleArray0[6] = 3094.00805401;
      DenseInstance denseInstance0 = new DenseInstance(3094.00805401, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3094.00805401, (int[]) null, (-2294));
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Attribute attribute0 = new Attribute(".bsi", linkedList1, (-1));
      attribute0.copy(".bsi");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAttrValue();
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      String string0 = jRip0.debugTipText();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("Whether debug information is output to the console.", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.debugTipText();
      jRip0.setOptimizations(6);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getUsePruning();
      jRip_RipperRule0.getConsequent();
      jRip0.debugTipText();
      jRip0.checkErrorRateTipText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Whether check for error rate >= 1/2 is included in stopping criterion.";
      jRip0.setUsePruning(false);
      stringArray0[1] = "Whether debug information is output to the console.";
      stringArray0[2] = "Whether check for error rate >= 1/2 is included in stopping criterion.";
      stringArray0[3] = "Whether debug information is output to the console.";
      stringArray0[4] = "Whether debug information is output to the console.";
      stringArray0[5] = "Whether debug information is output to the console.";
      stringArray0[6] = "Whether debug information is output to the console.";
      stringArray0[8] = "Whether debug information is output to the console.";
      JRip.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      Utils.log2 = 469.7227636901908;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      int[] intArray0 = new int[9];
      intArray0[0] = 3127;
      intArray0[1] = 766;
      intArray0[2] = 3127;
      intArray0[3] = (-1064);
      intArray0[4] = 3127;
      intArray0[5] = 3127;
      intArray0[6] = 0;
      intArray0[7] = 3127;
      intArray0[8] = 766;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1064), intArray0, 766);
      BallNode ballNode0 = new BallNode(69);
      BallNode ballNode1 = ballNode0.m_Left;
      assertNull(ballNode1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.accu = 368.7944886763;
      jRip_NominalAntd0.getRevision();
      jRip0.checkErrorRateTipText();
      jRip0.seedTipText();
      jRip0.setMinNo(2706.5963);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      jRip0.debugTipText();
      jRip0.minNoTipText();
      jRip0.getMinNo();
      BallNode ballNode0 = new BallNode(1843);
      Attribute attribute1 = null;
      try {
        attribute1 = new Attribute("The seed used for randomizing the data.", "integer", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'i'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "D");
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("D", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.log2 = 470.0714481785702;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.copy();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int[] intArray0 = new int[24];
      intArray0[0] = 3127;
      intArray0[1] = (-1064);
      intArray0[2] = 3127;
      intArray0[3] = 766;
      intArray0[3] = 3127;
      intArray0[5] = 3127;
      intArray0[6] = 0;
      intArray0[7] = 3127;
      intArray0[8] = 766;
      BallNode ballNode0 = new BallNode(69);
      BallNode ballNode1 = ballNode0.m_Left;
      Instances instances0 = new Instances("'[.tNRHCc", arrayList0, 3127);
      Instances.mergeInstances(instances0, instances0);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCheckErrorRate();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(105);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>(7);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", arrayList0, protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.847642989259894
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      ClassOrder classOrder0 = new ClassOrder();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances.main((String[]) null);
      boolean boolean1 = jRip0.getUsePruning();
      assertFalse(boolean1 == boolean0);
      
      jRip0.getFolds();
      jRip_RipperRule0.size();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>(linkedList0);
      linkedList1.add("SH.t0SgnZ21PU%?");
      Attribute attribute0 = new Attribute("", linkedList1, 1519);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals("8118", string0);
      
      jRip0.setFolds(3);
      double double0 = jRip_NominalAntd0.getAccuRate();
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      Classifier classifier0 = AbstractClassifier.makeCopy(jRip0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "H2?Pk";
      stringArray0[1] = ") and ";
      stringArray0[2] = "Should never happen!";
      AbstractClassifier.runClassifier(classifier0, stringArray0);
      jRip0.getSeed();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, int0);
      assertEquals(1L, jRip0.getSeed());
  }
}
