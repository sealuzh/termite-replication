/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:40:58 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin Tumbers ather than ranges for discretized attributes.");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tUse bin Tumbers ather than ranges for discretized attributes.", arrayList0, 1636);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin Tumbers ather than ranges for discretized attributes.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("\tUse bin Tumbers ather than ranges for discretized attributes.", arrayList0, 1636);
      linkedList0.stream();
      Attribute attribute1 = attribute0.copy("?dCancel");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute1.copy("real");
      linkedList0.add("date");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      attribute1.enumerateValues();
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-2625.181942961618);
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance((-1586.61), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.622990624280091
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = false;
      discretize0.getBinRangesString(4);
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize("Array-Dimensions of 'new int[][]{{1,2,3},{4,5,6}}': ");
      discretize0.setFindNumBins(true);
      discretize0.getBins();
      Discretize discretize1 = new Discretize("rn;#Bm<@on5^`");
      discretize1.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize2 = new Discretize("rn;#Bm<@on5^`");
      // Undeclared exception!
      try { 
        discretize2.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.205464322156926
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5148.7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5148.7, doubleArray0);
      binarySparseInstance0.setValue((-913), 5148.7);
      DenseInstance denseInstance0 = new DenseInstance((-241), doubleArray0);
      int[] intArray0 = new int[6];
      intArray0[0] = (-241);
      intArray0[1] = (-241);
      intArray0[2] = (-241);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", (List<String>) null, protectedProperties0);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("date");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.listOptions();
      discretize0.getMakeBinary();
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SystemInUtil.addInputLine("D");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Policy");
      Discretize discretize0 = new Discretize("Policy");
      discretize0.getBins();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-B";
      stringArray0[1] = "Policy";
      stringArray0[2] = "Policy";
      stringArray0[3] = "Policy";
      stringArray0[4] = "Policy";
      stringArray0[5] = "Policy";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Policy\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("z");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Max     ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Max     ");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)10;
      byteArray1[2] = (byte)10;
      byteArray1[3] = (byte)10;
      byteArray1[4] = (byte)10;
      byteArray1[5] = (byte)10;
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize1 = new Discretize("\"position\" has unknown type");
      discretize0.setFindNumBins(true);
      discretize0.getBins();
      discretize1.getCapabilities();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double[][] doubleArray0 = new double[9][2];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (byte)10;
      doubleArray1[2] = (double) 10;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (double) (byte)10;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[4];
      doubleArray3[0] = (double) (byte)10;
      doubleArray3[1] = 3245.0;
      doubleArray3[2] = 0.0;
      doubleArray3[3] = (double) (byte)10;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = (double) (byte)10;
      doubleArray4[1] = (double) (byte)10;
      doubleArray4[2] = (double) (byte)10;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 3444.044732166135;
      doubleArray5[1] = (double) 10;
      doubleArray5[2] = (double) (byte)10;
      doubleArray5[3] = (double) (byte)10;
      doubleArray5[4] = (double) (byte)10;
      doubleArray5[0] = (double) (byte)10;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = (double) (byte)10;
      doubleArray5[8] = (double) (byte)10;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = (double) (byte)10;
      doubleArray6[1] = (double) (byte)10;
      doubleArray6[2] = 3444.044732166135;
      doubleArray6[3] = (double) (byte)10;
      doubleArray6[4] = (double) (byte)10;
      doubleArray6[5] = (double) (byte)10;
      doubleArray6[6] = (double) 10;
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = (double) (byte)10;
      doubleArray7[1] = (double) (byte)10;
      doubleArray7[2] = 3245.0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[1];
      doubleArray8[0] = (double) (byte)10;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[1];
      doubleArray9[0] = (double) (byte)10;
      doubleArray0[8] = doubleArray9;
      discretize1.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize1.getBinRangesString((-1225));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1225
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      int[] intArray0 = new int[8];
      intArray0[0] = (-2070787801);
      intArray0[1] = (-20);
      intArray0[2] = 10;
      intArray0[4] = 16;
      intArray0[5] = 1;
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("TRz9s[8#y^ET((Qo=<W", linkedList0, 4);
      Attribute attribute1 = new Attribute("@attribute", "", 2);
      attribute0.copy("relational");
      linkedList0.add("integer");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.710283334414665
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setFindNumBins(true);
      discretize0.attributeIndicesTipText();
      discretize0.getInvertSelection();
      discretize0.getOptions();
      int int0 = 0;
      DenseInstance denseInstance0 = new DenseInstance(0);
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "N1^zf1F=l knl";
      Discretize discretize0 = new Discretize("N1^zf1F=l knl");
      int int0 = (-235);
      SystemInUtil.addInputLine("N1^zf1F=l knl");
      discretize0.getBinRangesString((-235));
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-235));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.8221303550794707
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin Tumbers ather than ranges for discretized attributes.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[4];
      intArray0[0] = (-1563);
      intArray0[1] = 89;
      intArray0[2] = 102;
      intArray0[3] = 79;
      discretize0.setAttributeIndicesArray(intArray0);
      linkedList0.sort(comparator0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\tUse bin Tumbers ather than ranges for discretized attributes.";
      stringArray0[1] = "\tUse bin Tumbers ather than ranges for discretized attributes.";
      stringArray0[2] = "\tUse bin Tumbers ather than ranges for discretized attributes.";
      Filter.runFilter(discretize0, stringArray0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function2.compose((Function<? super String, ?>) function1);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function3 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function3);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function4 = unaryOperator3.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function4);
      // Undeclared exception!
      try { 
        unaryOperator0.andThen((Function<? super Object, ? extends SparseInstance>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5148.7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5148.7, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.setValue(61, (-2161.40092862));
      DenseInstance denseInstance0 = new DenseInstance(5148.7, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-241);
      intArray0[1] = (-241);
      intArray0[2] = (-241);
      intArray0[3] = (-241);
      intArray0[4] = 61;
      intArray0[6] = (-241);
      binarySparseInstance1.setValue((-241), 5148.7);
      intArray0[7] = (-241);
      SparseInstance sparseInstance0 = new SparseInstance((-241), doubleArray0, intArray0, (-241));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(1713);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("[TSf", linkedList0, (-1436));
      linkedList1.add("numeric");
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      discretize0.useBinNumbersTipText();
      discretize0.binsTipText();
      int int0 = 1742;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1742);
      discretize0.attributeIndicesTipText();
      int int1 = (-2921);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2921));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, SparseInstance> function0 = null;
      Discretize discretize0 = new Discretize();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      Discretize discretize1 = new Discretize();
      discretize1.getRevision();
      UnaryOperator.identity();
      Function<Object, Integer> function1 = null;
      // Undeclared exception!
      try { 
        unaryOperator0.andThen((Function<? super Object, ? extends Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("\tUse bin Tumbers ather than ranges for discretized attributes.", linkedList1, 1636);
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Attribute attribute1 = new Attribute("\tUse bin Tumbers ather than ranges for discretized attributes.", linkedList2, 1636);
      attribute1.equalsMsg(attribute0);
      SystemInUtil.addInputLine("@attribute");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@end";
      stringArray0[1] = "@end";
      stringArray0[2] = "@attribute";
      attribute0.isInRange(3);
      stringArray0[3] = "numeric";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.globalInfo();
      discretize0.useBinNumbersTipText();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      DenseInstance denseInstance0 = new DenseInstance(2265.429, doubleArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize("^Z3[b->rl'r]");
      // Undeclared exception!
      try { 
        discretize0.input(denseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize("\"position\" has unknown type");
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = 3441.4517;
      doubleArray1[2] = 811.52827;
      doubleArray1[3] = 5.3;
      doubleArray1[4] = (-2337.690943378427);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[11];
      doubleArray2[0] = Double.NEGATIVE_INFINITY;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[8];
      doubleArray3[0] = (-2337.690943378427);
      doubleArray3[1] = 811.52827;
      doubleArray3[2] = 811.52827;
      doubleArray3[3] = 811.52827;
      doubleArray3[4] = 811.52827;
      doubleArray3[5] = Double.NEGATIVE_INFINITY;
      doubleArray3[6] = 0.0;
      doubleArray3[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[3];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 5.3;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[1];
      doubleArray5[0] = 811.52827;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = (-1804.65280996);
      doubleArray6[2] = 3441.4517;
      doubleArray6[3] = 3441.4517;
      doubleArray6[4] = 3441.4517;
      doubleArray6[5] = (-2337.690943378427);
      doubleArray6[6] = 811.52827;
      doubleArray6[7] = 0.0;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize("V]0%1HLc&0#!e{");
      discretize0.getInvertSelection();
      discretize0.attributeIndicesTipText();
      discretize0.m_DefaultCols = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setAttributeIndices("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".");
      AllFilter allFilter0 = new AllFilter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "V]0%1HLc&0#!e{";
      stringArray0[1] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[2] = "V]0%1HLc&0#!e{";
      stringArray0[3] = "V]0%1HLc&0#!e{";
      Filter.runFilter(allFilter0, stringArray0);
      AllFilter allFilter1 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter1.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.7372027162176846
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.setBins((-263));
      discretize0.setIgnoreClass(true);
      Filter.makeCopies(discretize0, 2004);
      discretize0.globalInfo();
      discretize0.setBins(4852);
      discretize0.getOptions();
      assertEquals(4852, discretize0.getBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5148.7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5148.7, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(2610.6, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(5148.7, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = 199;
      intArray0[1] = (-241);
      intArray0[2] = (-241);
      intArray0[3] = 199;
      intArray0[4] = 258;
      intArray0[5] = 199;
      intArray0[6] = (-241);
      intArray0[7] = (-241);
      SparseInstance sparseInstance0 = new SparseInstance((-1.7976931348623157E308), doubleArray0, intArray0, 892);
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize("[G]dHAh8euSy>VS:9");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(199);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      discretize0.setMakeBinary(true);
      Discretize discretize1 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      discretize1.setOutputFormat();
      discretize1.useBinNumbersTipText();
      discretize0.invertSelectionTipText();
      discretize0.globalInfo();
      discretize0.setUseBinNumbers(true);
      assertTrue(discretize0.getMakeBinary());
      
      discretize1.useEqualFrequencyTipText();
      int int0 = discretize1.getBins();
      assertFalse(discretize1.getMakeBinary());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "T:;LbLsPG=9=/");
      Discretize discretize0 = new Discretize("hbqy[mHK=v<(2nk54");
      discretize0.setBins(86);
      discretize0.getCutPoints(86);
      discretize0.getBinRangesString(86);
      assertEquals(86, discretize0.getBins());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5148.7;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5148.7, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance1.setValue(61, (-2161.40092862));
      DenseInstance denseInstance0 = new DenseInstance(158.8603633, doubleArray0);
      int[] intArray0 = new int[8];
      intArray0[0] = (-241);
      intArray0[1] = (-241);
      intArray0[2] = (-913);
      intArray0[3] = (-241);
      intArray0[4] = 61;
      intArray0[6] = (-241);
      intArray0[7] = (-913);
      SparseInstance sparseInstance0 = new SparseInstance((-241), doubleArray0, intArray0, (-913));
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize("Use bin Tumbers ather than ranges for discreti_ed attributes.");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2444.4482424;
      doubleArray0[1] = 2444.4482424;
      doubleArray0[2] = 2444.4482424;
      doubleArray0[3] = 2444.4482424;
      doubleArray0[1] = 2444.4482424;
      doubleArray0[5] = 2444.4482424;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2444.4482424, doubleArray0);
      binarySparseInstance0.setValue((-1952257859), 0.5);
      DenseInstance denseInstance0 = new DenseInstance(2444.4482424, doubleArray0);
      Discretize discretize0 = new Discretize();
      discretize0.isFirstBatchDone();
      discretize0.getAttributeIndices();
      System.setCurrentTimeMillis((-241));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0668041607880614
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5148.7;
      Discretize discretize0 = new Discretize("o}");
      discretize0.setOutputFormat();
      Discretize discretize1 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o}";
      stringArray0[1] = "o}";
      stringArray0[2] = "o}";
      stringArray0[3] = "o}";
      Discretize.main(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(735);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SystemInUtil.addInputLine("N1^zf1F=l knl");
      Discretize discretize0 = new Discretize("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      String string0 = discretize0.getRevision();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals("8964", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin Tumbers ather than ranges for discretized attributes.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("-R <col1,col2-col4,...>");
      Attribute attribute0 = new Attribute("\tUse bin Tumbers ather than ranges for discretized attributes.", linkedList0, 1636);
      Attribute attribute1 = new Attribute("date", "", 0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      function1.compose((Function<? super String, ?>) unaryOperator1);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      Function<Object, SparseInstance> function3 = (Function<Object, SparseInstance>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends SparseInstance>) function3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      discretize0.setUseEqualFrequency(false);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 5148.7;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function0);
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      Function<Object, Integer> function3 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Discretize discretize0 = new Discretize();
      UnaryOperator.identity();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "[$[z1tq!-=^}5 cu5a";
      stringArray0[2] = "0A7C%Kv!M";
      stringArray0[3] = "";
      stringArray0[4] = "0A7C%Kv!M";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "first-last";
      try { 
        Filter.batchFilterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("z");
      discretize0.setInvertSelection(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      assertEquals(0.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("P}UxQxM4", list0, (-2690));
      attribute0.copy((String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      linkedList0.add("@end");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      System.setCurrentTimeMillis((-388L));
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize("3Q~'Wee6]o,,@J}ZAG");
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin numbers rather than ranges for discretized attributes.");
      discretize0.setUseBinNumbers(false);
      discretize0.getUseBinNumbers();
      discretize0.globalInfo();
      discretize0.setDesiredWeightOfInstancesPerInterval(668.449);
      discretize0.setUseBinNumbers(false);
      assertEquals(668.449, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize("\tUse bin Tumbers ather than ranges for discretized attributes.");
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("\tUse bin Tumbers ather than ranges for discretized attributes.", linkedList0, 1636);
      attribute0.copy("\tUse bin Tumbers ather than ranges for discretized attributes.");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\tUse bin Tumbers ather than ranges for discretized attributes.";
      linkedList0.add("vK@");
      stringArray0[1] = "string";
      stringArray0[2] = "@attribute";
      stringArray0[3] = "relational";
      stringArray0[4] = "string";
      discretize0.setOptions(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize("z");
      Instances instances0 = null;
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }
}
