/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 18:55:36 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.586364183796183
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of(1L, 0L);
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      Range range1 = Range.of((-3453L), 2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483648L, 2147483648L);
      range2.toString();
      String string0 = range1.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ -3452 .. 2147483649 ]/RB", string0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem1);
      Range range3 = Range.of(2147483648L, 2147483648L);
      Range.of(2147483648L);
      Long long0 = new Long((-639L));
      Range range4 = Range.ofLength(2147483648L);
      Range range5 = range3.intersection(range4);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      
      Long long1 = new Long(2147483648L);
      range3.equals(long0);
      //  // Unstable assertion: assertTrue(range3.equals((Object)range2));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3749577676109377
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1342L), 151L);
      boolean boolean0 = range0.endsBefore(range1);
      range0.getEnd(range_CoordinateSystem0);
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1 == boolean0);
      
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem2);
      range0.toString();
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem3);
      assertEquals("[ -9223372036854775808 .. -9223372036854775808 ]/0B", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.650064780163398
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range1.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 466L, 466L);
      range1.intersection(range2);
      Range range3 = Range.of(466L);
      Range range4 = Range.ofLength(466L);
      long long0 = 32767L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 466L, 32767L);
      range2.isSubRangeOf(range1);
      range0.intersection(range4);
      range1.getLength();
      range1.intersects(range4);
      Object object0 = new Object();
      Object object1 = new Object();
      range3.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0923514767625604
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1959L), (-1959L));
      Long long0 = new Long(2147483647L);
      range0.toString(range_CoordinateSystem0);
      Long.getLong(">m[7B/");
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1958 .. -1958 ]/RB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -1958 .. -1958 ]/RB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5337534624371902
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775343L);
      Range range2 = Range.of(9223372036854775807L, 9223372036854775807L);
      Long long1 = new Long(3224L);
      Range range3 = Range.ofLength(0L);
      Range range4 = range3.intersection(range2);
      range4.startsBefore(range3);
      Long long2 = new Long(1);
      boolean boolean0 = range0.equals(long0);
      boolean boolean1 = range3.startsBefore(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(range1.equals((Object)range2));
      assertFalse(range3.equals((Object)range0));
      assertTrue(boolean1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = (-2147483648L);
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.0197361271389958
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 32767L;
      Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 255L;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 255L, 1868L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.927651487527812
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      boolean boolean0 = range0.equals(range_Builder0);
      boolean boolean1 = range1.intersects(range0);
      assertFalse(boolean1 == boolean0);
      
      Long.getLong("$VALUES");
      List<Range> list0 = range1.split(255L);
      Range range2 = range0.intersection(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertTrue(list1.isEmpty());
      
      Range.Builder range_Builder3 = new Range.Builder(466L);
      Range.Builder range_Builder4 = range_Builder1.contractEnd(255L);
      Range range3 = range2.intersection(range0);
      range3.getLength();
      Range.ofLength(466L);
      range2.startsBefore(range0);
      range3.equals(list0);
      assertEquals(4, list0.size());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 1L, 841L);
      Range range4 = range0.intersection(range2);
      assertSame(range2, range4);
      
      Range.Comparators.values();
      range1.asRange();
      long long0 = range1.getLength();
      assertEquals(932L, long0);
      
      Range range5 = range_Builder4.build();
      assertNotSame(range5, range1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.338296779187292
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      long long0 = 0L;
      Range.of(1L, 0L);
      Range range0 = Range.of((-3453L), 2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-128L);
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), (-128L));
      range1.toString();
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Long.getLong("[ -129 .. -128 ]/SB");
      Object object0 = new Object();
      range1.equals(object0);
      long long2 = 4186L;
      Range range2 = Range.of((-128L), 0L);
      range2.toString();
      // Undeclared exception!
      try { 
        Range.ofLength((-3453L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1032372377054718
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-32768L), 0L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.complementFrom(list0);
      Range.Comparators.values();
      range0.getEnd();
      // Undeclared exception!
      try { 
        Range.of(65535L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4154077918411785
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of((-1640L), 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1640L), (-1640L));
      Range.Comparators.values();
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals((-1641L), long0);
      
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.448808511015103
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      Range range1 = Range.of(9223372036854775807L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Long.getLong("S(%^X+");
      Long long0 = Long.getLong("[ 149 .. 600 ]/RB", 9223372036854775807L);
      range0.equals(long0);
      range1.split(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, (-32738L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -32738 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.589087954397603
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1868L);
      Range range2 = range0.intersection(range1);
      range1.intersection(range2);
      Range range3 = Range.ofLength(255L);
      Range range4 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      boolean boolean0 = range1.isSubRangeOf(range4);
      assertFalse(range4.isEmpty());
      
      range0.intersection(range1);
      long long0 = range2.getLength();
      assertEquals(1614L, long0);
      
      Range.ofLength(587L);
      range0.intersects(range3);
      Range range5 = range3.intersection(range1);
      assertTrue(range5.isEmpty());
      
      Range range6 = Range.of((-1114L), 3442L);
      boolean boolean1 = range6.startsBefore(range2);
      assertFalse(boolean1 == boolean0);
      
      List<Range> list0 = range6.split(1423L);
      assertEquals(4, list0.size());
      
      List<Range> list1 = range0.split(32767L);
      assertTrue(list1.contains(range4));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.303036997902144
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.4867070417473482
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Long.compareUnsigned((-100L), 600L);
      Long.compareUnsigned(149L, (-466L));
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1710L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1710 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.7886260379670387
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.337970001338365
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 247L, 1861L);
      Range.ofLength(247L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long.compareUnsigned((-354L), 3224L);
      Range.of(3224L, 3224L);
      Range.of(3224L);
      Long long0 = new Long(509L);
      Range.ofLength(3224L);
      // Undeclared exception!
      try { 
        Range.of(932L, (-2430L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3008541830597795
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.ofLength(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range0.equals(range_Builder1);
      range0.getEnd();
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2147483646L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5010343022345447
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder2.build();
      Range range2 = Range.of(466L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      boolean boolean0 = range2.intersects(range0);
      assertFalse(boolean0);
      
      Range range3 = range2.intersection(range1);
      assertFalse(range1.isEmpty());
      assertTrue(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long0 = range2.getEnd();
      assertEquals(466L, long0);
      
      range_Builder1.contractBegin(292L);
      Range.Comparators.values();
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 465 ]/0B", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.369269900916349
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Long long1 = new Long(3224L);
      Range range1 = Range.ofLength(2024L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.415690835071545
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range1.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 466L, 466L);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder0.copy();
      Range.Builder range_Builder4 = new Range.Builder(4199L, 65535L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        range0.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6255214183883955
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1868L);
      Range range2 = range0.intersection(range1);
      Range range3 = range1.intersection(range2);
      Range range4 = Range.ofLength(255L);
      Range range5 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      boolean boolean0 = range1.isSubRangeOf(range5);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range6 = range0.intersection(range1);
      Long.compareUnsigned(1486L, 9223372036854775807L);
      Range range7 = Range.of(32767L, 65535L);
      Range.ofLength(4557L);
      Range range8 = Range.of(range_CoordinateSystem0, (long) (-1), 4557L);
      range8.complement(range6);
      boolean boolean1 = range4.equals(range8);
      boolean boolean2 = range7.endsBefore(range1);
      //  // Unstable assertion: assertNotSame(range7, range5);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      
      List<Range> list0 = range3.complement(range2);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      range4.equals((Object) null);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3969283667500445
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      long long0 = 4294967295L;
      Long.compareUnsigned(4294967295L, (-1834L));
      Long.compareUnsigned(9223372036854743041L, 888L);
      Range.of(888L, 4294967295L);
      Range.of(4294967295L);
      Long long1 = new Long(0L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2940L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3171955025642754
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      long long0 = 32767L;
      Range range0 = Range.of(0L, 32767L);
      Range range1 = Range.ofLength(255L);
      range1.intersects(range0);
      range0.intersects(range1);
      Range range2 = Range.of((-1114L), 3442L);
      range2.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(255L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.6367784530541423
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(0L, 3261L);
      Range range1 = Range.of(range_CoordinateSystem0, 1097L, 4294967295L);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range0);
      Range range4 = Range.ofLength(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem1, 1868L, 3261L);
      Range range6 = Range.of(1097L);
      range6.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range7 = Range.ofLength(3261L);
      range5.intersection(range7);
      range4.getLength();
      long long0 = 587L;
      Range range8 = Range.ofLength(1868L);
      Range range9 = Range.of(range_CoordinateSystem2, 0L, 504L);
      range8.intersects(range9);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range8.getBegin(range_CoordinateSystem3);
      // Undeclared exception!
      try { 
        range3.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.469337052743599
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, (-3088L), (-3088L));
      range0.intersection(range1);
      long long0 = (-105L);
      Range range2 = Range.of(3251L);
      Long long1 = new Long(1152L);
      Range range3 = Range.ofLength(3251L);
      range3.intersection(range2);
      Long long2 = new Long(452L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4197290899656068
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, (-3088L), (-3088L));
      Range range2 = range0.intersection(range1);
      Range.ofLength(0L);
      range0.equals(range_CoordinateSystem0);
      boolean boolean0 = range0.endsBefore(range2);
      assertFalse(boolean0);
      
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      List<Range> list2 = range0.complementFrom(list1);
      assertTrue(list2.contains(range2));
      assertFalse(list2.contains(range0));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.5793933492792886
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1868L);
      Range range2 = range0.intersection(range1);
      range1.intersection(range2);
      Range range3 = Range.ofLength(255L);
      Range range4 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range1.isSubRangeOf(range4);
      range0.intersection(range1);
      range2.getLength();
      range0.intersects(range3);
      range3.intersection(range1);
      Range range5 = Range.of((-1114L), 3442L);
      range5.startsBefore(range0);
      range5.startsBefore(range2);
      range4.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32767L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.58333616927828
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(1L, 0L);
      Range range1 = Range.of((-3453L), 2147483648L);
      Range range2 = Range.of(0L);
      Range range3 = range2.intersection(range0);
      range3.getLength();
      Range.ofLength(2547L);
      range1.startsBefore(range0);
      Object object0 = new Object();
      range3.equals(object0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.553788230000531
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.expandEnd((-1484L));
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Long.compareUnsigned((-100L), 600L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder5 = new Range.Builder((-466L), (-466L));
      range_Builder5.copy();
      // Undeclared exception!
      try { 
        range_Builder5.contractEnd(3286L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.443901631979042
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(149L);
      Range range1 = Range.ofLength(149L);
      range1.complement(range0);
      range1.endsBefore(range0);
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertEquals(1L, long0);
      
      List<Range> list0 = range0.split(149L);
      List<Range> list1 = range0.complementFrom(list0);
      assertSame(range0, range1);
      assertEquals(0, list1.size());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.23823154034824
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(1L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.expandBegin(2147483647L);
      range_Builder0.copy();
      long long1 = (-2792L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, (-4723L), 1L);
      range_Builder3.contractBegin(1L);
      range_Builder2.expandBegin((-2792L));
      Range range0 = Range.ofLength(1L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3899118993071635
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.of(1L, 0L);
      Range.of((-3453L), 2147483648L);
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.6455291846004707
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.of((-1496L));
      Range range1 = Range.of(465L, 4294967295L);
      Range range2 = Range.of((-2900L), 10L);
      Range.Builder range_Builder0 = new Range.Builder(1860L, 2273L);
      range_Builder0.expandEnd((-2900L));
      range_Builder0.expandEnd(9223372036854773968L);
      List<Range> list0 = range2.complement(range0);
      range1.complementFrom(list0);
      range1.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2900L), 32767L);
      Range range3 = Range.of((-1496L), 4294967295L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6875699284974703
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range1.isEmpty();
      boolean boolean0 = range0.intersects(range0);
      assertTrue(boolean0);
      
      Range range2 = Range.ofLength(992L);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.contractEnd((-1591L));
      range_Builder0.expandEnd((-633L));
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range2.complementFrom(list0);
      Range range3 = Range.of((-633L), 2271L);
      List<Range> list2 = range3.complementFrom(list1);
      assertTrue(list2.contains(range0));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4627600056160404
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 1L;
      Range.of(1L, 0L);
      Range range0 = Range.of((-3453L), 2147483648L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483648L, 2147483648L);
      range1.toString();
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      Long.getLong("[ 2147483647 .. 2147483648 ]/SB");
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Range.parseRange("[ 2147483647 .. 2147483647 ]/0B");
      // Undeclared exception!
      try { 
        Range.ofLength((-2900L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0026974323801805
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = (-32768L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 0L;
      Range.of((-32768L), 0L);
      // Undeclared exception!
      try { 
        Range.parseRange("\"&6S,!VD/", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse \"&6S,!VD/ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.4203299633738795
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      range1.toString();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString();
      range3.toString(range_CoordinateSystem0);
      range3.toString(range_CoordinateSystem0);
      Long.getLong("[ 1 .. 0 ]/RB");
      range2.equals("[ 1 .. 0 ]/RB");
      long long0 = 701L;
      range3.split(701L);
      Long.compareUnsigned(1945L, 0L);
      // Undeclared exception!
      try { 
        Range.of(65535L, 1945L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.221736094304879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range.of(518L);
      Range range1 = Range.ofLength(6208L);
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      List<Range> list0 = range1.split(1945L);
      assertFalse(list0.contains(range1));
      assertEquals(4, list0.size());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.8684090897434262
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(465L);
      List<Range> list0 = range0.split(2147483647L);
      Range range1 = Range.ofLength(600L);
      Range range2 = Range.of((-1496L));
      Range.of(465L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(466L, 466L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long.compareUnsigned((-1134L), (-128L));
      Long.compareUnsigned(4294967295L, (-466L));
      range_Builder0.expandEnd(281L);
      Range range3 = Range.of((-370L), 466L);
      range_Builder2.expandEnd((-2900L));
      Range range4 = Range.of((-1710L), 1470L);
      List<Range> list1 = range4.complement(range3);
      range1.complementFrom(list1);
      range0.complementFrom(list0);
      Range range5 = range2.asRange();
      assertSame(range2, range5);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.078761246924461
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 2032L;
      Range.of(range_CoordinateSystem0, 2032L, 2032L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      String string0 = "must be >=0";
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.7374919591449753
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range0.equals(range_Builder0);
      Range range2 = Range.ofLength(466L);
      range0.complement(range2);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder4.copy();
      Range.Builder range_Builder5 = new Range.Builder(466L, 466L);
      Range.Builder range_Builder6 = new Range.Builder(range_Builder3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder3.contractBegin(255L);
      range2.forEach(consumer0);
      Long.compareUnsigned((-100L), (-183L));
      long long0 = (-9223372036854775808L);
      Long.compareUnsigned((-9223372036854775808L), 1491L);
      long long1 = (-4054L);
      // Undeclared exception!
      try { 
        Range.of((-183L), (-4054L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.372691039528923
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range range0 = Range.of((-49L), (-49L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-311L), 363L);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.getEnd(range_CoordinateSystem1);
      range1.toString();
      range0.intersects(range1);
      range1.spliterator();
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      range1.isEmpty();
      Range range3 = Range.of((-311L));
      range1.spliterator();
      long long0 = new Long((-49L));
      range3.getBegin();
      long long1 = (-1947L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1947L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.7247128309651174
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range1.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 466L, 466L);
      Range range3 = range1.intersection(range2);
      Range range4 = Range.of(466L);
      Range range5 = Range.ofLength(466L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range6 = Range.of(range_CoordinateSystem1, 466L, 32767L);
      range2.isSubRangeOf(range1);
      Range range7 = range0.intersection(range5);
      range1.getLength();
      range1.intersects(range5);
      range4.intersection(range7);
      range6.endsBefore(range3);
      Range range8 = Range.of(1803L, 32767L);
      range8.complement(range6);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Y_LZg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Y_LZg
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1220184985197483
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of((-1959L), (-1959L));
      Long long0 = new Long(2147483647L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.getLength();
      range0.equals(object0);
      String string0 = "H9[Eoc)J/7}r9^q";
      // Undeclared exception!
      try { 
        Range.parseRange("H9[Eoc)J/7}r9^q");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse H9[Eoc)J/7}r9^q into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.583364786075499
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(149L);
      Range range1 = Range.ofLength(149L);
      range1.complement(range0);
      range1.endsBefore(range0);
      range0.getBegin(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, (-1054L), 143L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1948L, 165L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2305307776000447
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(149L);
      range1.complement(range0);
      range1.endsBefore(range0);
      long long0 = new Long(149L);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 149L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.3850136684712826
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1868L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(255L);
      Range range4 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range1.isSubRangeOf(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.intersection(range1);
      range2.getLength();
      Range.ofLength(587L);
      range0.intersects(range3);
      range3.intersection(range1);
      Range range5 = Range.of(1614L, 3442L);
      range5.startsBefore(range2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 32767L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.128044921185588
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1151L));
      Range range1 = Range.ofLength(0L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        range0.split((-1151L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.072457935131087
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      long long0 = 2147483647L;
      Long long1 = new Long(2147483647L);
      long long2 = 3224L;
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      range0.equals(long1);
      // Undeclared exception!
      try { 
        range0.split((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2183901793155343
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L, 2425L);
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Long.compareUnsigned(3224L, 3224L);
      Long.compareUnsigned((-354L), (-354L));
      Range range1 = Range.of(2425L, 2439L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer1);
      Range range2 = Range.ofLength(0);
      range2.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.603538679411894
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1868L);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(range_CoordinateSystem0, 1868L, 1868L);
      Range range4 = Range.ofLength(255L);
      Range range5 = Range.ofLength(32767L);
      boolean boolean0 = range1.isSubRangeOf(range5);
      assertTrue(boolean0);
      
      Range range6 = range0.intersection(range1);
      long long0 = range2.getLength();
      assertEquals(1614L, long0);
      
      range0.intersects(range4);
      range4.intersection(range1);
      Range range7 = Range.of((-1114L), 3442L);
      range7.startsBefore(range0);
      boolean boolean1 = range7.startsBefore(range2);
      range5.equals(range_CoordinateSystem0);
      Range.of(1868L, 3442L);
      Range.CoordinateSystem.values();
      Range range8 = range4.intersection(range2);
      range6.intersection(range8);
      boolean boolean2 = range6.startsBefore(range4);
      assertFalse(boolean2 == boolean1);
      
      Range.Comparators.values();
      List<Range> list0 = range1.complement(range3);
      assertSame(range1, range6);
      assertFalse(list0.contains(range1));
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.327763957538736
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of(1945L);
      range0.getBegin();
      Range.of(1945L, 1945L);
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-1517L));
      range_Builder0.copy();
      Range range1 = range_Builder0.build();
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4853235839194743
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      Range.Comparators.values();
      List<Range> list0 = range2.complement(range3);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      long long0 = range2.getEnd(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals(2147483646L, long0);
      
      Range range5 = range4.intersection(range2);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertNotSame(range5, range4);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.2309413652360264
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      Range range0 = Range.of((long) (-1), (long) (-1));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      range0.getEnd();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("The first parameter in the comparison is null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse The first parameter in the comparison is null. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.8425829532119975
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1868L);
      Range range2 = range0.intersection(range1);
      Range range3 = range1.intersection(range2);
      Range range4 = Range.ofLength(255L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      Range range5 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range1.isSubRangeOf(range5);
      range0.intersection(range1);
      Long.compareUnsigned(1486L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(1868L, (-9223372036854775808L));
      Range.Builder range_Builder1 = new Range.Builder(157L);
      range_Builder1.expandEnd(158L);
      List<Range> list0 = range5.complement(range2);
      Range.of((long) (-1), 35667L);
      Range range6 = Range.of(range_CoordinateSystem0, (long) (-1), 0L);
      List<Range> list1 = range6.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list1.contains(range5));
      //  // Unstable assertion: assertFalse(range6.isEmpty());
      
      List<Range> list2 = range5.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list2.equals((Object)list1));
      //  // Unstable assertion: assertEquals(0, list2.size());
      
      Range range7 = range3.asRange();
      boolean boolean0 = range0.endsBefore(range7);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.606033974143912
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.of((long) (-1));
      Long long1 = new Long(3224L);
      Range range3 = Range.ofLength(0L);
      range3.intersection(range2);
      Range.Builder range_Builder0 = new Range.Builder(range2);
      range_Builder0.expandEnd(4294967295L);
      List<Range> list0 = range3.complement(range1);
      range2.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(range2.isEmpty());
      assertFalse(range3.equals((Object)range0));
      assertTrue(list1.contains(range3));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5791390092863846
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.of((long) (-1));
      Long long1 = new Long(3224L);
      range1.iterator();
      Range range2 = Range.ofLength(0L);
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
      assertFalse(range1.isEmpty());
      
      Long long2 = new Long(1);
      boolean boolean0 = range0.equals(long0);
      assertFalse(range0.equals((Object)range3));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.4161211288971085
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-32316L), 2147483647L);
      Range range0 = Range.of(2596L, 2147483647L);
      range0.spliterator();
      long long1 = new Long(3224L);
      Range.Comparators.values();
      Range range1 = Range.ofLength(3224L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.5131285787706403
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.of((long) (-1));
      Long long1 = new Long(3224L);
      Range.ofLength(0L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.880550479972176
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.of(1L, 0L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.372966673795344
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range0.equals(range_Builder0);
      range1.intersects(range0);
      Range.Builder range_Builder3 = range_Builder0.expandBegin(255L);
      range_Builder3.expandEnd(255L);
      range_Builder1.contractBegin((-67L));
      range_Builder0.expandBegin(255L);
      // Undeclared exception!
      try { 
        Range.ofLength((-29L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.3070323298523396
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.of(range_CoordinateSystem0, (-3088L), (-3088L));
      range0.intersection(range1);
      Range.ofLength(0L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2147483647L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-3088L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2858275393387455
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range1 = range0.asRange();
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range range3 = range2.intersection(range1);
      range2.startsBefore(range3);
      Range.Comparators.values();
      List<Range> list0 = range0.complement(range2);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertSame(range2, range0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.4256529144456778
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 466L, 466L);
      Range range1 = Range.of(466L);
      range1.intersects(range0);
      Range range2 = Range.ofLength(466L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 466L, 32767L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2157232808704603
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(2147483647L);
      Long.compareUnsigned(910L, 1903L);
      Long.compareUnsigned(910L, (-1114L));
      Range.of((-1114L), 893L);
      range0.getEnd();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.0654032980858816
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.of(2147484275L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 909L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.175783483807699
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = 1L;
      Range.of((-3453L), 0L);
      Range.ofLength(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.ofLength((-2900L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.269310566420872
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range range0 = Range.of((-4583L), (-4583L));
      Range range1 = Range.of((-4583L), (-4583L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2249L, 2249L);
      range1.getEnd();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), (-1L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder((-2147483648L), (-4582L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2681L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.014635675651483
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-1959L), (-1959L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-770L), (-770L));
      Long.compareUnsigned((-1959L), (-964L));
      long long1 = range0.getBegin(range_CoordinateSystem0);
      assertEquals((-1958L), long1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.605737074944768
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range1.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 466L, 466L);
      range1.intersection(range2);
      Range.of(466L);
      Range range3 = Range.ofLength(466L);
      long long0 = 32767L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 466L, 32767L);
      range2.isSubRangeOf(range1);
      range0.intersection(range3);
      range1.getLength();
      Range.ofLength(587L);
      range1.intersects(range3);
      // Undeclared exception!
      try { 
        Range.of(466L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.241103375040261
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-9223372036854775808L);
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775808L), (-9223372036854775808L));
      Range range1 = range0.asRange();
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      range1.isSubRangeOf(range0);
      Range range3 = range2.intersection(range1);
      range2.startsBefore(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3703363706958496
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 149L;
      long long1 = 600L;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      range_Builder0.expandBegin((-32768L));
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(range_Builder0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.427935635406574
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(149L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-279L), (-279L));
      Range range3 = range2.intersection(range1);
      assertSame(range3, range0);
      assertTrue(range3.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.625900104350169
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.ofLength(600L);
      Range range1 = Range.of((-1496L));
      Range range2 = Range.of(465L, 4294967295L);
      Range range3 = Range.of((-2900L), 0L);
      Range.Builder range_Builder0 = new Range.Builder(117L, 2273L);
      range_Builder0.expandEnd((-2900L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854773968L);
      List<Range> list0 = range3.complement(range1);
      List<Range> list1 = range2.complementFrom(list0);
      range0.complementFrom(list0);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(117L);
      range_Builder2.expandEnd((-674L));
      range1.complement(range0);
      range0.complementFrom(list1);
      //  // Unstable assertion: assertEquals(2, list1.size());
      
      List<Range> list2 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      //  // Unstable assertion: assertTrue(list2.equals((Object)list0));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.585118250313252
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1868L);
      Range range2 = range0.intersection(range1);
      range0.intersects(range2);
      Range.Builder range_Builder0 = new Range.Builder((-3089L), 1868L);
      Range range3 = range_Builder0.build();
      List<Range> list0 = range1.split(32767L);
      range0.complementFrom(list0);
      range_Builder0.copy();
      Range.ofLength(670L);
      Range.Builder range_Builder1 = range_Builder0.shift(32767L);
      range_Builder1.contractEnd((-2147483648L));
      range3.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem1.toString();
      range1.intersection(range3);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2170L), 9223372036854773382L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-5301L), 1474L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.997756703271982
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3339L, (-1500L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2678057518764807
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range range0 = Range.of(0L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 255L;
      Range range1 = Range.of(range_CoordinateSystem0, 255L, 1868L);
      range0.intersection(range1);
      Range.ofLength(255L);
      Range range2 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range1.isSubRangeOf(range2);
      range0.intersection(range1);
      long long1 = (-9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem1, 32767L, 144L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.158039775219435
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1112L), 0L);
      range_Builder0.expandBegin((-1112L));
      range_Builder0.expandEnd(247L);
      range_Builder0.build();
      range_CoordinateSystem0.toString();
      range_Builder0.expandBegin(0L);
      long long1 = 255L;
      Range range0 = Range.ofLength(255L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      range_Builder0.expandEnd((-4985L));
      range_Builder0.expandBegin(136L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.972845711672121
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = 2147483647L;
      Range.of(2147483647L, 2147483647L);
      String string0 = "Q_Y~okbW>mx}";
      // Undeclared exception!
      try { 
        Range.parseRange("Q_Y~okbW>mx}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q_Y~okbW>mx} into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.116324982800209
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("2kwm", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 2kwm into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.440934819394114
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      long long0 = 1945L;
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      range1.toString();
      long long1 = 0L;
      range1.intersection(range0);
      Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-921L));
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-921L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of((-3434L));
      // Undeclared exception!
      try { 
        range0.split((-637L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.9761388013384353
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range1.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 465 ]/0B", string0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.332524243484723
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(2147483647L);
      Long.compareUnsigned(3224L, 2147483647L);
      Long.compareUnsigned((-976L), 2147483647L);
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range.of((long) (-1));
      long long1 = new Long(3224L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("N*b.Ils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.N*b.Ils
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Comparators.values();
      range_Builder1.build();
      String string0 = "wt";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("wt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.wt
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Range.Comparators.values();
      Range.of(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
