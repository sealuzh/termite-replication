/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:36:39 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5520354819280024
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967325L, 4294967325L);
      Long long0 = new Long((-1L));
      long long1 = 255L;
      Long.compareUnsigned(149L, 255L);
      long long2 = (-2468L);
      Long.compareUnsigned((-2468L), (-3331L));
      Long.getLong("r17m+R");
      range0.equals((Object) null);
      Range.ofLength(3326L);
      // Undeclared exception!
      try { 
        Range.parseRange("2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 2 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.913246132209475
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(1291L);
      range0.complement(range1);
      Range.of(range_CoordinateSystem1, 1291L, 1291L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2523L);
      Range.of(range_CoordinateSystem2, (-4515L), (-2523L));
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5052220116063135
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.ofLength(1945L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 4294967295L, 4294971811L);
      Range.of(1945L, 68059L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.00183821837586
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      range0.complement(range0);
      Long long0 = new Long((-2479L));
      Long.min(3982L, 451L);
      Long.compareUnsigned((-452L), 3091L);
      Long.compareUnsigned(2348L, (-128L));
      Long.getLong("");
      Range.Builder range_Builder0 = new Range.Builder(149L, 451L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4114L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range range1 = Range.of((-591L), 32767L);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.09030091804517
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.ofLength(1945L);
      range0.toString();
      Range range1 = Range.of(1945L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString();
      range1.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      assertEquals("[ 1946 .. 1946 ]/RB", string0);
      
      Range range2 = Range.ofLength(389L);
      range1.intersects(range2);
      Range range3 = Range.parseRange("[ 1946 .. 1946 ]/RB");
      range3.equals(range0);
      range3.spliterator();
      Range range4 = Range.ofLength(389L);
      range1.getEnd();
      List<Range> list0 = range4.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range3.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(linkedList0);
      assertTrue(list1.equals((Object)list0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.8963793930424346
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      long long0 = 2147483647L;
      Long long1 = new Long((-2147483648L));
      Long.compareUnsigned((-976L), 3224L);
      long long2 = 4294967295L;
      Long.compareUnsigned(4294967295L, (-1L));
      String string0 = null;
      Long.getLong((String) null);
      long long3 = 2190L;
      Long long4 = new Long(2190L);
      Long.sum(4294967295L, 9223372036854775807L);
      range0.equals(long4);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.47291405680524
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 1945L;
      Range.of(1945L);
      Range.ofLength(1945L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775659L, (-2278L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2279 would make range [9223372036854775658 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.3596467279768327
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1944L;
      Range range0 = Range.of(range_CoordinateSystem0, 1944L, 9223372036854773863L);
      Long long1 = new Long((-1L));
      long long2 = 255L;
      Long.compareUnsigned((-3251L), 255L);
      Long.compareUnsigned((-2468L), (-3251L));
      String string0 = "r17m+R";
      Long.getLong("r17m+R");
      range0.equals(long1);
      String string1 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8663792047321337
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Long long0 = new Long(0L);
      Long.min(9223372036854773618L, 1098L);
      Long.compareUnsigned(3091L, (-372L));
      Long.compareUnsigned((-63L), 0L);
      Long.getLong("");
      Range.Builder range_Builder0 = new Range.Builder((-591L), 5594L);
      range_Builder0.expandEnd(2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5115299325394864
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(1945L, 1945L);
      Range range1 = Range.ofLength(1945L);
      Long.min(9223372034707292161L, 9223372034707292161L);
      Long.compareUnsigned(2266L, 2175L);
      Long.compareUnsigned(9223372034707292161L, 282L);
      Long.getLong("");
      Long long0 = new Long(0L);
      range0.equals((Object) null);
      long long1 = range1.getEnd();
      assertEquals(1944L, long1);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 1946 .. 1946 ]/RB", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.616590142135366
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.of(3205L);
      Long long0 = new Long(3205L);
      long long1 = 4294971810L;
      Long.divideUnsigned(4294971810L, 4294971810L);
      Long long2 = new Long((-590L));
      Long.getLong("sl/S<`>O\"", long2);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(1047L, 3205L);
      range1.getLength();
      Range range2 = Range.ofLength(1L);
      range0.startsBefore(range2);
      Range range3 = Range.of(1L, 3205L);
      range1.equals("sl/S<`>O\"");
      range2.startsBefore(range3);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$ShortRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$ShortRange
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.1951544647607095
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-32768L));
      long long0 = 1451L;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 1451L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      range1.complementFrom(list0);
      range1.isSubRangeOf(range0);
      Range.ofLength(4294967295L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range1.forEach(consumer0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.515181195138754
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 1945L;
      Range range0 = Range.ofLength(1945L);
      Range.of(1945L, 1945L);
      Long.compareUnsigned(0L, (-304L));
      Long.getLong("org.jcvi.jillion.core.Range$LongRange");
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      long long0 = (-3367L);
      long long1 = 2792L;
      Range range0 = Range.of((-3367L), 2792L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.8663546271173415
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Long long0 = new Long(0L);
      Long.min(9223372036854773618L, 1098L);
      Long.compareUnsigned(3091L, (-372L));
      Long.compareUnsigned((-63L), 0L);
      Long.getLong("");
      Long long1 = new Long(2147483776L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range1.split(2190L);
      List<Range> list1 = range0.complementFrom(list0);
      assertTrue(list1.contains(range0));
      assertTrue(range0.isEmpty());
      
      Range range2 = Range.of(0L);
      range2.getEnd();
      String string0 = range2.toString(range_CoordinateSystem0);
      assertEquals("[ 0 .. 1 ]/SB", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2800350239549
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967325L, 4294967325L);
      Long long0 = new Long((-1L));
      long long1 = 255L;
      Long.compareUnsigned(149L, 255L);
      long long2 = (-2468L);
      Long.compareUnsigned((-2468L), (-3331L));
      Long.getLong("r17m+R");
      range0.equals(long0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3596467279768327
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Long.compareUnsigned((-1274L), 2147483648L);
      long long1 = (-3331L);
      Long.compareUnsigned(2147483648L, (-2080L));
      String string0 = "r17m+R";
      Long.getLong("");
      range0.equals(range_CoordinateSystem0);
      String string1 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.773901775410463
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      range1.getBegin();
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=4.216391544427145
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range1.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ 4294967296 .. 4294967295 ]/RB", string0);
      
      Range range2 = Range.parseRange("[ 4294967296 .. 4294967295 ]/RB", range_CoordinateSystem1);
      Range range3 = Range.of((-2145430323L), (-2145430323L));
      range1.endsBefore(range3);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      boolean boolean0 = range2.intersects(range3);
      range2.split(4294967295L);
      List<Range> list0 = range0.complement(range3);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      
      boolean boolean1 = range3.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(boolean1);
      
      Range.ofLength(4294967295L);
      boolean boolean2 = range2.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean0);
      
      Range range4 = Range.ofLength(4294967295L);
      //  // Unstable assertion: assertFalse(range4.equals((Object)range0));
      
      range2.getEnd();
      long long0 = range2.getLength();
      //  // Unstable assertion: assertNotSame(range2, range0);
      //  // Unstable assertion: assertEquals(0L, long0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3127787005250515
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 4294967325L, 4294967325L);
      long long0 = 255L;
      Long.compareUnsigned(149L, 255L);
      long long1 = (-2468L);
      Long.compareUnsigned((-2468L), (-3331L));
      Long.getLong("r17m+R");
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2721904284013466
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Long long0 = new Long(9223372036854775807L);
      Long.compareUnsigned((-1274L), 2147483648L);
      Long.compareUnsigned(2147483648L, (-2080L));
      // Undeclared exception!
      try { 
        Range.of((-2080L), (-3331L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3568113492839657
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-32768L);
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        Range.of(3181L, (-2801L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.783203392708375
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2278L), 4294967244L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 4294967295 .. 4294967296 ]/SB", string0);
      
      range0.getBegin();
      Range range2 = Range.of((-128L));
      boolean boolean0 = range2.startsBefore(range1);
      assertFalse(boolean0);
      
      range0.isSubRangeOf(range2);
      range1.getEnd();
      long long0 = range1.getLength();
      assertEquals(4294969522L, long0);
      
      boolean boolean1 = range2.isEmpty();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.921528377047524
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294967295L);
      List<Range> list0 = range0.split(1L);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.toString(range_CoordinateSystem1);
      range1.getBegin();
      Range.of((-1752L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1529L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.671896043005658
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2190L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 2190L);
      Range range1 = Range.ofLength(65535L);
      range1.getBegin();
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.017125068336538
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.toString();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.toString();
      range3.toString(range_CoordinateSystem0);
      range2.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.toString(range_CoordinateSystem1);
      range2.getLength();
      Range range4 = Range.ofLength(389L);
      range4.startsBefore(range3);
      Range range5 = Range.of(0L, 389L);
      range5.equals(range1);
      range5.startsBefore(range1);
      range4.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("@9DzC'T9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.@9DzC'T9
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.183539064317224
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(149L);
      range0.toString();
      long long0 = 0L;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2087526238313195
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      long long0 = (-2278L);
      Long.min(2147483646L, 2147483646L);
      long long1 = 413L;
      Long.compareUnsigned(2147483646L, 413L);
      Long.compareUnsigned(413L, 3224L);
      Long.getLong((String) null);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      range0.equals(object0);
      // Undeclared exception!
      try { 
        Range.ofLength((-525L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.666245520683797
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.of(127L);
      Range range0 = Range.of(1L, 0L);
      Long.compareUnsigned((-1L), (-1L));
      Long.compareUnsigned(0L, 2348L);
      Long.getLong("");
      range0.equals((Object) null);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5531728152141424
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      long long0 = (-4515L);
      Range.of((-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long1 = new Long(0L);
      long long2 = (-218L);
      Long.min((-218L), 2147483647L);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.7824945473685245
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2190L);
      Long.compareUnsigned((-2947L), (-2486L));
      Long.getLong((String) null);
      range0.equals(long0);
      Range.ofLength(3224L);
      Range.of((-431L));
      // Undeclared exception!
      try { 
        Range.of(2595L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.0306047459914955
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      range1.toString();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.toString();
      range3.toString(range_CoordinateSystem0);
      range2.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.toString(range_CoordinateSystem1);
      range2.getLength();
      Range range4 = Range.ofLength(389L);
      range4.startsBefore(range3);
      Range range5 = Range.parseRange("[ 1 .. 0 ]/RB");
      range5.equals(range1);
      range5.startsBefore(range1);
      Range range6 = Range.of(0L);
      range6.intersects(range1);
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.565975567636868
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(3205L);
      Long long0 = new Long(3205L);
      Long.divideUnsigned(4294971810L, 4294971810L);
      Long long1 = new Long((-590L));
      Range range1 = Range.ofLength(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of((-590L), (-2983L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.955249243624107
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = (-4515L);
      Range range0 = Range.of((-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long1 = new Long(0L);
      Long.getLong((String) null);
      long long2 = 2190L;
      Long long3 = new Long(2190L);
      range1.getLength();
      Object object0 = new Object();
      range0.equals(object0);
      String string0 = "";
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.870498657062057
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range range0 = Range.of(148L, 148L);
      Range range1 = Range.of(68059L, 68059L);
      range1.toString();
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(68059L);
      range1.isSubRangeOf(range3);
      range3.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range3.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.toString(range_CoordinateSystem1);
      range0.getLength();
      long long0 = 2202L;
      Range range4 = Range.ofLength(2202L);
      range3.startsBefore(range4);
      Range.of(0L, 2202L);
      range2.equals("[ 0 .. 68058 ]/0B");
      range0.startsBefore(range4);
      range2.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6720014800127485
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      Long long0 = new Long(0L);
      Long.min(9223372036854773618L, 1098L);
      Long.compareUnsigned(3091L, (-372L));
      Long.compareUnsigned((-63L), 0L);
      Long.getLong("");
      Long long1 = new Long(2147483776L);
      Object object0 = new Object();
      range0.equals(object0);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.ofLength(0L);
      List<Range> list0 = range2.split(2190L);
      assertTrue(list0.contains(range2));
      
      Range range3 = Range.ofLength(2147483647L);
      range3.isSubRangeOf(range1);
      assertSame(range1, range0);
      
      long long2 = range3.getEnd();
      assertEquals(2147483646L, long2);
      
      long long3 = range2.getLength();
      assertEquals(0L, long3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=4.169228410769554
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(1945L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967295L, 4294971809L);
      Range range2 = Range.of(1945L, 68059L);
      range2.toString(range_CoordinateSystem0);
      long long0 = new Long(1945L);
      Range range3 = Range.of(9223372036854775807L);
      range0.startsBefore(range3);
      Range range4 = Range.parseRange("[ 1945 .. 68060 ]/SB", range_CoordinateSystem0);
      range4.endsBefore(range0);
      Range.of(range_CoordinateSystem0, 593L, 2376L);
      Range range5 = Range.of(68059L);
      range5.intersection(range1);
      Range.of((-3098L), 4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.090483024709642
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of((-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long(0L);
      Long.getLong((String) null);
      long long1 = 2190L;
      Long long2 = new Long(2190L);
      Object object0 = new Object();
      range0.equals(object0);
      String string0 = "";
      range1.complement(range0);
      Range.ofLength(127L);
      range1.complement(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(127L, (-4515L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.8061494628090538
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      long long0 = (-4515L);
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range0.intersection(range1);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4515L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.71939838018023
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = (-14L);
      Range range1 = Range.of((-14L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range range2 = range_Builder0.build();
      range2.complement(range0);
      String string0 = "jVI";
      // Undeclared exception!
      try { 
        Range.parseRange("jVI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse jVI into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.488650466347609
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(0L, 0L);
      range0.endsBefore(range0);
      range0.getBegin(range_CoordinateSystem0);
      long long0 = (-1L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3041485399999533
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Long.compareUnsigned(2348L, (-976L));
      Long.getLong("");
      Range range0 = Range.of(3224L);
      Range range1 = Range.of(600L);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      
      Range range2 = Range.ofLength(65535L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.isEmpty();
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.931568959426481
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-2278L);
      long long2 = 4294967244L;
      Range range1 = Range.of(range_CoordinateSystem0, (-2278L), 4294967244L);
      range0.endsBefore(range1);
      range1.complement(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2278L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.547182753774534
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range range0 = Range.of(1101L);
      Range range1 = Range.of((-1400L));
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 956L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.411570830429196
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(149L);
      Range.of(255L);
      range1.endsBefore(range0);
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("jv#`Sav|jwUxlH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.jv#`Sav|jwUxlH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.9022290581089685
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.of(1945L);
      Range range0 = Range.ofLength(1945L);
      Range range1 = Range.of(2202L, 2202L);
      Long.min(1945L, 1945L);
      Long.compareUnsigned(212L, 3091L);
      Long.compareUnsigned((-1202L), 2202L);
      Long.getLong("S");
      Range.Builder range_Builder0 = new Range.Builder((-1441L), (-1));
      range_Builder0.expandEnd(935L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      range0.complement(range1);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.9246439284958705
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long0 = new Long((-2147483648L));
      Long.compareUnsigned((-976L), 3224L);
      Long.compareUnsigned(4294967295L, (-1L));
      Long.getLong((String) null);
      long long1 = 2190L;
      Long long2 = new Long(2190L);
      Long.sum(4294967295L, 9223372036854775807L);
      range0.equals(long2);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.intersection(range0);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange(";");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.4255202600807886
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-2147483648L);
      Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      Long long1 = new Long((-2147483648L));
      Long.compareUnsigned((-976L), 3224L);
      Long.compareUnsigned(4294967295L, (-1L));
      long long2 = 4841L;
      long long3 = (-32768L);
      Long.min(4841L, (-32768L));
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.446290125546827
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 127L;
      Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long1 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned(255L, 2190L);
      Long.compareUnsigned((-2947L), (-2486L));
      // Undeclared exception!
      try { 
        Range.ofLength((-44L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.140444843663474
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of((-32768L));
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 1451L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      range1.complementFrom(list0);
      range1.isSubRangeOf(range0);
      Range range2 = Range.ofLength(4294967295L);
      Range range3 = Range.of((-32768L), (-32768L));
      range2.equals(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.6812287040267924
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.isSubRangeOf(range0);
      range1.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range range2 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range0.isSubRangeOf(range2);
      Range.Builder range_Builder2 = new Range.Builder(0L, 0L);
      range_Builder1.build();
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem2.toString();
      range1.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.303248073639753
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2102L), 149L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.524438194757144
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-1L));
      Range range1 = range0.asRange();
      range1.isSubRangeOf(range0);
      long long0 = 2164L;
      range1.getEnd(range_CoordinateSystem0);
      long long1 = 0L;
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.5282362957066686
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of(1945L, 1945L);
      Range range1 = Range.of(1945L);
      range0.isSubRangeOf(range1);
      long long0 = 3161L;
      Range.Builder range_Builder0 = new Range.Builder(1945L, 1945L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Range coordinates %d, %d are not valid %s coordinates", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Range coordinates %d, %d are not valid %s coordinates into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.4690608523980755
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      long long1 = 0L;
      Range range1 = Range.of(0L);
      range0.isSubRangeOf(range1);
      long long2 = 3161L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      range_Builder0.build();
      String string0 = "p8#S";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("p8#S", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse p8#S into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.9457895460863055
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      range1.toString();
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(0L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.toString();
      range3.toString(range_CoordinateSystem0);
      range2.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.toString(range_CoordinateSystem1);
      range2.getLength();
      Range range4 = Range.ofLength(389L);
      range4.startsBefore(range3);
      Range range5 = Range.of(0L, 389L);
      range0.startsBefore(range1);
      range5.startsBefore(range1);
      range4.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("@9DzC'T9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.@9DzC'T9
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.787419946670644
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 127L);
      Long long0 = new Long((-2147483648L));
      Long.min((-2147483648L), (-3967L));
      Long.compareUnsigned((-2947L), (-2486L));
      Long.getLong((String) null);
      range0.equals(long0);
      Range.ofLength(3224L);
      Range.of((long) (-1));
      // Undeclared exception!
      try { 
        Range.of(2595L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.40640935807259
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.787555981210477
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = (-4515L);
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range1.startsBefore(range0);
      range0.intersects(range1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-4515L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.5058637458269217
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-32316L), (-4514L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("w2t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.w2t
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      long long0 = (-1051L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1051L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=4.051464232800238
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.of((-1934L));
      Range range2 = Range.of((-2878L), 345L);
      List<Range> list0 = range2.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(2, list1.size());
      
      range1.isSubRangeOf(range2);
      range0.spliterator();
      Range range3 = Range.ofLength(4294967295L);
      range3.getEnd();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      long long0 = range3.getEnd();
      assertEquals(4294967294L, long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3773932483748643
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range range0 = Range.of(38L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Oh3EAX3wZ'C9*/U57");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Oh3EAX3wZ'C9*_/U57
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.7290899517123255
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long long0 = (-4515L);
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem2);
      range1.startsBefore(range0);
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-4514L), (-4515L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.9323441712187845
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 149L, 600L);
      List<Range> list0 = range0.complement(range0);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long.compareUnsigned(2348L, (-976L));
      Long.compareUnsigned(1594L, 3224L);
      Long.getLong("");
      boolean boolean0 = range0.equals("");
      assertFalse(boolean0);
      
      Range range1 = Range.of(3224L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      Range.of(2348L, 3181L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 675L, 1594L);
      range3.asRange();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.9630175094041156
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      long long0 = (-4515L);
      Range range0 = Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 1291L;
      Range range2 = Range.of(range_CoordinateSystem1, 1291L, 1291L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, (-4515L), (-2523L));
      range1.endsBefore(range2);
      List<Range> list0 = range1.complement(range2);
      range3.complementFrom(list0);
      Range.Builder range_Builder0 = new Range.Builder(944L);
      range_Builder0.contractEnd(255L);
      range0.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem3, 198L, 4294967295L);
      // Undeclared exception!
      try { 
        Range.of((-2278L), (-2523L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.9590469234293857
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range.of((-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4515L), (-4515L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1291L, 1291L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, (-4515L), (-2523L));
      range0.endsBefore(range1);
      range0.complement(range1);
      Range.ofLength(1291L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, (-2L), 1291L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, (-2523L), 65535L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.of((-2L), (-2933L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.5653332362992476
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1112L), 0L);
      range_Builder0.expandBegin((-1112L));
      range_Builder0.expandEnd(247L);
      range_Builder0.build();
      range_CoordinateSystem0.toString();
      range_Builder0.expandBegin(0L);
      long long1 = 255L;
      Range range0 = Range.ofLength(255L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.365643922890749
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      long long0 = 2147483647L;
      Range.of(2147483647L, 2147483647L);
      String string0 = "Q_Y~okbW>mx}";
      // Undeclared exception!
      try { 
        Range.parseRange("Q_Y~okbW>mx}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q_Y~okbW>mx} into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.8461826744276713
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.of(1945L);
      Range range1 = Range.ofLength(1945L);
      range1.toString();
      range1.intersection(range0);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.5410611802956353
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-1151L));
      Range range1 = Range.ofLength(0L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        range0.split((-1151L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-462L), (-462L));
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.2441276219266
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 38L, 4294967295L);
      Long long0 = new Long(4294967295L);
      long long1 = (-1274L);
      long long2 = 2147483671L;
      Long.compareUnsigned(38L, 9223372036854775807L);
      long long3 = (-3331L);
      Long.compareUnsigned(2147483671L, (-832L));
      String string0 = "J(`%I]d0a}Uc'";
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 38L, (long) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.6799616069051715
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(466L);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(466L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder2.build();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder4 = range_Builder2.contractBegin(466L);
      assertNotSame(range_Builder4, range_Builder1);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.445757105868187
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(0L);
      Long.min(9223372036854773618L, 1098L);
      Long.compareUnsigned(3091L, (-372L));
      Long.compareUnsigned((-63L), 0L);
      Long.getLong("@+}A)3}mF[");
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("@+}A)3}mF[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.@+}A)3}mF[
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.7076172890024583
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      long long0 = 148L;
      Range range0 = Range.of(148L, 148L);
      Range range1 = Range.of(68059L, 68059L);
      Range range2 = Range.of(148L, 148L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 148L, 169L);
      range0.startsBefore(range2);
      range3.intersects(range0);
      long long1 = 2147483647L;
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      range_Builder0.build();
      range_Builder0.copy();
      range1.isSubRangeOf(range0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(68059L, 4078L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.6737575611266244
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967325L, 4294967325L);
      Long long0 = new Long((-1L));
      Long.min(149L, 32767L);
      Long.compareUnsigned((-976L), 9223372036854775807L);
      Long.getLong("length must be >= 0");
      range0.startsBefore(range0);
      Range.ofLength(65535L);
      Range.of(35495L);
      // Undeclared exception!
      try { 
        Range.of(149L, (-38L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(2L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1077L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
