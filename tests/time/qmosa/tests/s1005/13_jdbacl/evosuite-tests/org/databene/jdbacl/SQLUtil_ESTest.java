/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:40:40 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.List;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBConnectionProperties;
import org.h2.tools.Recover;
import org.hsqldb.lib.FileUtil;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBCatalog dBCatalog0 = new DBCatalog("PsQqL,t*+Q0^");
      Boolean boolean0 = new Boolean(true);
      MockFile mockFile0 = new MockFile("RijP-NUE3QCG3-5930");
      MockFile mockFile1 = new MockFile("");
      MockFile mockFile2 = new MockFile(mockFile0, "PsQqL,t*+Q0^");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "PsQqL,t*+Q0^";
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      StringBuilder stringBuilder0 = new StringBuilder();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      fBManagedConnectionFactory1.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("RijP-NUE3QCG3-5930", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "Unknown GDS type ";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "p%& 8P;{vka";
      stringArray0[1] = "Unknown GDS type ";
      stringArray0[2] = "Unknown GDS type ";
      stringArray0[3] = "Unknown GDS type ";
      stringArray0[4] = " join ";
      stringArray0[5] = "Unknown GDS type ";
      stringArray0[6] = "Unknown GDS type ";
      String[] stringArray1 = new String[6];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      stringArray1[0] = "p%& 8P;{vka";
      stringArray1[1] = "p%& 8P;{vka";
      stringArray1[2] = "p%& 8P;{vka";
      stringArray1[3] = " join ";
      stringArray1[4] = "Unknown GDS type ";
      stringArray1[5] = " join ";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Unknown GDS type ", stringArray0, "Unknown GDS type ", "p%& 8P;{vka", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)45;
      SQLUtil.removeComments("SOCKET");
      Character character0 = Character.valueOf('5');
      Character.lowSurrogate((-2979));
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'5'", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3121712368968343
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Su/Fss|6h5=";
      stringArray0[1] = "Su/Fss|6h5=";
      stringArray0[2] = "Su/Fss|6h5=";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Su/Fss|6h5=", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.toString();
      SQLUtil.normalize("CONSTRAINT Su/Fss|6h5= FOREIGN KEY (Su/Fss|6h5=, Su/Fss|6h5=, Su/Fss|6h5=) REFERENCES null(Su/Fss|6h5=, Su/Fss|6h5=, Su/Fss|6h5=)", true);
      try { 
        Recover.readClob("Su/Fss|6h5=");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.42753220301923
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBCatalog dBCatalog0 = new DBCatalog("[t[*s");
      Boolean boolean0 = new Boolean(true);
      MockFile mockFile0 = new MockFile("RijP-NUE3QCG3-5930");
      MockFile mockFile1 = new MockFile("");
      MockFile mockFile2 = new MockFile(mockFile0, "[t[*s");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X\"{^H\"~zmVlD]-";
      stringArray0[1] = "[t[*s";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      Object object0 = new Object();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, true);
      mockPrintWriter0.checkError();
      mockPrintWriter0.format("/z\"*?L$sQ", (Object[]) stringArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable1, 0, "[t[*s");
      defaultDBColumn0.getForeignKeyConstraint();
      defaultDBTable1.removeForeignKeyConstraint((DBForeignKeyConstraint) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable1, true, nameSpec0, mockPrintWriter0);
      assertEquals(46, rowOutputBinary0.size());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBCatalog dBCatalog0 = new DBCatalog("[t[*s");
      Boolean boolean0 = new Boolean(true);
      MockFile mockFile0 = new MockFile("RijP-NUE3QCG3-5930");
      MockFile mockFile1 = new MockFile("");
      MockFile mockFile2 = new MockFile(mockFile0, "[t[*s");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X\"{^H\"~zmVlD]-";
      stringArray0[1] = "[t[*s";
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      FBManagedConnectionFactory fBManagedConnectionFactory1 = fBManagedConnectionFactory0.canonicalize();
      PrintWriter printWriter0 = fBManagedConnectionFactory1.getLogWriter();
      assertNull(printWriter0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".gE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-12);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.join("updatereferences", "N5/", stringArray0, ">sxe*zZqkFr", ".gE", stringArray0);
      System.setCurrentTimeMillis((byte) (-12));
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "CLOB";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DBCatalog dBCatalog0 = new DBCatalog("PT]3CKodp+DM/q*C?");
      boolean boolean0 = true;
      Boolean boolean1 = new Boolean(true);
      MockFile mockFile0 = new MockFile("PT]3CKodp+DM/q*C?");
      String string1 = "executexg*!+j&xjuf9/j7zwe:";
      MockFile mockFile1 = new MockFile("executexg*!+j&xjuf9/j7zwe:");
      MockFile mockFile2 = new MockFile(mockFile0, "create unique index");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "X\"{^H\"~zmVlD]-", true, stringArray0);
      SQLUtil.normalize("X\"{^H\"~zmVlD]-", true);
      String string2 = "N]n";
      String string3 = "43Y21.U";
      VersionNumber versionNumber0 = null;
      try {
        versionNumber0 = new VersionNumber((List<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.version.VersionNumber", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0447969209589383
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBCatalog dBCatalog0 = new DBCatalog("[t[*s");
      Boolean boolean0 = new Boolean(true);
      MockFile mockFile0 = new MockFile("RijP-NUE3QCG3-5930");
      MockFile mockFile1 = new MockFile("");
      MockFile mockFile2 = new MockFile(mockFile0, "[t[*s");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "X\"{^H\"~zmVlD]-";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      Object object0 = new Object();
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockFile0);
      mockPrintWriter1.checkError();
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1);
      Object[] objectArray0 = new Object[0];
      mockPrintWriter2.format("X\"{^H\"~zmVlD]-", objectArray0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter1);
      assertEquals("", defaultDBTable0.getName());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5709195237181253
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName(" DEFAULT ", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("call");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      DBSchema dBSchema0 = new DBSchema((String) null);
      dBSchema0.getSequences(true);
      SQLUtil.typeAndName(dBSchema0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Object object0 = new Object();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLUtil.join("", (String) null, stringArray0, "*HH'k~CRh5h", (String) null, stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("into", defaultDBTable0, (-42), "z'S88^vht");
      defaultDBColumn0.setDefaultValue("$9}O7Y'f :j$h");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5223365148814683
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".gE";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte)45;
      DBSchema dBSchema0 = new DBSchema("x_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy(".gE");
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT  FOREIGN KEY (.gE) REFERENCES null(.gE)", string0);
      
      String string1 = SQLUtil.normalize(".gE", false);
      assertEquals(".gE", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte byte0 = (byte) (-66);
      String string0 = "referenc";
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DBCatalog dBCatalog0 = new DBCatalog("PT]3CKodp+DM/q*C?");
      Boolean boolean0 = new Boolean(true);
      MockFile mockFile0 = new MockFile("PT]3CKodp+DM/q*C?");
      MockFile mockFile1 = new MockFile("PT]3CKodp+DM/q*C?", "executexg*!+j&xjuf9/j7zwe:");
      MockFile mockFile2 = new MockFile(mockFile0, "crezte unique index");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "X\"{^H\"~zmVlD]-", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("CONSTRAINT X\"{^H\"~zmVlD]- ", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)6;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0, false);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, (byte)6);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) "select  null as TABLE_CAT,  null as TABLE_SCHEM, RC.RDB$RELATION_NAME as TABLE_NAME, ISGMT.RDB$FIELD_NAME as COLUMN_NAME, CAST ((ISGMT.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ, RC.RDB$CONSTRAINT_NAME as PK_NAME from RDB$RELATION_CONSTRAINTS RC, RDB$INDEX_SEGMENTS ISGMT where ";
      objectArray0[2] = object0;
      mockPrintWriter1.format("select  null as TABLE_CAT,  null as TABLE_SCHEM, RC.RDB$RELATION_NAME as TABLE_NAME, ISGMT.RDB$FIELD_NAME as COLUMN_NAME, CAST ((ISGMT.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ, RC.RDB$CONSTRAINT_NAME as PK_NAME from RDB$RELATION_CONSTRAINTS RC, RDB$INDEX_SEGMENTS ISGMT where ", objectArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBSchema dBSchema0 = new DBSchema("}ULGF[er o7_cLML");
      defaultDBTable0.setSchema(dBSchema0);
      // Undeclared exception!
      try { 
        SQLUtil.normalize(stringArray0[0], true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9809787598716668
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("trunZate^*v=t");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("alter indexdeletereferences");
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Boolean boolean2 = SQLUtil.mutatesStructure("alter tablev2npwnmrb!mh7aaa~");
      assertFalse(boolean2.equals((Object)boolean0));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBDataType.getInstance(3007, "insert");
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[4] = ".gE";
      byte[] byteArray0 = new byte[9];
      byteArray0[8] = (byte)81;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte) (-96);
      byteArray0[7] = (byte) (-18);
      byteArray0[8] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SQLUtil.join("'", "!I@W", stringArray0, "!I@W", "T%>5!L Lr8wW8", stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("T%>5!L Lr8wW8", (String[]) null, "T%>5!L Lr8wW8", "4m=cMJ`zCS=@[R", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      DBDataType dBDataType0 = DBDataType.getInstance(8, ".gE");
      Integer integer2 = new Integer((-287731954));
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, dBDataType0, (Integer) null, integer3);
      Integer integer4 = new Integer(8);
      Integer integer5 = RawTransaction.ABORT;
      Integer integer6 = new Integer(48);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3310124337181182
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      DBSchema dBSchema0 = new DBSchema("}ULGF[er o7_cLML");
      dBSchema0.getTables(true);
      defaultDBTable0.setSchema(dBSchema0);
      stringArray0[1] = "+reate matrialized viewxg*!+&xjuf9/j7zwe:";
      stringArray0[1] = "+reate matrialized viewxg*!+&xjuf9/j7zwe:";
      stringArray0[2] = "+reate matrialized viewxg*!+&xjuf9/j7zwe:";
      stringArray0[3] = "+reate matrialized viewxg*!+&xjuf9/j7zwe:";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Su/Fss|6h5=", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT Su/Fss|6h5= FOREIGN KEY (, +reate matrialized viewxg*!+&xjuf9/j7zwe:, +reate matrialized viewxg*!+&xjuf9/j7zwe:, +reate matrialized viewxg*!+&xjuf9/j7zwe:) REFERENCES null(, +reate matrialized viewxg*!+&xjuf9/j7zwe:, +reate matrialized viewxg*!+&xjuf9/j7zwe:, +reate matrialized viewxg*!+&xjuf9/j7zwe:)", string0);
      
      String string1 = SQLUtil.normalize("+reate matrialized viewxg*!+&xjuf9/j7zwe:", true);
      assertEquals("+ reate matrialized viewxg * ! + & xjuf9 / j7zwe :", string1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBDataType dBDataType0 = DBDataType.getInstance(3007, "insert");
      Integer integer1 = new Integer((-61));
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0, integer2, integer1);
      Integer integer3 = new Integer(3007);
      Integer integer4 = RawTransaction.ABORT;
      Integer integer5 = new Integer((-1642));
      Integer integer6 = RawTransaction.COMMIT;
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      Integer integer7 = RawTransaction.COMMIT;
      Integer.getInteger("$", 285);
      Integer integer8 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("- ", defaultDBTable0, dBDataType0, integer2, integer8);
      defaultDBColumn1.isUnique();
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[1]);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8374975702302239
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "X0Y24.S";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("X0Y24.S", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT X0Y24.S FOREIGN KEY (X0Y24.S) REFERENCES  REFERENCES (X0Y24.S)", string0);
      
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (X0Y24.S) REFERENCES  REFERENCES (X0Y24.S)", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer0 = new StringBuffer("executed&c$b4zh}i");
      Boolean boolean0 = SQLUtil.mutatesStructure("executed&c$b4zh}i");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".gE");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "select into";
      SQLUtil.mutatesDataOrStructure("select into");
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '.gE' has no foreign key with the columns (.gE, .gE, , , , )
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "insert");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBDataType dBDataType0 = DBDataType.getInstance(37, ".gE");
      Integer integer1 = new Integer(37);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      Integer integer2 = new Integer((-2188));
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable1, dBDataType0, integer2, integer3);
      Integer integer4 = new Integer(0);
      Integer integer5 = RawTransaction.ABORT;
      Integer integer6 = new Integer((-2188));
      Integer integer7 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Nba}/G)(&s?\"&A", defaultDBTable0, dBDataType0, integer5, integer7);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ju|");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-102);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[3] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((File) null, "42X49");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("42X49");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "42X49";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("V2npWnMrb!mh7AAA~", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals("V2npWnMrb!mh7AAA~", dBForeignKeyConstraint0.getName());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = ".gE";
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      SQLUtil.join(".gE", "", stringArray0, "create tablec'-]", "", stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "org.hsqldb.Record";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("callexec", stringArray0, "lXdxCF9j2gu*Y&", ".gE", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBDataType dBDataType0 = DBDataType.getInstance((-2188), ".gE");
      Integer integer1 = new Integer((-2188));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".gE", defaultDBTable0, dBDataType0, integer1, integer1);
      Integer integer2 = new Integer(1363);
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      Integer integer4 = new Integer((-1843368295));
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("\u0001S\u000E\uFFFF\u0001Q\u0001R", defaultDBTable0, dBDataType0, integer4, integer2);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("\u0001S\u000E\uFFFF\u0001Q\u0001R, .gE, .gE, .gE, .gE, .gE", string0);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "\u0001S\u000E\uFFFF\u0001Q\u0001R, .gE, .gE, .gE, .gE, .gE";
      stringArray1[1] = "\u0001S\u000E\uFFFF\u0001Q\u0001R";
      stringArray1[2] = "alter table";
      stringArray1[3] = "\u0001S\u000E\uFFFF\u0001Q\u0001R";
      stringArray1[4] = "insert";
      stringArray1[5] = "00,[J%@%8";
      stringArray1[6] = "wG'$(w";
      stringArray1[7] = ".gE";
      String string1 = SQLUtil.leftJoin(".gE", stringArray0, "\u0001S\u000E\uFFFF\u0001Q\u0001R", "00,[J%@%8", stringArray1);
      assertEquals("left join \u0001S\u000E\uFFFF\u0001Q\u0001R as 00,[J%@%8 on .gE..gE = 00,[J%@%8.\u0001S\u000E\uFFFF\u0001Q\u0001R, .gE, .gE, .gE, .gE, .gE and .gE..gE = 00,[J%@%8.\u0001S\u000E\uFFFF\u0001Q\u0001R and .gE..gE = 00,[J%@%8.alter table and .gE.null = 00,[J%@%8.\u0001S\u000E\uFFFF\u0001Q\u0001R and .gE.null = 00,[J%@%8.insert and .gE.null = 00,[J%@%8.00,[J%@%8", string1);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exe");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "upda");
      Boolean boolean0 = new Boolean(true);
      MockFile mockFile0 = new MockFile("exe");
      MockFile mockFile1 = new MockFile("upda");
      MockFile mockFile2 = new MockFile(mockFile1, "FROM \"");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "tEc$IVs)tK4P`~&y-", true, (String[]) null);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT tEc$IVs)tK4P`~&y- ", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ()", string1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBDataType dBDataType0 = DBDataType.getInstance(3007, "insert");
      Integer integer1 = new Integer((-61));
      Integer integer2 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0, integer2, integer1);
      Integer integer3 = new Integer(3007);
      Integer integer4 = RawTransaction.ABORT;
      Integer integer5 = new Integer((-1642));
      defaultDBColumn0.equals(integer3);
      Integer integer6 = RawTransaction.COMMIT;
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("insert", defaultDBTable0, dBDataType0, (Integer) null, integer6);
      SQLUtil.renderColumn(dBColumnArray0[4]);
      String string0 = SQLUtil.renderColumn(dBColumnArray0[2]);
      assertEquals("insert INSERT(1,-61) NULL", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure("insert");
      GDSType.getType("--");
      FBConnectionProperties fBConnectionProperties0 = new FBConnectionProperties();
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null, fBConnectionProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.294198247037044
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("CLOB");
      DBCatalog dBCatalog0 = new DBCatalog("PT]3CKodp+DM/q*C?");
      Boolean boolean0 = new Boolean(true);
      MockFile mockFile0 = new MockFile("PT]3CKodp+DM/q*C?");
      MockFile mockFile1 = new MockFile("executexg*!+j&xjuf9/j7zwe:");
      MockFile mockFile2 = new MockFile(mockFile0, "create unique index");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("#.s*Yt&$vgM", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT #.s*Yt&$vgM FOREIGN KEY (, , , , , , ) REFERENCES CLOB(, , , , , , )", string0);
      
      String string1 = SQLUtil.normalize("CONSTRAINT #.s*Yt&$vgM FOREIGN KEY (, , , , , , ) REFERENCES CLOB(, , , , , , )", true);
      assertEquals("CONSTRAINT #. s * Yt & $ vgM FOREIGN KEY (,,,,,,) REFERENCES CLOB (,,,,,,)", string1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      DBDataType dBDataType0 = DBDataType.getInstance((-2188), ".gE");
      Integer integer1 = new Integer((-2188));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(".gE", defaultDBTable0, dBDataType0, integer1, integer1);
      Integer integer2 = new Integer(1363);
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = new Integer((-1843368295));
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("\u0001S\u000E\uFFFF\u0001Q\u0001R", defaultDBTable0, dBDataType0, integer4, integer4);
      defaultDBColumn0.isUnique();
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn(" s[Qzi8Jz)y=_CUnr", defaultDBTable0, dBDataType0);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn2);
      assertEquals(".GE", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile((File) null, "V2npWnMrb!mh7AAA~");
      MockFile mockFile1 = new MockFile(mockFile0, ",");
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringArray0[0] = "";
      stringArray0[1] = "ZQIT]mKH^I2&V8vs@\"";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte) (-33);
      byte byte0 = (byte)24;
      byteArray0[4] = (byte)24;
      byteArray0[5] = (byte) (-78);
      byteArray0[6] = (byte) (-68);
      byteArray0[7] = (byte) (-29);
      byteArray0[8] = (byte) (-46);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[2] = "ZQIT]mKH^I2&V8vs@\"";
      SQLUtil.innerJoin("ZQIT]mKH^I2&V8vs@\"", stringArray0, " on ", " on ", stringArray0);
      String string1 = "L7'8SrG`";
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6152804042395514
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "executexg*!+j&xjuf9/j7zwe:";
      String string1 = "insert";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("insert", false, "create unique index", "insert");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((StringBuffer) null);
      stringBuilder1.codePoints();
      SQLUtil.addRequiredCondition("executexg*!+j&xjuf9/j7zwe:", stringBuilder1);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = null;
      NameSpec nameSpec1 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = " REFERENCES ";
      stringArray0[3] = " REFERENCES ";
      stringArray0[4] = " REFERENCES ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, ,  REFERENCES ,  REFERENCES ,  REFERENCES ) REFERENCES  REFERENCES (, ,  REFERENCES ,  REFERENCES ,  REFERENCES )", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[5] = "";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "";
      stringArray1[1] = "";
      SQLUtil.renderColumnNames(stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.join("L6]C']w?E((q!}t/", "", stringArray1, stringArray0[3], "D$&&6>^]\"..O%jY", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = " (";
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = new StringBuilder("drop table");
      SQLUtil.addRequiredCondition(" REFERENCES ", stringBuilder1);
      SQLUtil.addOptionalCondition("drop table", stringBuilder1);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exe");
      DBDataType dBDataType0 = DBDataType.getInstance(10, "dateQ");
      dBDataType0.isAlpha();
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y5sX{xk*p{H!a", defaultDBTable0, dBDataType0, integer0, integer1);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.979117845133115
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("3M~Ay+*Eq");
      DBDataType dBDataType0 = DBDataType.getInstance(1691, "3M~Ay+*Eq");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CIT]mK^2&V8vs\"", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.ownerDotComponent(defaultDBColumn0);
      MockFile mockFile0 = new MockFile("W", "W");
      SQLUtil.typeAndName(defaultDBTable0);
      Object[] objectArray0 = new Object[5];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) defaultDBColumn0;
      objectArray0[2] = (Object) "3M~Ay+*Eq.CIT]mK^2&V8vs\"";
      objectArray0[3] = (Object) "CIT]mK^2&V8vs\"";
      objectArray0[4] = (Object) "table 3M~Ay+*Eq";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      Object object1 = new Object();
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("table 3M~Ay+*Eq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("]XTucYv^|");
      DBDataType dBDataType0 = DBDataType.getInstance(999, "]XTucYv^|");
      Integer integer2 = new Integer(8);
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("]XTucYv^|", defaultDBTable0, dBDataType0, integer2, integer0);
      Integer integer4 = new Integer(8);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer integer5 = RawTransaction.ABORT;
      Integer integer6 = new Integer(1130);
      Integer integer7 = RawTransaction.COMMIT;
      Integer.getInteger("^~mXjl5w7WC%)3", 999);
      Integer integer8 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(".gE", defaultDBTable0, dBDataType0, integer8, (Integer) null);
      defaultDBColumn1.setName("o|;61BeFV");
      defaultDBColumn0.isUnique();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("rename");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)6;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("V2npWnMrb!mh7AAA~", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-102);
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile((File) null, "V2npWnMrb!mh7AAA~");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.write("V2npWnMrb!mh7AAA~");
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey((DBForeignKeyConstraint) null, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9861353889927642
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = " (";
      String[] stringArray0 = new String[2];
      stringArray0[0] = " (";
      stringArray0[1] = " (";
      SQLUtil.renderColumnListWithTableName(" (", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(" ( = ' (' AND  ( = ' ('");
      SQLUtil.addRequiredCondition(" (", stringBuilder0);
      DBSchema dBSchema0 = new DBSchema(":47<Ub`f");
      SQLUtil.typeAndName(dBSchema0);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) " (";
      objectArray0[1] = (Object) dBSchema0;
      objectArray0[2] = (Object) stringBuilder0;
      objectArray0[3] = (Object) " (";
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) "schema :47<Ub`f";
      SQLUtil.renderWhereClause(stringArray0, objectArray0);
      Object object0 = new Object();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("create materialized view", dBSchema0);
      // Undeclared exception!
      try { 
        DBDataType.getInstance("a[nKB.?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBDataType", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(957L);
      String string0 = "!Ek^'B0w^R7AxcY'+n";
      String string1 = "A~d]_*_P=@ae1I";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("A~d]_*_P=@ae1I", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append((-153.18F));
      StringBuilder stringBuilder3 = SQLUtil.addRequiredCondition("!Ek^'B0w^R7AxcY'+n", stringBuilder2);
      StringBuilder stringBuilder4 = stringBuilder3.reverse();
      StringBuilder stringBuilder5 = SQLUtil.addOptionalCondition(")", stringBuilder4);
      stringBuilder3.append((double) 957L);
      stringBuilder5.append('p');
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-66);
      SQLUtil.isProcedureCall("exec");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = new StringBuffer("BEn'MrMYHt=(GPh3");
      File file0 = FileUtil.canonicalFile("select()");
      MockFile mockFile0 = new MockFile(file0, "6WI_::k%[N");
      MockFile mockFile1 = new MockFile(mockFile0, "6WI_::k%[N");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.println((long) (byte) (-124));
      mockPrintWriter0.write("6WI_::k%[N");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "alter materialized viewnot null";
      stringArray0[1] = "drop tablenot null";
      stringArray0[2] = "BEn'MrMYHt=(GPh3";
      stringArray0[3] = "drop tablenot null";
      stringArray0[1] = "drop tablenot null";
      stringArray0[5] = "exec";
      stringArray0[6] = "BEn'MrMYHt=(GPh3";
      stringArray0[7] = "BEn'MrMYHt=(GPh3";
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      CompositeDBObject<DefaultDBColumn> compositeDBObject0 = (CompositeDBObject<DefaultDBColumn>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("select", compositeDBObject0);
      tableContainer0.getSchema();
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[4] = ".gE";
      stringArray0[5] = "";
      String[] stringArray1 = new String[7];
      String string0 = "";
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = ", rowCount == ";
      DBSchema dBSchema0 = new DBSchema("Rb'XD`\"e!&'1K@`?");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(", rowCount == ", dBSchema0);
      defaultDBTable0.getUniqueConstraint(stringArray1);
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      System.setCurrentTimeMillis((-1543L));
      DBSchema dBSchema0 = new DBSchema("select7\"x$1");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("select7\"x$1", dBSchema0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "select7\"x$1";
      stringArray0[3] = "42X85";
      stringArray0[4] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , select7\"x$1, 42X85, )", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exe");
      DBDataType.getInstance(10, "dateQ");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("B4dx2T");
      String string0 = SQLUtil.substituteMarkers("<=>", "<=>", "<=>");
      assertEquals("'<=>'", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "B4dx2T";
      stringArray0[2] = "!txf0 -i";
      stringArray0[3] = "";
      stringArray0[4] = "<=>";
      String string1 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, B4dx2T, !txf0 -i, , <=>, , , )", string1);
      
      boolean boolean1 = SQLUtil.isDDL("drop materialized view");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("");
      SQLUtil.renderValue("");
      SQLUtil.isDDL("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Object object0 = new Object();
      SQLUtil.substituteMarkers("", "T]Nk2r}b(Fi7", object0);
      DBTable dBTable0 = null;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "y/q86{|_4ibe9f$11QW";
      stringArray0[1] = "y/q86{|_4ibe9f$11QW";
      stringArray0[2] = "";
      stringArray0[3] = "y/q86{|_4ibe9f$11QW";
      stringArray0[4] = "y/q86{|_4ibe9f$11QW";
      stringArray0[5] = "y/q86{|_4ibe9f$11QW";
      stringArray0[6] = "";
      stringArray0[7] = "";
      DBUniqueConstraint dBUniqueConstraint0 = null;
      try {
        dBUniqueConstraint0 = new DBUniqueConstraint((DBTable) null, "y/q86{|_4ibe9f$11QW", false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBUniqueConstraint", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[1] = ".gE";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable(stringArray0[0]);
      DBCatalog dBCatalog0 = new DBCatalog((String) null);
      dBCatalog0.getSchema((String) null);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable((String) null, (DBSchema) null);
      defaultDBTable1.getPrimaryKeyConstraint();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, "alter table", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (, .gE, , , , )", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8392367006650063
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-19);
      byteArray0[5] = (byte)18;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " (");
      byteArray0[6] = (byte)2;
      byteArray0[7] = (byte) (-124);
      byteArray0[8] = (byte) (-103);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = " (";
      stringArray0[1] = " (";
      stringArray0[2] = "update(";
      stringArray0[3] = " (";
      stringArray0[4] = " (";
      stringArray0[5] = " (";
      stringArray0[6] = " (";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" (", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT \" (\" FOREIGN KEY ( (,  (, update(,  (,  (,  (,  () REFERENCES  (( (,  (, update(,  (,  (,  (,  ()", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \" (\" FOREIGN KEY ( (,  (, update(,  (,  (,  (,  () REFERENCES  (( (,  (, update(,  (,  (,  (,  ()", string1);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("callb4dx2t", stringBuilder0);
      SQLUtil.addOptionalCondition("callb4dx2t", stringBuilder1);
      assertEquals("callb4dx2t or callb4dx2t", stringBuilder1.toString());
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("callb4dx2t");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      String string0 = SQLUtil.normalize("create table", true);
      assertEquals("create table", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "CIT]mK^2&V8vs\"";
      SQLUtil.removeComments("");
      boolean boolean0 = SQLUtil.isProcedureCall("drop materialized viewlseg");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.97135724597549
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName(" DEFAULT ", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("call");
      SQLUtil.addRequiredCondition("", stringBuilder0);
      assertEquals("call and ", stringBuilder0.toString());
      
      DBSchema dBSchema0 = new DBSchema((String) null);
      SQLUtil.typeAndName(dBSchema0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      Object object0 = new Object();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.mutatesDataOrStructure(" DEFAULT ");
      SQLUtil.join("", (String) null, stringArray0, "*HH'k~CRh5h", "()", stringArray0);
      SQLUtil.join("()", "Returning autogenerated keys by column index is not supported.", stringArray0, "schema null", "", stringArray0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "*HH'k~CRh5h as () on ";
      objectArray0[1] = (Object) " DEFAULT ";
      objectArray0[2] = (Object) "schema null";
      objectArray0[3] = (Object) "Returning autogenerated keys by column index is not supported.";
      objectArray0[4] = (Object) integer0;
      objectArray0[5] = (Object) "*HH'k~CRh5h as () on ";
      objectArray0[6] = (Object) integer0;
      objectArray0[7] = (Object) dBSchema0;
      Object object1 = new Object();
      objectArray0[8] = object1;
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("()", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4431633337638496
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[6];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      stringArray0[3] = ".gE";
      SQLUtil.isProcedureCall(".gE");
      SQLUtil.mutatesDataOrStructure(".gE");
      Boolean boolean0 = SQLUtil.mutatesStructure(" DEFAULT ");
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getTable(".gE", false);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) ".gE";
      objectArray0[1] = (Object) boolean0;
      objectArray0[2] = (Object) ".gE";
      objectArray0[3] = (Object) ".gE";
      objectArray0[4] = (Object) boolean0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exe");
      DBDataType.getInstance(10, "dateQ");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y5sX{xk*p{H!a";
      stringArray0[1] = "Y5sX{xk*p{H!a";
      stringArray0[2] = "exe";
      stringArray0[3] = "upda";
      stringArray0[4] = "tree height: ";
      stringArray0[5] = "upda";
      stringArray0[6] = "alter index";
      stringArray0[8] = "upda";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "exe", true, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        SQLUtil.join(".gE", "call", (String[]) null, ".R", "jDp", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-7z;TZ]\"yP&$unV";
      stringArray0[1] = ",";
      stringArray0[2] = "org.hsqldb.Record";
      stringArray0[3] = " on ";
      String string0 = SQLUtil.join("", "org.hsqldb.Record", stringArray0, "alter indexzkhi/vmp-\"im.dys", "", stringArray0);
      assertEquals("alter indexzkhi/vmp-\"im.dys as  on org.hsqldb.Record.-7z;TZ]\"yP&$unV = .-7z;TZ]\"yP&$unV and org.hsqldb.Record., = ., and org.hsqldb.Record.org.hsqldb.Record = .org.hsqldb.Record and org.hsqldb.Record. on  = . on ", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3183056868918186
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)6;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesStructure("SET ROLE ");
      SQLUtil.isQuery(" NOT");
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers(" NOT", (String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      Integer.compare(282, 197);
      Integer.divideUnsigned(282, 282);
      SQLUtil.substituteMarkers("derby.product.external.name", "derby.product.external.name", integer0);
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter session";
      stringArray0[1] = "alter session";
      stringArray0[2] = "alter session";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "alter session");
      stringArray0[3] = "!nP`iXZUZ\"";
      stringArray0[4] = "alter session";
      stringArray0[5] = "alter session";
      stringArray0[6] = "alter session";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("alter session", stringArray0, "alter session", "alter session", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      DBSchema dBSchema0 = new DBSchema("1QLb");
      dBSchema0.getTable("()");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1374535592459263
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "CLOB");
      String[] stringArray0 = new String[5];
      stringArray0[1] = "exe";
      stringArray0[2] = "V2npWnMrb!mh7AAA~";
      stringArray0[3] = "exe";
      stringArray0[4] = "V2npWnMrb!mh7AAA~";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "V2npWnMrb!mh7AAA~";
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "exe";
      Object object1 = new Object();
      objectArray0[3] = object1;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SQLUtil.isQuery("7\"X$1");
      Random.setNextRandom((-1994848251));
      Random.setNextRandom((-1994848251));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = ". h-[ ~m }mW";
      stringArray0[1] = ". h-[ ~m }mW";
      stringArray0[2] = ". h-[ ~m }mW";
      stringArray0[3] = ". h-[ ~m }mW";
      stringArray0[4] = ". h-[ ~m }mW";
      stringArray0[5] = ". h-[ ~m }mW";
      stringArray0[6] = ". h-[ ~m }mW";
      stringArray0[7] = ". h-[ ~m }mW";
      String string0 = SQLUtil.innerJoin(". h-[ ~m }mW", stringArray0, (String) null, ". h-[ ~m }mW", stringArray0);
      assertEquals("null as . h-[ ~m }mW on . h-[ ~m }mW.. h-[ ~m }mW = . h-[ ~m }mW.. h-[ ~m }mW and . h-[ ~m }mW.. h-[ ~m }mW = . h-[ ~m }mW.. h-[ ~m }mW and . h-[ ~m }mW.. h-[ ~m }mW = . h-[ ~m }mW.. h-[ ~m }mW and . h-[ ~m }mW.. h-[ ~m }mW = . h-[ ~m }mW.. h-[ ~m }mW and . h-[ ~m }mW.. h-[ ~m }mW = . h-[ ~m }mW.. h-[ ~m }mW and . h-[ ~m }mW.. h-[ ~m }mW = . h-[ ~m }mW.. h-[ ~m }mW and . h-[ ~m }mW.. h-[ ~m }mW = . h-[ ~m }mW.. h-[ ~m }mW and . h-[ ~m }mW.. h-[ ~m }mW = . h-[ ~m }mW.. h-[ ~m }mW", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      DBDataType dBDataType0 = DBDataType.getInstance(39, "insert");
      Integer integer1 = new Integer(990);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("JAR", defaultDBTable0, dBDataType0, integer1, (Integer) null);
      Integer integer2 = new Integer(39);
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = new Integer((-284016140));
      Integer integer5 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("\u0001S\u000E\uFFFF\u0001Q\u0001R", defaultDBTable0, dBDataType0, integer5, (Integer) null);
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      DBCatalog dBCatalog0 = new DBCatalog(")xR$SxsnV\"0r");
      DBSchema dBSchema0 = new DBSchema("QH*", dBCatalog0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("insert", dBSchema0);
      defaultDBTable1.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.316808454615751
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML(" REFERENCES ");
      assertFalse(boolean0);
      
      DBSchema dBSchema0 = new DBSchema("}ULGF[er o7_cLML");
      dBSchema0.getTables(false);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.setSchema(dBSchema0);
      String[] stringArray0 = new String[1];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" join ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      String string0 = dBForeignKeyConstraint1.toString();
      assertEquals("CONSTRAINT \" join \" FOREIGN KEY () REFERENCES null()", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "create materialized viewxg*!+j&xjuf9/j7zwe:";
      stringArray0[1] = "create materialized viewxg*!+j&xjuf9/j7zwe:";
      stringArray0[2] = "create materialized viewxg*!+j&xjuf9/j7zwe:";
      stringArray0[3] = "create materialized viewxg*!+j&xjuf9/j7zwe:";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create materialized viewxg*!+j&xjuf9/j7zwe:", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"create materialized viewxg*!+j&xjuf9/j7zwe:\" PRIMARY KEY (create materialized viewxg*!+j&xjuf9/j7zwe:, create materialized viewxg*!+j&xjuf9/j7zwe:, create materialized viewxg*!+j&xjuf9/j7zwe:, create materialized viewxg*!+j&xjuf9/j7zwe:)", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.8388421358918872
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = ".gE";
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(".gE");
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBColumn dBColumn0 = null;
      SQLUtil.normalize("FileStore.", false);
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure(" REFERY+CES ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("circle");
      assertNull(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-7z;TZ]\"yP&$unV";
      stringArray0[1] = ",";
      stringArray0[2] = "org.hsqldb.Record";
      stringArray0[3] = " on ";
      String string0 = SQLUtil.join("insert", "org.hsqldb.Record", stringArray0, "alter indexzkhi/vmp-\"im.dys", "", stringArray0);
      SQLUtil.leftJoin("-7z;TZ]\"yP&$unV", stringArray0, ",", " on ", stringArray0);
      String string1 = SQLUtil.normalize("", false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.renderColumnListWithTableName(" DEFAULT ", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      MockFile mockFile0 = new MockFile("=T|OzP(U~D_&v2t>)^D");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("alter tablereferences", stringBuilder0);
      int int0 = (-2801);
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1988, (-2801));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1988
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.3934272312695983
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exe");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Y5sX{xk*p{H!a";
      stringArray0[1] = "upda";
      stringArray0[2] = "upda";
      stringArray0[3] = "exe";
      stringArray0[4] = "Su/Fss|6h5=";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("?S=pv|2GMn'4?;q~Q", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      String string0 = dBForeignKeyConstraint0.toString();
      assertEquals("CONSTRAINT ?S=pv|2GMn'4?;q~Q FOREIGN KEY (Y5sX{xk*p{H!a, upda, upda, exe, Su/Fss|6h5=) REFERENCES exe(Y5sX{xk*p{H!a, upda, upda, exe, Su/Fss|6h5=)", string0);
      
      String string1 = SQLUtil.normalize("?SAm'J>oqP", true);
      assertEquals(" ? SAm 'J>oqP'", string1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      stringArray0[3] = ".gE";
      stringArray0[4] = ".gE";
      stringArray0[5] = "";
      String[] stringArray1 = new String[7];
      stringArray1[0] = "B=Yp^q";
      stringArray1[1] = ".gE";
      stringArray1[2] = ",";
      stringArray1[3] = "";
      stringArray1[4] = "B=Yp^q";
      String string0 = SQLUtil.normalize("R+QGT*3", false);
      assertEquals("R + QGT * 3", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      String[] stringArray0 = new String[3];
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte) (-66);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("U3#");
      String string0 = SQLUtil.renderValue(jMXPrincipal0);
      assertEquals("JMXPrincipal:  U3#", string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".gE";
      stringArray0[1] = ".gE";
      stringArray0[2] = ".gE";
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename");
      DBDataType dBDataType0 = DBDataType.getInstance(8, ".gE");
      Integer integer2 = new Integer((-287731954));
      Integer integer3 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", defaultDBTable0, dBDataType0, (Integer) null, integer3);
      Integer integer4 = new Integer(8);
      Integer integer5 = RawTransaction.ABORT;
      Integer integer6 = new Integer(48);
      Integer integer7 = RawTransaction.COMMIT;
      Integer.getInteger("alter index", 8);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("^~mXjl5w7WC%)3", defaultDBTable0, dBDataType0, integer3, integer7);
      defaultDBColumn1.isUnique();
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals(".GE(2,0)", string0);
      
      SQLUtil.parseColumnTypeAndSize("1wr0\\@ +l/");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("^~mXjl5w7WC%)3, rename, ^~mXjl5w7WC%)3", string1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insert");
      Integer integer1 = new Integer((-2188));
      Integer integer2 = new Integer(1363);
      Integer integer3 = RawTransaction.ABORT;
      Integer integer4 = new Integer((-1843368295));
      boolean boolean0 = SQLUtil.isDDL("insert");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      String string0 = "ul";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ul");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("F'UVt^QT9?d+(", defaultDBTable0, 335544775, "F'UVt^QT9?d+(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: F'UVt^QT9?d+(
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
