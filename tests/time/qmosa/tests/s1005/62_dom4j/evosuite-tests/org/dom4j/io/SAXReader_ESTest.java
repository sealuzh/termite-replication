/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:54:54 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URISyntaxException;
import java.net.URL;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.ElementHandler;
import org.dom4j.QName;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      StringReader stringReader0 = new StringReader(".w30le>mll~");
      Object object0 = new Object();
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver(".w30le>mll~");
      InputSource inputSource0 = new InputSource(".w30le>mll~");
      inputSource0.getSystemId();
      entityResolver0.resolveEntity("[ absolute: ", "//tmp/&wv70http:/xml.org/sax/handlers/LexicalHandler");
      InputSource inputSource1 = new InputSource("!IV");
      Object object1 = new Object();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      SAXParseException sAXParseException0 = new SAXParseException("//9Mnio7K", locatorImpl0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3891188032707174
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" of type: ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver(" of type: ");
      InputSource inputSource0 = new InputSource(" of type: ");
      InputSource inputSource1 = new InputSource("Error on line ");
      inputSource1.getSystemId();
      InputSource inputSource2 = new InputSource();
      InputSource inputSource3 = new InputSource("");
      inputSource3.getSystemId();
      inputSource3.setEncoding("Error on line ");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.removeHandler("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read(inputSource3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"ERROR ON LINE \". Nested exception: Invalid encoding name \"ERROR ON LINE \".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3385967288168596
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
          StringReader stringReader0 = new StringReader("//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler");
          NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
          QName qName0 = namespaceStack0.getAttributeQName((String) null, "http://xml.org/sax/handlers/LexicalHandler", "");
          documentFactory0.createElement(qName0);
          SAXReader sAXReader1 = new SAXReader(documentFactory0, false);
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/P'd0http:/xml.org/sax/properties/lexical-handler");
          InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("@y\"_k;GonchMb<p", "::processing-instruction(");
          InputSource inputSource1 = new InputSource("6");
          inputSource1.getSystemId();
          inputSource1.setEncoding("@y\"_k;GonchMb<p");
          SAXReader sAXReader2 = new SAXReader(true);
          FileSystemHandling.shouldAllThrowIOExceptions();
          try { 
            sAXReader2.read(inputSource0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // sun.reflect.GeneratedMethodAccessor192.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // sun.reflect.GeneratedMethodAccessor192.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "}";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("}");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("}");
      InputSource inputSource0 = new InputSource("}");
      InputSource inputSource1 = new InputSource("");
      StringReader stringReader0 = new StringReader("//tmp/http:/xml.org/sax/features/namespace-prefixes0WglRd");
      String string1 = "R/g4afXxp{Uk0T5Q1lR";
      MockFile.createTempFile("string-length() requires one argument.", "//tmp/http:/xml.org/sax/features/namespace-prefixes0WglRd", (File) null);
      SAXReader sAXReader0 = new SAXReader(true);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3299263370027328
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/namespace-prefixes");
          sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
          InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("|9d^4/Y)La", "http://xml.org/sax/features/namespace-prefixes");
          SAXReader sAXReader0 = new SAXReader(true);
          MockFile mockFile0 = new MockFile("http://xml.org/sax/features/namespace-prefixes");
          XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
          XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
          sAXReader0.setXMLFilter(xMLFilterImpl1);
          try { 
            sAXReader0.read(inputSource0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // sun.reflect.GeneratedMethodAccessor192.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.xml.sax.helpers.XMLFilterImpl.parse(XMLFilterImpl.java:357)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // sun.reflect.GeneratedMethodAccessor192.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      StringReader stringReader0 = new StringReader("//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler");
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      QName qName0 = namespaceStack0.getAttributeQName((String) null, "http://xml.org/sax/handlers/LexicalHandler", "");
      documentFactory0.createElement(qName0);
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader1.isValidating();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createQName(" : ", " : ");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      qName0.getDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, "http://xml.org/sax/handlers/LexicalHandler");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.7317380338547332
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setEncoding("");
      sAXReader0.setDocumentFactory(documentFactory0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      sAXReader0.setStripWhitespaceText(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.setDocumentFactory(documentFactory1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource("//tmp/R/g4afXxp{Uk0T5Q1lR04>");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InputSource inputSource1 = new InputSource((String) null);
      inputSource0.getSystemId();
      InputSource inputSource2 = new InputSource();
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.getContentHandler();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, true);
      // Undeclared exception!
      try { 
        sAXReader1.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.361011327263587
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      String string0 = "";
      QName qName0 = namespaceStack0.getAttributeQName("", "", "");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.createXMLReader();
      sAXReader0.isStripWhitespaceText();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5051429586109664
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setEncoding("");
      sAXReader0.setDocumentFactory(documentFactory0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      sAXReader0.setStripWhitespaceText(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.setDocumentFactory(documentFactory1);
      StringReader stringReader0 = new StringReader("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.createDefaultEntityResolver("");
      sAXReader0.getErrorHandler();
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.394011970071902
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/namespace-prefixes");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
      sAXReader_SAXEntityResolver0.resolveEntity("|9d^4/Y)La", "http://xml.org/sax/features/namespace-prefixes");
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.unparsedEntityDecl(" _&S", "5D.", "", "|9d^4/Y)La");
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/features/namespace-prefixes");
      try { 
        sAXReader0.read("YW`$G>*QISh2uXC*m");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: YW`$G>*QISh2uXC*m Nested exception: no protocol: YW`$G>*QISh2uXC*m
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.441447689794065
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      StringReader stringReader0 = new StringReader("//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler");
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      QName qName0 = namespaceStack0.getAttributeQName((String) null, "Error on line ", "");
      documentFactory0.createElement(qName0);
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader1.getXMLFilter();
      sAXReader1.setXMLFilter((XMLFilter) null);
      sAXReader1.isValidating();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      QName qName1 = defaultDocumentFactory0.createQName("ap|)D%,+;T]uv", "Gd]xLDm!}");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DocumentFactory documentFactory1 = qName1.getDocumentFactory();
      sAXReader0.setDocumentFactory(documentFactory1);
      try { 
        sAXReader0.read("ap|)D%,+;T]uv");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: ap|)D%,+;T]uv Nested exception: no protocol: ap|)D%,+;T]uv
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3935777538322145
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" of type: ");
      InputSource inputSource0 = new InputSource("h05y");
      InputSource inputSource1 = new InputSource(" of type: ");
      InputSource inputSource2 = new InputSource("//tmp/&wv70http:/xml.org/sax/handlers/LexicalHandler");
      inputSource2.getSystemId();
      sAXReader_SAXEntityResolver0.resolveEntity("h05y", " of type: ");
      inputSource1.getSystemId();
      inputSource0.setEncoding("mo*<>V<^]S:PIO");
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader sAXReader1 = new SAXReader((String) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader1.setXMLFilter(xMLFilterImpl0);
      InputSource inputSource3 = new InputSource("h05y");
      try { 
        sAXReader1.read(inputSource3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/h05y (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/h05y (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader(" attributes: ");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl(xMLFilterImpl1);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLReader(xMLFilterImpl3);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/namespace-prefixes");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
      String string0 = "No function context installed";
      MockFile mockFile0 = new MockFile("No function context installed", "|9d^4/Y)La");
      mockFile0.setReadable(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      char[] charArray0 = new char[4];
      int int0 = 608;
      defaultHandler2_0.characters(charArray0, 608, 608);
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getXMLFilter();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler2_0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLReaderAdapter0.startDocument();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@39b93bd9 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      sAXReader0.getErrorHandler();
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("s[", "s[");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0248847886694654
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setEncoding("");
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.resetHandlers();
      sAXReader0.setDocumentFactory(documentFactory1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      assertTrue(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5378570373456237
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLReaderAdapter0.startDocument();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.getXMLReader();
      sAXReader0.setEncoding("B~h9Qk8_;.");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("VtR7Lq/j@R");
      dispatchHandler0.addHandler("B~h9Qk8_;.", (ElementHandler) null);
      dispatchHandler0.resetHandlers();
      sAXReader0.addHandler("B~h9Qk8_;.", dispatchHandler0);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.isValidating();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.getDocumentFactory();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.isMergeAdjacentText();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 58);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 11);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "B~h9Qk8_;.");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"B~H9QK8_;.\". Nested exception: Invalid encoding name \"B~H9QK8_;.\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.367107195559739
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      StringReader stringReader0 = new StringReader("//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "http://xml.org/sax/handlers/LexicalHandler");
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      QName qName0 = namespaceStack0.getAttributeQName((String) null, "http://xml.org/sax/handlers/LexicalHandler", "");
      documentFactory0.createElement(qName0);
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader1.isValidating();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createQName(" : ", " : ");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      qName0.getDocumentFactory();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1464);
      try { 
        sAXReader1.read((InputStream) bufferedInputStream0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.8950056533107491
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)66;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)92;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)47;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("_}j{fNSN");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = "_}j{fNSN";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("_}j{fNSN", (String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = "_}j{fNSN";
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity("_}j{fNSN", "_}j{fNSN");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.764434117434125
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          sAXReader0.setEncoding("");
          sAXReader0.setDocumentFactory(documentFactory0);
          sAXReader0.setStringInternEnabled(true);
          XMLReader xMLReader0 = sAXReader0.getXMLReader();
          sAXReader0.setDocumentFactory(documentFactory0);
          sAXReader0.getDocumentFactory();
          sAXReader0.setStripWhitespaceText(true);
          SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
          sAXReader0.setErrorHandler(sAXContentHandler0);
          sAXReader0.isIncludeExternalDTDDeclarations();
          sAXReader0.setIncludeInternalDTDDeclarations(true);
          sAXReader0.resetHandlers();
          sAXReader0.setIncludeExternalDTDDeclarations(true);
          sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
          sAXReader0.isIncludeInternalDTDDeclarations();
          sAXReader0.isValidating();
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.4687044989586093
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setEncoding("");
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.setStringInternEnabled(true);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      sAXReader0.setStripWhitespaceText(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.resetHandlers();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.isValidating();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = documentFactory1.createQName("uGBpSK}(S", "uGBpSK}(S");
      DocumentFactory documentFactory2 = qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(documentFactory2, true);
      sAXReader1.setDocumentFactory(documentFactory1);
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIgnoreComments());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      defaultDocumentFactory0.createProcessingInstruction("org.dom4j.io.SAXReader", "org.dom4j.io.SAXReader");
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.getEntityResolver();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      SAXParseException sAXParseException0 = new SAXParseException("W4H_+w", locatorImpl0);
      MockException mockException0 = new MockException("=}\"?mbVGTe*:prM2", sAXParseException0);
      MockException mockException1 = new MockException(sAXParseException0);
      MockException mockException2 = new MockException(mockException0);
      SAXParseException sAXParseException1 = new SAXParseException("http://xml.org/sax/properties/declaration-handler", locatorImpl0, mockException2);
      SAXParseException sAXParseException2 = new SAXParseException("Oe7()sb>%V09\"7w//W", "", "{YiXRU4KrOaC!)I%~", (-1353), 0, mockException2);
      try { 
        defaultHandler0.fatalError(sAXParseException1);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4921235982721686
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      xMLReaderAdapter0.startDocument();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
      sAXReader0.getXMLReader();
      sAXReader0.setEncoding("B~h9Qk8_;.");
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("VtR7Lq/j@R");
      dispatchHandler0.addHandler("B~h9Qk8_;.", (ElementHandler) null);
      dispatchHandler0.resetHandlers();
      sAXReader0.addHandler("B~h9Qk8_;.", dispatchHandler0);
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.isValidating();
      StringReader stringReader0 = new StringReader("VtR7Lq/j@R");
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '3';
      stringReader0.read(charArray0);
      try { 
        sAXReader0.read((Reader) stringReader0, "VtR7Lq/j@R");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/VtR7Lq/j@R : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource("n06Qesm#h");
      inputSource0.getSystemId();
      Object object0 = new Object();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      locator2Impl1.setEncoding("http://xml.org/sax/properties/lexical-handler");
      SAXParseException sAXParseException0 = new SAXParseException("!9dcxO}Ktb]lllht!", locator2Impl1);
      sAXReader0.isMergeAdjacentText();
      sAXReader0.isIgnoreComments();
      try { 
        sAXReader0.setProperty("Cannot lookup namespace URIs in DOM 2", (Object) null);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'Cannot lookup namespace URIs in DOM 2' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setValidation(true);
      String string0 = "//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler";
      StringReader stringReader0 = new StringReader("//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler");
      boolean boolean0 = true;
      NamespaceStack namespaceStack0 = new NamespaceStack(documentFactory0);
      String string1 = "";
      QName qName0 = namespaceStack0.getAttributeQName((String) null, "http://xml.org/sax/handlers/LexicalHandler", "");
      documentFactory0.createElement(qName0);
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader1.isValidating();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      String string2 = "ap|)D%,+;T]uv";
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      // Undeclared exception!
      try { 
        defaultDocumentFactory2.createQName("ap|)D%,+;T]uv", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.338596728816859
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/namespace-prefixes");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
      sAXReader_SAXEntityResolver0.resolveEntity("|9d^4/Y)La", "http://xml.org/sax/features/namespace-prefixes");
      SAXReader sAXReader0 = new SAXReader(true);
      MockFile mockFile0 = new MockFile("http://xml.org/sax/features/namespace-prefixes");
      try { 
        sAXReader0.read("YW`$G>*QISh2uXC*m");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: YW`$G>*QISh2uXC*m Nested exception: no protocol: YW`$G>*QISh2uXC*m
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource("h05y");
      InputSource inputSource1 = new InputSource("eK?w4&j5/");
      inputSource1.getSystemId();
      InputSource inputSource2 = new InputSource("http://xml.org/sax/features/namespace-prefixes");
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl(parserAdapter0);
      parserAdapter0.getContentHandler();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader1.setXMLReaderClassName("cqMT}w");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class cqMT}w not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      sAXReader0.getDocumentFactory();
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.createContentHandler(xMLReader0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("", object0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.5064723039084074
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setEncoding("");
      sAXReader0.setDocumentFactory(documentFactory0);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      DocumentFactory documentFactory1 = sAXReader0.getDocumentFactory();
      sAXReader0.setStripWhitespaceText(true);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLReader0);
      sAXReader0.setErrorHandler(sAXContentHandler0);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.resetHandlers();
      sAXReader0.configureReader(xMLReader0, sAXContentHandler0);
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.setDocumentFactory(documentFactory1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      pruningElementStack0.getDispatchHandler();
      sAXReader0.addHandler("", (ElementHandler) null);
      sAXReader0.resetHandlers();
      sAXReader0.setEntityResolver(sAXContentHandler0);
      sAXReader0.removeHandler("t!JD\"I~<cp@/SVk");
      try { 
        sAXReader0.setXMLReaderClassName("t!JD\"I~<cp@/SVk");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class t!JD\"I~<cp@/SVk not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.createXMLReader();
      sAXReader0.getXMLFilter();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.getHandler("");
      pruningDispatchHandler0.addHandler("", (ElementHandler) null);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      pruningDispatchHandler0.setDefaultHandler(dispatchHandler0);
      pruningDispatchHandler0.removeHandler((String) null);
      sAXReader0.addHandler("oX$gNbqIw ", (ElementHandler) null);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.getDispatchHandler();
      sAXReader0.isStringInternEnabled();
      sAXReader0.getEncoding();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setMergeAdjacentText(false);
      MockFile mockFile0 = new MockFile("");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[3];
      charArray0[0] = 'R';
      charArray0[1] = 'E';
      sAXReader0.setMergeAdjacentText(true);
      sAXReader0.setDocumentFactory(documentFactory0);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid path of length: 1 it must be greater than 2
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      MockFile mockFile0 = new MockFile((String) null, "/");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4440977644767417
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      documentFactory0.createQName("ap|)D%,+;T]uv", "[");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("http://xml.org/sax/features/validation");
      StringReader stringReader0 = new StringReader("ap|)D%,+;T]uv");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3809682098476954
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.setDocumentFactory(documentFactory0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "/+");
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.resetHandlers();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      sAXReader0.removeHandler("4@+M2J+-u");
      sAXReader0.isIncludeExternalDTDDeclarations();
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = documentFactory0.createQName("ap|)D%,+;T]uv", "ap|)D%,+;T]uv");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      documentFactory0.createQName(" : ", "FIGQ?ly`zyT,HN).N");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory3);
      sAXReader1.setDocumentFactory(defaultDocumentFactory1);
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      MockURL.getFileExample();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("", "");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isValidating());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      
      sAXReader0.setDocumentFactory(documentFactory0);
      sAXReader0.createXMLReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.521452740110338
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("}");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("//tmp/http:/xml.org/sax/features/namespace-prefixes0WglRd");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "//tmp/http:/xml.org/sax/features/namespace-prefixes0WglRd";
      stringArray0[1] = "//tmp/http:/xml.org/sax/features/namespace-prefixes0WglRd";
      stringArray0[2] = "}";
      stringArray0[3] = "http://xml.org/sax/features/string-interning";
      stringArray0[4] = "}";
      stringArray0[5] = "lt";
      stringArray0[6] = "//tmp/http:/xml.org/sax/features/namespace-prefixes0WglRd";
      stringArray0[7] = "}";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, sAXModifyElementHandler0);
      PruningElementStack pruningElementStack1 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack1.getDispatchHandler();
      sAXReader0.addHandler("TB", (ElementHandler) null);
      sAXReader0.resetHandlers();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      xMLFilterImpl0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      sAXReader0.removeHandler(" : ");
      try { 
        sAXReader0.setXMLReaderClassName("}");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class } not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.276430916015819
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" is less than zero");
      InputSource inputSource0 = new InputSource("//tmp/P'd0http:/xml.org/sax/properties/lexical-handler");
      InputSource inputSource1 = new InputSource("");
      inputSource1.getSystemId();
      InputSource inputSource2 = new InputSource();
      InputSource inputSource3 = new InputSource("//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler");
      inputSource3.getSystemId();
      inputSource2.setEncoding("//tmp/tmp/WglRd0http:/xml.org/sax/properties/lexical-handler0/tmp/WglRd0http:/xml.org/sax/properties/lexical-handler");
      SAXReader sAXReader0 = new SAXReader(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read(inputSource1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource("n06Qesm#h");
      inputSource0.getSystemId();
      Object object0 = new Object();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      SAXParseException sAXParseException0 = new SAXParseException("!9dcxO}Ktb]lllht!", locator2Impl1);
      try { 
        sAXReader0.read("file://");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  (No such file or directory) Nested exception:  (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3117474939709357
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = " is less than zero";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" is less than zero");
      InputSource inputSource0 = new InputSource("//tmp/P'd0http:/xml.org/sax/properties/lexical-handler");
      InputSource inputSource1 = new InputSource("//tmp/http:/xml.org/sax/features/namespace-prefixes0WglRd");
      StringReader stringReader0 = new StringReader(" is less than zero");
      File file0 = MockFile.createTempFile("R/g4afXxp{Uk05Q1lR", "4>", (File) null);
      file0.deleteOnExit();
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((Reader) stringReader0, " is less than zero");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/%20is%20less%20than%20zero : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2487663399462696
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("}");
      sAXReader_SAXEntityResolver0.uriPrefix = "\"^LF\"xbGk2lfjq\"h";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("}", "}");
      InputSource inputSource1 = new InputSource("");
      inputSource1.getSystemId();
      InputSource inputSource2 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      InputSource inputSource3 = new InputSource("");
      inputSource2.getSystemId();
      inputSource1.getCharacterStream();
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: \"^LF\"xbGk2lfjq\"h} Nested exception: no protocol: \"^LF\"xbGk2lfjq\"h}
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(false);
          sAXReader0.getDispatchHandler();
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor191.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.366660627207849
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      File file0 = MockFile.createTempFile("WglRd", "http://xml.org/sax/properties/lexical-handler");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "Jb|{>.uP";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("Jb|{>.uP");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Jb|{>.uP not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.369978708581614
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      defaultDocumentFactory0.createProcessingInstruction("org.dom4j.io.SAXReader", "org.dom4j.io.SAXReader");
      sAXReader0.isIncludeInternalDTDDeclarations();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      defaultDocumentFactory0.createCDATA("Oe7()sb>%V09\"7w//W");
      try { 
        sAXReader0.setFeature(">S", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '>S' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3205733337873515
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("}");
      sAXReader_SAXEntityResolver0.uriPrefix = "\"^LF\"xbGk2lfjq\"h";
      InputSource inputSource0 = new InputSource("");
      sAXReader_SAXEntityResolver0.resolveEntity("}", "}");
      InputSource inputSource1 = new InputSource("");
      inputSource1.getSystemId();
      MockFile mockFile0 = new MockFile("", "}");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.setReadable(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      sAXContentHandler0.characters(charArray0, 3974, (-1633));
      sAXReader0.configureReader(xMLFilterImpl1, sAXContentHandler0);
      int int0 = 33;
      try { 
        MockURI.URI("?K%AfGf", "\u0005\"M#,,-jQ>@,l~", "\"^LF\"xbGk2lfjq\"h", 33, "?K%AfGf", (String) null, "");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Relative path in absolute URI: ?K%AfGf://%05%22M%23,,-jQ%3E%40,l~@\"^LF\"xbGk2lfjq\"h:33%3FK%25AfGf#
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("e>Ba=");
      sAXReader_SAXEntityResolver0.uriPrefix = "e>Ba=";
      sAXReader_SAXEntityResolver0.uriPrefix = "e>Ba=";
      sAXReader_SAXEntityResolver0.resolveEntity("zo<VlA3@", "e>Ba=");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isValidating());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      String string0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-42);
      byteArray0[5] = (byte) (-115);
      byteArray0[6] = (byte)69;
      byteArray0[7] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      sAXReader0.getXMLFilter();
      sAXReader0.getDocumentFactory();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.installXMLFilter((XMLReader) null);
      sAXReader0.isStringInternEnabled();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      xMLReaderAdapter0.startDocument();
      parserAdapter0.setContentHandler(xMLReaderAdapter0);
      sAXReader0.getXMLReader();
      sAXReader0.setEncoding("B~h9Qk8_;.");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".w30le>mll~");
      Object object0 = new Object();
      StringReader stringReader1 = new StringReader(".w30le>mll~");
      File file0 = MockFile.createTempFile("&wv7", ".w30le>mll~", (File) null);
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.5340735579919818
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
          ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
          xMLReaderAdapter0.startDocument();
          parserAdapter0.setContentHandler(xMLReaderAdapter0);
          sAXReader0.createContentHandler(parserAdapter0);
          sAXReader0.getXMLReader();
          sAXReader0.setEncoding("B~h9Qk8_;.");
          DispatchHandler dispatchHandler0 = new DispatchHandler();
          dispatchHandler0.removeHandler("VtR7Lq/j@R");
          dispatchHandler0.addHandler("B~h9Qk8_;.", (ElementHandler) null);
          dispatchHandler0.resetHandlers();
          sAXReader0.addHandler("B~h9Qk8_;.", dispatchHandler0);
          sAXReader0.setStringInternEnabled(false);
          sAXReader0.isValidating();
          MockFile mockFile0 = new MockFile("file://");
          try { 
            sAXReader0.read("//tmp/WglRd0http:/xml.org/sax/properties/lexical-handler");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor134.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      MockException mockException0 = new MockException();
      SAXParseException sAXParseException0 = new SAXParseException("_=S`ZG4e|*xn", (Locator) null, mockException0);
      xMLFilterImpl0.warning(sAXParseException0);
      HandlerBase handlerBase0 = new HandlerBase();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl0.startElement("_=S`ZG4e|*xn", "//tmp/http:/xml.org/sax/features/namespaces0", "_=S`ZG4e|*xn", attributesImpl0);
      xMLFilterImpl0.setDTDHandler(handlerBase0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      sAXReader0.setIgnoreComments(false);
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("*h/", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class *h/ not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
