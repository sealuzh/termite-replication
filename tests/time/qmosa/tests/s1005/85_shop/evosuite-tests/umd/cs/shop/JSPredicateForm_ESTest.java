/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:43:58 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.ListIterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.listIterator();
      jSTerm1.containsAll(jSTerm0);
      StringReader stringReader0 = new StringReader("jkdcugp");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(613);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      Integer integer1 = new Integer(613);
      jSTerm1.add((Object) integer1);
      Integer integer2 = new Integer(1182);
      jSTerm1.add((Object) integer2);
      char[] charArray0 = new char[33];
      charArray0[0] = 'n';
      stringReader0.read(charArray0);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      jSTerm1.print();
      StringReader stringReader0 = new StringReader("not");
      char[] charArray0 = new char[20];
      charArray0[0] = 'o';
      jSTerm1.setSize(44);
      stringReader0.read(charArray0);
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.354366658115687
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      Integer integer0 = new Integer((-379));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'fHs");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.containsAll(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "'fHs");
      JSPredicateForm jSPredicateForm1 = jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm1.equals(jSPredicateForm0);
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      jSPredicateForm3.equals(jSPredicateForm1);
      Object[] objectArray0 = new Object[0];
      jSSubstitution0.toArray(objectArray0);
      jSPredicateForm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      jSPredicateForm1.matches(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm2.matches((JSPredicateForm) jSTerm1, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9052488524311777
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(0L);
      StringReader stringReader1 = new StringReader("}?dR+w87*O*Il");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar((-3));
      jSPredicateForm0.equals(jSPredicateForm0);
      jSTerm1.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm2.equals(jSPredicateForm1);
      JSJshopVars.backquote = (-4);
      jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = new JSPredicateForm();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.113975609420043
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(0L);
      StringReader stringReader1 = new StringReader("}?dR+w87*O*Il");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar((-3));
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSPredicateForm jSPredicateForm2 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      boolean boolean0 = jSPredicateForm3.equals(jSPredicateForm4);
      jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm8 = jSTerm0.clonePF();
      jSPredicateForm8.containsAll(jSPredicateForm2);
      jSPredicateForm6.standarizerPredicateForm();
      streamTokenizer0.slashStarComments(false);
      JSPredicateForm jSPredicateForm9 = jSPredicateForm7.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSPredicateForm7.matches(jSPredicateForm5, jSSubstitution0);
      assertNotSame(jSPredicateForm0, jSPredicateForm8);
      assertTrue(jSSubstitution1.fail());
      
      boolean boolean1 = jSPredicateForm9.equals(jSPredicateForm1);
      assertFalse(boolean1 == boolean0);
      
      JSPredicateForm jSPredicateForm10 = jSPredicateForm4.standarizerPredicateForm();
      assertNotSame(jSPredicateForm4, jSPredicateForm3);
      assertNotSame(jSPredicateForm4, jSPredicateForm10);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(42, 42);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      stringReader0.reset();
      String string0 = ";|y8}@Ml]TAhH)";
      String string1 = "lz?kr$(!gh?";
      StringReader stringReader1 = new StringReader("lz?kr$(!gh?");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "not";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("not");
      stringReader1.ready();
      String string1 = "^7_Fa$#]d";
      StringReader stringReader2 = new StringReader("^7_Fa$#]d");
      stringReader2.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.481992500001469
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer(613);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clonePF();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("pk");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("-");
      stringReader2.markSupported();
      char[] charArray0 = new char[1];
      charArray0[0] = 'G';
      stringReader2.read(charArray0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.add((Object) streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4373538293677455
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar(49);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(3230);
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm1.toStr();
      assertEquals("(%%%)", stringBuffer0.toString());
      
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm5 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.commentChar(49);
      jSTerm0.equals(jSPredicateForm5);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm4.clonePF();
      jSPredicateForm1.equals(jSPredicateForm3);
      JSPredicateForm jSPredicateForm7 = jSTerm0.standarizerPredicateForm();
      boolean boolean0 = jSPredicateForm2.equals(jSPredicateForm7);
      assertTrue(boolean0);
      
      jSPredicateForm4.standarizerPredicateForm();
      jSPredicateForm6.standarizerPredicateForm();
      jSPredicateForm5.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm8 = jSPredicateForm2.clonePF();
      jSPredicateForm0.containsAll(jSPredicateForm5);
      JSPredicateForm jSPredicateForm9 = jSPredicateForm8.standarizerPredicateForm();
      Object object0 = new Object();
      jSPredicateForm9.remove(object0);
      jSPredicateForm9.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm8, jSSubstitution0);
      JSPredicateForm jSPredicateForm10 = jSPredicateForm9.standarizerPredicateForm();
      jSPredicateForm1.matches(jSPredicateForm6, jSSubstitution1);
      JSSubstitution jSSubstitution2 = jSPredicateForm10.matches(jSPredicateForm6);
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSPredicateForm4, jSPredicateForm6);
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSPredicateForm0.applySubstitutionPF(jSSubstitution3);
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(49);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("reading");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(3227);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      streamTokenizer0.ordinaryChars(805, (-967));
      jSTerm0.equals(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.listIterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      jSTerm0.add((Object) null);
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.add((Object) "not");
      System.setCurrentTimeMillis(613);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "Reading Predicate";
      StringReader stringReader0 = new StringReader("Reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Integer integer0 = new Integer((-1115150609));
      streamTokenizer0.whitespaceChars(33, 584);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      StringReader stringReader1 = new StringReader(" ");
      stringReader1.reset();
      StringReader stringReader2 = new StringReader("K:*pEL&");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader0.close();
      stringReader2.reset();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.2992507293959255
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(Rxf,p{K)2");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(Rxf,pK)", stringBuffer0.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p3");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer integer0 = new Integer(613);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      Integer integer1 = new Integer(1182);
      jSTerm1.add((Object) integer1);
      char[] charArray0 = new char[33];
      charArray0[0] = 'n';
      stringReader0.read(charArray0);
      jSTerm0.add((Object) integer0);
      StringReader stringReader1 = new StringReader("-d#SUocaE");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(49);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5012592323783793
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      Object object0 = new Object();
      Integer integer0 = new Integer((-379));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "'fHs");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) null);
      jSTerm1.add((Object) "'fHs");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      System.setCurrentTimeMillis((-3));
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2285030156373695
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis(0L);
      StringReader stringReader1 = new StringReader("}?dR+w87*O*Il");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.commentChar((-3));
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm0);
      streamTokenizer0.nval = 0.0;
      JSPredicateForm jSPredicateForm2 = jSTerm1.clonePF();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      boolean boolean1 = jSPredicateForm3.equals(jSPredicateForm1);
      assertFalse(boolean1 == boolean0);
      
      JSJshopVars.backquote = (-4);
      JSPredicateForm jSPredicateForm4 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm7 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm8 = jSTerm0.clonePF();
      jSPredicateForm8.containsAll(jSPredicateForm2);
      JSPredicateForm jSPredicateForm9 = jSPredicateForm6.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm10 = jSPredicateForm7.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSPredicateForm7.matches(jSPredicateForm5, jSSubstitution0);
      jSPredicateForm7.standarizerPredicateForm();
      jSPredicateForm10.matches(jSPredicateForm9, jSSubstitution1);
      assertTrue(jSSubstitution1.fail());
      assertNotSame(jSPredicateForm7, jSPredicateForm6);
      
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches(jSPredicateForm8);
      assertNotSame(jSPredicateForm8, jSPredicateForm0);
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSPredicateForm1, jSPredicateForm4);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(49);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("tk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Object object0 = new Object();
      streamTokenizer0.whitespaceChars(33, 33);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) streamTokenizer0);
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("-");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.resetSyntax();
      stringReader0.markSupported();
      jSSubstitution0.stream();
      char[] charArray0 = new char[7];
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.compose((Function<? super Object, ?>) function1);
      jSSubstitution0.replaceAll(unaryOperator0);
      charArray0[0] = 'E';
      charArray0[2] = '[';
      charArray0[3] = 'E';
      charArray0[4] = 'P';
      charArray0[4] = 'P';
      charArray0[6] = 'R';
      stringReader0.read(charArray0);
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      char[] charArray0 = new char[20];
      charArray0[0] = 'o';
      charArray0[1] = 'R';
      stringReader0.read(charArray0);
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4450959558942382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer(613);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      jSPredicateForm0.containsAll(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.clonePF();
      jSPredicateForm4.equals(jSPredicateForm5);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm1.clonePF();
      jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm8 = jSPredicateForm7.standarizerPredicateForm();
      jSPredicateForm5.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm6.clonePF();
      jSPredicateForm0.containsAll(jSPredicateForm4);
      jSPredicateForm8.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm9 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm9.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm10 = null;
      try {
        jSPredicateForm10 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "reading";
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.read();
      jSTerm0.add((Object) "reading");
      StringReader stringReader1 = new StringReader("reading");
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Lz?kR$(!Gh?");
      char[] charArray0 = new char[6];
      charArray0[2] = 'Z';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'Z';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.slashStarComments(false);
      stringReader0.markSupported();
      streamTokenizer0.nval = 0.0;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = "Lz?kR$(!Gh?";
      StringReader stringReader0 = new StringReader("Lz?kR$(!Gh?");
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(|xf,p{K)2");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.listIterator();
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      stringReader0.skip((-340L));
      StringReader stringReader1 = new StringReader("TH'!\u0004F");
      stringReader1.reset();
      System.setCurrentTimeMillis(730L);
      StringReader stringReader2 = new StringReader("7qcewToA");
      StringReader stringReader3 = new StringReader("r!rp:%a)~4");
      StringReader stringReader4 = new StringReader("");
      StringReader stringReader5 = new StringReader("v_bjl");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m7:Whd^db@RhF@");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 3124.416;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      char[] charArray0 = new char[20];
      charArray0[0] = 'o';
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      ListIterator listIterator0 = jSTerm1.listIterator();
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      Integer integer1 = new Integer(91);
      jSTerm0.add((Object) listIterator0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'C';
      stringReader0.read(charArray0);
      Object object1 = new Object();
      jSTerm1.add(object1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSPredicateForm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis(3137L);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Integer integer0 = new Integer((-4));
      streamTokenizer0.pushBack();
      streamTokenizer0.commentChar(3227);
      streamTokenizer0.ordinaryChar(3227);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 3628);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChars((-4), 0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = new Integer(49);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addAll((Collection) jSSubstitution0);
      JSJshopVars.apostrophe = 1;
      JSJshopVars.backquote = 2452;
      JSJshopVars.interrogation = (-1879791101);
      jSPredicateForm0.clear();
      JSJshopVars.exclamation = (-2561);
      JSJshopVars.coma = 1634;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
      
      System.setCurrentTimeMillis((-2561));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(613);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clone();
      jSTerm0.makeVariable();
      ListIterator listIterator0 = jSTerm1.listIterator();
      jSTerm1.add((Object) listIterator0);
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.clear();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Object object0 = new Object();
      int int0 = 613;
      Integer integer0 = new Integer(613);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.containsAll(jSTerm0);
      jSTerm1.add((Object) "not");
      System.setCurrentTimeMillis(613);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("b(nGt_+u/");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("pk");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      int int0 = (-361);
      streamTokenizer1.whitespaceChars((-4), (-361));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "43~lWqo{LP6");
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
