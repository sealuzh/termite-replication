/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:35:39 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5187144856941974
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = null;
      // Undeclared exception!
      try { 
        jSTerm2.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4516337809337054
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 40);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.leftPar = 983;
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8073090651018553
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.remove((Object) null);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      StringReader stringReader1 = new StringReader("(f^p\u0000]Ce>");
      streamTokenizer0.ttype = 963;
      StringReader stringReader2 = new StringReader("max");
      stringReader2.read();
      stringReader2.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9825833974796667
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.remove((Object) null);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      StringReader stringReader1 = new StringReader("(f^p\u0000]Ce>");
      StringReader stringReader2 = new StringReader("max");
      stringReader2.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8465163476342745
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 40);
      stringReader0.mark(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.leftPar = 963;
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.addAll((Collection) jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.93504084661911
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("LX\"^x(I1Wr^5&Bf");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'z';
      stringReader0.read(charArray0);
      streamTokenizer0.wordChars(61, 331);
      streamTokenizer0.lowerCaseMode(true);
      jSTerm0.isGround();
      stringReader0.read(charArray0);
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.847676248214225
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(40, 61);
      stringReader0.mark(2675);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) "w VG");
      jSTerm1.call();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object object0 = jSTerm3.clone();
      jSSubstitution1.add(object0);
      jSTerm2.makeFunction();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.equals(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6889821674296117
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d$J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars(61, 61);
      stringReader0.mark(3992);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.makeEval(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSEvaluate.numericValue(jSTerm2);
      jSTerm2.isVariable();
      assertTrue(jSTerm2.isConstant());
      
      jSTerm2.makeVariable();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      assertFalse(jSTerm4.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.286306589149214
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringReader stringReader1 = new StringReader("-");
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      charArray0[1] = 'M';
      charArray0[2] = 'n';
      charArray0[4] = 'i';
      charArray0[4] = 'J';
      stringReader1.read(charArray0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      char[] charArray1 = new char[2];
      charArray1[0] = 't';
      charArray1[1] = 'v';
      stringReader0.read(charArray1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.removeElement(streamTokenizer0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.ordinaryChars((-4), 3035);
      jSTerm1.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6023613143091793
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.interrogation = 62;
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(2328, (-5687));
      stringReader0.mark(32);
      jSTerm1.makeEval(true);
      jSTerm1.equals(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm0.makeVariable();
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer1);
      streamTokenizer0.ordinaryChars((-5687), 32);
      jSTerm0.isFunction();
      jSTerm1.equals(jSTerm0);
      jSTerm0.toStr();
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7373678242176123
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = '8';
      charArray0[2] = '%';
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm0);
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm0, jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSEvaluate.numericValue(jSTerm1);
      jSTerm0.isVariable();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      jSTerm0.call();
      jSTerm0.standardizerTerm();
      assertTrue(jSTerm0.isVariable());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.741957749782077
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.removeAllElements();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.292993651748156
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.removeAllElements();
      JSJshopVars.greaterT = 32;
      JSTerm jSTerm3 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3656551040438814
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(2147, 37);
      stringReader0.mark(379);
      jSTerm1.makeEval(true);
      jSTerm0.equals(jSTerm1);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm1.makeVariable();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      jSTerm0.isFunction();
      jSTerm0.makeVariable();
      jSTerm1.equals(jSTerm0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertTrue(jSTerm0.isVariable());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.706844889841153
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.makeEval(true);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      jSTerm0.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm1.makeVariable();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm2.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm3.isEval());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.58404936368418
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.interrogation = 62;
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(2328, (-5687));
      stringReader0.mark(32);
      jSTerm1.makeEval(true);
      jSTerm1.equals(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm1);
      jSTerm1.isVariable();
      jSTerm1.makeVariable();
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.0659349159167233
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 40);
      stringReader0.mark(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.leftPar = 983;
      jSTerm2.makeFunction();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm3.equals(jSTerm1);
      jSTerm4.toStr();
      JSJshopVars.exclamation = 983;
      JSSubstitution jSSubstitution3 = jSTerm1.matches(jSTerm3);
      jSTerm0.applySubstitutionT(jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.385354532111758
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      streamTokenizer0.whitespaceChars(919, 919);
      stringReader0.mark(4451);
      jSTerm0.makeEval(false);
      jSTerm0.equals(jSTerm0);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      boolean boolean0 = jSTerm0.isEval();
      assertFalse(jSTerm0.isConstant());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7572446863790416
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.makeEval(true);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      jSTerm0.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      char[] charArray0 = new char[0];
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.spliterator();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.read(charArray0);
      Consumer<Integer> consumer1 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object[] objectArray0 = new Object[3];
      jSTerm1.lastElement();
      objectArray0[0] = (Object) "w";
      objectArray0[1] = (Object) "w VG";
      objectArray0[2] = (Object) consumer0;
      jSTerm1.toArray(objectArray0);
      jSTerm1.forEach(consumer1);
      JSEvaluate.numericValue(jSTerm1);
      jSTerm0.isVariable();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7416146966088353
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.removeAllElements();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm3, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2864863471053
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      StringReader stringReader1 = new StringReader("-");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      stringReader1.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm0.print();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6955444481085054
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.removeAllElements();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm3);
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0069724918931837
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2+92Ud #[J.rQ\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6123357031253716
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      jSTerm0.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      char[] charArray0 = new char[0];
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.listIterator();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      stringReader0.read(charArray0);
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.matches(jSTerm2);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.isGround();
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm3.equals(jSTerm4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.691354263113595
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.interrogation = 62;
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(2328, (-5687));
      stringReader0.mark(32);
      jSTerm1.makeEval(true);
      jSTerm1.equals(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm1);
      jSTerm1.isVariable();
      jSTerm1.makeVariable();
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.9049984085815326
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.remove((Object) null);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      JSJshopVars.interrogation = 2328;
      jSTerm0.clonePF();
      streamTokenizer0.whitespaceChars(2328, (-5687));
      stringReader0.mark(32);
      jSTerm1.makeEval(true);
      jSTerm1.equals(jSTerm0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm1);
      jSTerm1.isVariable();
      jSTerm1.makeVariable();
      jSTerm1.isVariable();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3699259236016044
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.whitespaceChars(61, (-1036));
      jSTerm1.containsAll(jSTerm0);
      stringReader0.mark(32);
      jSTerm0.makeEval(true);
      stringReader0.mark(61);
      jSTerm1.makeEval(false);
      jSTerm1.equals(jSTerm0);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isVariable();
      jSTerm2.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d$J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.974608711389333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 40);
      stringReader0.mark(32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.equals(jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      JSJshopVars.leftPar = 963;
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.makeFunction();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm4.equals(jSTerm0);
      jSTerm2.toStr();
      jSTerm1.matches(jSTerm3);
      // Undeclared exception!
      try { 
        jSTerm3.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7176043649358568
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis(57L);
      StringReader stringReader0 = new StringReader("F*.A4Q`-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 882);
      stringReader0.mark(62);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) "nil");
      JSTerm jSTerm2 = jSTerm0.call();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.addAll((Collection) jSTerm1);
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution3);
      jSTerm2.matches(jSTerm4);
      assertEquals(2, jSTerm2.capacity());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.5549936625793324
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.equals(jSTerm1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm1);
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      StringReader stringReader1 = new StringReader("w VG");
      char[] charArray0 = new char[2];
      charArray0[1] = ',';
      stringReader1.read(charArray0);
      jSTerm1.makeVariable();
      jSTerm0.isFunction();
      jSTerm1.isFunction();
      stringReader0.reset();
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.059354619737041
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d$J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.ensureCapacity((-2100));
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader1 = new StringReader("9HV");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.matches(jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4799708772990026
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(2147, 37);
      stringReader0.mark(379);
      jSTerm1.makeEval(true);
      jSTerm0.equals(jSTerm1);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm1.makeVariable();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      jSTerm0.isFunction();
      jSTerm1.equals(jSTerm0);
      jSTerm0.makeEval(true);
      jSTerm1.makeConstant();
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.761885510004054
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(61, 41);
      stringReader0.mark(32);
      jSTerm0.makeEval(true);
      jSTerm1.equals(jSTerm0);
      streamTokenizer0.pushBack();
      jSTerm1.makeEval(true);
      stringReader0.read();
      streamTokenizer0.quoteChar(61);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm2.matches(jSTerm3);
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm4.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.498884008557752
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.flagLevel = (-9);
      jSTerm0.retainAll(jSTerm0);
      jSTerm0.isGround();
      JSJshopVars.leftPar = (-9);
      jSTerm0.ensureCapacity((-2100));
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.removeElementAt((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -9
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("*d=5pd");
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("w VG");
      stringReader2.mark(1056);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d$J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      StringReader stringReader1 = new StringReader("max");
      StringReader stringReader2 = new StringReader("d$J");
      stringReader2.markSupported();
      stringReader1.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      JSJshopVars.flagLevel = (-9);
      jSTerm0.retainAll(jSTerm0);
      jSTerm0.isGround();
      JSJshopVars.leftPar = (-9);
      jSTerm0.ensureCapacity((-2100));
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7245947920089106
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      streamTokenizer0.whitespaceChars(32, 45);
      stringReader0.mark(32);
      jSTerm0.makeEval(true);
      streamTokenizer0.parseNumbers();
      jSTerm1.equals(jSTerm0);
      streamTokenizer0.pushBack();
      jSTerm1.makeEval(true);
      stringReader0.read();
      streamTokenizer0.quoteChar(32);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isFunction();
      jSTerm0.stream();
      jSTerm0.isFunction();
      stringReader0.reset();
      jSTerm2.print();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-3369L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm0.isFunction());
      assertTrue(jSTerm3.isEval());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.89425613647302
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("member");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.clone();
      streamTokenizer0.parseNumbers();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.matches(jSPredicateForm0);
      jSTerm0.makeEval(false);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm1.isConstant();
      assertTrue(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.coma = (-4385);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("(f^p\u0000]Ce>");
      StringReader stringReader2 = new StringReader("s}Yd{A%^H8kQ{'q]x");
      stringReader2.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      System.setCurrentTimeMillis(57L);
      StringReader stringReader0 = new StringReader("F*.A4Q`-");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Spliterator spliterator0 = jSTerm0.spliterator();
      jSTerm0.remove((Object) spliterator0);
      JSJshopVars.greaterT = 0;
      jSTerm0.clone();
      jSTerm0.makeEval(true);
      boolean boolean0 = jSTerm0.isEval();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.stream();
      StringReader stringReader1 = new StringReader("-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.isFunction();
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.7641045229845527
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("YK#E2E%dc>1dV(9d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate0.and(predicate4);
      JSTerm jSTerm1 = new JSTerm();
      predicate0.negate();
      jSTerm0.print();
      boolean boolean0 = jSTerm1.isGround();
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertTrue(jSSubstitution0.fail());
      
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      boolean boolean1 = jSTerm0.equals(jSTerm2);
      assertFalse(jSTerm2.isEval());
      assertFalse(jSTerm2.isFunction());
      assertTrue(boolean1 == boolean0);
      assertNotSame(jSTerm2, jSTerm0);
      assertFalse(jSTerm2.isVariable());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.619997118136666
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      System.setCurrentTimeMillis(57L);
      StringReader stringReader0 = new StringReader("F*.A4Q`-");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.isFunction();
      stringReader0.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.slash = (-4);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      assertNotSame(jSSubstitution1, jSSubstitution0);
      assertTrue(jSTerm3.isConstant());
      assertFalse(jSSubstitution1.fail());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm3.isEval());
      assertNotSame(jSTerm3, jSTerm1);
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      Consumer<JSTerm> consumer1 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      jSTerm0.makeConstant();
      assertTrue(jSTerm0.isConstant());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6371418793433197
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars(963, 1);
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.mark(32);
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      jSTerm0.forEach(consumer0);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm0.trimToSize();
      jSTerm0.equals(jSTerm1);
      Consumer<JSSubstitution> consumer1 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm1.forEach(consumer1);
      streamTokenizer0.nextToken();
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.isVariable();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.call();
      Object[] objectArray0 = new Object[8];
      jSTerm2.spliterator();
      objectArray0[0] = (Object) stringReader0;
      objectArray0[1] = (Object) jSTerm1;
      objectArray0[2] = (Object) jSTerm2;
      objectArray0[3] = (Object) consumer1;
      objectArray0[4] = (Object) "w VG";
      objectArray0[5] = (Object) consumer0;
      objectArray0[6] = (Object) jSTerm0;
      objectArray0[7] = (Object) consumer0;
      jSTerm2.toArray(objectArray0);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertEquals((-3), streamTokenizer0.ttype);
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.062711125700289
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w VG");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.removeAllElements();
      CharBuffer charBuffer0 = CharBuffer.allocate(32);
      stringReader0.read(charBuffer0);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d$J");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer0.nextToken();
      stringReader0.markSupported();
      stringReader0.mark(2183);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSJshopVars.interrogation = (-871);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
