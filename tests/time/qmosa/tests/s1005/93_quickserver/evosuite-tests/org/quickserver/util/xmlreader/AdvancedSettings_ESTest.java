/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:10:40 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-141));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(35);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize((-141));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-141), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(35, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.479296876150945
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(2593);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.toXML("\t<debug-non-blocking-mode>");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      assertEquals(2593, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.365349639944498
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(4289);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketReceiveBufferSize();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setQSObjectPoolMaker("");
      advancedSettings1.getClientSocketReceiveBufferSize();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketReceiveBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("P)%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // P)%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.046165953130988
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesLatency(979);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(979);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientIdentifier("8-?R0");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getBacklog();
      advancedSettings0.setClientIdentifier("&Qp");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("kV?-x=,~U&T=.c:");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // kV?-x=,~U&T=.c:
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.7199393508644323
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-1985));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesLatency(1674);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setMaxThreadsForNioWrite((-1985));
      advancedSettings0.setClientSocketReceiveBufferSize((-1985));
      advancedSettings0.setPerformancePreferencesLatency(1674);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setQSObjectPoolMaker("\t<client-identifier>");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite((-1959));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesConnectionTime(1674);
      advancedSettings1.setQSObjectPoolMaker("");
      advancedSettings1.getBacklog();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML((String) null);
      advancedSettings1.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      assertEquals("\t<client-socket-receive-buffer-size>", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(10);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getCharset();
      assertFalse(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.026522790307467
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-2475));
      advancedSettings0.setPerformancePreferencesBandwidth(15);
      advancedSettings0.setQSObjectPoolMaker("%;K");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setSocketLinger((-2475));
      advancedSettings1.getByteBufferSize();
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setByteBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("T");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings1.getDebugNonBlockingMode();
      advancedSettings2.setClientSocketReceiveBufferSize(65536);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize(274);
      assertEquals((-2475), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6258417525947544
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("%;K");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientIdentifier("");
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.6929426659838573
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-3014));
      advancedSettings0.setClientSocketReceiveBufferSize((-3014));
      advancedSettings0.setClientSocketSendBufferSize(1069);
      advancedSettings0.setClientSocketReceiveBufferSize(1069);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setBacklog((-3014));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(1069);
      advancedSettings0.setSocketLinger((-2027));
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketSendBufferSize((-2386));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.toXML(")vBJ(D;FJVf L]");
      advancedSettings0.setClientSocketReceiveBufferSize(315);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getCharset();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-525);
      int int1 = 300;
      advancedSettings0.setPerformancePreferencesConnectionTime(300);
      advancedSettings0.setClientSocketReceiveBufferSize(300);
      advancedSettings0.setClientSocketSendBufferSize((-525));
      advancedSettings0.setBacklog(0);
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blocking-mode>");
      advancedSettings0.setClientSocketSendBufferSize((-525));
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blocking-mode>");
      advancedSettings0.setClientSocketTrafficClass("\t<max-threads-for-nio-write>");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketTrafficClass();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<max-threads-for-nio-write>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<max-threads-for-nio-write>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.924886245768638
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize((-141));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize((-141));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.740524357095145
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(359);
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setClientSocketSendBufferSize(1069);
      advancedSettings0.setMaxThreadsForNioWrite((-3097));
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-4210));
      advancedSettings0.setMaxThreadsForNioWrite(1069);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.toXML("602{G");
      advancedSettings0.setBacklog((-1));
      advancedSettings0.setBacklog(1069);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("602{G<advanced-settings>\n602{G\t<charset>ISO-8859-1</charset>\n602{G\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n602{G\t<byte-buffer-size>65536</byte-buffer-size>\n602{G\t<backlog>0</backlog>\n602{G\t<socket-linger>-1</socket-linger>\n602{G\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n602{G\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n602{G\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n602{G\t<max-threads-for-nio-write>1069</max-threads-for-nio-write>\n602{G\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n602{G\t<performance-preferences-latency>0</performance-preferences-latency>\n602{G\t<performance-preferences-bandwidth>359</performance-preferences-bandwidth>\n602{G\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n602{G\t<client-socket-send-buffer-size>1069</client-socket-send-buffer-size>\n602{G</advanced-settings>\n");
      advancedSettings0.setSocketLinger(1805);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(1069);
      advancedSettings0.setClientSocketReceiveBufferSize(4159);
      advancedSettings0.getBacklog();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientSocketSendBufferSize(1069);
      advancedSettings0.toXML("602{G<advanced-settings>\n602{G\t<charset>ISO-8859-1</charset>\n602{G\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n602{G\t<byte-buffer-size>65536</byte-buffer-size>\n602{G\t<backlog>0</backlog>\n602{G\t<socket-linger>-1</socket-linger>\n602{G\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n602{G\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n602{G\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n602{G\t<max-threads-for-nio-write>1069</max-threads-for-nio-write>\n602{G\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n602{G\t<performance-preferences-latency>0</performance-preferences-latency>\n602{G\t<performance-preferences-bandwidth>359</performance-preferences-bandwidth>\n602{G\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n602{G\t<client-socket-send-buffer-size>1069</client-socket-send-buffer-size>\n602{G</advanced-settings>\n");
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.setClientIdentifier("602{G<advanced-settings>\n602{G\t<charset>ISO-8859-1</charset>\n602{G\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n602{G\t<byte-buffer-size>65536</byte-buffer-size>\n602{G\t<backlog>0</backlog>\n602{G\t<socket-linger>-1</socket-linger>\n602{G\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n602{G\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n602{G\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n602{G\t<max-threads-for-nio-write>1069</max-threads-for-nio-write>\n602{G\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n602{G\t<performance-preferences-latency>0</performance-preferences-latency>\n602{G\t<performance-preferences-bandwidth>359</performance-preferences-bandwidth>\n602{G\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n602{G\t<client-socket-send-buffer-size>1069</client-socket-send-buffer-size>\n602{G</advanced-settings>\n");
      advancedSettings0.getClientIdentifier();
      assertEquals("602{G<advanced-settings>\n602{G\t<charset>ISO-8859-1</charset>\n602{G\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n602{G\t<byte-buffer-size>65536</byte-buffer-size>\n602{G\t<backlog>0</backlog>\n602{G\t<socket-linger>-1</socket-linger>\n602{G\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n602{G\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n602{G\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n602{G\t<max-threads-for-nio-write>1069</max-threads-for-nio-write>\n602{G\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n602{G\t<performance-preferences-latency>0</performance-preferences-latency>\n602{G\t<performance-preferences-bandwidth>359</performance-preferences-bandwidth>\n602{G\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n602{G\t<client-socket-send-buffer-size>1069</client-socket-send-buffer-size>\n602{G</advanced-settings>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-523));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("3;hD");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 3;hD
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.744622904370238
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("G]AzH:0g4K");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getBacklog();
      advancedSettings0.toXML("G]AzH:0g4K");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesLatency((-2043));
      advancedSettings0.toXML("<JbPp}[\"c~gRgnhOu{");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setDebugNonBlockingMode(true);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(2937);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getCharset();
      advancedSettings0.setCharset("");
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(2937, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setByteBufferSize(0);
      String string0 = advancedSettings0.getClientIdentifier();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string0);
      
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(65536, int0);
      
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3276323700617536
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-50));
      String string0 = advancedSettings0.toXML("B6{mhCo{)(&uxOk");
      advancedSettings0.toXML(string0);
      assertEquals((-50), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getCharset();
      advancedSettings0.setClientIdentifier("");
      assertEquals(10, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.836521786753116
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize((-141));
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize(2593);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass("!_qc3~");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize((-743));
      advancedSettings0.setCharset("");
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0523132038287963
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth((-2475));
      advancedSettings0.setMaxThreadsForNioWrite((-2475));
      advancedSettings0.setPerformancePreferencesBandwidth((-2475));
      advancedSettings0.setQSObjectPoolMaker("%;K");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("Y8`G!:!~@l'q^(x.Q");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketReceiveBufferSize((-1496));
      advancedSettings0.setClientSocketTrafficClass("%;K");
      advancedSettings0.setClientIdentifier((String) null);
      assertEquals((-1496), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9998380167092886
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setQSObjectPoolMaker("QkP5|eOxV:5i^dlZ");
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setByteBufferSize((-1166));
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.setCharset("");
      assertEquals(10, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.9410699503727398
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-141));
      advancedSettings0.setPerformancePreferencesLatency((-141));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize((-141));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("pE<P-Cm`yI}g");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // pE<P-Cm`yI}g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.407853444447142
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-3014));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("uA(^J.^aJPN");
      advancedSettings0.toXML("uA(^J.^aJPN");
      assertEquals("uA(^J.^aJPN", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesLatency((-1362));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-1362), int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.567023826742896
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setMaxThreadsForNioWrite((-3535));
      advancedSettings0.setPerformancePreferencesConnectionTime((-3535));
      advancedSettings0.setByteBufferSize((-3535));
      advancedSettings0.setMaxThreadsForNioWrite((-3535));
      advancedSettings0.getSocketLinger();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getSocketLinger();
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setClientSocketTrafficClass("\t<client-socket-send-buffer-size>");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getCharset();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      assertEquals("ISO-8859-1", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-141));
      advancedSettings0.setMaxThreadsForNioWrite(19);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-141));
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setClientIdentifier("");
      assertEquals((-141), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = (-525);
      int int1 = 269;
      advancedSettings0.setPerformancePreferencesConnectionTime(269);
      advancedSettings0.setClientSocketSendBufferSize((-525));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blocking-mode>");
      advancedSettings0.setClientSocketSendBufferSize((-525));
      advancedSettings0.setQSObjectPoolMaker("\t<debug-non-blocking-mode>");
      advancedSettings0.setClientSocketTrafficClass("\t<max-threads-for-nio-write>");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketTrafficClass();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<max-threads-for-nio-write>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<max-threads-for-nio-write>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals((-1), int0);
      
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setCharset((String) null);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset((String) null);
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("#C9U%S2ydkB|mo");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #C9U%S2ydkB|mo
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getClientIdentifier();
      assertTrue(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("Cp.Zu`IV%$+0l`\"d");
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals((-1), advancedSettings0.getSocketLinger());
  }
}
