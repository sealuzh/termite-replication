/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:35:02 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9844935290697796
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Could not create repository temp dir, ", "Could not create repository temp dir, ");
      DirectoryScanner.matchPatternStart("Could not create repository temp dir, ", "Could not create repository temp dir, ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir("Could not create repository temp dir, ");
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-52);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      String string0 = "";
      archiveScanner0.setBasedir("");
      archiveScanner0.setBasedir("");
      archiveScanner0.scan();
      archiveScanner0.processFile("");
      archiveScanner0.getIncludedDirectories();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      File file0 = archiveScanner1.basedir;
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ImprovedFile", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7343996803791222
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("sA(N+0K I!zf'9~>'");
      ImprovedFile improvedFile1 = new ImprovedFile("sA(N+0K I!zf'9~>'", "sA(N+0K I!zf'9~>'");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir("sA(N+0K I!zf'9~>'");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Vector<Integer> vector0 = new Vector<Integer>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      archiveScanner0.setBasedir("sA(N+0K I!zf'9~>'");
      improvedFile0.mkdirs();
      archiveScanner0.setBasedir("sA(N+0K I!zf'9~>'");
      archiveScanner0.scan();
      archiveScanner0.processFile("+8@B1^");
      archiveScanner0.getIncludedDirectories();
      String string0 = "8Ydh";
      try { 
        archiveScanner0.processDirectory(improvedFile1, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/sA(N+0K I!zf'9~>'/sA(N+0K I!zf'9~>'
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5754479586279635
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", ".WAR");
      improvedFile0.mkdirs();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir(".WAR");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      archiveScanner0.setBasedir(".WAR");
      archiveScanner0.setBasedir("");
      archiveScanner0.scan();
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      vector0.add((PipedInputStream) null);
      vector0.add((PipedInputStream) null);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner1.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8037380874248892
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", ".WAR");
      improvedFile0.mkdirs();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir(".WAR");
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsIncluded = vector0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      archiveScanner0.setBasedir(".WAR");
      String string0 = "";
      archiveScanner0.setBasedir("");
      archiveScanner0.scan();
      archiveScanner0.processFile("U|uM?[a");
      archiveScanner0.getIncludedDirectories();
      File file0 = null;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "4If", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8022485221165496
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Could not create repository temp dir, ", "Could not create repository temp dir, ");
      improvedFile0.mkdirs();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir("Could not create repository temp dir, ");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      archiveScanner0.setBasedir("Could not create repository temp dir, ");
      archiveScanner0.setBasedir("Could not create repository temp dir, ");
      archiveScanner0.scan();
      archiveScanner0.processFile("Could not create repository temp dir, ");
      archiveScanner0.getIncludedDirectories();
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      String string0 = "EH\\n";
      // Undeclared exception!
      try { 
        archiveScanner1.processDirectory(improvedFile0, "EH\n", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7327884197178145
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", ".WAR");
      improvedFile0.mkdirs();
      improvedFile0.toURL();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir(".WAR");
      byte[] byteArray0 = new byte[16];
      byteArray0[2] = (byte)0;
      archiveScanner0.haveSlowResults = true;
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner0.includes = archiveScanner1.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner0.scan();
      archiveScanner0.processFile(".WAR");
      archiveScanner0.getIncludedDirectories();
      archiveScanner0.processDirectory(improvedFile0, "8r`Ydh", true);
      archiveScanner0.processDirectory(improvedFile0, "R", false);
      // Undeclared exception!
      try { 
        archiveScanner1.scan();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No basedir set
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1654357861468654
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Could not create repository temp dir, ", "Could not create repository temp dir, ");
      improvedFile0.mkdirs();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir("Could not create repository temp dir, ");
      archiveScanner0.scan();
      archiveScanner0.processFile("dir0");
      String[] stringArray0 = DirectoryScanner.DEFAULT_EXCLUDES;
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>(vector0);
      vector1.containsAll(vector0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector1.add(pipedInputStream0);
      vector0.add(pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(1);
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      Vector<PipedInputStream> vector3 = new Vector<PipedInputStream>();
      vector3.add(pipedInputStream0);
      vector3.addElement(pipedInputStream1);
      archiveScanner0.processDirectory(improvedFile0, "eU^*_xR[.jar", true);
      try { 
        archiveScanner0.processArchive(improvedFile0, "RQTR4:KK1lu#dZ&M3\"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/Could not create repository temp dir, /Could not create repository temp dir, 
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.731556613448952
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Could not create repository temp dir, ", "Could not create repository temp dir, ");
      improvedFile0.mkdirs();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir("Could not create repository temp dir, ");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-52);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Could not create repository temp dir, ";
      stringArray0[1] = "Could not create repository temp dir, ";
      stringArray0[2] = "fg";
      stringArray0[3] = "Could not create repository temp dir, ";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.scan();
      archiveScanner0.processFile(".JAR");
      String[] stringArray1 = archiveScanner0.excludes;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      vector1.add(pipedInputStream0);
      vector1.add(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((-3974));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8918187634495545
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Could not create repository temp dir, ", "Could not create repository temp dir, ");
      improvedFile0.mkdirs();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setBasedir("Could not create repository temp dir, ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-52);
      String[] stringArray0 = new String[0];
      archiveScanner0.setIncludes(stringArray0);
      byteArray0[2] = (byte) (-52);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      archiveScanner0.scan();
      archiveScanner0.processFile("Could not create repository temp dir, ");
      archiveScanner0.getIncludedDirectories();
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector0.add(pipedInputStream0);
      vector0.add(pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(256);
      vector0.add(pipedInputStream1);
      archiveScanner0.processArchive(improvedFile0, "IUK[<q");
      assertEquals(0L, improvedFile0.getTotalSpace());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "BD_Os(W].N[D~nnP\"";
      stringArray0[1] = " NQ";
      stringArray0[2] = "com.lts.application.menu.ApplicationMenuBuilder";
      stringArray0[3] = ".ZIP";
      stringArray0[4] = "28.uuXsF80f%5O";
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "!ViDV>;8..+";
      ImprovedFile improvedFile0 = new ImprovedFile("sA(N+0K I!zf'9~>'");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      MockFile.createTempFile("'ry$", "'ry$", (File) improvedFile1);
      improvedFile1.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      improvedFile0.delete();
      archiveScanner0.setBasedir((File) improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "!ViDV>;8..+", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = "!ViDV>;8..+";
      ImprovedFile improvedFile0 = new ImprovedFile("BybGWJb%!&WU.jar");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      MockFile.createTempFile("BybGWJb%!&WU.jar", "BybGWJb%!&WU.jar", (File) improvedFile1);
      ImprovedFile improvedFile2 = improvedFile1.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      improvedFile0.delete();
      archiveScanner0.setBasedir((File) improvedFile2);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "?r", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("Could not create repository temp dir, ", "wT ggq\"h?4yr,Y3o*cn");
      improvedFile0.mkdirs();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Could not create repository temp dir, ");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      archiveScanner0.setBasedir("");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte)0;
      archiveScanner0.scandir(improvedFile0, "sM',i2S//rlbr.myo", true);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-872L));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "!ViDV>;8..+";
      ImprovedFile improvedFile0 = new ImprovedFile("sA(N+0KL I!zf'9~>'");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      MockFile.createTempFile("sA(N+0KL I!zf'9~>'", "sA(N+0KL I!zf'9~>'", (File) improvedFile1);
      ImprovedFile improvedFile2 = improvedFile1.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      improvedFile0.delete();
      MockFile.createTempFile("sA(N+0KL I!zf'9~>'", "F.jar", (File) improvedFile0);
      archiveScanner0.setBasedir((File) improvedFile2);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "?r", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("W7Jf)");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      File file0 = MockFile.createTempFile("sA(N+0K I!zf'9~>'", "W7Jf)", (File) improvedFile1);
      ImprovedFile improvedFile2 = improvedFile1.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      ImprovedFile improvedFile3 = new ImprovedFile("sA(N+0K I!zf'9~>'");
      improvedFile1.createNewFile();
      int int0 = archiveScanner0.toFileType(file0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("+Rp!Y1");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "+Rp!Y1";
      stringArray0[1] = "com.lts.application.fatal.createTempArea";
      stringArray0[2] = "F";
      stringArray0[3] = ".0M>MY!";
      archiveScanner0.setExcludes(stringArray0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      pipedOutputStream2.close();
      pipedOutputStream1.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(3);
      vector0.add(pipedInputStream1);
      vector0.add(pipedInputStream0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ImprovedFile improvedFile0 = new ImprovedFile("o*cn");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", from archive, ";
      stringArray0[1] = "+Rp!Y1";
      stringArray0[2] = "+Rp!Y1";
      stringArray0[3] = "F";
      stringArray0[4] = "com.lts.application.fatal.createTempArea";
      archiveScanner0.setExcludes(stringArray0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedOutputStream2.close();
      PipedInputStream pipedInputStream1 = new PipedInputStream(2);
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>(0);
      vector1.add(pipedInputStream1);
      vector1.add(pipedInputStream1);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("+Rp!Y1");
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F";
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      vector0.add(pipedInputStream0);
      vector0.add(pipedInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      vector0.add(pipedInputStream0);
      vector0.add(pipedInputStream0);
      vector0.add(pipedInputStream0);
      System.setCurrentTimeMillis(707L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "vUb&+l$=wg");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsIncluded = vector0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      archiveScanner0.setExcludes((String[]) null);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream3);
      pipedOutputStream0.close();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      vector1.add(pipedInputStream0);
      vector0.add(pipedInputStream0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsIncluded = vector0;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      pipedOutputStream0.close();
      archiveScanner0.setExcludes((String[]) null);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream2 = new PipedOutputStream();
      PipedOutputStream pipedOutputStream3 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream3);
      pipedOutputStream0.close();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      vector1.parallelStream();
      vector1.add(pipedInputStream0);
      vector0.add(pipedInputStream0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("+Rp!Y1");
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F";
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("dir1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "!ViDV>;8..+";
      ImprovedFile improvedFile0 = new ImprovedFile("sA(N+0KL I!zf'9~>'");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      MockFile.createTempFile("sA(N+0KL I!zf'9~>'", "sA(N+0KL I!zf'9~>'", (File) improvedFile1);
      ImprovedFile improvedFile2 = improvedFile1.createTempDir();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      improvedFile0.delete();
      MockFile.createTempFile("sA(N+0KL I!zf'9~>'", "KnF.jar", (File) improvedFile0);
      archiveScanner0.setBasedir((File) improvedFile2);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "?r", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("+Rp!Y1");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F";
      archiveScanner0.setExcludes(stringArray0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream1);
      vector0.add(pipedInputStream0);
      vector0.add(pipedInputStream0);
      try { 
        archiveScanner0.scandir(improvedFile0, ".war", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/+Rp!Y1
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("+Rp!Y1");
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "F";
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      String[] stringArray1 = DirectoryScanner.DEFAULT_EXCLUDES;
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector1.add(pipedInputStream0);
      vector1.add(pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream(2);
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      vector0.add(pipedInputStream0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".WAR", ".WAR");
      improvedFile0.mkdirs();
      ImprovedFile improvedFile1 = new ImprovedFile(".WAR");
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile1);
      ImprovedFile improvedFile3 = improvedFile1.createTempDir(".jar", "02N*4;t?+G");
      improvedFile3.createTempDir("Error during repository cleanup.\nContinue startup?", "Error during repository cleanup.\nContinue startup?");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      File file0 = MockFile.createTempFile("02N*4;t?+G", ".EAR");
      try { 
        archiveScanner0.scanArchive(file0, ".WAR");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /tmp/02N*4;t?+G2.EAR
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }
}
