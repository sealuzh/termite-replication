/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:56:28 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.view.mindmapview.MapView;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.geom.Rectangle2D;
import java.io.PrintWriter;
import java.sql.Time;
import java.text.DateFormatSymbols;
import java.util.Locale;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JTextPane;
import javax.swing.JToggleButton;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicCheckBoxUI;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.Segment;
import javax.swing.text.StyleContext;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      jDayChooser0.removeInputMethodListener(inputMethodListener1);
      jDayChooser0.setDecorationBordersVisible(false);
      Locale locale0 = Locale.KOREA;
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("`(eH;lIf xR__v", dateFormatSymbols0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'e'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.208325527368476
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jPanel0, (-3907), 9L, (-1244), 0, 'J', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.getPath();
      jDayChooser0.keyPressed(menuKeyEvent0);
      Font font0 = new Font("day", (-3907), 0);
      jDayChooser0.setFont(font0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.211501772378036
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.setMaxDayCharacters((-1498));
      jDayChooser0.setYear((-1839));
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", false, false, false, false);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jDayChooser0.repaint(rectangle0);
      JDayChooser jDayChooser1 = new JDayChooser();
      boolean boolean0 = false;
      jDayChooser0.setDayBordersVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 458, 0L, 0, (-1498), 'k');
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton(3772);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist 3772
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte)17;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Time time0 = new Time(1377L);
      jDayChooser0.setMaxSelectableDate(time0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4502283009621024
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear((-1839));
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, false, false, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jDayChooser0.repaint(rectangle0);
      jDayChooser0.setDayBordersVisible(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 0, 0L, 0, 361, 'k');
      InputEvent.getMaskForButton(3);
      jDayChooser0.keyReleased(keyEvent0);
      KeyEvent.getKeyModifiersText(0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 100, false, jDayChooser_DecoratorButton0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.keyPressed(keyEvent0);
      Color color0 = Color.magenta;
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.096676908145428
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      InputEvent.getModifiersExText(2674);
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      Color color0 = Color.RED;
      assertEquals(0, color0.getBlue());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.206339187140408
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("day");
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.setYear(0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, true, true, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jDayChooser0.repaint(rectangle0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, (-1839), (-456L), 0, 156, 'k');
      // Undeclared exception!
      try { 
        InputEvent.getMaskForButton(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // button doesn't exist 0
         //
         verifyException("java.awt.event.InputEvent", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3404992724835982
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setYear((-1839));
      JInternalFrame jInternalFrame0 = new JInternalFrame("day", true, false, false, true);
      Rectangle rectangle0 = jInternalFrame0.getNormalBounds();
      jDayChooser0.repaint(rectangle0);
      jDayChooser0.setDayBordersVisible(true);
      Rectangle2D.intersect(rectangle0, rectangle0, rectangle0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 0, 0L, 0, 361, 'k');
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.modelToView(0);
      jDayChooser0.getBounds((Rectangle) null);
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jMonthChooser0.getVerifyInputWhenFocusTarget();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getLocale();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isDecorationBackgroundVisible();
      int int0 = jDayChooser0.getDaysInMonth();
      assertEquals(3, jDayChooser0.getMaxDayCharacters());
      assertEquals(28, int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jMonthChooser0.getAncestorListeners();
      jMonthChooser0.getUI();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "month";
      stringArray0[1] = "day";
      stringArray0[2] = "month";
      stringArray0[3] = "month";
      stringArray0[4] = "day";
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0968159946679443
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeAll();
      jDayChooser0.updateUI();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.updateUI();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isSelected();
      Locale locale0 = new Locale("");
      JComponent.setDefaultLocale(locale0);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      // Undeclared exception!
      try { 
        defaultCaret0.setBlinkRate((-307));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid delay: -307
         //
         verifyException("javax.swing.Timer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2689313796896293
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("day");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "day");
      char char0 = '&';
      mockPrintWriter0.append('&');
      int int0 = 1430;
      jDayChooser0.list(printWriter0, 1430);
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      HierarchyListener hierarchyListener1 = AWTEventMulticaster.add(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.remove(hierarchyListener1, hierarchyListener1);
      GraphicContext graphicContext0 = new GraphicContext();
      Color color0 = graphicContext0.getBackground();
      jDayChooser0.decorationBackgroundColor = color0;
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.setFocus();
      Color color1 = MapView.standardNodeTextColor;
      jDayChooser0.setForeground((Color) null);
      jDayChooser0.init();
      jDayChooser0.setEnabled(false);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setForeground((Color) null);
      long long0 = 0L;
      int int1 = 0;
      MenuElement[] menuElementArray0 = new MenuElement[3];
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", false);
      menuElementArray0[0] = (MenuElement) jCheckBoxMenuItem0;
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      menuElementArray0[1] = (MenuElement) jPopupMenu0;
      MapDialog mapDialog0 = new MapDialog();
      // Undeclared exception!
      try { 
        mapDialog0.getRegistration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.extensions.HookAdapter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0966166083347697
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setName("");
      jDayChooser0.drawWeeks();
      jDayChooser0.drawDays();
      jDayChooser0.setWeekdayForeground((Color) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(1314);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, true, jDayChooser0);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.170087880043637
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 151, '[', 0);
      jDayChooser0.getClientProperty(keyEvent0);
      keyEvent0.setSource((Object) null);
      InputEvent.getModifiersExText(2674);
      jDayChooser0.keyTyped(keyEvent0);
      Color color0 = jDayChooser0.getWeekdayForeground();
      assertEquals((-16754012), color0.getRGB());
      
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.initDecorations();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2403463914004864
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 0, 0, 151, '[', 0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getClientProperty(keyEvent0);
      keyEvent0.setSource((Object) null);
      InputEvent.getModifiersExText(2674);
      jDayChooser0.removeComponentListener((ComponentListener) null);
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.updateUI();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setMonth(0);
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getCursor();
      jDayChooser0.isDoubleBuffered();
      jDayChooser0.setDay(0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      GapContent gapContent0 = new GapContent(0);
      gapContent0.createPosition(12);
      char[] charArray0 = new char[0];
      Segment segment0 = new Segment(charArray0, (-179), 0);
      try { 
        gapContent0.getChars(12, 0, segment0);
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Invalid location
         //
         verifyException("javax.swing.text.GapContent", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(0);
      GapContent gapContent0 = new GapContent(972);
      char[] charArray0 = new char[9];
      charArray0[0] = 'j';
      charArray0[1] = 'o';
      charArray0[2] = '%';
      charArray0[3] = '$';
      charArray0[4] = '8';
      charArray0[5] = 'F';
      charArray0[6] = 'T';
      charArray0[7] = 'E';
      charArray0[8] = '$';
      Segment segment0 = new Segment(charArray0, 0, 0);
      try { 
        gapContent0.getChars(0, (-40), segment0);
        fail("Expecting exception: BadLocationException");
      
      } catch(BadLocationException e) {
         //
         // Invalid location
         //
         verifyException("javax.swing.text.GapContent", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2445030608496275
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getMultiClickThreshhold();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getHeight();
      int int0 = 3;
      jDayChooser0.setMaxDayCharacters(3);
      int int1 = (-1839);
      jDayChooser0.setYear((-1839));
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      JYearChooser jYearChooser0 = new JYearChooser();
      Dimension dimension0 = jDayChooser_DecoratorButton0.getMaximumSize();
      jDayChooser0.yearChooser = jYearChooser0;
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.today;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      jDayChooser_DecoratorButton0.transferFocusDownCycle();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      dimension0.height = 290;
      MockDate mockDate0 = null;
      try {
        mockDate0 = new MockDate("nb@");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Date", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.240161993746947
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.value = 0;
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1286781254653357
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(63721);
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 63721, "day", 63721, 63721);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2055218749828893
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.drawDays();
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.setSundayForeground(color0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0);
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.focusLost(focusEvent0);
      ActionEvent actionEvent0 = new ActionEvent(focusEvent0, 0, (String) null, 0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.FocusEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2401747490116826
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDayBordersVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 1564, true, jDayChooser0);
      jDayChooser0.getY();
      focusEvent0.paramString();
      BasicCheckBoxUI basicCheckBoxUI0 = new BasicCheckBoxUI();
      JToggleButton jToggleButton0 = new JToggleButton((Icon) null);
      jToggleButton0.isFocusPainted();
      jToggleButton0.isFocusPainted();
      Dimension dimension0 = basicCheckBoxUI0.getPreferredSize(jToggleButton0);
      jDayChooser0.setPreferredSize(dimension0);
      jDayChooser0.focusGained(focusEvent0);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getLocale();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }
}
