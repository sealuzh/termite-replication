/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:39:36 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = null;
      Player player0 = new Player();
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Player player0 = new Player((-1), "V|w", "V|w", (-1));
      player0.id = (-1);
      Party party0 = player0.gangBoss();
      player0.head = party0;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte) (-99);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      party0.next = (Party) player0;
      player0.setY((-1471.6268F));
      player0.toString();
      player0.getTimeOfDeath();
      player0.head.next = party0;
      player0.getY();
      player0.head = party0;
      player0.setConnected(true);
      player0.type();
      player0.getName();
      assertEquals((-1471.6268F), player0.getY(), 0.01F);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.852140740384332
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(0, "70nsurcjVI", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0);
      Party party0 = player0.head;
      player0.add((Party) null);
      player0.setMoney(3877.39F);
      player0.getMoney();
      Player player1 = new Player();
      player1.isJoinOK(player0, true);
      player1.isConnected();
      Player player2 = new Player((-468));
      player2.gangStrength();
      player2.getTimeOfDeath();
      player1.isConnected();
      player1.getIP();
      ByteArrayOutputStream byteArrayOutputStream0 = null;
      try {
        byteArrayOutputStream0 = new ByteArrayOutputStream((-2322));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -2322
         //
         verifyException("java.io.ByteArrayOutputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      player0.setDead((-3027L), false);
      player0.pack();
      long long0 = player0.getTimeOfDeath();
      assertEquals((-3027L), long0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.174317417693044
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player((-1722), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1722));
      player0.getTimeOfDeath();
      player0.setX(0.0F);
      Player player1 = new Player((-1722), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "11'R!#BF,h#FqOO", (short)4919);
      player1.remove(player0);
      player1.setMoney((-1.0F));
      player0.isJoinOK(player1, true);
      player0.getMoney();
      player0.reset(false);
      player1.gangStrength();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("t<eiog", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      player1.pack(dataOutputStream0);
      player1.getMoney();
      player1.getName();
      player0.getName();
      player0.toString();
      player0.isConnected();
      player0.getName();
      player0.getName();
      float float0 = player0.getY();
      assertEquals(0.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Player player0 = new Player((-2206), "", "RnLj\"Z~\"^8A", (-2206));
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertFalse(boolean0);
      assertEquals("", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-2206), player0.getPictureId());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-81), (String) null, (String) null, (-81));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(4312, "", "", 4312);
      Player player1 = new Player(5129, ".*[.]class$", ")", 5, 5);
      player0.setJoinOK(player1, false);
      player0.setJoinOK(player1, false);
      player1.setJoinOK(player0, false);
      assertEquals(5, player1.getStrength());
      assertEquals(5, player1.getPictureId());
      
      Player player2 = new Player(952);
      Player player3 = new Player((short)4919);
      boolean boolean0 = player3.isJoinOK(player0, false);
      assertFalse(boolean0);
      
      Player player4 = new Player();
      player4.pack();
      assertEquals("0.0.0.0", player4.getIP());
      assertEquals("Player-1", player4.toString());
      assertEquals(0, player4.getPictureId());
      
      player0.getName();
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(4312, player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      Player player0 = new Player();
      player0.getX();
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8827437576468555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-1941), "sb", "n&5Kh%M!T", (-1941), (-1941));
      Player player1 = new Player((short)4919, "M", "", (-15020), (-1941));
      player1.setDead((long) (-1941));
      player1.setJoinOK(player0, false);
      player0.boss = (Party) player1;
      player0.type();
      player0.getY();
      System.setCurrentTimeMillis(2259L);
      player1.getStrength();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      // Undeclared exception!
      try { 
        player1.unpack(dataInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player(0, "oC0npCuOW+&!aMd", "state.Party", 0, (-81));
      player0.pack();
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals("oC0npCuOW+&!aMd", player0.getIP());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals((-81), player0.getStrength());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(0, "", "", (-874), 21);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "";
      Player player0 = new Player((-3672), "", "", 1288, 1288);
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(5, "`e%vMvHFe'%.F{Ff{", "", 5);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Player player0 = new Player();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8867841616872596
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(4312, "", "", 4312);
      Player player1 = new Player();
      player1.setJoinOK(player0, true);
      Player player2 = new Player(4312);
      Player player3 = new Player((short)4919);
      player3.isJoinOK(player1, false);
      Player player4 = new Player();
      Player player5 = new Player((short)4919, "", "", (short)4919);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1206);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      player5.unpack(dataInputStream0);
      byte[] byteArray0 = player1.pack();
      player4.getName();
      System.setCurrentTimeMillis((-3006L));
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      System.setCurrentTimeMillis(1392409281320L);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream2 = new DataInputStream(byteArrayInputStream0);
      boolean boolean0 = player5.unpack(dataInputStream1);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(0, "", "", 0, (-761));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)117;
      player0.unpack(byteArray0);
      player0.id = 0;
      player0.setX(416.0F);
      player0.isDead();
      player0.getPictureId();
      player0.setY(0.0F);
      player0.toString();
      assertEquals(416.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, ".*[.]class$", ".*[.]class$", 0);
      player0.head = (Party) player1;
      player0.setConnected(true);
      byte[] byteArray0 = new byte[0];
      player0.gangStrength();
      player0.setDead(0L, false);
      player0.setX((-2497.21F));
      player0.unpack(byteArray0);
      player0.setY(3445.0F);
      float float0 = player0.getY();
      assertTrue(player0.isDead());
      assertEquals(3445.0F, float0, 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(1059);
      float float0 = player0.getZ();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player1059", player0.getName());
      assertEquals(1, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(0, "state.Party", "gui.ModuleBrowserDialog$ModuleFilter", (-179), 0);
      player0.add((Party) null);
      player0.next = null;
      player0.setZ(0);
      int int0 = player0.getStrength();
      assertTrue(player0.isConnected());
      assertEquals("state.Party", player0.getIP());
      assertEquals((-179), player0.getPictureId());
      assertEquals(0.0F, player0.getZ(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Player player0 = new Player((-468), "!hBZ", "h64A3|oC", 302);
      int int0 = player0.type();
      assertEquals("!hBZ", player0.getIP());
      assertEquals(302, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(5, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player0.getStrength());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.046430838943019
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player((-761), "'(", "'(", (-761));
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      player0.setDead((-2499L));
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte)117;
      player0.unpack(byteArray0);
      player0.id = 0;
      player0.setX(416.0F);
      player0.isDead();
      player0.getPictureId();
      player0.setY((-4.7310677F));
      player0.toString();
      int int0 = player0.type();
      assertEquals((-2499L), player0.getTimeOfDeath());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      Player player1 = new Player((short)4919, "6=4d=mSoNOv)]", (-2357));
      assertEquals((-2357), player1.getPictureId());
      
      Player player2 = new Player();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      float float0 = player2.getY();
      assertFalse(player2.isDead());
      assertEquals("0.0.0.0", player2.getIP());
      assertEquals("Player-1", player2.toString());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0, player2.getPictureId());
      assertEquals(10.0F, player2.getX(), 0.01F);
      assertEquals(0L, player2.getTimeOfDeath());
      assertTrue(player2.isConnected());
      assertEquals(1, player2.getStrength());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "", "4", 1702);
      player0.setJoinOK(player1, false);
      assertEquals(1702, player1.getPictureId());
      assertEquals("", player1.getIP());
      
      Player player2 = new Player((-2176));
      boolean boolean0 = player2.isDead();
      Player player3 = new Player((short)4919);
      boolean boolean1 = player0.isJoinOK(player3, false);
      assertEquals(0, player3.getPictureId());
      assertTrue(player3.isConnected());
      assertEquals("0.0.0.0", player3.getIP());
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(0L, player3.getTimeOfDeath());
      assertEquals("Player4919", player3.getName());
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertEquals(1, player3.getStrength());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.69674006410746
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player(4312, "", "", 4312);
      Player player1 = new Player(5129, ".*[.]class$", ")", 5, 5);
      player0.setJoinOK(player1, false);
      player0.setJoinOK(player1, false);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player2 = new Player();
      player0.next = (Party) player2;
      Player player3 = new Player(10);
      player3.setDead((long) (byte)14);
      assertEquals(14L, player3.getTimeOfDeath());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7?Tbq");
      Player player4 = new Player(10);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte)84;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((byte)0);
      player0.setConnected(true);
      player0.isConnected();
      assertEquals(10.0F, player0.getX(), 0.01F);
      
      player0.setX(1.0F);
      int int0 = player0.getStrength();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)3;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[6] = (byte)25;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(3);
      player0.unpack(byteArray0);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals("Player3", player0.toString());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player((-81), (String) null, (String) null, (-81));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      player0.getName();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-81), player0.getPictureId());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player();
      player0.setConnected(false);
      player0.setX(0.0F);
      Player player1 = new Player();
      player1.gangStrength();
      player0.setJoinOK(player1, false);
      player0.getPictureId();
      player0.getX();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9649066497880012
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-9);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)111;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player(0, "", "", 0, 0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)10;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)47;
      byteArray1[4] = (byte)10;
      player0.unpack(byteArray1);
      player0.getSubparty();
      player0.setZ(4208.5F);
      player0.getSubparty();
      player0.setDead((long) 0);
      player0.getY();
      player0.getPictureId();
      float float0 = player0.getX();
      assertEquals(4208.5F, player0.getZ(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "", "4", 1702);
      player0.setJoinOK(player1, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player2 = new Player(1237);
      Player player3 = new Player((-157));
      player3.setX(1237);
      boolean boolean0 = player3.isJoinOK(player0, false);
      assertEquals(1237.0F, player3.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(0, "", "", 1);
      int int0 = player0.getPictureId();
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertEquals(1, int0);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      System.setCurrentTimeMillis(15000L);
      Player player0 = new Player((-7590), "S@2>FP", " k\"v", 1, 1);
      assertTrue(player0.isConnected());
      
      player0.setConnected(false);
      Party party0 = player0.boss;
      player0.add((Party) null);
      player0.isConnected();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-106);
      byteArray0[2] = (byte) (-25);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-80);
      byteArray0[6] = (byte) (-21);
      byteArray0[7] = (byte)47;
      byteArray0[8] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oWvE)");
      player0.getName();
      player0.getY();
      player0.toString();
      assertFalse(player0.isConnected());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Player player0 = new Player(0, (String) null, (String) null, 0, 0);
      int int0 = player0.gangStrength();
      assertEquals(0, int0);
      
      player0.setY(0);
      assertFalse(player0.isDead());
      
      player0.reset(false);
      player0.setMoney(0);
      player0.setZ(0);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals(0.0F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6439556568820564
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player((-2283), "", "77tY", (-2283), (-2283));
      Player player1 = new Player(0, "77tY", (-2283));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      player1.unpack(byteArray0);
      player1.reset(true);
      player1.pack();
      player0.remove(player1);
      player0.gangStrength();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player(10);
      player0.setDead((long) 10, false);
      player0.setZ(1436.285F);
      player0.setDead((long) 10, true);
      player0.gangStrength();
      player0.setY(1.0F);
      Player player1 = new Player(1, "", "Player.unpack(): *** WARNING *** data is not of proper type!", 0, 0);
      player0.head = (Party) player1;
      player0.setX((-1.0F));
      player0.getName();
      player0.setX((-1.0F));
      assertEquals((-1.0F), player0.getX(), 0.01F);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.7897645801735327
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player(4312, "", "", 4312);
      Player player1 = new Player();
      Player player2 = new Player((short)4919, "", "4", 1702);
      player1.setJoinOK(player2, false);
      assertEquals(1702, player2.getPictureId());
      assertEquals("", player2.getIP());
      
      player1.reset(false);
      Player player3 = new Player((-2176));
      Player player4 = new Player((short)4919);
      player1.isJoinOK(player4, false);
      assertFalse(player1.isDead());
      assertEquals(0L, player1.getTimeOfDeath());
      
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Player player5 = new Player();
      player5.pack();
      boolean boolean0 = player5.isJoinOK(player4, false);
      assertTrue(player5.isConnected());
      assertEquals(1, player5.getStrength());
      assertEquals(0, player5.getPictureId());
      assertEquals("0.0.0.0", player5.getIP());
      assertEquals(10.0F, player5.getX(), 0.01F);
      assertEquals("Player-1", player5.getName());
      assertEquals(0.0F, player5.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "", "4", 1702);
      player0.setY(0.0F);
      player0.setJoinOK(player1, false);
      assertEquals(1702, player1.getPictureId());
      assertEquals("", player1.getIP());
      
      Player player2 = new Player(5);
      Player player3 = new Player((short)4919);
      boolean boolean0 = player0.isJoinOK(player3, false);
      assertFalse(player3.isDead());
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(0L, player3.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1, player3.getStrength());
      assertEquals(0, player3.getPictureId());
      assertTrue(boolean0);
      assertEquals("Player4919", player3.toString());
      assertEquals("0.0.0.0", player3.getIP());
      assertTrue(player3.isConnected());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.450507848988659
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player((short)4919, "", "4", 1702);
      player0.setJoinOK(player1, false);
      assertEquals("", player1.getIP());
      assertEquals(1702, player1.getPictureId());
      
      Player player2 = new Player((-2176));
      int int0 = player0.gangStrength();
      assertEquals(1, int0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player3 = new Player((short)4919);
      boolean boolean0 = player0.isJoinOK(player3, false);
      assertTrue(boolean0);
      assertTrue(player3.isConnected());
      assertEquals(0, player3.getPictureId());
      assertEquals("0.0.0.0", player3.getIP());
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertFalse(player3.isDead());
      assertEquals("Player4919", player3.getName());
      assertEquals(0L, player3.getTimeOfDeath());
      assertEquals(0.0F, player3.getY(), 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player(4312, "", "", 4312);
      Player player1 = new Player();
      Player player2 = new Player((short)4919, "", "", 1702);
      player1.setJoinOK(player2, false);
      Player player3 = new Player((-2176));
      player3.reset(true);
      assertEquals(0.0F, player3.getMoney(), 0.01F);
      assertEquals(0L, player3.getTimeOfDeath());
      assertFalse(player3.isDead());
      
      player0.isJoinOK(player2, true);
      Player player4 = new Player(1091);
      String string0 = player4.toString();
      assertEquals("Player1091", string0);
      
      boolean boolean0 = player2.isJoinOK(player4, true);
      assertEquals(1, player4.getStrength());
      assertEquals("0.0.0.0", player4.getIP());
      assertFalse(boolean0);
      assertTrue(player4.isConnected());
      assertEquals(1702, player2.getPictureId());
      assertEquals(0.0F, player4.getY(), 0.01F);
      assertEquals(10.0F, player4.getX(), 0.01F);
      assertEquals(0, player4.getPictureId());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)36;
      byteArray0[1] = (byte) (-50);
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte) (-58);
      byteArray0[4] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte) (-50));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(byteArrayInputStream0);
      Player player0 = new Player((-777), "%@-", 2050);
      boolean boolean0 = player0.unpack(dataInputStream1);
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(0, ":_+km?p?p'sXM>nic?", ":_+km?p?p'sXM>nic?", 0, 1672);
      boolean boolean0 = player0.isConnected();
      assertEquals(1672, player0.getStrength());
      assertEquals(0, player0.getPictureId());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(boolean0);
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(1702, "4", (String) null, (-81));
      Player player1 = new Player(36, (String) null, (String) null, (short)4919);
      player0.setJoinOK(player1, false);
      assertEquals(0L, player0.getTimeOfDeath());
      
      player0.setDead((-1L), true);
      boolean boolean0 = player0.isJoinOK(player0, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7914739818829344
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(1, "", "RD(!GeFp~.p]*/]", 1);
      Player player1 = new Player();
      Player player2 = new Player(1702, "gdD7MzWB", "gdD7MzWB", 4312);
      Player player3 = new Player(2122, "4", (-1));
      player3.setJoinOK(player0, false);
      Player player4 = new Player((short)4919);
      Player player5 = new Player(1594);
      boolean boolean0 = player0.isJoinOK(player5, false);
      assertFalse(boolean0);
      
      Player player6 = new Player();
      assertEquals("Player-1", player6.toString());
      assertEquals(0, player6.getPictureId());
      
      player0.pack();
      player3.pack();
      String string0 = player3.getIP();
      assertEquals(10.0F, player3.getX(), 0.01F);
      assertEquals(0L, player3.getTimeOfDeath());
      assertEquals("0.0.0.0", string0);
      assertEquals(0.0F, player3.getY(), 0.01F);
      assertEquals(1, player3.getStrength());
      assertEquals((-1), player3.getPictureId());
      assertTrue(player3.isConnected());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2);
      Player player0 = new Player(148);
      Player player1 = new Player(148, (String) null, (String) null, (-2811), (-2811));
      player0.isJoinOK(player1, false);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream((-2811));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player(236, "", "", 4312);
      player0.setZ(4312);
      Player player1 = new Player();
      Player player2 = new Player(0, "", "Nr's&o\"Gt[4wa:#", 4312);
      Player player3 = new Player((short)4919);
      player3.setJoinOK(player1, true);
      Player player4 = new Player(4312);
      Player player5 = new Player(512);
      player0.isJoinOK(player1, true);
      Player player6 = new Player();
      player0.pack();
      Player player7 = new Player(512, "", "", (short)4919);
      player7.getName();
      player0.getIP();
      assertEquals(4312.0F, player0.getZ(), 0.01F);
      
      float float0 = player5.getX();
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte) (-122);
      Player player0 = new Player((-1204), "dCUMFf!}L+", "", 16622, (-1));
      float float0 = player0.getMoney();
      assertEquals((-1), player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(16622, player0.getPictureId());
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("dCUMFf!}L+", player0.getIP());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(0, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "dCUMFf!}L+", 16132);
      Party party0 = player0.head;
      player0.add((Party) null);
      player0.setMoney(0.0F);
      player0.getMoney();
      Player player1 = new Player();
      player1.setJoinOK(player0, false);
      PipedInputStream pipedInputStream0 = new PipedInputStream((short)4919);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "state.Party";
      Player player0 = new Player();
      byte[] byteArray0 = new byte[0];
      player0.setDead();
      player0.unpack(byteArray0);
      player0.getSubparty();
      player0.setZ((byte)47);
      LinkedList<Party> linkedList0 = new LinkedList<Party>();
      MockFile mockFile0 = new MockFile("state.Party");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "Y;j(C=vX8<9Hnp&W.");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // Y;j(C=vX8<9Hnp&W.
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(21, "!Q;u8eu|ziCv`;WFT", 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)18;
      byteArray0[6] = (byte) (-1);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)18;
      byteArray0[6] = (byte) (-107);
      player0.unpack(byteArray0);
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
  }
}
