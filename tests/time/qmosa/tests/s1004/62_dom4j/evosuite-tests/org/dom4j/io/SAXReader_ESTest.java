/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:57:28 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.datatype.DatatypeElement;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.49649273994102
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DOMDocument dOMDocument0 = new DOMDocument();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/lexical-handler");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "//#1s/http:/xml.org/sax/features/use-locator20tsr(tXv`$");
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("~TgG=LHq2$I'3G@wv");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEncoding();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      MockThrowable mockThrowable0 = new MockThrowable("~TgG=LHq2$I'3G@wv");
      MockThrowable mockThrowable1 = new MockThrowable(mockThrowable0);
      MockException mockException0 = new MockException("//home/ubuntu/termite/projects/62_dom4j/5D<HXE/#comment0%[\";jvq.t^p<d$\u0005", mockThrowable1);
      MockThrowable mockThrowable2 = new MockThrowable("//home/ubuntu/termite/projects/62_dom4j/5D<HXE/#comment0%[\";jvq.t^p<d$\u0005", mockThrowable0);
      MockThrowable mockThrowable3 = new MockThrowable(mockThrowable2);
      MockException mockException1 = new MockException("//>I0/wax=/>I0/wax=\u0000>I0/wax=", (Throwable) null);
      assertFalse(mockException1.equals((Object)mockException0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setEncoding(" : ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockException mockException0 = new MockException((Throwable) null);
      SAXParseException sAXParseException0 = new SAXParseException(" : ", "", "//#1s/http:/xml.org/sax/features/use-locator20tsr(tXv`$", 620, 620, mockException0);
      MockThrowable mockThrowable0 = new MockThrowable("//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap", sAXParseException0);
      MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0);
      MockThrowable mockThrowable2 = new MockThrowable(sAXParseException0);
      MockThrowable mockThrowable3 = new MockThrowable();
      MockException mockException1 = new MockException("//#1s/http:/xml.org/sax/features/use-locator20tsr(tXv`$", mockThrowable3);
      try { 
        sAXReader0.read(" PUBLIC \"");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol:  PUBLIC \" Nested exception: no protocol:  PUBLIC \"
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.466313298576017
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.createXMLReader();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/:8qPTB7ssd0:WS5Nn'`9,Ql6@@:o");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.4985138498196773
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      String string0 = "\"U#fYvOJ#?]3Ip#bR\"p";
      sAXReader0.setEncoding("\"U#fYvOJ#?]3Ip#bR\"p");
      SAXReader sAXReader1 = new SAXReader(documentFactory0, false);
      DispatchHandler dispatchHandler0 = sAXReader1.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      String string1 = ":WS5Nn'`9,Ql6@@:o";
      File file0 = MockFile.createTempFile(":8qPTB7ssd", ":WS5Nn'`9,Ql6@@:o");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\"U#FYVOJ#?]3IP#BR\"P\". Nested exception: Invalid encoding name \"\"U#FYVOJ#?]3IP#BR\"P\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.createDefaultEntityResolver("xml");
      sAXReader0.getDispatchHandler();
      sAXReader0.getEntityResolver();
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setEncoding(" : ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("^Y=G=q84Ux+o", "");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.471853918106659
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      InputStream inputStream0 = null;
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = null;
      String string1 = null;
      Exception exception0 = null;
      SAXParseException sAXParseException0 = new SAXParseException((String) null, (String) null, (String) null, 13, 2736, (Exception) null);
      SAXReader sAXReader0 = new SAXReader((String) null);
      String string2 = null;
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3922896470698074
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setEncoding(" : ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      StringReader stringReader0 = new StringReader("h%KrUV");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.414564466298768
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.createXMLReader();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      InputStream inputStream0 = null;
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, " : ");
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader1 = new SAXReader();
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";Nmc";
      stringArray0[1] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      stringArray0[2] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      stringArray0[3] = ";Nmc";
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getErrorHandler();
      SAXReader sAXReader2 = new SAXReader(false);
      sAXReader2.installXMLFilter(parserAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset((String) null, "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      ParserAdapter parserAdapter1 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter1.setDocumentLocator(locatorImpl0);
      inputSource0.getEncoding();
      sAXReader2.setErrorHandler((ErrorHandler) null);
      assertFalse(sAXReader2.isMergeAdjacentText());
      assertFalse(sAXReader2.isStripWhitespaceText());
      assertTrue(sAXReader2.isStringInternEnabled());
      assertFalse(sAXReader2.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader2.isValidating());
      assertFalse(sAXReader2.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader2.isIgnoreComments());
      
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      xMLFilterImpl1.startElement("", "m", "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap", attributes2Impl1);
      sAXReader0.setEncoding("Q}vnn@/'0?T2pu");
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get("", namespace0);
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte) (-62);
      byteArray0[2] = (byte) (-91);
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte) (-92);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.setEntityResolver(defaultHandler2_0);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.createDefaultEntityResolver("");
      boolean boolean1 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(boolean1 == boolean0);
      
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "";
      stringArray0[2] = "z";
      stringArray0[3] = "i+k|`!P;gt6cj<6";
      stringArray0[4] = "";
      stringArray0[5] = "j";
      stringArray0[6] = "##.gC";
      sAXReader0.getDocumentFactory();
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0, 58);
      // Undeclared exception!
      try { 
        dispatchHandler0.onEnd(pruningElementStack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2792257981339743
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      InputSource inputSource0 = new InputSource();
      InputSource inputSource1 = new InputSource();
      inputSource1.setSystemId("AL");
      SAXReader sAXReader1 = new SAXReader(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("//>I0/wax=/>I0/wax=\u0000>I0/wax=");
      InputSource inputSource2 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4128560974620727
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(true);
          sAXReader0.getDocumentFactory();
          sAXReader0.resetHandlers();
          SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("F");
          sAXReader_SAXEntityResolver0.uriPrefix = "http://xml.org/sax/handlers/LexicalHandler";
          sAXReader_SAXEntityResolver0.resolveEntity("F", "http://xml.org/sax/handlers/LexicalHandler");
          InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("F", "F");
          sAXReader0.setIncludeExternalDTDDeclarations(true);
          sAXReader0.createContentHandler((XMLReader) null);
          try { 
            sAXReader0.read(inputSource0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // sun.reflect.GeneratedMethodAccessor112.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // sun.reflect.GeneratedMethodAccessor112.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.471853918106659
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null);
      StringReader stringReader0 = new StringReader("3Gqk#4K $T");
      SAXReader sAXReader2 = new SAXReader(xMLFilterImpl0, true);
      sAXReader2.setIncludeInternalDTDDeclarations(true);
      try { 
        sAXReader2.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@28e2ec70 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@28e2ec70 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader(true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      MockFile mockFile0 = new MockFile("", "");
      MockFile mockFile1 = new MockFile("http://xml.org/sax/properties/lexical-handler");
      mockFile1.setExecutable(false, true);
      MockFile.createTempFile("{l3 ", (String) null, (File) mockFile0);
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("v^{Zqhi", "v^{Zqhi");
      QName qName0 = new QName("%liEiY J-JO$rY,b", dOMNamespace0, "v^{Zqhi");
      dOMNamespace0.setParent((Element) null);
      qName0.equals("v^{Zqhi");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.getXMLFilter();
      qName0.toString();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.createXMLReader();
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.getDispatchHandler();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("4nq#zQ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4nq#zQ");
      String string0 = "org.dom4j.tree.DefaultEntity";
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.getErrorHandler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte) (-65);
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte) (-73);
      byteArray0[5] = (byte)119;
      // Undeclared exception!
      try { 
        pipedInputStream0.read(byteArray0, (int) (byte) (-73), (-4646));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4901524846261744
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.getDispatchHandler();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler("4nq#zQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4nq#zQ");
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.getErrorHandler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "org.dom4j.tree.DefaultEntity");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.322497969578516
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setErrorHandler(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1);
      sAXReader0.setMergeAdjacentText(false);
      MockException mockException0 = new MockException("org.dom4j.io.SAXReader$SAXEntityResolver");
      sAXReader0.getXMLReader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//>I0/wax=/>I0/wax=\u0000>I0/wax=");
      SAXParseException sAXParseException0 = new SAXParseException("p#Zn03f9wS:$iUXLb", (String) null, "org.dom4j.io.SAXReader$SAXEntityResolver", 1231, 6, mockException0);
      StringWriter stringWriter0 = new StringWriter();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        sAXReader0.read((Reader) null, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2016318389219833
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.isStringInternEnabled();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 92);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      xMLFilterImpl0.startPrefixMapping("//home/ubuntu/termite/projects/62_dom4j/5D<HXE/#comment0%[\";jvq.t^p<d$\u0005", "//home/ubuntu/termite/projects/62_dom4j/5D<HXE/#comment0%[\";jvq.t^p<d$\u0005");
      InputSource inputSource0 = new InputSource(dataInputStream0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.removeHandler("Ak_8yD:pG[K`b,f2B`");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      sAXReader0.getXMLFilter();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      defaultHandler0.unparsedEntityDecl("org.dom4j.tree.DefaultDocumentType", "org.jaxen.saxpath.XPathReader", "org.dom4j.tree.DefaultDocumentType", "//tmp/:8qPTB7ssd0:WS5Nn'`9,Ql6@@:o");
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.setValidation(false);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource();
      inputSource0.setSystemId("AL");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("AL", "AL", "");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1591, xSDatatype0);
      documentFactory0.createDocument((Element) datatypeElement0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "q");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName("", "", "");
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.629820911715024
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      sAXReader_SAXEntityResolver0.resolveEntity("-yyg4BV][", " Hl4fFQ)");
      sAXReader_SAXEntityResolver0.resolveEntity("^Y=G=q84Ux+o", "");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.createDefaultEntityResolver("?*/");
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource();
      inputSource0.setSystemId("AL");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName(" of document ", " of document ", " of document ");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 19, xSDatatype0);
      documentFactory0.createDocument((Element) datatypeElement0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "//>0 .ax=/>0 .ax=0>0 .ax=");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      InputSource inputSource1 = new InputSource("//#1s/http:/xml.org/sax/features/use-locator20tsr(tXv`$");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.6222130702090864
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("//tmp/m!sNXx1m!sNXx");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      stringArray0[1] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      stringArray0[2] = ";Nmc";
      stringArray0[3] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      stringArray0[4] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      dispatchHandler0.addHandler("//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap", (ElementHandler) null);
      stringArray0[5] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0, 3);
      sAXReader0.resetHandlers();
      pruningElementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("org.dom4j.io.SAXReader$SAXEntityResolver");
      sAXReader_SAXEntityResolver0.resolveEntity(";Nmc", "<&kNG7");
      String string0 = "nedzv4JEndt0?_%92";
      try { 
        sAXReader0.setFeature("nedzv4JEndt0?_%92", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'nedzv4JEndt0?_%92' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      InputSource inputSource0 = new InputSource();
      inputSource0.setSystemId("AL");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getQName(" of document ", " of document ", " of document ");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 19, xSDatatype0);
      documentFactory0.createDocument((Element) datatypeElement0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity(" of document ", "//?ma.nr{o(xW+Mz-dT26/?ma.nr{o(xW+Mz-dT260?ma.nr{o(xW+Mz-dT26", "2|\"[C&kDi-\"W", "org.dom4j.io.SAXReader$SAXEntityResolver");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/AL (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/AL (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((Reader) null, "0e@j`pQ9KQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: 0e@j`pQ9KQ Nested exception: no protocol: 0e@j`pQ9KQ
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2822036606041034
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      Enumeration<DataInputStream> enumeration0 = (Enumeration<DataInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      String string0 = "";
      QName qName0 = namespaceStack0.getQName("AL", "AL", "");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeElement datatypeElement0 = new DatatypeElement(qName0, 1591, xSDatatype0);
      documentFactory0.createDocument((Element) datatypeElement0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)95;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte) (-36);
      byteArray0[5] = (byte)49;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
      try { 
        sAXReader0.read((InputStream) sequenceInputStream0, "R4eZyXK'ZRw]w8`Z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      boolean boolean0 = false;
      sAXReader0.getXMLFilter();
      SAXReader sAXReader1 = new SAXReader((XMLReader) null, false);
      ElementStack elementStack0 = new ElementStack();
      elementStack0.getPath();
      elementStack0.getDispatchHandler();
      DispatchHandler dispatchHandler0 = elementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.358694544247911
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      String string0 = "";
      sAXReader0.getXMLReader();
      sAXReader0.setDocumentFactory(documentFactory0);
      MockFile mockFile0 = new MockFile("", ">I0/wax=");
      mockFile0.setExecutable(false, true);
      File file0 = MockFile.createTempFile(">I0/wax=", ">I0/wax=", (File) mockFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
      sAXReader0.setEncoding(" : ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" : ");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity(" : ", " : ");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setEncoding(" : ");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("Comment", "D#kHl!KW2iFy*/b*");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      xMLFilterImpl0.processingInstruction("", "");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.isValidating();
      sAXReader0.isStringInternEnabled();
      int int0 = 1268;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1268);
      String string1 = "//>0 .ax=/>0 .ax=0>0 .ax=";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//>0 .ax=/>0 .ax=0>0 .ax=");
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = null;
      sAXReader0.setEncoding((String) null);
      sAXReader0.isValidating();
      sAXReader0.setMergeAdjacentText(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string1 = null;
      xMLFilterImpl1.processingInstruction((String) null, (String) null);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      String string2 = "CharacterData node is read only: ";
      try { 
        parserAdapter0.getProperty("CharacterData node is read only: ");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: CharacterData node is read only: 
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler((ElementModifier) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "S+";
      stringArray0[1] = "svE";
      stringArray0[2] = "v";
      stringArray0[3] = "h";
      stringArray0[4] = "Validation not supported for XMLReader: ";
      stringArray0[5] = "9Cf<bvQ:";
      stringArray0[6] = "";
      stringArray0[7] = "http://xml.org/sax/features/namespaces";
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 0);
      sAXModifyElementHandler0.onStart(pruningElementStack0);
      sAXReader0.setDefaultHandler(sAXModifyElementHandler0);
      sAXReader0.setIgnoreComments(false);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/5D<HXE/#comment0%[\";jvq.t^p<d$\\5";
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/5D<HXE/#comment0%[\";jvq.t^p<d$\u0005");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader0.read("//home/ubuntu/termite/projects/62_dom4j/?/ : 0 : ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7291746 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@7291746 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      SAXReader sAXReader0 = new SAXReader();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      InputSource inputSource0 = new InputSource();
      inputSource0.setSystemId("LicT");
      try { 
        sAXReader1.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      InputSource inputSource1 = new InputSource();
      DOMDocument dOMDocument0 = new DOMDocument();
      InputSource inputSource2 = new InputSource((InputStream) null);
      InputSource inputSource3 = new InputSource((InputStream) null);
      inputSource3.setSystemId("//>0 .ax=/>0 .ax=0>0 .ax=");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.resolveEntity((String) null, "kpV", "\"X;Ev`/cWLGPq0b", (String) null);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[rC(E`");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      StringReader stringReader0 = new StringReader("^Y=G=q84Uxzo");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader1 = new SAXReader();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ";Nmc";
      stringArray0[1] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      stringArray0[2] = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null, 46);
      pruningElementStack0.getDispatchHandler();
      sAXReader1.setDefaultHandler((ElementHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap");
      sAXReader_SAXEntityResolver0.resolveEntity("//>I0/wax=/>I0/wax=\u0000>I0/wax=", stringArray0[3]);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputSource inputSource1 = new InputSource("D");
      assertFalse(inputSource1.equals((Object)inputSource0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.setStringInternEnabled(true);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.createContentHandler((XMLReader) null);
      dispatchHandler0.resetHandlers();
      dispatchHandler0.removeHandler((String) null);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      boolean boolean1 = sAXReader0.isStripWhitespaceText();
      assertTrue(boolean1 == boolean0);
      
      sAXReader0.getErrorHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader(true);
          StringReader stringReader0 = new StringReader("~TgG=LHq2$I'3G@wv");
          try { 
            sAXReader0.read("http://xml.org/sax/features/validation");
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor90.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:314)
             // sun.reflect.GeneratedMethodAccessor90.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      dispatchHandler0.removeHandler("hSr#J");
      sAXReader0.addHandler("http://xml.org/sax/properties/declaration-handler", (ElementHandler) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      InputSource inputSource0 = new InputSource();
      InputSource inputSource1 = new InputSource();
      DOMDocument dOMDocument0 = new DOMDocument();
      InputSource inputSource2 = new InputSource((InputStream) null);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      try { 
        sAXReader0.setProperty("//?ma.nr{o(xW+Mz-dT26/?ma.nr{o(xW+Mz-dT260?ma.nr{o(xW+Mz-dT26", xMLFilterImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '//?ma.nr{o(xW+Mz-dT26/?ma.nr{o(xW+Mz-dT260?ma.nr{o(xW+Mz-dT26' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Reader reader0 = null;
      String string0 = "0e@j`pQ9KQ";
      String string1 = "//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap0EDU.oswego.cs.dl.util.concurrent.ConcurrentReaderHashMap not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("<U`5~@sBvpul@``.'");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class <U`5~@sBvpul@``.' not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
