/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:20:24 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0701112223627476
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(3853L);
      Player player0 = new Player((-21846), "Player", "<FMzF]<C", (-21846));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state.Player");
      player0.setMoney((-21846));
      player0.setConnected(false);
      player0.type();
      Player player1 = new Player((-21846), "", 5);
      player1.setJoinOK(player0, false);
      player1.setDead();
      player1.head = (Party) player0;
      player1.id = 507;
      player0.isJoinOK(player1, false);
      player0.isConnected();
      player0.type();
      player1.type();
      player1.isJoinOK(player0, true);
      player1.getSubparty();
      System.setCurrentTimeMillis((-1088L));
      player1.pack();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1757412430371352
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis((-1077L));
      Player player0 = new Player();
      player0.getMoney();
      byte[] byteArray0 = player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player1.setZ((-612.668F));
      player1.prev = (Party) player0;
      player1.setMoney(0.2F);
      player0.setJoinOK(player1, false);
      player1.setZ(0.0F);
      System.setCurrentTimeMillis((short)4919);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player1.pack();
      player0.getSubparty();
      player0.getX();
      Player player2 = new Player((short)4919, "0.0.0.0", "EYsu0qCvirU<i+%a 6", (short)4919);
      Player player3 = new Player();
      player0.isConnected();
      Player player4 = new Player((short)4919);
      player2.getX();
      System.setCurrentTimeMillis(16282L);
      boolean boolean0 = player0.isJoinOK(player1, false);
      assertEquals(0.0F, player1.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8577542127179325
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(2, "", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 2);
      Player player1 = new Player((short)4919, "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 2);
      player0.isJoinOK(player1, true);
      player0.type();
      player1.setDead();
      player1.gangStrength();
      player1.type();
      player1.isJoinOK(player0, false);
      player1.setX((-4176.8F));
      player0.setX((-194.0F));
      player1.setX(1617.4F);
      player0.getX();
      player1.isJoinOK(player0, true);
      player0.isJoinOK(player1, false);
      int int0 = player0.type();
      assertEquals((-194.0F), player0.getX(), 0.01F);
      assertEquals(5, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3815998280716038
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Player player0 = new Player((-5302), "AKfscG{4", " ", 1, (-836));
      Player player1 = new Player();
      player1.prev = (Party) player0;
      player0.setMoney(0.0F);
      player0.isJoinOK(player1, true);
      player0.next = (Party) player1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "U-4RMI");
      player1.reset(false);
      player0.type();
      player1.setDead((long) 5);
      player1.setDead();
      player1.next = (Party) player0;
      player0.setZ(5);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "AKfscG{4");
      player0.setX(3967.2F);
      player0.setZ(0.1F);
      player0.prev = player1.next;
      player1.isJoinOK(player0, true);
      player0.getZ();
      player0.pack();
      player0.type();
      player0.pack();
      player1.isJoinOK(player0, true);
      player0.getX();
      float float0 = player0.getZ();
      assertEquals(3967.2F, player0.getX(), 0.01F);
      assertEquals(0.1F, float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0554878070033995
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player1.setZ((-612.668F));
      player1.pack();
      player0.setMoney(0.1F);
      player0.setJoinOK(player1, false);
      Player player2 = new Player((short)4919, "0.0.0.0", (String) null, (short)4919, 1303);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player2.add(player0);
      player0.isJoinOK(player2, true);
      player2.getMoney();
      player2.setZ(0.0F);
      player2.prev = (Party) player0;
      // Undeclared exception!
      try { 
        player2.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9959153244463073
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis((-1077L));
      Player player0 = new Player();
      player0.getMoney();
      byte[] byteArray0 = player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player1.setZ((-612.668F));
      player1.prev = (Party) player0;
      player1.setMoney(0.2F);
      player0.setJoinOK(player1, false);
      player1.setZ(0.0F);
      System.setCurrentTimeMillis((short)4919);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.isJoinOK(player1, false);
      player1.pack();
      player0.getSubparty();
      player0.getX();
      assertEquals(3037.36F, player0.getY(), 0.01F);
      
      Player player2 = new Player((short)4919, "0.0.0.0", "EYsu0qCvirU<i+%a 6", 161);
      Party party0 = player2.prev;
      Player player3 = new Player((short)4919);
      player3.getX();
      System.setCurrentTimeMillis(2807L);
      boolean boolean0 = player3.isJoinOK(player2, true);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY((-1190.8943F));
      String string0 = "0.0.0.0";
      String string1 = null;
      player0.getSubparty();
      int int0 = 1303;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((-11838));
      Player player2 = new Player();
      player2.add(player1);
      player0.setZ(3037.36F);
      player1.pack();
      player1.setMoney(2301.3408F);
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.884381759284857
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player(0);
      Party party0 = player0.next;
      player0.remove((Party) null);
      int int0 = Packable.GAME_STATE;
      player0.pack();
      player0.setDead();
      player0.getTimeOfDeath();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("state.Party/state.Party");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "state.Party");
      Player player1 = new Player((-1278), "state.Party", "state.Party", 2115, (short)4919);
      MockFile mockFile0 = new MockFile("state.Party", "state.Party");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      dataOutputStream0.writeLong(0L);
      player1.pack(dataOutputStream0);
      player0.setDead((long) (-1278));
      player1.isJoinOK(player0, true);
      player0.getTimeOfDeath();
      assertEquals((-1278L), player0.getTimeOfDeath());
      
      player1.pack();
      assertEquals(4919, player1.getStrength());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9440256153973703
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player((-116));
      player0.getStrength();
      Player player1 = new Player((-2713), "Tm#T2v", "state.Party", 0, 1);
      byte[] byteArray0 = player0.pack();
      player1.setDead();
      player1.gangStrength();
      player1.setDead((long) (-2713));
      player0.isJoinOK(player1, true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-657), (short)4919);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      dataInputStream1.close();
      Player player2 = new Player((-116));
      // Undeclared exception!
      try { 
        player2.unpack(dataInputStream1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8862673658216265
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(10, "J/$4", (-3313));
      player0.getX();
      player0.setDead((long) (-3313));
      player0.setZ((-3313));
      player0.getX();
      Party party0 = new Party(1);
      player0.next = party0;
      party0.id = (-3313);
      player0.next.getSubparty();
      party0.next = player0.next;
      System.setCurrentTimeMillis((short)4919);
      player0.type();
      player0.getMoney();
      System.setCurrentTimeMillis(1L);
      player0.pack();
      player0.getZ();
      player0.getX();
      player0.type();
      player0.pack();
      player0.getX();
      player0.type();
      System.setCurrentTimeMillis((short)4919);
      System.setCurrentTimeMillis(5);
      player0.getMoney();
      player0.pack();
      assertEquals((-3313L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0);
      Party party0 = player0.next;
      player0.remove((Party) null);
      int int1 = Packable.ACTION;
      player0.pack();
      player0.setDead();
      player0.getTimeOfDeath();
      Player player1 = new Player((-1278), "state.Party", "state.Party", 2115, (short)4919);
      player1.setX((-393.13663F));
      long long0 = 0L;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player1.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1978357475206622
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.setX(0.0F);
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player1.setZ((-612.668F));
      player1.prev = (Party) player0;
      player1.setMoney(0.2F);
      player0.setJoinOK(player1, false);
      player1.setJoinOK(player0, true);
      player1.setZ(0.1F);
      System.setCurrentTimeMillis((short)4919);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.isJoinOK(player1, false);
      player1.pack();
      player0.getSubparty();
      player0.getX();
      Player player2 = new Player((short)4919, "0.0.0.0", "EYsu0qCvirU<i+%a 6", 161);
      Party party0 = player2.prev;
      player1.isConnected();
      Player player3 = new Player();
      player3.getX();
      System.setCurrentTimeMillis((-1064L));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.262384640607128
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player0.add(player1);
      player0.setZ((-1064L));
      player0.pack();
      Player player2 = new Player(0, (String) null, 1303);
      player2.setMoney(0.0F);
      player2.setJoinOK(player0, true);
      assertEquals(3037.36F, player0.getY(), 0.01F);
      
      Player player3 = new Player((short)4919, (String) null, "", 5553, 5553);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player1.add(player2);
      player1.isJoinOK(player3, false);
      player1.getMoney();
      player2.isJoinOK(player1, true);
      player2.toString();
      int int0 = player3.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2394714949802967
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player((-1));
      player0.setDead();
      Player player1 = new Player((short)4919, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-300), 0);
      player1.getStrength();
      player1.gangStrength();
      Player player2 = new Player(0, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-1283));
      byte[] byteArray0 = player2.pack();
      player2.isConnected();
      player2.unpack(byteArray0);
      player0.setX(1671.6671F);
      assertEquals(1392409281320L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1040026700508068
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-1159), "Player.unpack(): *** WARNING *** data is not of proper type!", "Player.unpack(): *** WARNING *** data is not of proper type!", (-1159), (-1159));
      Party party0 = new Party();
      player0.getStrength();
      Player player1 = new Player((-1159), "", "Player.unpack(): *** WARNING *** data is not of proper type!", (-1159), (-1159));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.pack();
      player1.setDead();
      player0.gangStrength();
      player1.setX(3036.9524F);
      Player player2 = new Player((-1159));
      player0.setDead((long) (-1159));
      player0.isJoinOK(player2, true);
      long long0 = player1.getTimeOfDeath();
      assertEquals(3036.9524F, player1.getX(), 0.01F);
      assertEquals(1392409281320L, long0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Player player0 = new Player(0);
      player0.setY(3678.0F);
      player0.getMoney();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      player0.setX(0.0F);
      player0.setDead(1085L);
      Player player1 = new Player((byte)5, "", "", (byte)5, (byte) (-86));
      player1.setDead();
      player0.isJoinOK(player1, false);
      player1.toString();
      player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis((-2956L));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player((-116), "o0:&2<N<Y,Hn=RR", "o0:&2<N<Y,Hn=RR", (-11838), (-11838));
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Player player0 = new Player((-29183));
      player0.type();
      player0.type();
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2261289670319746
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player((-541), "8$Q", "8$Q", 0, (-541));
      assertEquals(10.0F, player1.getX(), 0.01F);
      
      player1.setX(0);
      player0.add(player1);
      Player player2 = new Player((short)4919, "", "", (short)4919, (short)4919);
      int int0 = player1.gangStrength();
      assertEquals((-540), int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player(0);
      player0.gangStrength();
      byte[] byteArray0 = player0.pack();
      player0.isConnected();
      player0.unpack(byteArray0);
      player0.setX(0.2F);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, (short)4919);
      pushbackInputStream0.unread(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player();
      player0.setX(1.0F);
      player0.setDead((-1L));
      player0.pack();
      player0.id = 1;
      player0.setY((-1L));
      player0.getY();
      player0.reset(false);
      player0.setY(1);
      player0.setDead(2759L);
      player0.getY();
      player0.setDead((long) 1);
      player0.setMoney(0.0F);
      assertTrue(player0.isDead());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Player player0 = new Player((-116));
      player0.pack();
      player0.setY((-116));
      player0.getY();
      Player player1 = new Player((-84), "", "", (short)4919, 0);
      player0.setX((-116.0F));
      Player player2 = new Player((-84), "`", (-116));
      player2.setX(0.0F);
      player2.setDead((-739L));
      player1.setDead();
      player0.isJoinOK(player2, true);
      player1.getMoney();
      player0.getMoney();
      float float0 = player2.getZ();
      assertEquals((-739L), player2.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.198959292011301
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player1.setZ((-612.668F));
      player1.prev = (Party) player0;
      player1.setMoney(0.2F);
      player0.setJoinOK(player1, false);
      player1.setZ(0.0F);
      player0.pack();
      player1.setMoney(1171.0F);
      player1.setJoinOK(player0, false);
      Player player2 = new Player((short)4919, "0.0.0.0", "z'A;x+z\"", 164, 2077);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player3 = (Player)player1.prev;
      player2.add(player3);
      player1.isJoinOK(player2, true);
      player1.getMoney();
      assertEquals(0.0F, player1.getZ(), 0.01F);
      
      player2.setZ(0.0F);
      player2.getName();
      player2.pack();
      assertEquals(2077, player2.getStrength());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player1.setZ((-612.668F));
      player1.prev = (Party) player0;
      player1.pack();
      player0.setMoney(0.1F);
      Player player2 = new Player((short)4919, "0.0.0.0", (String) null, (short)4919, 1303);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player2.add(player0);
      player2.getMoney();
      player2.setZ(0.0F);
      player2.prev = (Party) player0;
      player2.getName();
      // Undeclared exception!
      try { 
        player2.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.330792211843223
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player1.setZ((-611.9829F));
      player1.prev = (Party) player0;
      player1.setMoney(0.2F);
      player0.setJoinOK(player1, false);
      player1.setZ(0.0F);
      player0.isDead();
      player0.isJoinOK(player1, false);
      byte[] byteArray0 = player1.pack();
      player1.getSubparty();
      player0.setMoney((-1064L));
      player0.getX();
      player0.unpack(byteArray0);
      Player player2 = new Player((short)4919, "EYsu0qCvirU<i+%a 6", "0.0.0.0", (short)4919);
      Player player3 = (Player)player1.prev;
      player0.type();
      player0.isConnected();
      player1.getX();
      player1.isJoinOK(player0, true);
      assertEquals((-1064.0F), player0.getMoney(), 0.01F);
      
      boolean boolean0 = player1.isJoinOK(player2, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1040026700508068
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-116));
      player0.getStrength();
      Player player1 = new Player(1);
      player0.pack();
      player0.setDead();
      Player player2 = new Player((short)4919, "", (short)4919);
      player2.gangStrength();
      Player player3 = new Player((-21846), "0.0.0.0", "", 4);
      player3.setX((-5881.2266F));
      Player player4 = new Player((short)4919);
      player2.setDead((-1L));
      player2.isDead();
      player1.getTimeOfDeath();
      float float0 = player0.getZ();
      assertEquals(1392409281320L, player0.getTimeOfDeath());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 0;
      Player player0 = new Player(0, "Player", (-84));
      long long0 = 3132L;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.setZ(1244.9644F);
      // Undeclared exception!
      try { 
        player0.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Player player0 = new Player();
      player0.setY(3678.0F);
      player0.getMoney();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      Party party0 = new Party();
      player0.head = party0;
      byteArray0[7] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      dataInputStream0.readLong();
      player0.unpack(dataInputStream0);
      float float0 = player0.getZ();
      assertEquals(3678.0F, player0.getY(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(0, "pM#qACc", "Player.unpack(): *** WARNING *** [IO] failed to unpack data: ", 1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)89;
      byteArray0[6] = (byte)5;
      byteArray0[7] = (byte)0;
      sequenceInputStream1.read(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream1);
      player0.unpack(dataInputStream0);
      player0.setX(0.0F);
      player0.isDead();
      assertEquals(0L, player0.getTimeOfDeath());
      
      player0.setDead((long) 1);
      int int0 = player0.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player((-2435), "%D<L/mX2^j}};CT", (-2435));
      player0.setY((-2435));
      player0.getPictureId();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-1);
      player0.unpack(byteArray0);
      player0.setX((byte)25);
      player0.setDead((long) (byte)25);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertEquals(25.0F, player0.getX(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.022794924510636
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(0, "fK/MP)[VJ<$TJ~j/t", "Player.unpack(): *** WARNING *** data is not of proper type!", 0, 4919);
      Party party0 = player0.head;
      player0.boss = null;
      player0.setMoney(0.0F);
      player0.boss = null;
      player0.gangStrength();
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      int int0 = player0.type();
      assertEquals(5, int0);
      
      int int1 = player0.getPictureId();
      assertEquals(0, int1);
      
      player0.getTimeOfDeath();
      int int2 = player0.gangStrength();
      assertEquals(4919, int2);
      
      player0.getName();
      player0.setY(0.0F);
      float float1 = player0.getX();
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, float1, 0.01F);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.071195233202856
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player((short)4919);
      player0.add(player1);
      player1.setZ((-612.668F));
      player1.prev = (Party) player0;
      player1.pack();
      player1.setMoney(0.2F);
      player0.setJoinOK(player1, false);
      Player player2 = new Player((short)4919, "0.0.0.0", (String) null, (short)4919, 1303);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      player0.isJoinOK(player2, true);
      player2.getMoney();
      player0.isJoinOK(player2, true);
      player0.toString();
      boolean boolean0 = player1.isJoinOK(player2, true);
      assertEquals((-612.668F), player1.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player(862, "", "s_*MUXL9>S++1Gs", 1445, 862);
      int int0 = player0.getPictureId();
      assertEquals(1445, int0);
      assertEquals(862, player0.getStrength());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals("", player0.getIP());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Player player0 = new Player(0);
      Player player1 = new Player();
      Party party0 = player0.next;
      player0.remove((Party) null);
      player1.getStrength();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-98);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-16127));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (short)4919);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      player0.setZ(1.0F);
      player0.pack();
      player0.setY((-510.2191F));
      Player player1 = new Player();
      player1.setMoney(3037.36F);
      player0.setJoinOK(player1, false);
      player1.setX(113.19991F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player2 = new Player();
      player1.isJoinOK(player2, true);
      player0.setZ(1523.445F);
      player2.getName();
      player1.pack();
      player0.pack();
      assertEquals((-510.2191F), player0.getY(), 0.01F);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3247387677850297
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      System.setCurrentTimeMillis((-1064L));
      Player player0 = new Player();
      player0.getMoney();
      player0.pack();
      player0.setY(3037.36F);
      player0.getSubparty();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0.0.0.0");
      Player player1 = new Player(1303);
      player1.boss = (Party) player0;
      player1.add(player0);
      player0.setZ(663.27F);
      player1.pack();
      player1.setMoney((-2457.7415F));
      player1.setJoinOK(player0, false);
      player1.setX(0.1F);
      Player player2 = new Player((short)4919, "0.0.0.0", "&$)[cfg(NVw", (short)4919, (-2716));
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.add(player1);
      player2.isJoinOK(player0, true);
      player1.getMoney();
      player2.setZ(0.1F);
      Player player3 = new Player((short)4919, "&$)[cfg(NVw", "", (-29042), (-2716));
      player3.getName();
      player0.pack();
      float float0 = player1.getZ();
      assertEquals(0.1F, player1.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Player player0 = new Player((-17));
      player0.setY(3678.0F);
      player0.getMoney();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-71);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-1);
      Party party0 = new Party();
      player0.head = party0;
      byteArray0[7] = (byte)32;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      float float0 = player0.getZ();
      assertEquals(3678.0F, player0.getY(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      player0.setY((-101.72F));
      player0.isConnected();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-114);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)10;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, (byte)10);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, (byte)10);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(bufferedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream1);
      player0.unpack(dataInputStream0);
      player0.unpack(byteArray0);
      player0.setX(1299.0F);
      assertEquals(1299.0F, player0.getX(), 0.01F);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Player player0 = new Player();
      player0.setZ((-217.92F));
      player0.gangStrength();
      player0.getY();
      Player player1 = new Player(2082, "state.Party", "state.Party", (short)4919, 1);
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Player player0 = new Player((-2582), "", "", 0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)57;
      byteArray0[2] = (byte) (-40);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)55;
      byteArray0[5] = (byte)0;
      byteArrayOutputStream0.write(byteArray0);
      player0.setConnected(true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      byteArrayOutputStream0.writeTo(dataOutputStream0);
      dataOutputStream0.writeUTF("");
      dataOutputStream0.writeFloat(0.2F);
      byteArrayOutputStream0.write(0);
      dataOutputStream0.writeInt((short)4919);
      player0.pack(dataOutputStream0);
      dataOutputStream0.writeShort(3152);
      player0.setZ(1566.801F);
      player0.pack();
      player0.pack(dataOutputStream0);
      player0.setDead();
      assertEquals(1566.801F, player0.getZ(), 0.01F);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9727115278367817
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-11838), ".*[.]class$", "4e#P`ln*5p", 0);
      player0.setDead((-1L));
      player0.setMoney(0);
      player0.setConnected(false);
      player0.setDead((-1L), true);
      player0.type();
      System.setCurrentTimeMillis((-11838));
      player0.getZ();
      player0.getMoney();
      player0.setDead(1L);
      Player player1 = new Player((-11838), ".*[.]class$", 10);
      player1.setDead((-3382L), false);
      player0.isJoinOK(player1, false);
      player0.getX();
      player1.type();
      int int0 = player0.type();
      assertTrue(player0.isDead());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "gui.ModuleBrowserDialog$ModuleFilter";
      Player player0 = new Player((-3958), "gui.ModuleBrowserDialog$ModuleFilter", 1644);
      player0.getIP();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("0.0.0.0", "0.0.0.0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 0.0.0.0
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player(2835, (String) null, "_T5e^XS{", 2835, (-239));
      String string0 = player0.getIP();
      assertTrue(player0.isConnected());
      assertEquals((-239), player0.getStrength());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(2835, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Player player0 = new Player(382, "", "", 0, 382);
      player0.pack();
      player0.boss = null;
      player0.setMoney(382);
      player0.setX(0);
      player0.setZ(0.0F);
      player0.reset(true);
      player0.setMoney((-2555.436F));
      player0.getSubparty();
      player0.getIP();
      player0.setX(0.0F);
      player0.setX(382);
      player0.getX();
      player0.pack();
      player0.setX(0.0F);
      boolean boolean0 = player0.isConnected();
      assertEquals((-2555.436F), player0.getMoney(), 0.01F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player(25);
      Player player1 = new Player(25, "ikv dTDxQ#IG2(V", 1);
      player0.next = (Party) player1;
      player0.reset(false);
      float float0 = Player.TOLERANCE;
      assertEquals(0.2F, float0, 0.01F);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Player player0 = new Player(4919, "", "8n}T\"J{v' 2x]", 4919, 4919);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-103);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-63);
      byteArray0[8] = (byte)75;
      player0.unpack(byteArray0);
      assertEquals(4919, player0.getPictureId());
      assertEquals("", player0.getIP());
      assertEquals(4919, player0.getStrength());
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Player player0 = new Player((-21846), "0#;`5dKvWs=7", "S{T;g", (-21846), (-1655));
      player0.setZ((-21846));
      Player player1 = new Player((-573), "gui.ModuleBrowserDialog$ModuleFilter", "state.Player", (short)4919);
      player1.prev = (Party) player0;
      Player player2 = new Player(2788, "state.Party", "gui.ModuleBrowserDialog$ModuleFilter", 2788);
      player1.setJoinOK(player2, false);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertEquals((-21846.0F), player0.getZ(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Player player0 = new Player();
          player0.setZ((-217.92F));
          player0.gangStrength();
          player0.getY();
          Player player1 = new Player((-139), "state.Party", "state.Party", (short)4919, 1);
          player1.setX((-2887.6213F));
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileOutputStream mockFileOutputStream0 = null;
          try {
            mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
             // sun.reflect.GeneratedConstructorAccessor66.newInstance(Unknown Source)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
