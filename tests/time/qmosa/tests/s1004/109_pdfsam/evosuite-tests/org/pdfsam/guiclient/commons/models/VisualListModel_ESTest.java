/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:20:17 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Dialog;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.event.ItemListener;
import java.awt.event.MouseWheelListener;
import java.awt.event.WindowListener;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.Kernel;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Stack;
import java.util.Vector;
import java.util.function.UnaryOperator;
import javax.media.jai.PlanarImage;
import javax.media.jai.operator.FPXDescriptor;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.event.ListDataListener;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.92967840055467
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[1];
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      visualListModel0.addListDataListener((ListDataListener) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.9193618394362675
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[1];
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      visualListModel0.addListDataListener((ListDataListener) null);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8564909139241832
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[1];
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.setData(visualPageListItemArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1432136814444385
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualListModel0.setData(visualPageListItemArray0);
      vector0.ensureCapacity(869);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      VisualListModel visualListModel1 = new VisualListModel();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      Integer integer2 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      jComboBox0.addItem(integer3);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>(stack0);
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>(defaultComboBoxModel0);
      visualListModel0.addListDataListener(jComboBox0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(0);
      visualListModel0.moveDownIndex(0);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel2.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.19953461806653
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      UnaryOperator<VisualPageListItem> unaryOperator0 = UnaryOperator.identity();
      vector0.replaceAll(unaryOperator0);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.prependAllElements(vector0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(2088, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2088
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      jComboBox0.isValidateRoot();
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      int[] intArray1 = new int[1];
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.setData(visualPageListItemArray0);
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[8];
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7385727210046005
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualListModel0.setData(visualPageListItemArray0);
      vector0.ensureCapacity(869);
      visualListModel0.setData(vector0);
      VisualListModel visualListModel1 = new VisualListModel();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      Integer[] integerArray0 = new Integer[3];
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      Integer integer2 = IIPResolutionDescriptor.MAX_RESOLUTION;
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(869, "p-kg_W]", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.elementChanged((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      visualListModel0.getSize();
      int int0 = (-809);
      int int1 = 35;
      visualListModel0.moveUpIndex(35);
      visualListModel0.addElement(visualPageListItemArray0[0]);
      visualListModel0.addElementAt(visualPageListItemArray0[0], (-1662));
      int int2 = (-1);
      boolean boolean0 = false;
      visualListModel0.removeElements((-718), (-809), false);
      int int3 = (-2691);
      VisualPageListItem visualPageListItem1 = null;
      try {
        visualPageListItem1 = new VisualPageListItem((BufferedImage) null, (-2691));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener2 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener1);
      AWTEventMulticaster.remove(mouseWheelListener2, mouseWheelListener2);
      AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener1);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[1] = integer1;
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      jComboBox0.removeMouseWheelListener((MouseWheelListener) null);
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2096058100845513
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(0, 1853, true);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.removeElements(intArray0, false);
      Object object0 = visualListModel0.getElementAt(0);
      assertNull(object0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1552486438876346
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementChanged((VisualPageListItem) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualListModel0.setData(visualPageListItemArray0);
      vector0.add((VisualPageListItem) null);
      visualListModel0.setData(vector0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.setData(vector0);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      Integer[] integerArray0 = new Integer[3];
      Integer.toUnsignedString(4261);
      Integer.max(4261, 4261);
      integerArray0[0] = integer1;
      integerArray0[1] = integer1;
      integerArray0[2] = integer1;
      Integer integer2 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      Stack<Integer> stack0 = new Stack<Integer>();
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.addElementAt(visualPageListItemArray0[1], 1);
      assertNotSame(visualListModel2, visualListModel0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      arrayDeque0.pollLast();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      visualListModel0.getSize();
      visualListModel0.moveUpIndex((-809));
      visualListModel0.addElementAt((VisualPageListItem) null, 1);
      int int0 = (-1);
      visualListModel0.removeElements(0, (-1), false);
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.DRAG_LAYER;
      Integer integer2 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      Integer integer4 = FPXDescriptor.MAX_RESOLUTION;
      Integer integer5 = JLayeredPane.MODAL_LAYER;
      Integer[] integerArray1 = new Integer[8];
      integerArray1[0] = integer4;
      integerArray1[1] = integer2;
      integerArray1[2] = integer1;
      integerArray0[4] = integer5;
      integerArray1[4] = integer3;
      Integer.getInteger("L%`?</", 0);
      integerArray1[5] = integer2;
      integerArray1[6] = integer0;
      integerArray1[7] = integer4;
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray1);
      Integer integer6 = IIPResolutionDescriptor.MAX_RESOLUTION;
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>(integerArray1);
      jComboBox1.addItem((Integer) int0);
      Stack<Integer> stack0 = new Stack<Integer>();
      DefaultComboBoxModel<Integer> defaultComboBoxModel0 = new DefaultComboBoxModel<Integer>(stack0);
      VisualListModel visualListModel1 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.setData(vector0);
      assertNotSame(visualListModel0, visualListModel1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      jComboBox0.removeMouseWheelListener((MouseWheelListener) null);
      jComboBox0.isValidateRoot();
      visualListModel0.removeElements(2278, (-2526), false);
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[0];
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.addAllElements((-2094), (Collection<VisualPageListItem>) vector0);
      int[] intArray0 = new int[1];
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      int int0 = (-2449);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2449);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.reverseElements(intArray0);
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      Stack<Integer> stack0 = new Stack<Integer>();
      RenderingHints renderingHints0 = null;
      ColorConvertOp colorConvertOp0 = new ColorConvertOp((RenderingHints) null);
      int int1 = (-317);
      AffineTransform affineTransform0 = AffineTransform.getTranslateInstance((-317), (-2449));
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, (RenderingHints) null);
      int int2 = (-747);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-747);
      floatArray0[1] = (float) (-2449);
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel((-2449), (-747), floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 2 and should be 1829403
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements((int[]) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      Random.setNextRandom(1);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualListModel visualListModel2 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel2.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8133224558281074
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 984;
      intArray0[1] = 0;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(984, 1803, true);
      int[] intArray1 = new int[2];
      intArray1[0] = 984;
      intArray1[1] = 1803;
      visualListModel0.reverseElements(intArray1);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.removeElements(984, 0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(976, 984, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.1084013788541878
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.moveUpIndex(0);
      visualListModel0.moveDownIndex(0);
      int int1 = (-648);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-648);
      visualListModel1.undeleteElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.subList(121, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(121) > toIndex(0)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1169);
      visualListModel0.removeElements(intArray0, true);
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.listIterator();
      Vector<Integer> vector1 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector0);
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>(vector0);
      jComboBox0.isValidateRoot();
      jComboBox1.getFocusListeners();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel0.removeElements((-648), (-1169), true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      int int0 = (-2449);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayDeque0);
      PlanarImage.getDefaultColorModel((-2449), 0);
      int int1 = (-2691);
      HashMap<RenderingHints.Key, Dialog.ModalityType> hashMap0 = null;
      try {
        hashMap0 = new HashMap<RenderingHints.Key, Dialog.ModalityType>((-2691));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2691
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.addAllElements((Collection<VisualPageListItem>) vector0);
      visualListModel0.addAllElements(1, (Collection<VisualPageListItem>) vector0);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      Vector<Integer> vector1 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector1);
      jComboBox0.getFocusListeners();
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      jComboBox0.addItemListener((ItemListener) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 88);
      assertNull(collection0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0);
      assertNotNull(collection0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, false);
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(itemListener0, itemListener0);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector0);
      jComboBox0.isValidateRoot();
      jComboBox0.getFocusListeners();
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      jComboBox0.addItemListener((ItemListener) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.getValidElements();
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      Vector<Integer> vector1 = new Vector<Integer>();
      Vector<Integer> vector2 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector2);
      jComboBox0.getItemCount();
      int int0 = 75;
      Button button0 = null;
      try {
        button0 = new Button("");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.prependAllElements(vector0);
      HashMap<RenderingHints.Key, Integer> hashMap0 = new HashMap<RenderingHints.Key, Integer>();
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      WindowListener windowListener1 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      WindowListener windowListener2 = AWTEventMulticaster.add(windowListener0, windowListener1);
      AWTEventMulticaster.remove(windowListener2, windowListener2);
      WindowListener windowListener3 = AWTEventMulticaster.add((WindowListener) null, windowListener2);
      WindowListener windowListener4 = AWTEventMulticaster.remove(windowListener2, (WindowListener) null);
      WindowListener windowListener5 = AWTEventMulticaster.add(windowListener3, windowListener4);
      WindowListener windowListener6 = AWTEventMulticaster.add((WindowListener) null, windowListener3);
      WindowListener windowListener7 = AWTEventMulticaster.remove(windowListener5, windowListener2);
      AWTEventMulticaster.remove(windowListener5, windowListener5);
      AWTEventMulticaster.remove(windowListener4, windowListener6);
      WindowListener windowListener8 = AWTEventMulticaster.add(windowListener3, (WindowListener) null);
      WindowListener windowListener9 = AWTEventMulticaster.add(windowListener2, windowListener8);
      Vector<Integer> vector1 = new Vector<Integer>();
      Vector<Integer> vector2 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      MockFile mockFile0 = new MockFile("", "");
      AWTEventMulticaster.remove((WindowListener) null, windowListener9);
      AWTEventMulticaster.remove(windowListener7, windowListener9);
      AWTEventMulticaster.add((WindowListener) null, windowListener4);
      Vector<Integer> vector3 = new Vector<Integer>();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertEquals(0, linkedHashSet0.size());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(1, (-898), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1) > toIndex(-898)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(1, 1, true);
      Random.setNextRandom(1178);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector0);
      jComboBox0.addItemListener((ItemListener) null);
      visualListModel0.addListDataListener(jComboBox0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertEquals(0, linkedHashSet0.size());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = (-1169);
      int[] intArray0 = new int[0];
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[3];
      intArray1[0] = (-1169);
      intArray1[1] = (-1169);
      visualListModel0.rotateClockwiseElements(intArray0);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      int int1 = (-2633);
      int[] intArray2 = null;
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.updateElementAt((-1250), (VisualPageListItem) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8063294488351005
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(1);
      visualListModel0.moveDownIndex(14);
      Random.setNextRandom(1);
      boolean boolean0 = true;
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(14, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 14
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = visualListModel0.getElementAt(1382);
      assertNull(object0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-1683));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1683
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[3];
      intArray1[0] = (-1169);
      intArray1[1] = (-1169);
      Integer[] integerArray0 = new Integer[0];
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      jComboBox0.isValidateRoot();
      Stack<Integer> stack0 = new Stack<Integer>();
      JComboBox<Integer> jComboBox1 = new JComboBox<Integer>(stack0);
      Vector<Integer> vector0 = new Vector<Integer>();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 3242;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertArrayEquals(new int[] {3242}, intArray0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(11);
      visualListModel0.moveDownIndex((-1247));
      WindowListener windowListener0 = mock(WindowListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(windowListener0, windowListener0);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.add((WindowListener) null, (WindowListener) null);
      AWTEventMulticaster.remove((WindowListener) null, (WindowListener) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      Stack<Integer> stack0 = new Stack<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(stack0);
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(itemListener0, itemListener0);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      jComboBox0.addItemListener((ItemListener) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      Random.setNextRandom(20000);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-1109), "", "=q~JV(}m/n@1>bM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      int int0 = 93;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(93, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 93
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.subList((-725), 0, true);
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      ItemListener itemListener1 = AWTEventMulticaster.add(itemListener0, itemListener0);
      AWTEventMulticaster.remove(itemListener1, itemListener1);
      AWTEventMulticaster.remove((ItemListener) null, itemListener1);
      ItemListener itemListener2 = AWTEventMulticaster.add(itemListener1, itemListener1);
      ItemListener itemListener3 = AWTEventMulticaster.remove(itemListener2, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, itemListener3);
      AWTEventMulticaster.add(itemListener2, itemListener2);
      AWTEventMulticaster.add(itemListener1, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertEquals(0, linkedHashSet0.size());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements((-816), (Collection<VisualPageListItem>) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector0);
      jComboBox0.getFocusListeners();
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      jComboBox0.addItemListener((ItemListener) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      ItemListener itemListener0 = mock(ItemListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(itemListener0, itemListener0);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertEquals(0, linkedHashSet0.size());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(1, 1);
      assertNull(collection0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayDeque0);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector0);
      jComboBox0.getFocusListeners();
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      jComboBox0.addItemListener((ItemListener) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.502347453863389
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      jComboBox0.removeMouseWheelListener((MouseWheelListener) null);
      jComboBox0.isValidateRoot();
      visualListModel0.addListDataListener(jComboBox0);
      int[] intArray0 = new int[2];
      intArray0[0] = 1974;
      visualListModel0.appendAllElements((Collection<VisualPageListItem>) null);
      intArray0[1] = 0;
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.undeleteElements(intArray0);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) arrayDeque0);
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) arrayDeque0);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      Vector<Integer> vector0 = new Vector<Integer>();
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(vector0);
      jComboBox0.getFocusListeners();
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.remove((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      AWTEventMulticaster.add((ItemListener) null, (ItemListener) null);
      jComboBox0.addItemListener((ItemListener) null);
      Random.setNextRandom(0);
  }
}
