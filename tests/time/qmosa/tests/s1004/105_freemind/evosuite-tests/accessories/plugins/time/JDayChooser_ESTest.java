/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:54:13 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMind;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseMode;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelListener;
import java.io.File;
import java.io.PipedInputStream;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import java.util.TimeZone;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JTextPane;
import javax.swing.KeyStroke;
import javax.swing.SwingConstants;
import javax.swing.border.EmptyBorder;
import javax.swing.event.AncestorListener;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.css.parser.Parser;
import org.apache.fop.fonts.FontInfo;
import org.apache.fop.fonts.MultiByteFont;
import org.apache.fop.pdf.PDFDocument;
import org.apache.fop.pdf.PDFPage;
import org.apache.fop.pdf.PDFResources;
import org.apache.fop.svg.PDFGraphics2D;
import org.apache.xalan.transformer.TransformerIdentityImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.OsmFileCacheTileLoader;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.29676493592994
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-473), (-1L), 90, 90, '.', 0);
      Color color0 = Color.BLACK;
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.setDayBordersVisible(true);
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setYearChooser((JYearChooser) null);
      jDayChooser1.setAlwaysFireDayProperty(true);
      jDayChooser0.getDay();
      jDayChooser1.setMonth(0);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2216651294757312
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.264636915784148
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.setMaxDayCharacters(3208);
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      Style style0 = jTextPane0.getLogicalStyle();
      Color color0 = styleContext0.getBackground(style0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3208;
      floatArray0[1] = (float) 3208;
      floatArray0[2] = 1283.103F;
      jTextPane0.getNavigationFilter();
      floatArray0[3] = (float) 3208;
      color0.getColorComponents(floatArray0);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JMonthChooser jMonthChooser1 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser1);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.16480169407465
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      int int0 = SwingConstants.PREVIOUS;
      jDayChooser0.setMonth(13);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.170865666463486
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 90;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.revalidate();
      jDayChooser0.setMonth(90);
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Properties properties0 = FreeMind.props;
      Properties properties1 = FreeMindApplet.userProps;
      JDayChooser jDayChooser1 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser1.addListeners(90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2000703759873637
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.addListeners(0);
      assertEquals(14, jDayChooser0.getDay());
      
      JPanel jPanel0 = new JPanel(true);
      jDayChooser0.setDay(0);
      jDayChooser0.getMaxSelectableDate();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.init();
      jDayChooser0.getDay();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2163343982791583
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      jDayChooser0.removeMouseMotionListener((MouseMotionListener) null);
      jDayChooser0.addListeners(0);
      jDayChooser0.getDayPanel();
      jDayChooser0.setDay(0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getDaysInMonth();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(1, jDayChooser0.getDay());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1963730050572305
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(13);
      jDayChooser0.setDay(10);
      assertEquals(10, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1758));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MindMapMode mindMapMode0 = new MindMapMode();
      mindMapMode0.getController();
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1287280798819306
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.KOREAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setDay(376);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      jDayChooser_DecoratorButton0.addMouseListener(defaultCaret0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser_DecoratorButton0, 0);
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2750387801885026
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 323, 323, 323, 323, 'M');
      JDayChooser jDayChooser1 = new JDayChooser();
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.setMonth(43);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser1.setMonthChooser(jMonthChooser0);
      jDayChooser1.getDay();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2217157976624438
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      Color color0 = Color.BLACK;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color1 = Color.cyan;
      jDayChooser0.setWeekdayForeground(color1);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.CHINESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      TimeZone timeZone0 = mockSimpleDateFormat0.getTimeZone();
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(timeZone0);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      AbstractDocument.LeafElement abstractDocument_LeafElement0 = defaultStyledDocument0.new LeafElement(element0, (AttributeSet) null, 3, (-1702));
      Object object0 = new Object();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getNavigationFilter();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.225562848246708
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getAutoscrolls();
      jDayChooser0.setMaxDayCharacters(3208);
      StyleContext styleContext0 = new StyleContext();
      JTextPane jTextPane0 = new JTextPane();
      Style style0 = jTextPane0.getLogicalStyle();
      Color color0 = styleContext0.getBackground(style0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3208;
      floatArray0[1] = (float) 3208;
      floatArray0[2] = 1283.103F;
      jTextPane0.getNavigationFilter();
      floatArray0[3] = (float) 3208;
      color0.getColorComponents(floatArray0);
      jDayChooser0.setForeground(color0);
      jDayChooser0.setMinimumSize((Dimension) null);
      jDayChooser0.setDay((-2061));
      jDayChooser0.getMaxSelectableDate();
      Date date0 = jDayChooser0.maxSelectableDate;
      jDayChooser0.setMaxSelectableDate(date0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.230945648255616
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(800);
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 800;
      floatArray0[1] = (float) 800;
      floatArray0[2] = (float) 800;
      floatArray0[3] = (float) 800;
      floatArray0[4] = (float) 800;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 800;
      floatArray0[7] = (float) 800;
      floatArray0[8] = (float) 800;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.updateUI();
      int int0 = 0;
      jDayChooser0.setLocation(0, 0);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxSelectableDate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/day0.tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "m%h,f=gw,F,%?pzh");
      MockFile.createTempFile("m%h,f=gw,F,%?pzh", "substring-before", (File) null);
      TransformerIdentityImpl transformerIdentityImpl0 = new TransformerIdentityImpl(true);
      transformerIdentityImpl0.getOutputProperties();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.340934762391931
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 800;
      floatArray0[2] = (float) 800;
      floatArray0[3] = (float) 800;
      floatArray0[4] = (float) 800;
      floatArray0[6] = (float) 800;
      floatArray0[7] = (float) 800;
      floatArray0[8] = (float) 800;
      color0.getRGBColorComponents(floatArray0);
      jDayChooser0.updateUI();
      jDayChooser0.setLocation(0, 0);
      jDayChooser0.setFont((Font) null);
      jDayChooser0.drawWeeks();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setYear(800);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setForeground(color0);
      Parser parser0 = new Parser();
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(800, 0, false);
      KeyStroke.getKeyStroke('^');
      jDayChooser0.unregisterKeyboardAction(keyStroke0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser1.setYearChooser((JYearChooser) null);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertTrue(boolean0);
      
      jDayChooser1.getWeekdayForeground();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.274211832727232
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initialized = false;
      jDayChooser0.setMonth(439);
      jDayChooser0.getSelectedDay();
      jDayChooser0.getWeekdayForeground();
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.332859483017785
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setMaxDayCharacters(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 63741, 11L, (-592), 0, '6', 0);
      KeyEvent.getExtendedKeyCodeForChar(0);
      InputEvent.getModifiersExText(0);
      keyEvent0.consume();
      jDayChooser0.keyReleased(keyEvent0);
      boolean boolean1 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean1 == boolean0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      PDFResources pDFResources0 = new PDFResources(0);
      PDFPage pDFPage0 = new PDFPage(pDFResources0, 0, 705);
      pDFPage0.getDocument();
      pDFResources0.setObjectNumber(3218);
      EmptyBorder emptyBorder0 = new EmptyBorder(164, 0, 8658, 0);
      jDayChooser_DecoratorButton0.setBorder(emptyBorder0);
      PDFGraphics2D pDFGraphics2D0 = new PDFGraphics2D(true, (FontInfo) null, (PDFDocument) null, pDFPage0, "searchresults", (String) null, (-1166.4054F));
      MultiByteFont multiByteFont0 = new MultiByteFont();
      org.apache.fop.fonts.Font font0 = new org.apache.fop.fonts.Font((String) null, multiByteFont0, 0);
      pDFGraphics2D0.setOverrideFontState(font0);
      jDayChooser_DecoratorButton0.paint(pDFGraphics2D0);
      jDayChooser0.setDecorationBackgroundVisible(true);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2054857020763965
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setYear(0);
      BrowseMode browseMode0 = new BrowseMode();
      // Undeclared exception!
      try { 
        browseMode0.createModeController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2311615146062307
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(13);
      jDayChooser0.setDay(10);
      jDayChooser0.setDay((-1758));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      MindMapMode mindMapMode0 = new MindMapMode();
      mindMapMode0.getController();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2647411367325585
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.selectedDay = (JButton) jDayChooser_DecoratorButton0;
      int int0 = SwingConstants.PREVIOUS;
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMaxDayCharacters(26);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.isDecorationBackgroundVisible();
      Locale locale0 = new Locale("day", "month", "org.apache.html.dom.HTMLFontElementImpl");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getDaysInMonth();
      PipedInputStream pipedInputStream0 = new PipedInputStream(802);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Properties properties0 = FreeMind.props;
      Properties properties1 = FreeMindApplet.userProps;
      Color color0 = Color.cyan;
      Color color1 = Color.RED;
      Parser parser0 = new Parser();
      KeyStroke.getKeyStroke(90, 90, false);
      parser0.parseSelectors("P1i");
      parser0.getLocale();
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.261471373183075
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.grabFocus();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 323, 323, 323, 323, 'M');
      keyEvent0.consume();
      keyEvent0.setKeyCode(3363);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(14);
      jDayChooser0.setDay(14);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(376);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.150964732980717
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Properties properties0 = FreeMind.props;
      Properties properties1 = FreeMindApplet.userProps;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      boolean boolean0 = new Boolean("day");
      OsmFileCacheTileLoader.getDefaultCacheDir();
      MockFile.createTempFile("day", (String) null);
      Properties properties2 = FreeMind.props;
      FreeMind freeMind0 = null;
      try {
        freeMind0 = new FreeMind((Properties) null, (Properties) null, (File) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2920635230398947
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 3363, 0L, 3363, 3363, ':');
      keyEvent0.consume();
      keyEvent0.setKeyCode(3363);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser_DecoratorButton0.getPressedIcon();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMaxDayCharacters(3363);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1758));
      jDayChooser0.setDay((-1949));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.addMouseListener((MouseListener) null);
      jDayChooser0.getDecorationBackgroundColor();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.2401873239899905
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 0;
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.isPaintingForPrint();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.addAncestorListener(ancestorListener0);
      jDayChooser0.getFocusTraversalPolicy();
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.getBorder();
      jDayChooser0.addMouseWheelListener((MouseWheelListener) null);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setSize(0, 0);
      jDayChooser0.initDecorations();
      jDayChooser0.isWeekOfYearVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2307844118023574
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-473), (-1L), 90, 90, '.', 0);
      jDayChooser0.firePropertyChange("+", (-1L), (-1L));
      keyEvent0.getExtendedKeyCode();
      jDayChooser0.keyTyped(keyEvent0);
      jDayChooser0.getDayPanel();
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date0);
      ActionEvent actionEvent0 = new ActionEvent(keyEvent0, 1467, "g8ZUg");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.event.KeyEvent cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.240292978874181
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(37);
      jDayChooser0.setFocus();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Properties properties0 = FreeMind.props;
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      defaultStyledDocument0.getDefaultRootElement();
      Object object0 = new Object();
      StyleContext.getDefaultStyleContext();
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getNavigationFilter();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getBackgroundSelectionColor();
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 37;
      floatArray0[1] = (float) 37;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 37;
      floatArray0[4] = (float) 37;
      floatArray0[5] = (float) 3;
      floatArray0[6] = (float) 3;
      floatArray0[7] = (float) 37;
      color0.getComponents(floatArray0);
      color0.getColorComponents((float[]) null);
      jDayChooser0.setDayBordersVisible(false);
      Color color1 = new Color(37);
      jDayChooser0.setForeground(color1);
      jDayChooser0.setMinimumSize((Dimension) null);
      jDayChooser0.isDayBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }
}
