/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:31:01 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.158491982830073
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getQSObjectPoolMaker();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTrafficClass("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings1.setCharset("");
      advancedSettings0.setByteBufferSize(1450);
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-1886), advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals((-1886), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.4530014063936125
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketReceiveBufferSize(502);
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      assertEquals((-1886), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2265351295364386
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1805);
      advancedSettings0.setClientSocketReceiveBufferSize(1805);
      advancedSettings0.setPerformancePreferencesBandwidth((-1408));
      advancedSettings0.setSocketLinger((-1408));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("|&H;!zkh6!$&mua");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-654));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setPerformancePreferencesLatency((-1466));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass(">8b");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getSocketLinger();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-1466), advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4030604410669008
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.setPerformancePreferencesBandwidth((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketReceiveBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth((-2514));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency(1450);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("`U1FH$JvY&]");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // `U1FH$JvY&]
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.914841410560379
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesBandwidth(2332);
      advancedSettings0.getCharset();
      advancedSettings0.setPerformancePreferencesBandwidth((-11));
      advancedSettings0.setPerformancePreferencesBandwidth(2332);
      advancedSettings0.setClientSocketSendBufferSize(26);
      advancedSettings0.setSocketLinger(47);
      advancedSettings0.setClientSocketReceiveBufferSize((-654));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setByteBufferSize(29);
      assertEquals(2332, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1186254494125194
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketReceiveBufferSize(502);
      advancedSettings0.setClientSocketSendBufferSize(1160);
      int int0 = 730;
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency(1450);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("rUH1Y':UV,!");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // rUH1Y':UV,!
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2494305902465603
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      boolean boolean0 = false;
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setPerformancePreferencesBandwidth(2332);
      advancedSettings0.getCharset();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(2332);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog(2332);
      advancedSettings0.setByteBufferSize(65536);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("qpx_:<)uvdPM]x/o");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qpx_:<)uvdPM]x/o
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.009697439439378
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.setClientSocketSendBufferSize(1450);
      assertEquals((-1886), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1878));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize((-1));
      assertEquals((-1878), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3276323700617536
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass(")a%FL_S?OY[y#*u'=1");
      advancedSettings0.toXML("-1<CO>bb n!p");
      advancedSettings0.toXML("-1<CO>bb n!p");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.5353865202004258
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketTrafficClass("p:rvH8");
      advancedSettings0.setMaxThreadsForNioWrite(572);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketReceiveBufferSize(572);
      assertEquals(572, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("uV:duTW");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // uV:duTW
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0881908159886837
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1408));
      advancedSettings0.setSocketLinger((-1408));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("|&H;!zkh6!$&mua");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      advancedSettings0.setPerformancePreferencesBandwidth((-677));
      advancedSettings0.setClientSocketSendBufferSize(913);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesBandwidth(4675);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketTrafficClass(">8b");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize((-1));
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.7429545693685697
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("o,f0PEX;b>");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setBacklog(1082);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("o,f0PEX;b>");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesConnectionTime(1082);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setBacklog(10);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.toXML("f;}#! ");
      advancedSettings0.setPerformancePreferencesBandwidth((-2770));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("f;}#! ");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketSendBufferSize();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals("o,f0PEX;b>", advancedSettings0.getClientIdentifier());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1873727219717733
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-677));
      advancedSettings0.setSocketLinger((-1408));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("|&H;!zkh6!$&mua");
      advancedSettings0.setPerformancePreferencesLatency((-1408));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency((-1408));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("W6 Y._zQ$'Dhp8at6");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setSocketLinger((-1408));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setCharset((String) null);
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-1408), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setPerformancePreferencesLatency((-4189));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesLatency(631);
      advancedSettings0.setQSObjectPoolMaker(")+s*3Ht!|eVINMv7yS");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertEquals(631, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.04497334728722
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency(1450);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<backlog>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<backlog>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0115830459761472
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger((-677));
      advancedSettings0.setPerformancePreferencesBandwidth((-1408));
      advancedSettings0.setSocketLinger((-1408));
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("|&H;!zkh6!$&mua");
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-654));
      advancedSettings0.setClientSocketSendBufferSize(913);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-654));
      advancedSettings0.setPerformancePreferencesBandwidth(1160);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setMaxThreadsForNioWrite((-654));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientIdentifier("");
      assertEquals((-654), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0774620515710067
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite(730);
      advancedSettings0.setClientSocketTrafficClass("org.quickserver.util.pool.MakeQSObjectPool");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTrafficClass("</client-socket-tcp-no-delay>\n");
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.getQSObjectPoolMaker();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setQSObjectPoolMaker("");
      advancedSettings1.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("!lljF\"RZ}bhxq~c2");
      advancedSettings0.getClientSocketSendBufferSize();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("</debug-non-blocking-mode>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </debug-non-blocking-mode>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.6241026221599717
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("XZ?fp");
      advancedSettings0.setClientSocketReceiveBufferSize(36);
      advancedSettings1.setClientSocketSendBufferSize(1160);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings1.setByteBufferSize(1647);
      int int0 = advancedSettings1.getMaxThreadsForNioWrite();
      assertEquals("XZ?fp", advancedSettings1.getClientIdentifier());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2381531034180036
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketSendBufferSize((-2259));
      advancedSettings0.setClientSocketReceiveBufferSize((-1716));
      advancedSettings0.setMaxThreadsForNioWrite((-2259));
      advancedSettings0.setBacklog((-2259));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setPerformancePreferencesConnectionTime(1845);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setPerformancePreferencesBandwidth((-4131));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setClientSocketSendBufferSize(0);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("o`");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // o`
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.754627133386218
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketReceiveBufferSize(2126);
      advancedSettings0.setClientIdentifier("60J3a$0OBxZj#ni#(");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesBandwidth(1160);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      assertEquals("60J3a$0OBxZj#ni#(", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.994205922736906
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientSocketReceiveBufferSize(1010);
      advancedSettings0.setClientSocketReceiveBufferSize(1010);
      advancedSettings0.setClientSocketSendBufferSize(337);
      advancedSettings0.setClientSocketSendBufferSize(1010);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setCharset("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency(730);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize((-3448));
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.net.server.impl.OptimisticClientIdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.net.server.impl.OptimisticClientIdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.482410559484441
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setClientSocketSendBufferSize((-1886));
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.toXML(".>#>B5#NkmOxv");
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals((-1886), advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.3039214422364647
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(565);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(1193);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesConnectionTime((-1578));
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setByteBufferSize(10);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.9713931362744876
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(565);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-2201));
      advancedSettings0.setClientSocketSendBufferSize((-2201));
      advancedSettings0.setClientSocketSendBufferSize(2028);
      advancedSettings0.setSocketLinger((-2201));
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientSocketSendBufferSize(10);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-2201), advancedSettings0.getSocketLinger());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.430505841533111
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
      
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setByteBufferSize((-613));
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4309786547718817
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketReceiveBufferSize(42);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.toXML("");
      advancedSettings0.getClientIdentifier();
      assertEquals(42, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("\t<max-threads-for-nio-write>");
      advancedSettings0.setClientIdentifier("A^");
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals("A^", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getBacklog();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, int0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.454482887875094
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("5{tmRSqTJd[vDG?GA");
      assertEquals("5{tmRSqTJd[vDG?GA", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1196150585169233
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("XZ?fp");
      advancedSettings0.setClientSocketReceiveBufferSize(36);
      advancedSettings1.setClientSocketSendBufferSize(1160);
      advancedSettings1.setClientSocketSendBufferSize(1160);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.getSocketLinger();
      advancedSettings0.setClientIdentifier("~8\"d0A_qZOE%,");
      advancedSettings1.setCharset((String) null);
      advancedSettings1.getClientIdentifier();
      advancedSettings1.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setSocketLinger(1);
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      assertEquals("~8\"d0A_qZOE%,", advancedSettings0.getClientIdentifier());
      
      advancedSettings1.setCharset("");
      assertEquals(0, advancedSettings1.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.174834213558677
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-2924));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setSocketLinger((-139));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setPerformancePreferencesLatency((-2924));
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setMaxThreadsForNioWrite((-139));
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize((-139));
      assertEquals((-139), advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.9619408850766493
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("URyqbuYm~YF");
      assertEquals("URyqbuYm~YF", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5782737395252497
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-1886));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-1886));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setClientSocketSendBufferSize(1160);
      advancedSettings0.setClientSocketSendBufferSize(730);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("inz#i4 v?Enkk");
      assertEquals((-1886), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-892));
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("kFEoa_qW");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // kFEoa_qW
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }
}
