/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:32:12 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.406843574312277
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range.of(65535L, 65535L);
      long long0 = (-164L);
      // Undeclared exception!
      try { 
        Range.ofLength((-164L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.788671218840963
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      Range range1 = Range.ofLength(1L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 78L);
      range2.intersects(range0);
      Range range3 = Range.ofLength(560L);
      List<Range> list0 = range2.complement(range3);
      range2.complementFrom(list0);
      range2.equals(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("p=K@at");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.p=K@at
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.06171135749803
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(4582L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of(4582L, 4582L);
      range2.complement(range1);
      range1.getBegin();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.build();
      Range.of(255L, 4582L);
      Range range3 = Range.of((-2518L));
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.964555179322044
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range2 = range0.asRange();
      range2.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 1L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range1.intersects(range2);
      long long1 = 317L;
      range_Builder0.expandEnd(317L);
      range2.forEach(consumer0);
      range_Builder0.build();
      Object object0 = new Object();
      range1.equals("[ -1 .. 0 ]/SB");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ -1 .. 0 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ -1 .. 0 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3123058872862816
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.14179300361795
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-4294934527L), 65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = range_Builder2.build();
      range0.equals(range_Builder1);
      Range range1 = Range.of(8L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-4294934527L), 679L);
      Range range3 = Range.ofLength(1504L);
      List<Range> list0 = range2.complement(range3);
      range0.complementFrom(list0);
      Object object0 = new Object();
      range3.equals("Tqw8PCW~pZ+");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Tqw8PCW~pZ+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Tqw8PCW~pZ+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.127675299370158
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 4160L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 1511L;
      Range.Builder range_Builder2 = new Range.Builder((-32768L), 1511L);
      Range range0 = range_Builder1.build();
      String string0 = "Tqw8PCW~pZ+";
      range0.equals(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(560L);
      range1.startsBefore(range0);
      long long1 = 408L;
      Range.of(range_CoordinateSystem0, 408L, 1511L);
      Range range2 = Range.ofLength(1511L);
      List<Range> list0 = range2.complement(range0);
      range0.complementFrom(list0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("-lT+4G(:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.-lT+4G(:
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.067771031178559
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      range0.iterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      range1.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range2 = range0.asRange();
      range2.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem3, 0L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem4, 0L, 0L);
      Range.of(1L, 1L);
      Range.of(9223372034707292142L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(32767L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8452653842753346
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range2 = range0.asRange();
      range1.iterator();
      Range range3 = Range.parseRange("[ 0 .. 0 ]/RB", range_CoordinateSystem2);
      range2.endsBefore(range0);
      range3.toString(range_CoordinateSystem0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.802954831723216
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.ofLength(1L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 78L);
      range2.intersects(range0);
      Range range3 = Range.ofLength(560L);
      List<Range> list0 = range2.complement(range3);
      range2.complementFrom(list0);
      range2.equals(range3);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("p=K@at");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.p=K@at
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.530435392020871
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      long long0 = (-964L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder0.expandBegin((-964L));
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.20513938217534
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 1L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem3, 0L, 255L);
      Range range1 = Range.of((-869L));
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      String string0 = "+GeYUos";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("+GeYUos");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.+GeYUos
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.446290125546826
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-124L);
      Range.of(range_CoordinateSystem0, (-270L), (-124L));
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.8747389494952307
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range1.getEnd(range_CoordinateSystem0);
      range1.intersects(range0);
      long long0 = (-32768L);
      range_Builder0.copy();
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem1, (-32768L), 2147483647L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      range_Builder3.copy();
      long long1 = (-270L);
      range0.equals(range_Builder0);
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder((-270L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.021467085725381
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), (-1L));
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem2);
      assertEquals("[ -1 .. 0 ]/SB", string0);
      
      Range range2 = range0.asRange();
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem3, 1L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range range3 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem4, 0L, 255L);
      assertNotSame(range4, range3);
      
      Range range5 = Range.of((-124L), 1L);
      Range range6 = Range.of((-1L));
      assertFalse(range6.isEmpty());
      assertSame(range6, range0);
      
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem5 = Range.CoordinateSystem.SPACE_BASED;
      Range range7 = Range.of(range_CoordinateSystem5, (-124L), 1L);
      assertNotSame(range7, range5);
      assertFalse(range7.isEmpty());
      
      Range range8 = Range.ofLength(826L);
      assertNotSame(range8, range4);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.9792243951750264
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = 4582L;
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      long long1 = (-964L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder0.expandBegin((-964L));
      range_Builder0.expandEnd(4582L);
      Range range1 = range0.asRange();
      Object object0 = new Object();
      range1.endsBefore(range1);
      Range range2 = Range.of((-2147483648L), 4582L);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.687745704633186
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      long long1 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      Range.ofLength(0L);
      range0.spliterator();
      range1.isEmpty();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Tqw8PCW~pZ+", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Tqw8PCW~pZ+ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2182034584016375
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.867067251897479
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      long long0 = 3889L;
      Range range0 = Range.of((-1711L), 3889L);
      Range range1 = range0.asRange();
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range0.toString();
      range1.toString();
      range0.endsBefore(range1);
      Range.of(3889L);
      range0.endsBefore(range1);
      Range.parseRange("[ -1711 .. 3889 ]/0B");
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.8904503349501196
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getBegin(range_CoordinateSystem0);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 1L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.of(1L, 1L);
      long long0 = 849L;
      long long1 = 2147483647L;
      Range range1 = Range.ofLength(220L);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.8401565825952915
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.build();
      long long0 = (-32768L);
      Range range1 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem1, 560L, 2147483647L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      range_Builder3.copy();
      long long1 = (-270L);
      range_Builder4.build();
      range1.asRange();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.724676881978023
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 37L);
      Range range1 = Range.ofLength(1L);
      range1.intersects(range0);
      range0.isEmpty();
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("max cluster distance can not be negative");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.max cluster distance can not be negative
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.750799749885654
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of(3564L);
      range0.equals("");
      Range range1 = Range.ofLength(3564L);
      range1.endsBefore(range0);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem0);
      String string0 = "V%~&X@[";
      Object object0 = new Object();
      Long.getLong("V%~&X@[");
      range2.equals((Object) null);
      Collection<Range> collection0 = null;
      long long0 = (-2147483648L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.7728262110825472
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 4160L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = range_Builder0.build();
      String string0 = "Tqw8PCW~pZ+";
      range0.equals(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(1504L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854775808L), 1504L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.7309305227549427
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-2623L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-26L);
      Range range1 = Range.of(range_CoordinateSystem0, (-26L), (-26L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      String string0 = "wax=\\`P";
      List<Range> list0 = new LinkedList<Range>();
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.split((-2623L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.4560662098602
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(4582L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range range1 = Range.ofLength(4582L);
      Object object0 = new Object();
      range1.equals(object0);
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("'3EIfp[RA>x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse '3EIfp[RA>x into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.564038109214902
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-241L));
      range_Builder0.expandEnd((-241L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.59532489999296
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range range0 = Range.ofLength(0L);
      long long1 = 127L;
      range0.startsBefore(range0);
      range0.getLength();
      range_Builder0.copy();
      String string0 = "unable to delete ";
      // Undeclared exception!
      try { 
        Range.parseRange("unable to delete ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse unable to delete  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.723177429213419
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.ofLength(1L);
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 78L);
      Range range1 = Range.ofLength(0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("p=K@at");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.p=K@at
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.032419461771765
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(4582L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of(4582L, 4582L);
      List<Range> list0 = range2.complement(range1);
      Object object0 = new Object();
      range0.equals(object0);
      range1.getBegin();
      Object object1 = new Object();
      range1.equals(range0);
      long long0 = (-2147483648L);
      long long1 = 4294967295L;
      long long2 = (-2111L);
      Range.of((-2147483648L), (-2111L));
      range1.complementFrom(list0);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("invalid startOffset %d: file is only %d bytes");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.invalid startOffset %d: file is only %d bytes
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.743480153667177
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of(0L);
      Iterator<Long> iterator0 = range0.iterator();
      range0.equals(iterator0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range range1 = Range.of(0L);
      range1.split(1L);
      range0.getEnd();
      Range.ofLength(29L);
      range1.toString();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2507L, (-377L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.7114252231860636
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      long long0 = 3564L;
      Range range0 = Range.of(3564L);
      String string0 = "";
      range0.equals("");
      Range range1 = Range.ofLength(3564L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.endsBefore(range1);
      range1.intersection(range0);
      range0.getEnd(range_CoordinateSystem0);
      String string1 = "V%~&X@[";
      Object object0 = new Object();
      range0.equals("V%~&X@[");
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.9861139714840554
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range range0 = Range.ofLength(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder0.expandBegin((-964L));
      Range.Builder range_Builder1 = range_Builder0.expandEnd(4582L);
      Range range1 = range0.asRange();
      Object object0 = new Object();
      range1.equals(range_Builder1);
      long long0 = (-2147483648L);
      Range range2 = Range.of((-2147483648L), 4582L);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.344292841368524
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.692424041737988
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = 3564L;
      Range range0 = Range.of(3564L);
      String string0 = "";
      range0.intersects(range0);
      Range range1 = Range.ofLength(3564L);
      range0.endsBefore(range1);
      range1.intersection(range0);
      long long1 = new Long(3564L);
      Object object0 = new Object();
      range0.equals("V%~&X@[");
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.642430945485869
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-2041L);
      long long1 = 0L;
      Range.of(range_CoordinateSystem0, (-2041L), 0L);
      long long2 = 2147483647L;
      Range.of(2147483647L);
      // Undeclared exception!
      try { 
        Range.parseRange("Q\"E<!r9?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q\"E<!r9? into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6247244477696388
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L), (-1L));
      Range.of(4294967295L);
      String string0 = "OF`GR";
      // Undeclared exception!
      try { 
        Range.parseRange("OF`GR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse OF`GR into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.900352512526469
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 4160L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder1);
      Range range1 = Range.of((-32768L));
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(1391L);
      // Undeclared exception!
      try { 
        range2.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.030095070097129
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-964L));
      range_Builder0.expandEnd(4582L);
      range0.asRange();
      Object object0 = new Object();
      range0.isSubRangeOf(range0);
      Range range1 = Range.of((-2147483648L), 4582L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      range_Builder3.copy();
      long long0 = 255L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4582L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.927543249631611
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      range_Builder0.build();
      Range range1 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem1, 560L, 2147483647L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      range_Builder3.shift(2030L);
      range1.startsBefore(range0);
      Range range2 = range_Builder3.build();
      range2.isSubRangeOf(range1);
      range_Builder0.shift((-32768L));
      range_Builder0.contractBegin((-270L));
      Range.Builder range_Builder5 = new Range.Builder(range_CoordinateSystem1, 1L, 4294967295L);
      range_Builder5.expandEnd(1L);
      range_Builder5.shift(9223372036854775807L);
      Range.Builder range_Builder6 = range_Builder2.expandBegin(3602L);
      assertSame(range_Builder2, range_Builder6);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.6201330657144832
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      long long0 = 0L;
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.8094542096059723
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(1L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      range0.startsBefore(range1);
      Range range2 = Range.of(range_CoordinateSystem0, 0L, 78L);
      Range range3 = Range.ofLength(560L);
      List<Range> list0 = range2.complement(range3);
      range2.complementFrom(list0);
      String string0 = "p=K@at";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("p=K@at");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.p=K@at
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.3199165199309264
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      String string0 = "org.jcvi.jillion.core.Range$UnsignedIntStartLongLengthRange";
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      linkedList0.poll();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.9197339463838223
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 8L;
      Range range0 = Range.ofLength(8L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem2, (-2147483648L), (-2147483648L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6098090784162165
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 0L);
      Range range1 = Range.ofLength(39L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.203550052288838
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.ofLength(175L);
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      String string0 = "ol5Qjm?W#jd;'~";
      Range.ofLength(1L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("9}]*yQ~TyD;", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 9}]*yQ~TyD; into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.5555118517201127
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 4160L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.build();
      long long0 = (-32768L);
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 2147483647L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long2 = 1645L;
      long long3 = (-440L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(range_CoordinateSystem1, 1645L, (-440L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.647826624623992
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      long long0 = 4160L;
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 4160L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 1504L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.4145644662987675
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.769076900634118
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(1L);
      range1.intersects(range0);
      range0.startsBefore(range1);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = range_Builder0.shift(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.8622210524334863
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of(3564L);
      range0.intersects(range0);
      Range range1 = Range.ofLength(3564L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.endsBefore(range1);
      Range range2 = range1.intersection(range0);
      Long long0 = new Long(3564L);
      Object object0 = new Object();
      range0.equals("V%~&X@[");
      range1.complement(range0);
      range2.getBegin(range_CoordinateSystem0);
      range1.getEnd();
      range0.complement(range1);
      range2.split(3564L);
      Range range3 = Range.ofLength(126L);
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(object2);
      String string0 = null;
      Long long1 = new Long(3564L);
      range3.equals(long1);
      // Undeclared exception!
      try { 
        Range.parseRange("@X}?:^x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse @X}?:^x into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.2855456616065446
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 283L;
      Range range0 = Range.of(283L);
      range0.iterator();
      // Undeclared exception!
      try { 
        Range.parseRange("}|-blUIm5", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse }|-blUIm5 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4575095239252036
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.7400105429034434
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 127L;
      range_Builder0.expandBegin(127L);
      range_Builder0.contractEnd(127L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(127L);
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.ofLength(0L);
      range1.getEnd();
      range1.iterator();
      range0.getLength();
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.9589833641338106
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 127L;
      range_Builder0.expandBegin(127L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(127L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range range0 = Range.ofLength(127L);
      Range range1 = Range.ofLength(0L);
      range1.getEnd();
      range0.iterator();
      range0.getLength();
      range0.getLength();
      range0.split(127L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=4.021067034764655
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.of(3564L);
      Range range1 = Range.ofLength(3564L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      range0.endsBefore(range1);
      range1.getEnd(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complementFrom(list1);
      range1.complement(range1);
      range1.getBegin(range_CoordinateSystem1);
      range1.getEnd();
      range1.complement(range1);
      range0.split(1L);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9434206579469144
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.ofLength(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range1 = range_Builder0.build();
      List<Range> list0 = range1.split(2080L);
      range1.complementFrom(list0);
      long long0 = (-32768L);
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder4 = new Range.Builder(range_CoordinateSystem1, 560L, 2147483647L);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.9165443765898105
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      long long0 = 4582L;
      Range range0 = Range.of(4582L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.of(4582L);
      long long1 = (-964L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder0.expandBegin((-964L));
      range_Builder0.expandEnd(4582L);
      Range range1 = range0.asRange();
      Object object0 = new Object();
      Range.of((-964L), (-964L));
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6398783698628634
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin();
      Range range1 = Range.of(range_CoordinateSystem1, (-2147483648L), (-2147483648L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.of(373L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.864987269129567
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.build();
      range_Builder0.build();
      Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem1, 560L, 2147483647L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      long long0 = (-270L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      range_Builder3.copy();
      range_Builder3.build();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-2245L);
      Range.of(range_CoordinateSystem2, (-2245L), 34178L);
      // Undeclared exception!
      try { 
        Range.of(560L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift(0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(127L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1262L), 2255L);
      range_Builder0.contractEnd(2255L);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd((-1262L));
      long long0 = (-3674L);
      range_Builder0.contractBegin((-3674L));
      range_Builder0.expandBegin(2255L);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.08332035538405
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(9223372036854771226L);
      Object object0 = new Object();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.w
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1325L, 1325L);
      range_Builder0.shift(1325L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1325L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }
}
