/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:31:31 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.417715857393759
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "INSTANCE";
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.valueOf("INSTANCE");
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)3;
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte)14;
      byte byte1 = (byte) (-3);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 1060L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.200940595860762
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 12);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byte byte0 = (byte)90;
      Byte byte1 = new Byte((byte)90);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-1110));
      Range range0 = Range.ofLength(0);
      range0.split(910L);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      // Undeclared exception!
      try { 
        linkedList1.subList((-1), (byte)90);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9322543999524546
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGapOffsets(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getNumberOfGapsUntil(byteArray0, (byte)0);
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)75;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte)0;
      byteArray1[3] = (byte)0;
      defaultNucleotideCodec4.getGappedOffsetFor(byteArray1, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getUngappedOffsetFor(byteArray0, 32);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.getUngappedLength(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      byte[] byteArray0 = new byte[5];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor((byte[]) null, 2118066063);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-4);
      byteArray0[0] = (byte) (-4);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.922496759508184
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 35);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      Byte byte0 = new Byte((byte) (-28));
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-28);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.087736921906913
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (-921863163));
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGapOffsets(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-40);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray2, 1840700269);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (byte)0);
      assertEquals(0, int0);
      
      long long0 = defaultNucleotideCodec1.getUngappedLength(byteArray0);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.122928297357194
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.isGap(byteArray0, (byte)124);
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)96}, byteArray1);
      
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide1 = defaultNucleotideCodec1.decode(byteArray0, (byte)5);
      assertEquals(Nucleotide.Gap, nucleotide1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.181090955737749
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-921863163));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2089443549);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.encode(570752883, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0570128495250297
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (byte) (-2));
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedLength(byteArray0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 755);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec3.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-2), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1049922791552103
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Byte byte0 = new Byte((byte)90);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Range range0 = Range.of((long) 0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.parseRange("[ 0 .. 1 ]/SB");
      range0.endsBefore(range1);
      range0.split(810L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1754506052149534
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      Nucleotide nucleotide1 = Nucleotide.Keto;
      defaultNucleotideCodec0.toString(byteArray0);
      defaultNucleotideCodec0.iterator(byteArray0);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getGapOffsets(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)0;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (-409));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8212736032097925
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[0] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 256);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)35;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-57);
      byteArray1[6] = (byte)72;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedLength(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte byte0 = (byte) (-40);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)2, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)72;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.isGap(byteArray0, 1015);
      byte byte1 = (byte)5;
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Strong;
      defaultNucleotideCodec0.encode(nucleotide0);
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      linkedList0.parallelStream();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      linkedList0.add(nucleotide1);
      linkedList0.spliterator();
      linkedList0.addAll(0, (Collection<? extends Nucleotide>) linkedList1);
      Iterator<Nucleotide> iterator0 = linkedList1.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-28), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.17800881673328
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)35;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      byte[] byteArray1 = new byte[9];
      defaultNucleotideCodec0.toString(byteArray1);
      defaultNucleotideCodec0.decode(byteArray1, 4L);
      byteArray1[0] = (byte) (-55);
      byteArray1[1] = (byte)13;
      byteArray1[2] = (byte)124;
      byteArray1[3] = (byte)5;
      byteArray1[4] = (byte) (-119);
      byte byte0 = (byte) (-59);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray1, (byte) (-55));
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 114);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.decode(byteArray1, 18L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 18 corresponds to encodedIndex 13  encodedglyph length is 9
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-69);
      byte byte0 = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)35;
      byte byte1 = (byte) (-27);
      byteArray0[3] = (byte) (-27);
      byte byte2 = (byte)19;
      byteArray0[4] = (byte)19;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)35);
      byteArray0[5] = (byte)101;
      byteArray0[6] = (byte) (-80);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)35;
      byteArray1[1] = (byte)101;
      byteArray1[2] = (byte)12;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1337941717205218
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 12);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Byte byte0 = new Byte((byte)90);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      byte[] byteArray1 = new byte[6];
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-2308));
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.815301492400081
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)114;
      byteArray0[1] = (byte)114;
      Byte byte1 = new Byte((byte)114);
      byteArray0[1] = (byte) (-15);
      byte byte2 = (byte)4;
      byteArray0[2] = (byte) (-15);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.encode(3146, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[1] = (byte) (-15);
      byte byte0 = (byte)4;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)4;
      byteArray1[1] = (byte)4;
      byteArray1[2] = (byte)4;
      byteArray1[3] = (byte) (-15);
      byteArray1[4] = (byte)4;
      byteArray1[5] = (byte) (-15);
      byteArray1[6] = (byte) (-15);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.8606101898701155
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-40);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)26;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      Range.of(1600L);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 10);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, (byte) (-40));
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.iterator(byteArray0);
      Range range0 = Range.of(18L, 2903L);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec6.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)115;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 4 corresponds to encodedIndex 6  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0103904401323787
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 12);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)58;
      byteArray1[1] = (byte)58;
      byteArray1[2] = (byte)58;
      byteArray1[3] = (byte)58;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)14;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 88);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.350929997935829
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 2);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList1.descendingIterator();
      Nucleotide nucleotide0 = Nucleotide.Cytosine;
      linkedList1.add(nucleotide0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((-1), iterator0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 2863);
      assertEquals(0, int0);
      assertEquals(4, byteArray0.length);
      
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray1, 0);
      assertEquals(Nucleotide.Gap, nucleotide1);
      
      defaultNucleotideCodec0.iterator(byteArray1);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0}, byteArray1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.104765977724249
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = new byte[3];
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2342));
      assertEquals(3, int0);
      
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      Nucleotide nucleotide1 = Nucleotide.Keto;
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals("AGT", string0);
      
      defaultNucleotideCodec0.iterator(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.403763330235561
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)114;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2526));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3840426439721143
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 12);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Byte byte0 = new Byte((byte)90);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 1244);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[6];
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      defaultNucleotideCodec2.encode(nucleotide0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray1);
      Range range0 = Range.of((-2L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray1, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -2 .. -2 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)72;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-921863163));
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)72;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.04497334728722
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Purine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      String string0 = defaultNucleotideCodec1.toString(byteArray0);
      assertEquals("AG", string0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.iterator(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte)18}, byteArray0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1044261114050014
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = new byte[3];
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2342));
      byteArray1[0] = (byte)0;
      Nucleotide nucleotide1 = Nucleotide.Keto;
      defaultNucleotideCodec0.toString(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6379052446582465
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-28);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 2103657451);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-12);
      byteArray1[3] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec4.getNumberOfGaps(byteArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7662453439011845
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      byte[] byteArray0 = defaultNucleotideCodec1.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("org.jcvi.jillion.internal.core.util.Caches");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.org.jcvi.jillion.internal.core.util.Caches
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)48;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)71;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte) (-13);
      byteArray0[6] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-57);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, (-1443));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.628127199437479
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byte byte0 = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte)4;
      byte byte1 = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)58;
      byte byte2 = (byte)103;
      byteArray0[5] = (byte)103;
      byte byte3 = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      byte byte4 = (byte) (-101);
      byteArray0[7] = (byte) (-101);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2756304369699905
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-2);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.isGap(byteArray0, (byte) (-2));
      defaultNucleotideCodec0.isGap(byteArray0, 3);
      int int0 = defaultNucleotideCodec1.decodedLengthOf(byteArray0);
      assertEquals((-33554432), int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)96;
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte)13;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)76;
      byteArray0[3] = (byte)0;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte) (-90);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.510357617990278
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      byte byte1 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte2 = (byte)77;
      byteArray0[4] = (byte)77;
      byteArray0[5] = (byte) (-81);
      byte byte3 = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-34);
      byteArray0[8] = (byte) (-124);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.4179454785189023
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)72;
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte) (-57);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (byte)72);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)45;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Range range0 = Range.of((long) (byte)45);
      range0.spliterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-921863163));
      Range range0 = Range.ofLength(1739L);
      range0.split(4L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-1246L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1246
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6422165264472737
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)114;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)114);
      byte byte0 = (byte) (-15);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 1600L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1600 corresponds to encodedIndex 804  encodedglyph length is 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-57);
      byte byte1 = (byte) (-8);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.691477450899438
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-921863163));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2089443549);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      byte byte1 = (byte)14;
      byteArray0[1] = (byte)14;
      byte[] byteArray1 = new byte[4];
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)12, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)2;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5289351593295053
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-15);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-15);
      byte byte1 = (byte)9;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)58;
      byte byte2 = (byte)103;
      byteArray0[5] = (byte)103;
      byte byte3 = (byte) (-59);
      byteArray0[6] = (byte) (-59);
      byte byte4 = (byte) (-101);
      byteArray0[7] = (byte) (-101);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Byte byte5 = new Byte((byte)103);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      int int0 = 9;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (-43));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7980805884895408
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-57);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-921863170));
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3);
      int int1 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-3535));
      assertEquals((-3535), int1);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-956301312L), long0);
      
      defaultNucleotideCodec2.getNumberOfGaps(byteArray0);
      int int2 = defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.removeFirstOccurrence(defaultNucleotideCodec0);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Byte byte0 = new Byte((byte)90);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      Comparator<Nucleotide> comparator0 = (Comparator<Nucleotide>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      int int0 = 1397;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1397);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        linkedList1.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.removeFirstOccurrence(defaultNucleotideCodec0);
      Nucleotide nucleotide0 = Nucleotide.Guanine;
      linkedList0.add(nucleotide0);
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Byte byte0 = new Byte((byte)90);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      int int0 = 1397;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1397);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      // Undeclared exception!
      try { 
        linkedList1.pop();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }
}
