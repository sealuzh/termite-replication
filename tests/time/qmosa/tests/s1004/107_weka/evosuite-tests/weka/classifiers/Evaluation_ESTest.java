/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:24:05 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.Comparator;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.supportVector.StringKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Stacking;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.EuclideanDistance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.KernelEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9584163628972795
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      instances0.sort(comparator0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      AbstractClassifier.makeCopy(classifier0);
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMacroFmeasure();
      Evaluation.getGlobalInfo(stacking0);
      evaluation1.rootMeanSquaredError();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.toSummaryString(" ", true);
      // Undeclared exception!
      try { 
        evaluation1.recall(482);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 482
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.475316795791968
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      ZeroR zeroR0 = new ZeroR();
      evaluation0.KBMeanInformation();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.getRevision();
      MockRandom mockRandom0 = new MockRandom(1807L);
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances0, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      evaluation0.equals((Object) null);
      BallTree ballTree0 = new BallTree();
      int int0 = 29;
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      int int1 = 2978;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(29, intArray0, 2978);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setClassifier(lWL0);
      lWL0.setDebug(false);
      LWL lWL2 = new LWL();
      lWL1.getClassifier();
      try { 
        CostMatrix.parseMatlab(".arff");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setSeed((-1));
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals(costSensitiveClassifier0);
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[19];
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      Instance instance0 = BallNode.calcCentroidPivot(3, (-2), intArray0, instances0);
      try { 
        evaluation0.evaluationForSingleInstance((double[]) null, instance0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.751798965355081
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      instances0.sort(comparator0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      testInstances0.setNumRelationalNumeric((-568));
      AbstractClassifier.makeCopy(classifier0);
      double double0 = evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.unweightedMacroFmeasure();
      assertEquals(double1, double0, 0.01);
      
      String string0 = Evaluation.getGlobalInfo(stacking0);
      assertEquals("\nSynopsis for weka.classifiers.meta.Stacking:\n\nCombines several classifiers using the stacking method. Can do classification or regression.\n\nFor more information, see\n\nDavid H. Wolpert (1992). Stacked generalization. Neural Networks. 5:241-259.", string0);
      
      double double2 = evaluation1.rootMeanSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '!';
      charArray0[2] = '_';
      charArray0[3] = '\'';
      charArray0[4] = 't';
      charArray0[5] = 'x';
      charArray0[6] = 'W';
      charArray0[7] = 'M';
      charArray0[8] = '=';
      evaluation0.num2ShortID(32, charArray0, 2825);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.610473886009909
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setClassType((-2065));
      SparseInstance sparseInstance0 = new SparseInstance(27);
      testInstances0.setNumRelationalNominalValues(27);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      double double0 = evaluation0.weightedPrecision();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation0.avgCost();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      evaluation0.falsePositiveRate(6);
      double double3 = evaluation0.pctIncorrect();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8768164361849156
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals(costSensitiveClassifier0);
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[19];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 29;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 29);
      LWL lWL0 = new LWL();
      evaluation0.numFalseNegatives(2);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(testInstances0);
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = 6;
      intArray0[2] = 29;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2513.509137884), intArray0, 6);
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '8';
      charArray0[2] = ' ';
      charArray0[3] = ']';
      charArray0[4] = 'J';
      charArray0[5] = '?';
      charArray0[6] = '\\';
      charArray0[7] = '4';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(6, charArray0, (-197112209));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0615098824653293
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorAbsErr = 2.0;
      evaluation0.toSummaryString("", false);
      char[] charArray0 = new char[9];
      charArray0[0] = 'G';
      charArray0[1] = 'a';
      charArray0[2] = '\'';
      charArray0[3] = '3';
      charArray0[4] = 'X';
      charArray0[5] = '\'';
      charArray0[6] = 'a';
      charArray0[7] = '&';
      charArray0[8] = '^';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2), charArray0, 2549);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2);
      zeroR0.toString();
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 27;
      intArray0[2] = (-1372);
      intArray0[3] = 2;
      intArray0[4] = 6;
      intArray0[5] = 33;
      intArray0[6] = 0;
      intArray0[0] = 3;
      BallNode.calcCentroidPivot(18, 4, intArray0, instances0);
      boolean boolean0 = true;
      try { 
        Evaluation.evaluateModel("ZeroR: No model built yet.", testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name ZeroR: No model built yet..
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.1916014530643806
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals(costSensitiveClassifier0);
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[19];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 29;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 29);
      LWL lWL0 = new LWL();
      lWL0.setClassifier(costSensitiveClassifier0);
      lWL0.setDebug(false);
      double[] doubleArray0 = new double[2];
      LWL lWL1 = new LWL();
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0, intArray0, 31);
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6031518896517856
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      KernelEstimator kernelEstimator0 = new KernelEstimator(50.0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      stacking0.getMetaClassifier();
      Classifier classifier0 = AbstractClassifier.makeCopy(stacking0);
      double double0 = evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.unweightedMacroFmeasure();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 50.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (-2786.512);
      doubleArray0[4] = (-2786.512);
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-2);
      doubleArray0[8] = (double) (-1);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 804.7469577072);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      
      String string0 = Evaluation.getGlobalInfo(classifier0);
      assertEquals("\nSynopsis for weka.classifiers.meta.Stacking:\n\nCombines several classifiers using the stacking method. Can do classification or regression.\n\nFor more information, see\n\nDavid H. Wolpert (1992). Stacked generalization. Neural Networks. 5:241-259.", string0);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray1, 802.99237063);
      evaluation0.areaUnderPRC(2);
      LogitBoost logitBoost0 = new LogitBoost();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.5250500524858013
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      instances0.sort(comparator0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      Classifier classifier0 = stacking0.getMetaClassifier();
      Classifier classifier1 = AbstractClassifier.makeCopy(classifier0);
      evaluation0.KBMeanInformation();
      evaluation0.unweightedMacroFmeasure();
      Evaluation.getGlobalInfo(stacking0);
      MockRandom mockRandom0 = new MockRandom(1807L);
      try { 
        evaluation0.crossValidateModel(classifier1, instances0, (-1), (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.918815296819859
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(any() , any());
      instances0.sort(comparator0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Stacking stacking0 = new Stacking();
      evaluation0.weightedTrueNegativeRate();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte) (-9);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = (DecisionStump)lWL0.getClassifier();
      assertEquals("Class for building and using a decision stump. Usually used in conjunction with a boosting algorithm. Does regression (based on mean-squared error) or classification (based on entropy). Missing is treated as a separate value.", decisionStump0.globalInfo());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.437446182260611
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      KernelEstimator kernelEstimator0 = new KernelEstimator(53.6994851593744);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.assign(testInstances0);
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.runClassifier(multilayerPerceptron0, testInstances0.DEFAULT_WORDS);
      decisionStump0.getRevision();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      TestInstances testInstances2 = new TestInstances();
      LWL lWL0 = new LWL();
      AbstractClassifier.runClassifier(decisionStump0, testInstances1.DEFAULT_WORDS);
      DecisionStump decisionStump1 = (DecisionStump)lWL0.getClassifier();
      assertEquals("If set to true, classifier may output additional info to the console.", decisionStump1.debugTipText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(4814);
      KernelEstimator kernelEstimator0 = new KernelEstimator(2343.75188);
      kernelEstimator0.getCapabilities();
      StringKernel stringKernel0 = new StringKernel();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.getClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1477.74487);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3049602055757417
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorAbsErr;
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      instances0.lastIndexOf(testInstances1);
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1;
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      double double1 = evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(2, 6);
      evaluation0.numInstances();
      double double2 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.110530049832942
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump0);
      decisionStump0.getRevision();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(Double.NaN, (-2));
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      intArray0[0] = (-2);
      intArray0[1] = 31;
      intArray0[2] = 16;
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      intArray0[5] = 31;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(802.99237063, intArray0, (-2));
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 1;
      AbstractClassifier.makeCopies(classifier0, 3);
      doubleArray1[3] = (double) 3;
      doubleArray1[4] = (double) (-1);
      doubleArray1[5] = (double) 2;
      MockRandom mockRandom0 = new MockRandom(1);
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances0, 1392, (Random) mockRandom0, (Object[]) testInstances1.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9470932008547925
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      int int0 = 31;
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump0);
      evaluation0.toCumulativeMarginDistributionString();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSchemeEntropy;
      evaluation0.addNumericTrainClass(0.0, (-2));
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.nearestNeighbour(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4890027922505893
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals(costSensitiveClassifier0);
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 29;
      intArray0[5] = 2;
      intArray0[6] = 2;
      intArray0[7] = 29;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, intArray0, 2);
      LWL lWL0 = new LWL();
      lWL0.setClassifier(costSensitiveClassifier0);
      lWL0.setDebug(false);
      LWL lWL1 = new LWL();
      lWL0.getClassifier();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 29;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 29;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = (double) 0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 5.0);
      double double0 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3334495201618894
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals(costSensitiveClassifier0);
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[19];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 29;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 29);
      LWL lWL0 = new LWL();
      lWL0.setClassifier(costSensitiveClassifier0);
      lWL0.setDebug(false);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.7976931348623157E308;
      evaluation0.addNumericTrainClass((-1.0), 0);
      evaluation0.numInstances();
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.numInstances();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.numTrueNegatives(3589);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8528518784041514
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      int int0 = 1654;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1654);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.getCapabilities();
      AbstractClassifier.makeCopy(decisionStump0);
      evaluation0.toMatrixString("@relation");
      String string0 = "[f|";
      try { 
        Evaluation.handleCostOption("[f|", (-1));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3392962148590675
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toMatrixString();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(Double.NaN, (-2));
      double double0 = evaluation0.m_MaxTarget;
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(1724);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1724
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      KernelEstimator kernelEstimator0 = new KernelEstimator(3.141592653589793);
      kernelEstimator0.getCapabilities();
      LMT lMT0 = new LMT();
      Capabilities capabilities0 = lMT0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.assign(testInstances0);
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.runClassifier(lMT0, testInstances1.DEFAULT_WORDS);
      decisionStump0.getRevision();
      DatabaseLoader.main(testInstances1.DEFAULT_WORDS);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-28);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ConverterUtils.DataSource.read((InputStream) mockFileInputStream0);
      Instances instances0 = null;
      try {
        instances0 = new Instances((Instances) null, 35);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.009653988412479
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DecisionStump decisionStump0 = new DecisionStump();
      DecisionStump decisionStump1 = new DecisionStump();
      decisionStump0.getRevision();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      DecisionStump decisionStump2 = new DecisionStump();
      decisionStump1.getRevision();
      evaluation0.unclassified();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.06075971812573
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      KernelEstimator kernelEstimator0 = new KernelEstimator(50.0);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.assign(testInstances1);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.listOptions();
      decisionStump0.getRevision();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBMeanInformation();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 380;
      Instance instance0 = BallNode.calcCentroidPivot(380, 2, intArray0, instances0);
      double[] doubleArray0 = new double[1];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4031416180176828
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      KernelEstimator kernelEstimator0 = new KernelEstimator(50.0);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.RELATIONAL_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.runClassifier(multilayerPerceptron0, testInstances0.DEFAULT_WORDS);
      decisionStump0.getRevision();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.316808454615751
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      KernelEstimator kernelEstimator0 = new KernelEstimator(50.0);
      kernelEstimator0.getCapabilities();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.listOptions();
      decisionStump0.getRevision();
      evaluation0.addNumericTrainClass(50.0, 50.0);
      evaluation0.toSummaryString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P CA&lnK^%#Nz7m&+";
      stringArray0[1] = "weka/core/Capabilities.props";
      stringArray0[2] = "\nTotal Number of Instances                0     \n";
      stringArray0[3] = "weka/core/Capabilities.props";
      stringArray0[4] = "9171";
      stringArray0[5] = " ";
      stringArray0[6] = " ";
      stringArray0[7] = "@data";
      stringArray0[8] = ".arff";
      try { 
        evaluation0.crossValidateModel((String) null, instances0, (-3211), stringArray0, (Random) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: null
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.41214921656177
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      int int0 = 27;
      SparseInstance sparseInstance0 = new SparseInstance(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      evaluation0.addNumericTrainClass((-10.0), 3);
      evaluation0.numInstances();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) zeroR0, (Instance) binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6102268073711596
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      testInstances0.setNumRelationalNominalValues(27);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      double double0 = evaluation0.weightedPrecision();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.avgCost();
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.736923032129595
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      double double0 = evaluation0.weightedPrecision();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.avgCost();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedTruePositiveRate();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4268389992053856
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "getValidationThreshold");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      evaluation0.numInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.sizeOfPredictedRegions();
      evaluation0.unclassified();
      // Undeclared exception!
      try { 
        evaluation1.precision(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.6158769794435375
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals(costSensitiveClassifier0);
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[19];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 29;
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = 802.99237063;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2);
      Evaluation.getGlobalInfo(classifier0);
      evaluation0.toClassDetailsString();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9335737715789212
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump0);
      decisionStump0.getRevision();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass(Double.NaN, (-2));
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(31, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6964338652581576
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[3];
      intArray0[0] = 2;
      intArray0[2] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, (-1));
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setClassifier(lWL0);
      evaluation0.addNumericTrainClass(5, 5);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 0;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(5, doubleArray0, intArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0833749204821297
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump0);
      decisionStump0.getRevision();
      DatabaseLoader.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_SumSchemeEntropy;
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.weightedPrecision();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.correct();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1474346503786346
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      SparseInstance sparseInstance0 = new SparseInstance(27);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.areaUnderROC((-2));
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, ".arff");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      TestInstances testInstances1 = new TestInstances();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 1;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (double) (-2);
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 27;
      intArray0[2] = (-1372);
      intArray0[3] = 2;
      intArray0[4] = 6;
      intArray0[5] = 33;
      intArray0[6] = 0;
      intArray0[7] = 3;
      Instance instance0 = BallNode.calcCentroidPivot(18, 4, intArray0, instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.1916014530643806
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      EuclideanDistance euclideanDistance0 = new EuclideanDistance();
      evaluation0.equals(costSensitiveClassifier0);
      BallTree ballTree0 = new BallTree();
      int[] intArray0 = new int[19];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 29;
      intArray0[3] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 29);
      LWL lWL0 = new LWL();
      lWL0.setClassifier(costSensitiveClassifier0);
      lWL0.setDebug(false);
      double[] doubleArray0 = new double[2];
      LWL lWL1 = new LWL();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(3);
      binarySparseInstance1.toString();
      SparseInstance sparseInstance0 = new SparseInstance((-1206.060405943096), doubleArray0, intArray0, (-1045));
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.131118588519869
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      lWL0.getClassifier();
      lWL0.setDebug(false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.addNumericTrainClass((-1), 4);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(1387.42776563448, doubleArray0);
      try { 
        linearNNSearch0.nearestNeighbour(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.LinearNNSearch", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation.getGlobalInfo(multilayerPerceptron0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      int int0 = 6145;
      Evaluation.handleCostOption((String) null, 6145);
      try { 
        CostMatrix.parseMatlab("getLearningRate");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2577108695590575
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(31);
      DecisionStump decisionStump0 = new DecisionStump();
      AbstractClassifier.makeCopy(decisionStump0);
      decisionStump0.getRevision();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 31;
      testInstances0.setNumClasses(31);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      evaluation0.KBMeanInformation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass((-857.2317573228), (-1.0));
      evaluation0.numInstances();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(31);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Dfz6iww8");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "  [precision]");
      try { 
        Evaluation.handleCostOption("Dfz6iww8", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[precision]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IBk iBk0 = new IBk();
      iBk0.pruneToK((Instances) null, (double[]) null, 3066);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")7%;Ziy`n-iT[^Ie,M");
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper(decisionStump0, "<0KXkTdCh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }
}
