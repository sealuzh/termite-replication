/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:52:39 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6494204600014728
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ol5Qjm?W#jd;'~";
      stringArray0[1] = "8ylE)|7O%wp;'wrn6";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string0);
      
      lovinsStemmer0.stem("8ylE)|7O%wp;'wrn6");
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("8ylE)|7O%wp;'wrn6");
      assertEquals("8yle)|7o%wp;'wrn6", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8ylE)|7O%wp;'wrn6");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string3);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("proceed of th sixteenth intern confer on mach learn");
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      String string4 = lovinsStemmer1.stem("proceed of th sixteenth intern confer on mach learn");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string4);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6411317200083166
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("%qFIG ZhU}!tk,h'4Sv");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("%qFIG ZhU}!tk,h'4Sv");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("oidal");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%qFIG ZhU}!tk,h'4Sv";
      stringArray0[1] = "oid";
      stringArray0[2] = "\"wXK`~(1BKPyl/O%$ep";
      lovinsStemmer0.stem("([2");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stemString("the name(s) of the author(s), in the format described in the latex book.ludax");
      assertEquals("th nam(s) of th author(s), in th format describ in th latic book.ludac", string0);
      
      String string1 = lovinsStemmer0.stemString("%qfig zhu}!tk,h'4sv");
      assertEquals("%qfig zhu}!tk,h'4sv", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stem("6J}\"ap7");
      assertEquals("6j}\"ap7", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.8412004016400692
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("PS");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "ps";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "ps";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("c'/gcKj+fWr");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("r]kfvM:GZxmfp_Ey");
      assertEquals("r]kfvm:gzxmfp_ey", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("ps");
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer1.stemString("mit");
      assertEquals("mis", string3);
      
      lovinsStemmer2.toString();
      String string4 = lovinsStemmer1.getRevision();
      assertEquals("8034", string4);
      
      String string5 = lovinsStemmer1.stem("ps");
      assertTrue(string5.equals((Object)string2));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6564157870905836
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      String string0 = lovinsStemmer0.stemString("8034");
      stringArray0[0] = "5+[<1ExmXGi5}K.";
      stringArray0[1] = "8034";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stem("F}(Pa");
      assertEquals("f}(p", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("5+[<1ExmXGi5}K.");
      lovinsStemmer1.getRevision();
      String string2 = lovinsStemmer1.stemString("Q=%f:NH*yRro");
      assertEquals("q=%f:nh*yr", string2);
      
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
      
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string4 = lovinsStemmer2.getRevision();
      assertTrue(string4.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6615366569563585
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "PS";
      stringArray0[1] = "XeqsAH2t& 3wcTJ]";
      stringArray0[2] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[3] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.stemString("yt");
      lovinsStemmer3.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.stemString("wek.cor.stemmer.lovinsstemmercid");
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4278141897306196
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "cid";
      stringArray0[1] = "pC{.";
      stringArray0[2] = "G";
      stringArray0[3] = "6ajolyz";
      stringArray0[4] = "ol";
      stringArray0[5] = "$Revision: 8080 $";
      stringArray0[6] = "=c<Q4G$2fL6y-In";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("6ajolvad");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("6ajolyz");
      assertEquals("6ajolys", string1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.609202625058676
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("5zz3Gqk#4K $Tha`R");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("5zz3Gqk#4K $Tha`R");
      assertEquals("5zz3gqk#4k $th`r", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stemString("ening");
      assertEquals("ening", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.661600969773903
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("rv6!SL<wLMeVW`");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("pand");
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7451592961419466
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "eful";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("istr");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ister");
      lovinsStemmer0.stem("ister");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6648509095238149
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("N>vH|u8WTr=m\"`\"");
      lovinsStemmer0.stemString("keywords");
      lovinsStemmer0.stemString("[4");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("Induction of decision trees");
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6845326881181417
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("<?NSk");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("BG");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("8034uad");
      assertEquals("8034uas", string2);
      
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString("BG");
      String string4 = lovinsStemmer2.stemString("yt");
      assertEquals("yt", string4);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6982740667299472
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("xeqsah2t& 3wctj]erid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("CS0A/T`p;AM");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("xeqsah2t& 3wctj]eris");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.stemString("xeqsah2t& 3wctj]erid");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      TechnicalInformation technicalInformation1 = lovinsStemmer3.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.681022540587611
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("<?NSk");
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("rud");
      assertEquals("rus", string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "rus";
      stringArray0[1] = "A classname has to be provided with the -W option!";
      stringArray0[2] = "a classnam ha to be provid with th -w opt!";
      stringArray0[3] = "A classname has to be provided with the -W option!";
      stringArray0[4] = "rud";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[6] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("rus");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.stemString("<?NSk");
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6932340664264363
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("9P;V+ydviq+1H");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ines";
      stringArray0[1] = "9p;v+ydviq+1h";
      lovinsStemmer0.globalInfo();
      stringArray0[2] = "rv6!SL<wLMeVW`";
      stringArray0[3] = "9P;V+ydviq+1H";
      LovinsStemmer.main(stringArray0);
      stringArray0[4] = "9P;V+ydviq+1H";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("9p;v+ydviq+1h");
      lovinsStemmer0.stem("urs");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("urs");
      assertEquals("ur", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ur");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem(";b&QaFy4D =Bft");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stemString("}");
      String string3 = lovinsStemmer0.stemString("kvkgG;{v5|\b");
      assertEquals("kvkg;{v5|\b", string3);
      
      String string4 = lovinsStemmer0.stemString("stCZ$jSLo");
      assertEquals("stcz$jsl", string4);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6214081182687319
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("PS");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "PS";
      lovinsStemmer0.stemString("PS");
      stringArray0[1] = "'f>PxW]q%|x=<A+f?Lr";
      stringArray0[2] = "PS";
      stringArray0[3] = "ps";
      stringArray0[4] = "[JU*'R`hMJef_Pn1";
      stringArray0[5] = "PS";
      stringArray0[6] = "PS";
      stringArray0[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[8] = "PS";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("$I;S@n5'Gr7J}a_U");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ely");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("icide");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.655903021119682
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("pex");
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("Ni>2KY,JynL9p~");
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.stemString("ealy");
      assertEquals("eal", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6143432946509604
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("rv6!SL<wLMeVW`");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer0.stemString("\tThe file to process.");
      assertEquals("\tth fil to proces.", string1);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("\tth fil to proces.");
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5647432666845755
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      lovinsStemmer0.stem("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("the edition of a book---for example, ``second''. this should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6377105899789857
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("%qFIG ZhU}!tk,h'4Sv");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("%qFIG ZhU}!tk,h'4Sv");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("oidal");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "%qFIG ZhU}!tk,h'4Sv";
      stringArray0[1] = "oid";
      stringArray0[2] = "^'e`VEEaC{&l";
      lovinsStemmer0.stem("([2");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.stemString("^'e`VEEaC{&l");
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7316906759215507
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "sL4R$p5Xmdb";
      stringArray0[1] = "sL4R$p5Xmdb";
      stringArray0[2] = "sL4R$p5Xmdb";
      stringArray0[3] = "\"'>*Re!i:b%}V";
      stringArray0[4] = "sL4R$p5Xmdb";
      stringArray0[5] = "sL4R$p5Xmdb";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("sL4R$p5Xmdb");
      assertEquals("sl4r$p5xmdb", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string1);
      
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("E kuf}hhw9]\":cZ ");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.stemString("user.dir");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string3 = lovinsStemmer6.getRevision();
      assertEquals("8034", string3);
      
      lovinsStemmer5.stemString("KEY");
      lovinsStemmer5.toString();
      String string4 = lovinsStemmer0.stemString("UZ");
      assertEquals("uz", string4);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6505809689692528
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("QvkwMF{|&H;!zkh6!$");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertTrue(string2.equals((Object)string0));
      
      lovinsStemmer0.stemString("ical");
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6644468599351532
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("%qFIG ZhU}!tk,h'4Sv");
      assertEquals("%qfig zhu}!tk,h'4sv", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6915064095278232
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("probToLogOdds: probability must be in [0,1] ");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("8034");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("lud");
      lovinsStemmer1.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer1.toString();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5892685157130422
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ars";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("HOWPUBLISHED");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ars");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ioning");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("PUBLISHER");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.658316660260889
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A classname has to be provided with the -W option!");
      assertEquals("a classnam ha to be provid with th -w opt!", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A classname has to be provided with the -W option!");
      String string1 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string1);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6934473656318967
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = null;
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("c|Aqa1930_*jG$|");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("howpublbex");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("<'iQW;&$9c$kl3#");
      lovinsStemmer1.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer.main((String[]) null);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.695851527815433
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = "abstract";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("abstract");
      lovinsStemmer0.stem("abstract");
      String string1 = "8034bex";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("8034bex");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7585804431330456
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("%qFIG ZhU}!tk,h'4Sv");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "mm";
      stringArray0[1] = "%qFIG ZhU}!tk,h'4Sv";
      stringArray0[2] = "%qfig zhu}!tk,h'4sv";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("2j2Wo]'HO0:a");
      lovinsStemmer0.stemString("%qfig zhu}!tk,h'4sv");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("tex");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6389492341818306
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("");
      lovinsStemmer0.stemString("");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "";
      stringArray0[0] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[6] = "";
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.stemString("EDIFTOR");
      assertEquals("edift", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("o");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.491574131879995
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      String string0 = "rZsSxLW[+kk9L)T";
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stem("dex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("`/^-1lid");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.663423092343478
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("sL4R$p5Xmdb");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      stringArray0[0] = "sL4R$p5Xmdb";
      lovinsStemmer0.getRevision();
      stringArray0[1] = "sL4R$p5Xmdb";
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("the name(s) of the author(s), in the format described in the latex book.lid");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("the name(s) of the author(s), in the format described in the latex book.lud");
      lovinsStemmer1.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7240717902022409
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stem("dex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.getTechnicalInformation();
      lovinsStemmer3.globalInfo();
      lovinsStemmer1.stemString("^!/X=5p795iR");
      lovinsStemmer2.stemString("8034");
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation0 = lovinsStemmer4.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8405141097720064
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "A report published by a school or other institution, usually numbered within a series.";
      stringArray0[3] = "A report published by a school or other institution, usually numbered within a series.";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      stringArray0[6] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("-4.58: ");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.stemString("ond");
      lovinsStemmer0.getRevision();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8276119339917647
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Rj=iQQ)l&5");
      assertEquals("rj=iqq)l&5", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = "Rj=iQQ)l&5";
      stringArray0[2] = "rj=iqq)l&5";
      stringArray0[3] = "rj=iqq)l&5";
      LovinsStemmer.main(stringArray0);
      stringArray0[4] = "rj=iqq)l&5";
      lovinsStemmer0.stem("rj=iqq)l&5");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("Rj=iQQ)l&5");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("rj=iqq)l&5");
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("rj=iqq)l&5");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString(";Z");
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer2.getRevision();
      assertEquals("8034", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("isterid");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer1.stemString("rj=iqq)l&5");
      String string3 = lovinsStemmer3.stemString("lux");
      assertEquals("luc", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7428386419871669
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("rZsSxLW[+kk9L)T");
      lovinsStemmer0.stem("rZsSxLW[+kk9L)T");
      lovinsStemmer0.stemString("Can't add object to itself!");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "h[$ _vb?R<M>BaA}";
      LovinsStemmer.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.659884074796734
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "A report published by a school or other institution, usually numbered within a series.";
      stringArray0[3] = "A report published by a school or other institution, usually numbered within a series.";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      stringArray0[6] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ists");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("A report published by a school or other institution, usually numbered within a series.");
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("ist");
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6523825897474536
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5+[<1ExmXGi5}K.";
      stringArray0[1] = "8034";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "8034";
      stringArray0[4] = "8034";
      stringArray0[5] = "8034";
      lovinsStemmer0.stem("idine");
      stringArray0[6] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("Ke.Z+7slu9");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("idine");
      lovinsStemmer0.stem("erid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.stemString("a53v'rpxhix");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5619754694158603
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ars";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("HOWPUBLISHED");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ars");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ioning");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("ars");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.610323490376998
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("5zz3Gqk#4K $Tha`R");
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("5zz3Gqk#4K $Tha`R");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("z Vp|/_Ll]*dnmP");
      lovinsStemmer0.stemString("oidal");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "z Vp|/_Ll]*dnmP";
      stringArray0[2] = "5zz3Gqk#4K $Tha`R";
      stringArray0[3] = "5zz3Gqk#4K $Tha`R";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[5] = "JTURp88Eh!vPTFb";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Y/m{Yo4.% UI.");
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "w5\"pT`bLU";
      stringArray0[1] = "+s*3Ht!|eVINMv7yS";
      stringArray0[2] = "6QVjIuZ";
      stringArray0[3] = "";
      stringArray0[4] = "Dz<2z2Z\";)O:n";
      stringArray0[5] = ":HsO3(T";
      stringArray0[6] = "";
      stringArray0[7] = "The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.";
      stringArray0[8] = "qC";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stem("");
      assertFalse(string3.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6913232501186641
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ol5Qjm?W#jd;'~";
      stringArray0[1] = "8ylE)|7O%wp;'wrn6";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ol5Qjm?W#jd;'~");
      lovinsStemmer0.stemString("ol5Qjm?W#jd;'~");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("ex");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ol5Qjm?W#jd;'~");
      String string0 = lovinsStemmer0.stemString("8ylE)|7O%wp;'wrn6");
      assertEquals("8yle)|7o%wp;'wrn6", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("O9Cr`~&rzO?0Qe#5");
      assertEquals("o9cr`~&rz?0q#5", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6288678509902292
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      lovinsStemmer0.stem("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      lovinsStemmer0.stem("x>");
      lovinsStemmer0.stemString("vasert");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      assertEquals(3, stringArray0.length);
  }
}
