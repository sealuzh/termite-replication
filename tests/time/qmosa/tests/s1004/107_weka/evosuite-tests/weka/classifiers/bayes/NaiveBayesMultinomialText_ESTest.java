/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:11:54 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.net.URISyntaxException;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ListOptions;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.KDTree;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 0.0;
      naiveBayesMultinomialText0.stopwordsTipText();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.108872968847436
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("value of sigma must be > 0!", "value of sigma must be > 0!");
      MockFile mockFile1 = new MockFile(mockFile0, "'tWP~y~#>)5");
      File file0 = MockFile.createTempFile("value of sigma must be > 0!", "Use word frequencies rather than binary bag of words representation");
      MockFile mockFile2 = new MockFile(file0, "'tWP~y~#>)5");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1093;
      doubleArray0[1] = (double) 1093;
      doubleArray0[2] = (double) 1093;
      doubleArray0[3] = (-828.8782534);
      MockFile.createTempFile("Use word frequencies rather than binary bag of words representation", (String) null);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Capabilities capabilities0 = naiveBayesUpdateable0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("-W");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.pruneDictionary();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.204250703051341
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      Locale.getISOLanguages();
      naiveBayesMultinomialText0.stemmerTipText();
      double double0 = naiveBayesMultinomialText0.m_t;
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normTipText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.1340452834202117
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      Locale.getISOLanguages();
      naiveBayesMultinomialText0.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText2.m_t;
      naiveBayesMultinomialText2.periodicPruningTipText();
      naiveBayesMultinomialText1.setUseWordFrequencies(false);
      naiveBayesMultinomialText1.normTipText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("kG_#VxL/gj;q");
      naiveBayesMultinomialText1.buildClassifier(instances0);
      assertTrue(naiveBayesMultinomialText1.getNormalizeDocLength());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.755399432874636
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray0.length);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(104);
      naiveBayesMultinomialText0.setStopwords((File) null);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("value of sigma must be > 0!", "value of sigma must be > 0!");
      MockFile mockFile1 = new MockFile(mockFile0, "'tWP~y~#>)5");
      File file0 = MockFile.createTempFile("value of sigma must be > 0!", "Use word frequencies rather than binary bag of words representation");
      MockFile mockFile2 = new MockFile(file0, ">(U");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Random.setNextRandom(535);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[9];
      intArray0[0] = 535;
      intArray0[1] = 1093;
      intArray0[2] = (-767);
      intArray0[3] = 1;
      intArray0[4] = 535;
      intArray0[5] = 1086;
      intArray0[6] = (-767);
      intArray0[7] = (-3159);
      intArray0[8] = 467;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1093, intArray0, (-1712));
      naiveBayesMultinomialText1.tokenizeInstance(binarySparseInstance0, false);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 549.31;
      doubleArray0[1] = 549.31;
      doubleArray0[2] = 1385.4434501196536;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Random.setNextRandom(1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[3];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2944.87), intArray0, (-3159));
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.pruneDictionary();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      sGDText0.setTokenizer(tokenizer0);
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      ListOptions[] listOptionsArray0 = new ListOptions[9];
      ListOptions listOptions0 = new ListOptions();
      listOptionsArray0[0] = listOptions0;
      ListOptions listOptions1 = new ListOptions();
      listOptionsArray0[1] = listOptions1;
      ListOptions listOptions2 = new ListOptions();
      listOptionsArray0[3] = listOptions2;
      ListOptions listOptions3 = new ListOptions();
      listOptionsArray0[3] = listOptions3;
      ListOptions listOptions4 = new ListOptions();
      listOptionsArray0[4] = listOptions4;
      ListOptions listOptions5 = new ListOptions();
      listOptionsArray0[5] = listOptions5;
      ListOptions listOptions6 = new ListOptions();
      listOptionsArray0[6] = listOptions6;
      ListOptions listOptions7 = new ListOptions();
      listOptionsArray0[7] = listOptions7;
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(0.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.204250703051341
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      Locale.getISOLanguages();
      naiveBayesMultinomialText0.stemmerTipText();
      double double0 = naiveBayesMultinomialText0.m_t;
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normTipText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, true);
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("");
      naiveBayesMultinomialText0.buildClassifier(instances0);
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8069269423253673
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText.main((String[]) null);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      try { 
        MockURI.URI("If true, ignores all words that are on the stoplist.", "If true, ignores all words that are on the stoplist.", "h=59'IY?^'*2Ts/0n!");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 2: If true, ignores all words that are on the stoplist.:If%20true,%20ignores%20all%20words%20that%20are%20on%20the%20stoplist.#h=59'IY?%5E'*2Ts/0n!
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1217520725020074
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStopwords();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, double0, 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      naiveBayesMultinomialText0.setNorm(0.0);
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "BW+sqmSg";
      Tokenizer.tokenize(tokenizer0, stringArray0);
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.makeCopies(naiveBayesMultinomialText0, 30);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      DenseInstance denseInstance0 = new DenseInstance(0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("value of sigma must be > 0!", "value of sigma must be > 0!");
      MockFile mockFile1 = new MockFile(mockFile0, "'tWP~y~#>)5");
      File file0 = MockFile.createTempFile("value of sigma must be > 0!", "Use word frequencies rather than binary bag of words representation");
      MockFile mockFile2 = new MockFile(file0, ">(U");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1093;
      doubleArray0[1] = (double) 1093;
      doubleArray0[2] = (double) 1093;
      doubleArray0[3] = (-828.8782534);
      doubleArray0[4] = (double) 1093;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-687.5821595);
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-828.8782534), intArray0, 0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8226867707962464
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.stopwordsTipText();
      CoverTree coverTree0 = new CoverTree();
      int int0 = 21;
      DenseInstance denseInstance0 = new DenseInstance(21);
      try { 
        coverTree0.nearestNeighbour(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      int[] intArray0 = new int[2];
      intArray0[1] = (-12);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1333.48548372, intArray0, 0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.pruneDictionary();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      sGDText0.setTokenizer(tokenizer0);
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      ListOptions[] listOptionsArray0 = new ListOptions[9];
      ListOptions listOptions0 = new ListOptions();
      listOptionsArray0[0] = listOptions0;
      ListOptions listOptions1 = new ListOptions();
      listOptionsArray0[1] = listOptions1;
      ListOptions listOptions2 = new ListOptions();
      listOptionsArray0[2] = listOptions2;
      ListOptions listOptions3 = new ListOptions();
      listOptionsArray0[3] = listOptions3;
      ListOptions listOptions4 = new ListOptions();
      listOptionsArray0[4] = listOptions4;
      ListOptions listOptions5 = new ListOptions();
      listOptionsArray0[5] = listOptions5;
      ListOptions listOptions6 = new ListOptions();
      ListOptions listOptions7 = new ListOptions();
      listOptionsArray0[7] = listOptions7;
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Random.setNextRandom(4);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals(0.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5601507502065712
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 549.31;
      doubleArray0[2] = 549.31;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray0[2] = 1385.4434501196536;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "[Ks^d}U1lyX D9-g5");
      Random.setNextRandom(1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-3159);
      intArray0[2] = 1;
      intArray0[3] = (-3159);
      intArray0[4] = 1;
      intArray0[5] = 1;
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "arisation");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1026));
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2723278385372465
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray1 = new String[9];
      stringArray1[0] = "UW=2XCB4`?:vK0h";
      MockFile.createTempFile("UW=2XCB4`?:vK0h", "UW=2XCB4`?:vK0h");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-45);
      naiveBayesMultinomialText1.m_useStopList = false;
      byteArray0[1] = (byte) (-81);
      naiveBayesMultinomialText1.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      
      naiveBayesMultinomialText0.m_leplace = (double) (byte) (-81);
      Random.setNextRandom(3386);
      String[] stringArray2 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray2.length);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("value of sigma must be > 0!", "value of sigma must be > 0!");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/value of sigma must be > 0!0Use word frequencies rather than binary bag of words representation");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockFile mockFile1 = new MockFile(mockFile0, "'tWP~y~#>)5");
      File file0 = MockFile.createTempFile("value of sigma must be > 0!", "Use word frequencies rather than binary bag of words representation");
      MockFile mockFile2 = new MockFile(file0, ">(U");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      int[] intArray0 = new int[2];
      intArray0[0] = (-3159);
      intArray0[1] = (-3159);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-3159));
      naiveBayesMultinomialText1.tokenizeInstance(binarySparseInstance0, false);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("value of sigma must be > 0!", "value of sigma must be > 0!");
      MockFile mockFile1 = new MockFile(mockFile0, "'tWP~y~#>)5");
      File file0 = MockFile.createTempFile("value of sigma must be > 0!", "Use word frequencies rather than binary bag of words representation");
      MockFile mockFile2 = new MockFile(file0, ">(U");
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1093;
      doubleArray0[1] = (double) 1093;
      doubleArray0[2] = (double) 1093;
      doubleArray0[3] = (-828.8782534);
      doubleArray0[4] = (double) 1093;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-687.5821595);
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[1] = 8;
      intArray0[2] = 1570;
      intArray0[3] = 1093;
      intArray0[4] = 1093;
      intArray0[5] = 1093;
      intArray0[6] = 1093;
      intArray0[7] = 1093;
      SparseInstance sparseInstance0 = new SparseInstance((-828.8782534), doubleArray0, intArray0, 2);
      try { 
        naiveBayesMultinomialText0.updateClassifier(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "j'P6\"zpBmaR";
      stringArray0[1] = "-M";
      stringArray0[2] = "Jd%|uf1A";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.setTokenizer(wordTokenizer0);
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.pruneDictionary();
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      Random.setNextRandom(968);
      double[] doubleArray0 = new double[11];
      doubleArray0[1] = (double) 968;
      doubleArray0[2] = (double) 968;
      doubleArray0[3] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance(968, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      sGDText0.setTokenizer(tokenizer0);
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      ListOptions[] listOptionsArray0 = new ListOptions[9];
      ListOptions listOptions0 = new ListOptions();
      listOptionsArray0[0] = listOptions0;
      ListOptions listOptions1 = new ListOptions();
      listOptionsArray0[1] = listOptions1;
      ListOptions listOptions2 = new ListOptions();
      listOptionsArray0[2] = listOptions2;
      ListOptions listOptions3 = new ListOptions();
      listOptionsArray0[3] = listOptions3;
      ListOptions listOptions4 = new ListOptions();
      ListOptions listOptions5 = new ListOptions();
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1695019572072805
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.stemmerTipText();
      double double0 = naiveBayesMultinomialText0.m_t;
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.normTipText();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.478816407902517
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (-1476.476954236784);
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string2 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string2);
      
      String string3 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string3);
      
      String string4 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string4);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      naiveBayesMultinomialText0.m_leplace = 5.70001;
      Stopwords stopwords0 = new Stopwords();
      stopwords0.remove("]\"(^adE)k o%=)y_3f");
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      naiveBayesMultinomialText0.getTokenizer();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(1.0, double0, 0.01);
      
      naiveBayesMultinomialText0.getTokenizer();
      double double1 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, double1, 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      DenseInstance denseInstance0 = new DenseInstance(8);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      File file1 = MockFile.createTempFile("mqLJK:\f", "mqLJK:\f");
      MockFile mockFile0 = new MockFile(file0, "'tWP~y~#>)5");
      naiveBayesMultinomialText0.setStopwords(file1);
      boolean boolean0 = naiveBayesMultinomialText0.getUseStopList();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getUseStopList();
      KDTree kDTree0 = new KDTree();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2834.3885691), doubleArray0);
      try { 
        kDTree0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 3.0;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Locale.getISOLanguages();
      naiveBayesMultinomialText0.stemmerTipText();
      double double0 = naiveBayesMultinomialText0.m_t;
      naiveBayesMultinomialText0.periodicPruningTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normTipText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6133111340683923
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      naiveBayesMultinomialText0.setPeriodicPruning(953);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "lb";
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(953, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "normalize");
      MockFile mockFile0 = new MockFile("value of sigma must be > 0!", "value of sigma must be > 0!");
      MockFile mockFile1 = new MockFile(mockFile0, "'tWP~y~#>)5");
      File file0 = MockFile.createTempFile("value of sigma must be > 0!", "Use word frequencies rather than binary bag of words representation");
      MockFile mockFile2 = new MockFile(file0, ">(U");
      String[] stringArray0 = new String[9];
      stringArray0[0] = ">(U";
      stringArray0[1] = "SvAlNeL<k5X-M>_t";
      stringArray0[2] = "value of sigma must be > 0!";
      stringArray0[3] = "value of sigma must be > 0!";
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8069269423253678
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      String[] stringArray0 = Locale.getISOLanguages();
      naiveBayesMultinomialText0.stemmerTipText();
      double double0 = naiveBayesMultinomialText0.m_t;
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.normTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      MockFile mockFile0 = new MockFile(file0, "The norm of the instances after normalization.");
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5355410969957366
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 549.31;
      doubleArray0[2] = 549.31;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      doubleArray0[2] = 1385.4434501196536;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "[Ks^d}U1lyX D9-g5");
      Random.setNextRandom(1);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseStopList(true);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-3159);
      intArray0[2] = 1;
      intArray0[3] = (-3159);
      intArray0[4] = 1;
      intArray0[5] = 1;
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "arisation");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1026));
      String[] stringArray0 = new String[2];
      stringArray0[0] = "arisation";
      stringArray0[1] = "[Ks^d}U1lyX D9-g5";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.getStemmer();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.listOptions();
      boolean boolean0 = true;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-282.62);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 549.31;
      doubleArray0[1] = (-946.536214878);
      doubleArray0[2] = 1385.4434501196536;
      doubleArray0[3] = 0.0;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.listOptions();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 549.31;
      doubleArray0[1] = 549.31;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(1385.4434501196536);
      int[] intArray0 = new int[3];
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7204225901862604
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_data = null;
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances";
      stringArray0[2] = ".arff";
      stringArray0[3] = "";
      stringArray0[4] = "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances";
      stringArray0[5] = "@data";
      stringArray0[6] = "@relation";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String string1 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string1);
      
      String string2 = naiveBayesMultinomialText0.stemmerTipText();
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals("The stemming algorithm to use on the words.", string2);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0639572597771974
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 549.31;
      doubleArray0[1] = 549.31;
      doubleArray0[2] = 1385.4434501196536;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      double double0 = naiveBayesMultinomialText0.m_t;
      String string1 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string1);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText1.reset();
      Capabilities capabilities0 = naiveBayesMultinomialText1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("The norm of the instances after normalization.");
      naiveBayesMultinomialText1.buildClassifier(instances0);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals(0, capabilities0.getMinimumNumberInstances());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      WordTokenizer wordTokenizer1 = new WordTokenizer();
      DenseInstance denseInstance0 = new DenseInstance(6);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.4395082641515833
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[4] = (-1476.476954236784);
      naiveBayesMultinomialText0.m_leplace = 1.3;
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.normTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.pruneDictionary();
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.setNorm(1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      ListOptions listOptions0 = new ListOptions();
      ListOptions listOptions1 = new ListOptions();
      ListOptions listOptions2 = new ListOptions();
      ListOptions listOptions3 = new ListOptions();
      ListOptions listOptions4 = new ListOptions();
      ListOptions listOptions5 = new ListOptions();
      ListOptions listOptions6 = new ListOptions();
      ListOptions listOptions7 = new ListOptions();
      naiveBayesMultinomialText0.setMinWordFrequency(33.66124269);
      double[] doubleArray0 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance(2224.5300929, doubleArray0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte) (-8);
      byteArray0[2] = (byte) (-27);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockFile mockFile0 = new MockFile((File) null, "");
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.pruneDictionary();
      Tokenizer tokenizer0 = naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.setNorm(0);
      sGDText0.setTokenizer(tokenizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      ListOptions listOptions0 = new ListOptions();
      ListOptions listOptions1 = new ListOptions();
      ListOptions listOptions2 = new ListOptions();
      ListOptions listOptions3 = new ListOptions();
      ListOptions listOptions4 = new ListOptions();
      ListOptions listOptions5 = new ListOptions();
      ListOptions listOptions6 = new ListOptions();
      ListOptions listOptions7 = new ListOptions();
      naiveBayesMultinomialText0.setMinWordFrequency(1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 33.66124269;
      doubleArray0[1] = 1444.019;
      doubleArray0[2] = 33.66124269;
      doubleArray0[3] = 0.05;
      doubleArray0[4] = 0.05;
      DenseInstance denseInstance0 = new DenseInstance(0.05, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(denseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      VotedPerceptron votedPerceptron0 = new VotedPerceptron();
      VotedPerceptron votedPerceptron1 = new VotedPerceptron();
      votedPerceptron1.setSeed((-1));
      votedPerceptron0.setSeed(1);
      naiveBayesMultinomialText0.getRevision();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 2874.410043569;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2874.410043569;
      doubleArray0[5] = (double) 1624;
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) 1624;
      doubleArray0[8] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3849.49892), doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.useStopListTipText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2678.908845), doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }
}
