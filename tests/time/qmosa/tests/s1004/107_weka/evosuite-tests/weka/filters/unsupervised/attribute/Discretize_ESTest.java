/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:04:31 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Properties;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getCapabilities();
      SystemInUtil.addInputLine("bmJSX(lueWXbH/FfCA");
      discretize0.setMakeBinary(true);
      discretize0.getCapabilities();
      discretize0.useBinNumbersTipText();
      int int0 = 70;
      discretize0.m_FindNumBins = false;
      discretize0.getCutPoints(70);
      // Undeclared exception!
      try { 
        discretize0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3436.3693278824617;
      doubleArray0[1] = (-1110.5495251670482);
      doubleArray0[2] = 371.3370232;
      double double0 = 5.55555;
      doubleArray0[3] = 5.55555;
      doubleArray0[4] = 371.3370232;
      doubleArray0[5] = 3436.3693278824617;
      SparseInstance sparseInstance0 = new SparseInstance(371.3370232, doubleArray0);
      Discretize discretize0 = new Discretize("aT)R(YxO|wPMj<Jt");
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "weka.gui.ExtensionFileFilter";
      Discretize discretize0 = new Discretize("weka.gui.ExtensionFileFilter");
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.0;
      doubleArray2[6] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 0.0;
      doubleArray3[1] = 0.0;
      doubleArray3[2] = 0.0;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = 0.0;
      doubleArray4[3] = 0.0;
      doubleArray4[4] = 0.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[3];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 0.0;
      doubleArray5[2] = 0.0;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[5];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = 0.0;
      doubleArray6[4] = 0.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[9];
      doubleArray7[0] = 0.0;
      doubleArray7[1] = 0.0;
      doubleArray7[2] = 0.0;
      doubleArray7[3] = 0.0;
      doubleArray7[4] = 0.0;
      doubleArray7[5] = 0.0;
      doubleArray7[6] = 0.0;
      doubleArray7[7] = 0.0;
      doubleArray7[8] = 0.0;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      int int0 = 1024;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(1024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.799512206233116
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("?hx+7h");
      MultiFilter multiFilter0 = new MultiFilter();
      multiFilter0.getOptions();
      discretize0.m_IgnoreClass = false;
      discretize0.setAttributeIndices("[WekaPackageManager] Nothing known about package ");
      Filter.makeCopies(discretize0, 5);
      discretize0.setUseEqualFrequency(true);
      Filter.makeCopies(multiFilter0, 5);
      discretize0.getOptions();
      discretize0.attributeIndicesTipText();
      System.setCurrentTimeMillis((-1L));
      int int0 = 5;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize("8{J\"qIJn");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      discretize0.setBins((-3704));
      discretize0.getUseBinNumbers();
      discretize0.makeBinaryTipText();
      discretize0.makeBinaryTipText();
      discretize0.getMakeBinary();
      discretize0.useBinNumbersTipText();
      discretize0.getBins();
      int[] intArray0 = new int[9];
      intArray0[0] = (-3704);
      intArray0[1] = (-3704);
      intArray0[2] = 1116;
      intArray0[3] = (-3704);
      intArray0[4] = (-3704);
      intArray0[5] = (-3704);
      intArray0[6] = (-3704);
      intArray0[7] = (-3704);
      intArray0[8] = (-3704);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3704), intArray0, (-2253));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance1.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9087737526494637
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("Int");
      Properties properties0 = new Properties();
      properties0.remove((Object) "Int", (Object) "Int");
      MockFile mockFile0 = new MockFile("Int", "Int");
      File file0 = MockFile.createTempFile("Int", "Int", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.flush();
      Object[] objectArray0 = new Object[5];
      mockPrintWriter0.print(91);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0, false);
      mockPrintWriter1.printf((Locale) null, "Int", objectArray0);
      properties0.list((PrintWriter) mockPrintWriter1);
      StringReader stringReader0 = new StringReader("Int");
      Discretize discretize0 = new Discretize("8m(JQ\rfiXgy!NQ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Int";
      stringArray0[1] = "Int";
      stringArray0[2] = "8m(JQ\rfiXgy!NQ";
      discretize0.setOptions(stringArray0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("No input instance format defined", arrayList1, 66);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3062774845478744
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      String[] stringArray0 = discretize0.getOptions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      discretize0.setOptions(stringArray0);
      assertEquals(4, stringArray0.length);
      
      discretize0.getAttributeIndices();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      Discretize discretize1 = new Discretize("KwV0v{{Ojv");
      discretize1.globalInfo();
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.getRevision();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.195742067015279
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("Int");
      Properties properties0 = new Properties();
      properties0.remove((Object) "Int", (Object) "Int");
      MockFile mockFile0 = new MockFile("Int", "Int");
      File file0 = MockFile.createTempFile("Int", "Int", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[0] = (Object) arrayList0;
      mockPrintWriter0.print(".1|ktsa5t-&~w%SyvP");
      mockPrintWriter0.print(91);
      objectArray0[2] = (Object) properties0;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Int", objectArray0);
      printWriter0.close();
      properties0.list(printWriter0);
      mockPrintWriter0.print((double) 91);
      printWriter0.printf((Locale) null, "Int", objectArray0);
      properties0.list(printWriter0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".1|ktsa5t-&~w%SyvP");
      Discretize discretize0 = new Discretize("An averagabl attribut must be regular");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.getUseBinNumbers();
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      
      discretize0.getBinRangesString(91);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_/lpl'a{N4";
      stringArray0[1] = "";
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setDesiredWeightOfInstancesPerInterval(2379.060501683);
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-2932));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("Int");
      Properties properties0 = new Properties();
      properties0.remove((Object) "Int", (Object) "Int");
      MockFile mockFile0 = new MockFile("Int", "Int");
      File file0 = MockFile.createTempFile("Int", "Int", (File) mockFile0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Int/Int/Int0Int");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      mockPrintWriter0.print(91);
      StringReader stringReader0 = new StringReader(")");
      properties0.load((Reader) stringReader0);
      properties0.entrySet();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}(a*I8=$#r(#");
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("Int");
      Properties properties0 = new Properties();
      properties0.remove((Object) "Int", (Object) "Int");
      MockFile mockFile0 = new MockFile("Int", "Int");
      mockFile0.getAbsoluteFile();
      File file0 = MockFile.createTempFile("Int", "Int", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) arrayList0;
      mockFile0.renameTo(file0);
      mockPrintWriter0.print("T|d6S I");
      mockPrintWriter0.print(91);
      objectArray0[2] = (Object) properties0;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Int", objectArray0);
      properties0.list(printWriter0);
      char[] charArray0 = new char[2];
      charArray0[1] = 'E';
      printWriter0.print(charArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter1.print((double) 91);
      mockPrintWriter1.printf((Locale) null, "Int", objectArray0);
      properties0.list(printWriter0);
      StringReader stringReader0 = new StringReader("'B2of2'");
      properties0.load((Reader) stringReader0);
      Discretize discretize0 = new Discretize("}?1qw");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("weka.gui.ExtensionFileFilter");
      discretize0.getCutPoints(1024);
      Discretize discretize1 = new Discretize();
      int int0 = (-154);
      int[] intArray0 = new int[8];
      intArray0[0] = (-1610612710);
      intArray0[1] = 1024;
      intArray0[3] = (-154);
      intArray0[5] = (-154);
      intArray0[5] = (-154);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("weka.gui.ExtensionFileFilter", arrayList0, 395);
      int int1 = (-1634);
      Instances instances1 = new Instances(instances0, (-2034458190));
      Instances instances2 = Instances.mergeInstances(instances1, instances0);
      Instances instances3 = new Instances(instances2, 1024);
      Instances instances4 = new Instances(instances3);
      Instances.mergeInstances(instances4, instances1);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      instances2.toString();
      Instances instances5 = null;
      try {
        instances5 = new Instances(".bsi", arrayList0, (-2034458190));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -2034458190
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Discretize discretize0 = new Discretize("@WyshwzO");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@WyshwzO";
      stringArray0[1] = ")r!&oS#{~S";
      stringArray0[3] = ")r!&oS#{~S";
      stringArray0[4] = ")r!&oS#{~S";
      stringArray0[5] = ")r!&oS#{~S";
      stringArray0[6] = "@WyshwzO";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize("first-last");
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      discretize0.setInvertSelection(false);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 2;
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-2607);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.852140740384332
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      discretize0.getRevision();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.m_FindNumBins = false;
      discretize0.getFindNumBins();
      discretize0.getCapabilities();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.findNumBinsTipText();
      discretize0.listOptions();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.getBinRangesString(5);
      discretize0.getFindNumBins();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Properties properties1 = new Properties();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1295.069680646);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1295.069680646);
      doubleArray0[3] = (-1295.069680646);
      doubleArray0[4] = (-1295.069680646);
      doubleArray0[5] = (-1295.069680646);
      doubleArray0[6] = 896.57395;
      doubleArray0[7] = (-1295.069680646);
      SparseInstance sparseInstance0 = new SparseInstance((-1295.069680646), doubleArray0);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Properties properties2 = new Properties();
      sparseInstance0.deleteAttributeAt((-1952257859));
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      SparseInstance sparseInstance1 = new SparseInstance(44);
      Discretize discretize0 = new Discretize("n");
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = 4;
      String string0 = "symbolic";
      Discretize discretize0 = new Discretize("symbolic");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "symbolic";
      stringArray0[1] = "Dpw\"Ufg;>";
      stringArray0[2] = "symbolic";
      stringArray0[3] = "symbolic";
      stringArray0[4] = "I";
      stringArray0[5] = "symbolic";
      stringArray0[6] = " is not assignable from ";
      stringArray0[7] = "symbolic";
      stringArray0[8] = "symbolic";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = (-2607);
      Discretize discretize0 = new Discretize("k>fJ");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2607));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      int int0 = 4;
      int int1 = 10;
      SparseInstance sparseInstance0 = new SparseInstance(4);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize("bxJHOB");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize("An averagable attribute must be regular");
      discretize0.setIgnoreClass(false);
      discretize0.setUseBinNumbers(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize1 = new Discretize();
      int[] intArray0 = new int[2];
      intArray0[0] = 4;
      intArray0[1] = 17;
      discretize1.setAttributeIndicesArray(intArray0);
      Instances instances0 = new Instances("\tUse equal-frequency instead of equal-width discretization.", arrayList0, 4);
      int int0 = 2147483645;
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance(17, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("Int");
      Properties properties0 = new Properties();
      properties0.remove((Object) "Int", (Object) "Int");
      Discretize discretize0 = new Discretize("Invalid class index: ");
      SparseInstance sparseInstance0 = new SparseInstance(79);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 41;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 6;
      DenseInstance denseInstance0 = new DenseInstance((-818.10701), doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 79;
      doubleArray1[2] = (double) 6;
      DenseInstance denseInstance1 = new DenseInstance(41.0, doubleArray1);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      protectedProperties1.values();
      Object object0 = new Object();
      Object object1 = new Object();
      properties0.put(arrayList0, protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins(100);
      SparseInstance sparseInstance0 = new SparseInstance(100);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      String string0 = "";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      // Undeclared exception!
      try { 
        sparseInstance0.attributeSparse(6);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3436.3693278824617;
      doubleArray0[1] = (-1110.5495251670482);
      doubleArray0[2] = 371.3370232;
      double double0 = 5.55555;
      doubleArray0[3] = 5.55555;
      doubleArray0[4] = 371.3370232;
      doubleArray0[5] = 3436.3693278824617;
      SparseInstance sparseInstance0 = new SparseInstance(371.3370232, doubleArray0);
      Discretize discretize0 = new Discretize("aT)R(YxO#|wPj<Jt");
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("OU%Y%gn'?Yl");
      discretize0.setFindNumBins(false);
      int int0 = (-2178);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2178));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Discretize discretize0 = new Discretize("L$WUz6<=IpF RmU<");
      discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 4;
      int int1 = 10;
      Discretize discretize0 = new Discretize();
      discretize0.useEqualFrequencyTipText();
      SparseInstance sparseInstance0 = new SparseInstance(10);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      int int2 = 2;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 4;
      doubleArray0[0] = (double) (-13);
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      // Undeclared exception!
      try { 
        denseInstance0.equalHeaders(sparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseEqualFrequency(false);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "vP6mPvbS";
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-18.238664723322994);
      doubleArray0[1] = (-18.238664723322994);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SystemInUtil.addInputLine("Z]unUqSvLio~)Y_j");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      String string0 = "fxY&>FT\\EIR;3>>X0Ot";
      Discretize discretize0 = new Discretize("fxY&>FTEIR;3>>X0Ot");
      discretize0.setOutputFormat();
      discretize0.setAttributeIndices("'oe");
      discretize0.getCutPoints((-237));
      Filter.makeCopy(filter0);
      discretize0.setUseBinNumbers(false);
      String string1 = "_/lpl'a{N4";
      discretize0.getBinRangesString((-3338));
      try { 
        Filter.makeCopies(filter0, (-174));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setMakeBinary(true);
      try { 
        Filter.batchFilterFile(discretize0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // No first input file given.
         // 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // -i <filename>
         // \tThe file containing first input instances.
         // -o <filename>
         // \tThe file first output instances will be written to.
         // -r <filename>
         // \tThe file containing second input instances.
         // -s <filename>
         // \tThe file second output instances will be written to.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Properties properties0 = new Properties();
      System.setCurrentTimeMillis(387L);
      Discretize discretize0 = new Discretize();
      discretize0.getUseEqualFrequency();
      System.setCurrentTimeMillis(29L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertTrue(arrayList0.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      StringReader stringReader0 = new StringReader("  public boolean setInputFormat(Instances instanceInfo) throws Exception {\n");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[public], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize("Int");
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Discretize discretize1 = new Discretize("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Int";
      stringArray0[1] = "Int";
      stringArray0[1] = "\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)";
      stringArray0[3] = "\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)";
      stringArray0[4] = "Int";
      stringArray0[5] = "\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)";
      String string0 = discretize0.binsTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.823242702131751
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "vP6mPvbS";
      stringArray0[1] = "zeropoint";
      stringArray0[2] = "\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)";
      stringArray0[3] = "";
      Discretize.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("Int");
      Discretize discretize0 = new Discretize("6vvMpA)U}lLnirD");
      discretize0.getCapabilities();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 508);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(508);
      binarySparseInstance0.dataset();
      Instances instances1 = null;
      try {
        instances1 = new Instances(instances0, 2147483645, 537);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 110.32581769025744;
      discretize0.m_MakeBinary = false;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getFindNumBins();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 100.0;
      discretize0.m_MakeBinary = false;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.getFindNumBins();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-1168));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize("");
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("Int");
      Properties properties0 = new Properties();
      properties0.remove((Object) "Int", (Object) "Int");
      MockFile mockFile0 = new MockFile("Int", "Int");
      File file0 = MockFile.createTempFile("Int", "Int", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) properties0;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) file0;
      PrintWriter printWriter0 = mockPrintWriter0.printf((Locale) null, "Int", objectArray0);
      properties0.list(printWriter0);
      StringReader stringReader0 = new StringReader(")");
      properties0.load((Reader) stringReader0);
      properties0.entrySet();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}(a*I8=$#r(#");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(6, stringArray0.length);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      SystemInUtil.addInputLine("Int");
      Properties properties0 = new Properties();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("WmsT/b:cmuf", "Sb}\"\"Yz!'O&Gz:w&o");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockPrintWriter0.print("WmsT/b:cmuf");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0, true);
      PrintStream printStream0 = mockPrintStream0.append('!');
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printStream0);
      mockPrintWriter1.print(91);
      PrintWriter printWriter0 = mockPrintWriter1.printf((Locale) null, "Sb}\"\"Yz!'O&Gz:w&o", (Object[]) null);
      properties0.list((PrintWriter) mockPrintWriter1);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(printWriter0, false);
      mockPrintWriter0.print((double) 91);
      mockPrintWriter2.print((float) 91);
      MockPrintWriter mockPrintWriter3 = new MockPrintWriter(mockPrintWriter1);
      PrintWriter printWriter1 = mockPrintWriter3.printf((Locale) null, "inf", (Object[]) null);
      properties0.list((PrintWriter) mockPrintWriter1);
      mockPrintWriter0.printf((Locale) null, "An averagabl attribut must be regulxr", (Object[]) null);
      Properties properties1 = new Properties();
      properties1.list(printWriter1);
      properties0.entrySet();
      Discretize discretize0 = new Discretize("inf");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(194);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
