/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 17:03:00 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5821447072671853
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = ')';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", charArray0, false);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("_M6ig5;LZ`", byteArray0);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", "1H-w", inetAddress0);
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("Z3", "mwGft_<R+u',N", false);
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken();
      usernamePasswordToken3.getPassword();
      usernamePasswordToken0.setPassword((char[]) null);
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken(", rememberMe=", charArray0, false);
      usernamePasswordToken4.clear();
      usernamePasswordToken0.getInetAddress();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      usernamePasswordToken1.getInetAddress();
      usernamePasswordToken1.clear();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("fV\"/", (String) null, inetAddress0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      Object object0 = new Object();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = ')';
      charArray0[2] = ')';
      charArray0[3] = ')';
      charArray0[4] = ')';
      MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", (String) null, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "");
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("FJ9ODVs{GvU~", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "{|&H;!zkh6!$&muaXN");
      char[] charArray0 = usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getPassword();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", charArray0, true);
      usernamePasswordToken1.getUsername();
      assertTrue(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0, true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'S';
      charArray0[2] = 'y';
      charArray0[3] = 'p';
      charArray0[4] = 'A';
      charArray0[5] = '+';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("QMG}r3a)1", (String) null, false);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - , rememberMe=false (/192.168.1.42)", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("ZP7TBC)sD\"4Ms", ">TXMd;3nmRP1y_v-");
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(">TXMd;3nmRP1v-", "P7TBC)+sZD=\"4*Ms");
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'j';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" (", " (");
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      char[] charArray0 = new char[7];
      charArray0[0] = ')';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("}_fJiTH5\"VfnBI%", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(">\"X^d;3nmRP1v-", "P7TBC+sZD=\"4*Ms");
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = '+';
      charArray0[2] = '{';
      charArray0[3] = '{';
      usernamePasswordToken0.setPassword(charArray0);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", " - ", false);
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = 'k';
      charArray0[2] = '(';
      charArray0[3] = '<';
      charArray0[4] = ')';
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)0;
      usernamePasswordToken0.getUsername();
      Object object0 = new Object();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(" - ", " - ", false);
      MockInetAddress.getLocalHost();
      char[] charArray0 = new char[8];
      usernamePasswordToken0.setUsername(" - ");
      charArray0[0] = ')';
      charArray0[1] = 'k';
      charArray0[2] = '(';
      charArray0[3] = '<';
      charArray0[4] = '7';
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      usernamePasswordToken0.clear();
      byteArray0[3] = (byte)0;
      usernamePasswordToken0.getUsername();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3192204551301083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte) (-3);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true);
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.getPassword();
      usernamePasswordToken0.setPassword((char[]) null);
      char[] charArray0 = new char[5];
      charArray0[0] = ' ';
      charArray0[1] = 'M';
      charArray0[2] = 'S';
      charArray0[3] = '/';
      charArray0[4] = 'i';
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.isRememberMe();
      usernamePasswordToken0.isRememberMe();
      char[] charArray1 = usernamePasswordToken0.getPassword();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("=q*:?>r;bW<w)3%;z>", "GiHx>CcgH'6Q{hE\"", true);
      char[] charArray2 = usernamePasswordToken0.getPassword();
      usernamePasswordToken1.setPassword(charArray2);
      assertTrue(usernamePasswordToken1.isRememberMe());
      
      usernamePasswordToken0.setPassword(charArray1);
      usernamePasswordToken1.clear();
      assertFalse(usernamePasswordToken1.isRememberMe());
      
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("gXF/uBULOjPt3^x{a0", "");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - gXF/uBULOjPt3^x{a0, rememberMe=false", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("FJ9ODVs{GvU~", charArray0, inetAddress0);
      MockInetAddress.getByName("FJ9ODVs{GvU~");
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - FJ9ODVs{GvU~, rememberMe=false (/127.0.0.1)", string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("m^E.|f-udSgTQ", ">TXMd;3nmRP1v-");
      Object object0 = new Object();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[5];
      charArray0[0] = 'k';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(",XZVdT:`L#", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(">TXMd;3nmRP1v-", "P7TBC)+sZD=\"4*Ms");
      usernamePasswordToken0.setRememberMe(true);
      Object object0 = new Object();
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-105);
      InetAddress inetAddress0 = MockInetAddress.getByAddress("", byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "3lhc98CW}H", inetAddress0);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("!buwajePD8m/1gA", "ye4Zzg'riO^^'6E8", true, inetAddress0);
      InetAddress inetAddress1 = MockInetAddress.getLoopbackAddress();
      usernamePasswordToken0.setInetAddress(inetAddress1);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getCredentials();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '9';
      charArray0[1] = 'B';
      charArray0[2] = 'y';
      charArray0[3] = 'p';
      charArray0[4] = 'A';
      charArray0[5] = '+';
      charArray0[6] = '^';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", charArray0);
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.setUsername("");
      usernamePasswordToken0.setUsername("7+h#6/F{O|cF@t^^");
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockInetAddress.getLocalHost();
      MockInetAddress.getLocalHost();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getLoopbackAddress();
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      MockInetAddress.getLoopbackAddress();
      char[] charArray0 = new char[4];
      charArray0[0] = 'k';
      MockInetAddress.getLoopbackAddress();
      MockInetAddress.anyLocalAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", true, inetAddress0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = ':';
      charArray0[2] = 'T';
      charArray0[3] = '{';
      charArray0[4] = ':';
      charArray0[5] = 'L';
      charArray0[6] = 'X';
      charArray0[7] = '3';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("JB3FYGbN#8r/e]:?z", charArray0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }
}
