/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:52:59 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("PLmT!");
      StringReader stringReader1 = new StringReader("call ");
      StringReader stringReader2 = new StringReader("(");
      stringReader2.skip(2440L);
      StringReader stringReader3 = new StringReader("PLmT!");
      stringReader3.read();
      StringReader stringReader4 = new StringReader("0F%=VL%hTgS%");
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = '+';
      charArray0[2] = 't';
      charArray0[3] = 'w';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 't';
      stringReader0.read(charArray0);
      StringReader stringReader5 = new StringReader("0F%=VL%hTgS%");
      StringReader stringReader6 = new StringReader("PLmT!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      StringReader stringReader7 = new StringReader("call ");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      stringReader0.skip(0L);
      StringReader stringReader2 = new StringReader("0F%=VL%hTgS%");
      stringReader0.read();
      StringReader stringReader3 = new StringReader("0F%=VL%hTgS%");
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 't';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAll(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0999287866775678
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Unexpected ) while reading Predicate");
      StringReader stringReader2 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      streamTokenizer1.quoteChar((-5081));
      stringReader0.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "Unexpected ) while reading Predicate";
      objectArray0[1] = (Object) stringReader0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "Operator name expected";
      jSTerm0.toArray(objectArray0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.matches(jSPredicateForm0, (JSSubstitution) null);
      jSTerm1.equals(jSPredicateForm0);
      jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      assertEquals("[Operator]", jSPredicateForm1.toString());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "V?+)";
      StringReader stringReader0 = new StringReader("V?+)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) streamTokenizer0);
      streamTokenizer0.commentChar((-366172151));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(41);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.154146499517799
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.standarizerPredicateForm();
      assertEquals("[Operator, [name]]", jSPredicateForm2.toString());
      
      jSPredicateForm2.clear();
      JSPredicateForm jSPredicateForm3 = jSTerm1.clonePF();
      jSPredicateForm3.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm5.print();
      jSPredicateForm3.print();
      jSPredicateForm5.equals(jSPredicateForm4);
      jSPredicateForm5.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSTerm0.standarizerPredicateForm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm4.applySubstitutionPF(jSSubstitution0);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm7 = new JSPredicateForm();
      jSPredicateForm6.isEmpty();
      assertTrue(jSPredicateForm6.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator.identity();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis((-883L));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9742349326322626
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution3);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution3);
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution4);
      jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.standarizerPredicateForm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSPredicateForm3.matches(jSPredicateForm0, jSSubstitution1);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSPredicateForm3.standarizerPredicateForm();
      jSTerm1.applySubstitutionPF(jSSubstitution1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      assertTrue(jSSubstitution8.equals((Object)jSSubstitution2));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSPredicateForm0.addAll((Collection) jSSubstitution0);
      int int0 = (-1084518693);
      jSPredicateForm0.ensureCapacity((-1084518693));
      JSJshopVars.rightBrac = (-1084518693);
      JSJshopVars.rightPar = (-1084518693);
      JSSubstitution jSSubstitution1 = null;
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9957599102640269
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      JSPredicateForm jSPredicateForm1 = jSTerm2.standarizerPredicateForm();
      jSSubstitution0.add((Object) jSPredicateForm1);
      jSTerm2.equals(jSTerm1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.remove((Object) stringReader0);
      jSSubstitution0.add((Object) jSTerm2);
      jSTerm2.add((Object) streamTokenizer0);
      jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.equals(jSPredicateForm2);
      jSTerm2.matches((JSPredicateForm) jSTerm1);
      jSTerm2.add((Object) ",~ywD:)Q5|,4\"`mPH");
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.8950056533107491
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V?+)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("V?+)");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.quoteChar(2935);
      stringReader1.skip((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      StringReader stringReader2 = new StringReader("0F%=VL%hTgS%");
      StringReader stringReader3 = new StringReader("Predicateform.print(): 0 elements");
      char[] charArray0 = new char[2];
      stringReader1.skip((-1595L));
      stringReader2.read(charArray0);
      StringReader stringReader4 = new StringReader("expected");
      stringReader4.reset();
      StringReader stringReader5 = new StringReader("operator");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader3);
      stringReader4.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StringReader stringReader6 = new StringReader("0F%=VL%hTgS%");
      StringReader stringReader7 = new StringReader("#RVb]o}(Q[(");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader7);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer2);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      jSTerm0.standarizerPredicateForm();
      char[] charArray0 = new char[6];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.setSize(2739);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0265183878045665
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm1.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.lastElement();
      jSSubstitution1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.toStr();
      jSPredicateForm3.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm4 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      assertTrue(jSPredicateForm4.equals((Object)jSPredicateForm2));
      
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertEquals("(Operator(name ))", stringBuffer0.toString());
      assertNotSame(jSPredicateForm0, jSPredicateForm2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("G&");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("r");
      stringReader2.markSupported();
      StringReader stringReader3 = new StringReader("");
      char[] charArray0 = new char[6];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'G';
      charArray0[3] = 'n';
      charArray0[4] = 'G';
      charArray0[5] = 'n';
      stringReader3.read(charArray0);
      StringReader stringReader4 = new StringReader("ZlZ2z9g<XD|");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) stringReader4);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("MF|tt'");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[6];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("Il7wn>tnUIOwm8VcPlJ");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.coma = 1;
      StringReader stringReader0 = new StringReader("Eq-57_'}Bj9$pI8IX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "Eq-57_'}Bj9$pI8IX");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4780709313740181
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      char[] charArray0 = new char[8];
      jSTerm0.add((Object) streamTokenizer1);
      jSTerm0.add((Object) streamTokenizer0);
      stringReader0.read(charArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer1);
      jSPredicateForm0.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0311371889078798
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.addElement("zJ{");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.clonePF();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution4);
      jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.696371135430602
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.clone();
      streamTokenizer0.quoteChar((-202105906));
      stringReader0.skip((-9L));
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm2.equals(jSPredicateForm0);
      System.setCurrentTimeMillis((-9L));
      jSTerm2.equals((JSPredicateForm) jSTerm1);
      jSTerm2.equals(jSPredicateForm0);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.796328015521425
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.ensureCapacity(1);
      StringReader stringReader0 = new StringReader("l~95w@aQ6Bl'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSPredicateForm0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "l~95w@aQ6Bl'";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) "l~95w@aQ6Bl'";
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)jSPredicateForm0.clone();
      objectArray0[3] = (Object) jSPredicateForm1;
      objectArray0[4] = (Object) stringReader0;
      objectArray0[5] = (Object) "l~95w@aQ6Bl'";
      objectArray0[6] = (Object) streamTokenizer0;
      jSPredicateForm0.toArray(objectArray0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSPredicateForm2.matches(jSPredicateForm1, (JSSubstitution) null);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z{3");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("EtJM?9 ,2,pxQL+P");
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("#E|)JH6<Z");
      stringReader0.skip(122);
      StringReader stringReader3 = new StringReader("Nz:<\"4VzzR\"y?o>");
      StringReader stringReader4 = new StringReader("EtJM?9 ,2,pxQL+P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader4);
      streamTokenizer0.quoteChar(122);
      stringReader2.skip(2247L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(122);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("`HB$x$_0fdYGA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9915679864118436
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Operator name expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeFunction();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(0L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution2);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution2);
      jSSubstitution1.add((Object) jSPredicateForm1);
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution2);
      JSPredicateForm jSPredicateForm4 = jSTerm0.clonePF();
      jSPredicateForm3.standarizerPredicateForm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.matches(jSPredicateForm4, (JSSubstitution) null);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm5.applySubstitutionPF(jSSubstitution5);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      assertFalse(jSSubstitution7.fail());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.16512382802362
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V?+)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar((-366172151));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.skip(0L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSSubstitution1.add((Object) jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      jSPredicateForm4.applySubstitutionPF(jSSubstitution3);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.matches(jSPredicateForm3, jSSubstitution2);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm6.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = jSPredicateForm5.matches(jSPredicateForm1);
      assertFalse(jSSubstitution7.fail());
      assertNotSame(jSPredicateForm0, jSPredicateForm4);
      assertNotSame(jSPredicateForm1, jSPredicateForm3);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z{3");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("EtJM?9 ,2,pxQL+P");
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("#E|)JH6<Z");
      stringReader0.skip(122);
      StringReader stringReader3 = new StringReader("not");
      stringReader1.reset();
      stringReader3.read();
      stringReader3.read();
      StringReader stringReader4 = new StringReader("#s9+JX");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z{3");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("EtJM?9 ,2,pxQL+P");
      StringReader stringReader2 = new StringReader("#E|)JH6<Z");
      stringReader0.skip(2440L);
      StringReader stringReader3 = new StringReader("not");
      stringReader3.read();
      stringReader3.read();
      StringReader stringReader4 = new StringReader("#s9+JX");
      char[] charArray0 = new char[5];
      stringReader4.reset();
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[1] = 'n';
      charArray0[3] = 't';
      charArray0[4] = 'n';
      stringReader1.read(charArray0);
      StringReader stringReader5 = new StringReader("#E|)JH6<Z");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) null);
      jSTerm0.equals((JSPredicateForm) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7824268046877836
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.ensureCapacity(1);
      StringReader stringReader0 = new StringReader("l~95w@aQ6Bl'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSPredicateForm0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "l~95w@aQ6Bl'";
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) "l~95w@aQ6Bl'";
      Object object0 = jSPredicateForm0.clone();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) stringReader0;
      objectArray0[5] = (Object) "l~95w@aQ6Bl'";
      objectArray0[6] = (Object) streamTokenizer0;
      jSTerm0.lastElement();
      objectArray0[7] = (Object) "%%%";
      objectArray0[8] = (Object) stringReader0;
      jSPredicateForm0.toArray(objectArray0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm1, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.038594579539127
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      StringReader stringReader2 = new StringReader(".");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar((-2737));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader2.skip(0L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution2);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.standarizerPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.clone();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSPredicateForm1.firstElement();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object object0 = new Object();
      jSSubstitution4.add(object0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSPredicateForm1.toStr();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution7);
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1509404696629533
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("J=iA=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-1390));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      JSJshopVars.leftPar = 1447;
      JSPredicateForm jSPredicateForm1 = (JSPredicateForm)jSPredicateForm0.clone();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm4.clear();
      jSPredicateForm0.equals(jSPredicateForm1);
      assertFalse(jSTerm0.isEmpty());
      
      JSPredicateForm jSPredicateForm5 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm1.print();
      jSPredicateForm4.print();
      boolean boolean0 = jSPredicateForm3.equals(jSPredicateForm5);
      assertTrue(boolean0);
      
      jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm0.clonePF();
      assertNotSame(jSPredicateForm0, jSPredicateForm6);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.clone();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object[] objectArray0 = new Object[1];
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".");
      StringReader stringReader1 = new StringReader(".");
      stringReader0.skip(0L);
      StringReader stringReader2 = new StringReader("0F%=VL%hTgS%");
      StringReader stringReader3 = new StringReader("Predicateform.print(): 0 elements");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("vQlzmS3mHWg7&kNVjyi");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = "V?+)";
      StringReader stringReader0 = new StringReader("V?+)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "(";
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("P7JqmFoAvOOl");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
