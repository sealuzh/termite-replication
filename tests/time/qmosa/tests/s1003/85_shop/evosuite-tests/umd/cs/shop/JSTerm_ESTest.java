/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:37:33 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      String string0 = null;
      jSSubstitution0.add(objectArray0[0]);
      jSTerm0.toArray(objectArray0);
      String string1 = null;
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution2);
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.add((Object) jSSubstitution7);
      jSSubstitution7.add(objectArray0[1]);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) null);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("list ");
      UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      objectArray0[5] = (Object) jSSubstitution0;
      jSSubstitution1.containsAll(jSTerm0);
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.add((Object) null);
      objectArray0[7] = (Object) jSTerm0;
      objectArray0[8] = (Object) jSSubstitution1;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      jSTerm0.lastElement();
      jSSubstitution4.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.add((Object) null);
      objectArray0[7] = (Object) jSTerm0;
      objectArray0[8] = (Object) jSSubstitution1;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      jSTerm0.lastElement();
      jSSubstitution4.add((Object) null);
      jSSubstitution2.add((Object) jSSubstitution4);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      Object[] objectArray0 = new Object[12];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSSubstitution0;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add(objectArray0[5]);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.211664773172643
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(0L);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) " Expected (");
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add(objectArray0[0]);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.lastElement();
      jSSubstitution0.add(objectArray0[1]);
      jSSubstitution0.add((Object) jSSubstitution3);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.add((Object) null);
      objectArray0[7] = (Object) jSTerm0;
      objectArray0[8] = (Object) jSSubstitution1;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      jSSubstitution4.add((Object) null);
      jSSubstitution2.add((Object) jSSubstitution4);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      jSTerm0.add(objectArray0[4]);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.lastElement();
      jSSubstitution2.add((Object) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution2);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "(mp[j";
      StringReader stringReader0 = new StringReader("(mp[j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      StringReader stringReader1 = new StringReader("`[4q*UNXw;/6+");
      StringReader stringReader2 = new StringReader("?#CuxB%=");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8207751622034678
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis((-11L));
      StringReader stringReader0 = new StringReader("%El|047^s'gDV;P");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(2386, 1);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.617408162530378
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isVariable();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.equals(jSTerm3);
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm3.matches(jSTerm6, jSSubstitution0);
      JSTerm jSTerm7 = null;
      try {
        jSTerm7 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2281554572476763
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      jSSubstitution1.add((Object) jSTerm1);
      jSTerm0.listIterator();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSTerm0;
      objectArray0[8] = (Object) jSSubstitution1;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.lastElement();
      jSSubstitution4.add((Object) null);
      jSSubstitution2.add((Object) jSSubstitution4);
      jSTerm0.listIterator();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.758153529057189
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.listIterator();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      assertTrue(jSTerm2.isVariable());
      
      JSSubstitution jSSubstitution1 = jSTerm3.matches(jSTerm0, jSSubstitution0);
      JSTerm jSTerm5 = jSTerm0.call();
      assertEquals("[?L3Fk.|S0f4]", jSTerm5.toString());
      
      jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertEquals(1, jSSubstitution1.size());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm3, jSTerm2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.456952223364751
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.VarCounter = (-3844);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.520805078028692
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.greaterT = (-3);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.isGround();
      jSTerm0.equals(jSTerm3);
      System.setCurrentTimeMillis(3923L);
      jSTerm0.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("Yg~c<K+>");
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      System.setCurrentTimeMillis(0L);
      jSTerm0.print();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals(5, stringBuffer0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[9];
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      jSTerm0.add(objectArray0[4]);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Object object0 = jSTerm0.lastElement();
      jSSubstitution3.add(object0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.add((Object) jSSubstitution1);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution0.add(objectArray0[6]);
      jSTerm0.toArray(objectArray0);
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.lastElement();
      jSSubstitution4.add((Object) null);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution6);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.4566619630584947
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm1.call();
      assertFalse(jSTerm5.isConstant());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      
      JSSubstitution jSSubstitution3 = jSTerm4.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSSubstitution3.fail());
      
      JSTerm jSTerm6 = jSTerm0.call();
      assertTrue(jSTerm6.isFunction());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.679850798889964
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.VarCounter = (-3844);
      jSTerm1.cloneT();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.358511708277687
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("%%%");
      StringReader stringReader2 = new StringReader("G8-b~}y46x$ObJ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm0.cloneT();
      jSTerm0.call();
      boolean boolean0 = jSTerm1.isFunction();
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.364871333578161
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.trimToSize();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.listIterator();
      jSTerm0.trimToSize();
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.dot = 39;
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.271339705641477
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      stringReader0.read();
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      StringReader stringReader1 = new StringReader("%");
      StringReader stringReader2 = new StringReader("%");
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      jSTerm1.cloneT();
      jSTerm1.cloneT();
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.274842682442605
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      assertFalse(jSTerm1.isConstant());
      assertTrue(jSTerm1.isFunction());
      
      System.setCurrentTimeMillis((-1869L));
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("((e<pk[G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      System.setCurrentTimeMillis(19L);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2588034428568533
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.coma = 3286;
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<JSSubstitution> consumer0 = (Consumer<JSSubstitution>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm2 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm2);
      jSSubstitution0.forEach(consumer0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.845910575958102
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm1.cloneT();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm1.equals(jSTerm3);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.matches(jSTerm2, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5237534950521967
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar((-2545));
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-778L));
      JSTerm jSTerm2 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      boolean boolean1 = jSTerm3.equals(jSTerm5);
      assertFalse(boolean1);
      assertFalse(jSTerm3.isFunction());
      
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, jSSubstitution0);
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSSubstitution1.fail());
      assertNotSame(jSSubstitution1, jSSubstitution0);
      
      boolean boolean2 = jSTerm0.isConstant();
      assertFalse(jSTerm0.isEval());
      assertEquals("[hi6;]", jSTerm0.toString());
      assertNotSame(jSTerm0, jSTerm1);
      assertNotSame(jSTerm0, jSTerm3);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3663528150596425
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.listIterator();
      jSTerm0.trimToSize();
      jSTerm1.removeAll(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.969278591401296
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isVariable();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm3.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(w$*l?,7~3?n");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-4));
      StringReader stringReader1 = new StringReader("(w$*l?,7~3?n");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1088214033448285
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis(41);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeAllElements();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.remove((-1927));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1927
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.559422588268627
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.listIterator();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      System.setCurrentTimeMillis(0);
      boolean boolean0 = jSTerm2.isGround();
      assertEquals("[?L3Fk.|S0f4]", jSTerm2.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm1.isFunction());
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-1192));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".F>NB(XpzX");
      stringReader0.skip((-2169L));
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-2486.271205093483);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.exclamation = (-1);
      jSTerm0.print();
      JSTerm jSTerm1 = null;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+0'W}K");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8758480650686518
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DC-t,I*<))RINm*c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSSubstitution1.fail());
      
      JSJshopVars.whiteSpace = 2485;
      JSJshopVars.percent = 1632;
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm2.replaceAll(unaryOperator0);
      assertTrue(jSTerm2.isConstant());
      
      System.setCurrentTimeMillis(41);
      JSTerm jSTerm3 = jSTerm1.parseList(streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.call();
      assertEquals(1, jSTerm4.capacity());
      
      JSSubstitution jSSubstitution2 = jSTerm3.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
      assertEquals("[nil]", jSTerm3.toString());
      
      boolean boolean0 = jSTerm1.isGround();
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSTerm0.size());
      assertTrue(boolean0);
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.552323360536352
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[2] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.VarCounter = (-3844);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = jSTerm1.call();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      assertTrue(jSTerm1.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm4.isFunction());
      assertTrue(jSTerm3.isFunction());
      assertNotSame(jSTerm3, jSTerm1);
      assertEquals(10, jSTerm3.capacity());
      assertNotSame(jSTerm3, jSTerm4);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.3313439768798996
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.isFunction();
      StringReader stringReader0 = new StringReader("%]Iu]RL53ME");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.250400258002746
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChars(58, (-2));
      JSTerm jSTerm1 = jSTerm0.cloneT();
      stringReader0.read();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.904959596509216
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ordinaryChar(41);
      stringReader0.read();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm2, jSSubstitution0);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.051681985465941
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.matches(jSTerm1);
      JSJshopVars.lessT = 60;
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.listIterator();
      JSTerm jSTerm2 = new JSTerm();
      assertFalse(jSTerm2.isVariable());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.2919166873259322
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-778L));
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) streamTokenizer0;
      objectArray0[3] = (Object) "hi6\"%`\";&)fC8$g";
      Object object0 = jSTerm0.clone();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "hi6\"%`\";&)fC8$g";
      jSTerm1.toArray(objectArray0);
      jSTerm1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object1 = jSTerm1.lastElement();
      jSSubstitution0.add(object1);
      jSTerm1.listIterator();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5488235345316892
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("Line : ");
      String string0 = "?#CuxB%=";
      StringReader stringReader2 = new StringReader("Line : ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("An?SOZ]=VNsCY'J");
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = 'd';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '>';
      charArray0[5] = 'd';
      charArray0[6] = '&';
      charArray0[7] = '&';
      stringReader0.read(charArray0, 1, 1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2296747293240762
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "(mp[j";
      StringReader stringReader0 = new StringReader("(mp[j");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.parseNumbers();
      StringReader stringReader1 = new StringReader("`[4q*UNXw;/6+");
      StringReader stringReader2 = new StringReader("?#CuxB%=");
      stringReader1.reset();
      streamTokenizer0.whitespaceChars((-188), 39);
      streamTokenizer0.ordinaryChars((-188), 39);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      stringReader0.read();
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      StringReader stringReader1 = new StringReader("%");
      StringReader stringReader2 = new StringReader("%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.5321106620290785
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.dot = 41;
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.standardizerTerm();
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertFalse(jSTerm2.isConstant());
      assertFalse(jSTerm0.isFunction());
      assertEquals("?L3Fk.|S0f40 ", stringBuffer0.toString());
      assertEquals("[?L3Fk.|S0f4]", jSTerm0.toString());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm2, jSTerm1);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.285763368400808
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "?L3Fk.|S0f4)Q|nGw{a");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) "?L3Fk.|S0f4)Q|nGw{a";
      jSTerm0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.lastElement();
      jSSubstitution2.add((Object) "?L3Fk.|S0f4)Q|nGw{a");
      jSTerm1.listIterator();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      stringReader0.read();
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      StringReader stringReader1 = new StringReader("hi6\"%`\";&)fC8$g");
      stringReader0.ready();
      StringReader stringReader2 = new StringReader("hi6\"%`\";&)fC8$g");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals("i6; ", stringBuffer0.toString());
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.072427568683234
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator0);
      StringReader stringReader0 = new StringReader("?#CuxB%=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_LJGqaBX/U*)9B.YC_i");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.parseNumbers();
      StringReader stringReader1 = new StringReader("<");
      StringReader stringReader2 = new StringReader("call");
      stringReader1.reset();
      streamTokenizer0.whitespaceChars(39, 2175);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.listIterator();
      boolean boolean0 = jSTerm0.removeAll(jSSubstitution1);
      boolean boolean1 = jSTerm0.isEval();
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dc-t,i*<");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-3));
      StringReader stringReader1 = new StringReader(";wo!F(is");
      char[] charArray0 = new char[9];
      charArray0[0] = '*';
      charArray0[1] = '!';
      charArray0[2] = '\'';
      charArray0[3] = 'w';
      charArray0[4] = 'L';
      charArray0[5] = 'e';
      charArray0[6] = '`';
      charArray0[7] = 'q';
      charArray0[8] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader1.read(charBuffer0);
      stringReader1.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.clear();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hi6\"%`\";&)fC8$g");
      stringReader0.read();
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      StringReader stringReader1 = new StringReader("hi6\"%`\";&)fC8$g");
      StringReader stringReader2 = new StringReader("{>kW");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      int int0 = (-3401);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.setElementAt(jSTerm0, 709);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 709 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("An?SOZ]=VNsCY'J");
      char[] charArray0 = new char[8];
      charArray0[0] = '&';
      charArray0[1] = '>';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '&';
      charArray0[7] = '&';
      stringReader0.read(charArray0, 1, 1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("An?SOZ]=VNsCY'J");
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '>';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '>';
      charArray0[5] = '>';
      charArray0[6] = '(';
      charArray0[7] = '(';
      stringReader0.read(charArray0, 1, 1);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1094277057578132
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution1.add((Object) jSSubstitution0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSSubstitution0;
      objectArray0[1] = (Object) jSSubstitution1;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution1;
      objectArray0[5] = (Object) jSSubstitution0;
      objectArray0[6] = (Object) jSSubstitution0;
      jSSubstitution1.add((Object) null);
      objectArray0[7] = (Object) jSTerm0;
      objectArray0[8] = (Object) jSSubstitution1;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.lastElement();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) null);
      jSSubstitution2.add((Object) jSSubstitution4);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm1.isFunction());
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      
      JSTerm jSTerm2 = new JSTerm();
      StringReader stringReader0 = new StringReader("h&");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.43763321312024
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StringReader stringReader1 = new StringReader("m!?RzcHa,,X{K7&|");
      stringReader1.reset();
      streamTokenizer0.whitespaceChars(41, 0);
      streamTokenizer0.ordinaryChars(1, 46);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals("[?L3Fk.|S0f4]", jSTerm0.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(jSTerm0.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[nil]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm0.isVariable());
      assertTrue(jSTerm1.isConstant());
      
      System.setCurrentTimeMillis(39);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.eolIsSignificant(true);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      assertFalse(jSTerm2.isVariable());
      assertFalse(jSTerm2.isEval());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      System.setCurrentTimeMillis((-1L));
      StringReader stringReader0 = new StringReader("w:4taOh");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("w:4taOh");
      StringReader stringReader2 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals("Token[n=4.0], line 1", streamTokenizer0.toString());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.0245188137840557
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(0, 0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.containsAll(jSTerm2);
      jSTerm2.makeEval(true);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.equals(jSTerm2);
      stringReader0.reset();
      jSTerm0.standardizerTerm();
      jSTerm2.matches(jSTerm0);
      jSTerm2.print();
      assertTrue(jSTerm2.isEval());
      
      boolean boolean0 = jSTerm0.isGround();
      assertEquals(1, jSTerm0.size());
      assertFalse(jSTerm0.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.413861375019163
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.makeEval(true);
      int int0 = 0;
      JSJshopVars.percent = 0;
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("] ");
      stringReader1.skip(119);
      StringReader stringReader2 = new StringReader("w");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?L3Fk.|S0f4)Q|nGw{a");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("C+o8]*#Mmcrmi!q");
      stringReader1.read();
      StringReader stringReader2 = new StringReader("P|BikV|ar");
      StringReader stringReader3 = new StringReader("notequal");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      assertFalse(jSTerm0.isVariable());
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
