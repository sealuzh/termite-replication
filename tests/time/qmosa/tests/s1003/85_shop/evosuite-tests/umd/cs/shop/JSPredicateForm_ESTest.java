/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:36:53 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "(,!!U,*s.)";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(,!!U,*s.)");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3382281506007223
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.print();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("oA0");
      stringReader0.reset();
      jSTerm0.toStr();
      streamTokenizer1.nextToken();
      jSTerm0.print();
      jSTerm0.print();
      jSTerm0.firstElement();
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.slashSlashComments(false);
      StringReader stringReader2 = new StringReader("VUY7iDKUpkN'vju(*:");
      jSTerm0.firstElement();
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) stringReader1;
      objectArray0[1] = (Object) "Predicateform.print(): 0 elements";
      objectArray0[2] = (Object) streamTokenizer1;
      objectArray0[3] = (Object) "Predicateform.print(";
      objectArray0[4] = (Object) "Predicateform.print(";
      objectArray0[5] = (Object) streamTokenizer0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.parallelStream();
      System.setCurrentTimeMillis(0L);
      jSTerm0.print();
      boolean boolean0 = jSPredicateForm1.equals(jSPredicateForm0);
      assertTrue(boolean0);
      
      JSPredicateForm jSPredicateForm2 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      assertEquals(2, jSPredicateForm2.size());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6854778892432383
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.print();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("oA0");
      stringReader0.reset();
      jSTerm0.toStr();
      streamTokenizer1.nextToken();
      jSTerm0.print();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.containsAll(jSTerm1);
      jSTerm0.print();
      jSTerm0.firstElement();
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.slashSlashComments(false);
      StringReader stringReader2 = new StringReader("VUY7iDKUpkN'vju(*:");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm0.print();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) null);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.parseNumbers();
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.665856652381101
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.print();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("oA0");
      stringReader0.reset();
      jSTerm0.toStr();
      streamTokenizer1.nextToken();
      jSTerm0.print();
      jSTerm0.print();
      jSTerm0.firstElement();
      jSTerm0.add((Object) jSTerm0);
      streamTokenizer0.slashSlashComments(false);
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("VUY7iDKUpkN'vju(*:");
      Object[] objectArray0 = new Object[6];
      objectArray0[4] = (Object) stringReader1;
      objectArray0[1] = (Object) "Predicateform.print(): 0 elements";
      objectArray0[2] = (Object) streamTokenizer1;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) streamTokenizer0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer1.parseNumbers();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution2.fail());
      
      System.setCurrentTimeMillis(41);
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9323469378605727
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i+L7l[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "i+L7l[");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      stringReader0.read(charBuffer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StringReader stringReader1 = new StringReader("7.0");
      stringReader1.ready();
      stringReader1.ready();
      stringReader0.skip(342L);
      stringReader1.ready();
      StringReader stringReader2 = new StringReader("7.0");
      stringReader2.ready();
      stringReader1.reset();
      stringReader0.read();
      stringReader2.skip(33L);
      stringReader1.mark(405);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(Px");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i+L7l[");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "i+L7l[");
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      stringReader0.read(charBuffer0);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSPredicateForm1.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = "Predictefom.print(): 0 elemens";
      StringReader stringReader0 = new StringReader("Predictefom.print(): 0 elemens");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7492188127801018
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predictefom.print(): 0 elemens");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm1.add((Object) "Predictefom.print(): 0 elemens");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm1;
      JSJshopVars.lessT = (-2);
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) streamTokenizer0;
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.clonePF();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSPredicateForm0.lastElement();
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1582;
      Object object0 = jSPredicateForm0.clone();
      jSPredicateForm0.addElement(object0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "OMtv$*h8b";
      StringReader stringReader0 = new StringReader("OMtv$*h8b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      stringReader0.ready();
      stringReader0.reset();
      jSTerm0.toStr();
      streamTokenizer0.nextToken();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1579;
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '~';
      charArray0[2] = 'X';
      jSTerm0.addElement("7=-NfYU!i2v");
      charArray0[3] = 'X';
      charArray0[4] = 'a';
      stringReader0.read(charArray0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4208587745273524
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm1 = new JSTerm();
      Object object0 = new Object();
      jSTerm1.add(object0);
      stringReader0.ready();
      jSTerm0.add((Object) jSTerm1);
      stringReader0.mark(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.containsAll(jSTerm0);
      jSSubstitution0.add((Object) null);
      streamTokenizer0.parseNumbers();
      JSJshopVars.apostrophe = (-366172151);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.print();
      jSTerm0.clonePF();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predictefom.print(): 0 elemens");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm0.add((Object) "Predictefom.print(): 0 elemens");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5132407000507526
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm1.add((Object) "7=-NfYU!i2v");
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      JSTerm jSTerm2 = jSTerm1.call();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Object object0 = new Object();
      Object object1 = new Object();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "7=-NfYU!i2v";
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.ordinaryChars((-1458), 5035);
      jSTerm2.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      predicate2.and(predicate3);
      jSPredicateForm0.contains(jSSubstitution1);
      jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nl{W]=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.nextToken();
      jSTerm0.print();
      stringReader0.ready();
      stringReader0.reset();
      jSTerm0.toStr();
      jSTerm0.print();
      jSTerm0.print();
      jSTerm0.add((Object) "Nl{W]=");
      streamTokenizer0.slashSlashComments(false);
      stringReader0.close();
      jSTerm0.print();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predictefom.print(): 0 elemens");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) "Predictefom.print(): 0 elemens");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.backquote = 610;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSPredicateForm0);
      jSSubstitution0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSPredicateForm0.setSize(1766);
      jSSubstitution0.removeAll(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0168805991642629
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.ready();
      jSTerm0.add((Object) jSTerm1);
      stringReader0.mark(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7970788193397982
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Nl{W]=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      jSTerm0.print();
      stringReader0.ready();
      stringReader0.reset();
      streamTokenizer0.nval = (-2935.14580533275);
      jSTerm0.standarizerPredicateForm();
      jSTerm0.clonePF();
      streamTokenizer0.wordChars((-588), (-588));
      stringReader0.mark(45);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1476926351053998
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.listIterator();
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.print();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Ty");
      stringReader1.reset();
      jSTerm0.toStr();
      streamTokenizer0.nextToken();
      jSTerm0.print();
      jSTerm0.print();
      jSTerm0.firstElement();
      jSTerm0.add((Object) "Predicateform.print(");
      streamTokenizer1.slashSlashComments(true);
      StringReader stringReader2 = new StringReader("Ty");
      stringReader2.close();
      jSTerm0.print();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3855448688865963
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predictefom.print(): 0 elemens");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm1.add((Object) "Predictefom.print(): 0 elemens");
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      jSTerm0.call();
      jSTerm0.clonePF();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm1;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) streamTokenizer0;
      objectArray0[3] = (Object) "Predictefom.print(): 0 elemens";
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) jSTerm0;
      objectArray0[6] = (Object) "Predictefom.print(): 0 elemens";
      objectArray0[7] = (Object) jSSubstitution0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.toStr();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      assertEquals(10, jSPredicateForm0.capacity());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2116676591133655
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.standarizerSubs();
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '~';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'a';
      stringReader0.read(charArray0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'f';
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) "7=-NfYU!i2v";
      jSTerm0.firstElement();
      objectArray0[4] = (Object) "7.0";
      objectArray0[5] = (Object) 'f';
      objectArray0[6] = (Object) 'N';
      jSTerm0.firstElement();
      objectArray0[7] = (Object) "7.0";
      objectArray0[8] = (Object) 'f';
      jSTerm0.toArray(objectArray0);
      jSTerm0.clear();
      jSPredicateForm0.print();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(5, stringBuffer0.length());
      
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = 1579;
      jSPredicateForm0.clear();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      jSPredicateForm0.print();
      jSPredicateForm0.setSize(1579);
      jSPredicateForm0.isEmpty();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      objectArray0[3] = (Object) stringBuffer0;
      objectArray0[4] = (Object) stringBuffer0;
      objectArray0[5] = (Object) stringBuffer0;
      objectArray0[6] = (Object) jSPredicateForm0;
      objectArray0[7] = (Object) stringBuffer0;
      jSPredicateForm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.156234939134731
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSTerm0.equals((JSPredicateForm) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      jSSubstitution0.removeIf(predicate2);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer0.ordinaryChars((-2), (-1458));
      JSSubstitution jSSubstitution3 = jSPredicateForm1.matches(jSPredicateForm0, jSSubstitution0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate3.or(predicate4);
      predicate5.and(predicate6);
      jSSubstitution2.removeIf(predicate3);
      stringReader0.close();
      streamTokenizer0.parseNumbers();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSPredicateForm0.clonePF();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      jSTerm0.add((Object) "DW3^pL~H");
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.ready();
      streamTokenizer0.quoteChar((-4));
      jSTerm0.add((Object) jSTerm1);
      stringReader0.mark(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      streamTokenizer0.parseNumbers();
      JSJshopVars.apostrophe = (-366172151);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.44157661660604
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      predicate0.test(jSPredicateForm0);
      jSSubstitution0.removeIf(predicate2);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer0.ordinaryChars(5035, (-1458));
      JSSubstitution jSSubstitution3 = jSPredicateForm3.matches(jSPredicateForm1, jSSubstitution0);
      assertFalse(jSSubstitution3.fail());
      
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate3.and(predicate4);
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate2.negate();
      predicate5.and(predicate6);
      jSPredicateForm2.contains(jSPredicateForm2);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.clear();
      jSPredicateForm1.print();
      assertNotSame(jSPredicateForm1, jSPredicateForm4);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      int int0 = 1579;
      JSJshopVars.astherisk = 1579;
      jSPredicateForm0.clear();
      jSPredicateForm0.setSize(1579);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Predicateform.print(): 0 elements");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = 0;
      stringReader0.close();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StringReader stringReader1 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("wl\"!%");
      streamTokenizer1.wordChars((-4), 33);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSJshopVars.colon = (-336);
      StringReader stringReader0 = new StringReader("PlanningDomain: error");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader0);
      stringReader0.mark(505);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) stringReader0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.267283031856155
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      jSSubstitution1.add((Object) null);
      charArray0[1] = '~';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'a';
      stringReader0.read(charArray0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) 'f';
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) "7=-NfYU!i2v";
      jSTerm0.firstElement();
      objectArray0[4] = (Object) "7.0";
      objectArray0[5] = (Object) 'f';
      objectArray0[6] = (Object) 'N';
      jSTerm0.firstElement();
      objectArray0[7] = (Object) "7.0";
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(5);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = jSPredicateForm0.matches(jSPredicateForm1);
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertFalse(jSSubstitution2.fail());
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.138284360394208
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-11), (-1124));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.ready();
      streamTokenizer0.quoteChar((-4));
      jSTerm1.isGround();
      jSTerm0.add((Object) jSTerm1);
      stringReader0.mark(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      streamTokenizer0.parseNumbers();
      JSJshopVars.apostrophe = (-366172151);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
      assertFalse(jSSubstitution2.fail());
      
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution3 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution3.fail());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("195;t8ihdKW62!xRm");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(10, (-1124));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm1 = new JSTerm();
      stringReader0.ready();
      jSTerm0.clear();
      streamTokenizer0.quoteChar((-4));
      jSTerm0.add((Object) jSTerm1);
      stringReader0.mark(0);
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.lastElement();
      System.setCurrentTimeMillis(1791L);
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.addElement(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StringReader stringReader1 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-1124), (-1124));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      stringReader1.ready();
      streamTokenizer0.quoteChar(2084);
      jSTerm0.add((Object) "7=-NfYU!i2v");
      stringReader0.mark(2147483645);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.parseNumbers();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      System.setCurrentTimeMillis((-2));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.562200162369491
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = "7=-NfYU!i2v";
      StringReader stringReader0 = new StringReader("7=-NfYU!i2v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSSubstitution0.standarizerSubs();
      jSTerm0.equals((JSPredicateForm) null);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      predicate0.test(jSPredicateForm0);
      jSSubstitution0.removeIf(predicate2);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer0.ordinaryChars(5035, (-1458));
      jSPredicateForm3.matches(jSPredicateForm1, jSSubstitution0);
      Predicate<Object> predicate3 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate3.and(predicate4);
      Predicate<Object> predicate5 = predicate4.or(predicate3);
      Predicate<Object> predicate6 = predicate2.negate();
      predicate5.and(predicate6);
      jSPredicateForm2.contains(jSPredicateForm2);
      jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = null;
      try {
        jSPredicateForm4 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0809586127392572
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Predictefom.print(): 0 elemens");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      assertEquals("[Predictefom.print(): 0 elemens]", jSPredicateForm1.toString());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSJshopVars.colon = (-336);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("'rI%vFnwC[xYN&c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.clear();
      jSPredicateForm0.toStr();
      jSPredicateForm0.print();
      jSPredicateForm0.print();
      jSPredicateForm0.equals((JSPredicateForm) null);
      jSPredicateForm0.print();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      System.setCurrentTimeMillis(776L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(576);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("0wg3M");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
