/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:16:49 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.main.FreeMindApplet;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Point2D;
import java.io.InputStream;
import java.net.URISyntaxException;
import java.sql.Date;
import java.sql.Time;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.help.ForwardAction;
import javax.swing.ActionMap;
import javax.swing.JPasswordField;
import javax.swing.JTextPane;
import javax.swing.plaf.multi.MultiPanelUI;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleContext;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.dom.GenericDocument;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.script.InterpreterPool;
import org.apache.crimson.tree.XmlDocument;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.xalan.processor.StylesheetHandler;
import org.apache.xalan.processor.TransformerFactoryImpl;
import org.apache.xalan.processor.XSLTSchema;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xerces.dom.CoreDOMImplementationImpl;
import org.apache.xml.utils.ListingErrorHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcBlob;
import org.junit.runner.RunWith;
import org.w3c.dom.DocumentType;
import org.w3c.dom.Element;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1509776724370013
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-30));
      SystemColor systemColor0 = SystemColor.controlShadow;
      Color.getColor("day", (Color) systemColor0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-30);
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1484.23F;
      floatArray0[3] = (float) (-30);
      fopImage_ImageInfo0.str = "";
      jpegImage0.getColorSpace();
      SchemeMode schemeMode0 = new SchemeMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2759141995421976
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "GhE,[T");
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 1935;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte) (-97);
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte) (-117);
      byteArray0[4] = (byte) (-12);
      byteArray0[5] = (byte)9;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1935, 0L, 1935, 1935, 'p');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setDayBordersVisible(false);
      Color color0 = Color.lightGray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.setDayBordersVisible(true);
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 1935, "GhE,[T", 1935);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.386047523796935
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getWeekdayForeground();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDayBordersVisible(true);
      Date date0 = new Date(0L);
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getLocale();
      Color color1 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setWeekdayForeground(color1);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.drawWeeks();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getLocale();
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1699550666946883
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDayPanel();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1708460440638633
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      
      SystemColor systemColor0 = SystemColor.controlShadow;
      Color.getColor("day", (Color) systemColor0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1484.23F;
      floatArray0[3] = (float) 0;
      fopImage_ImageInfo0.str = "";
      jpegImage0.getColorSpace();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(true);
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser1.setYearChooser((JYearChooser) null);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Windows");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getRootPane();
      jDayChooser0.getMinSelectableDate();
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 43, false);
      jDayChooser0.focusGained(focusEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.128728079881931
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color color0 = Color.getHSBColor(0.0F, 0.0721F, 0.0F);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getMaxSelectableDate();
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      jDayChooser0.setDay(49);
      jDayChooser0.keyTyped((KeyEvent) null);
      int int0 = 214;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(214);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 214
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.096641232508321
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = Color.getHSBColor(0.0F, 0.0721F, 0.0F);
      jDayChooser0.setForeground(color0);
      jDayChooser0.getDaysInMonth();
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      namedProfileCache0.request("-z~G7*N8Xfzb=B}dPG");
      namedProfileCache0.isPresent("-z~G7*N8Xfzb=B}dPG");
      jDayChooser0.setDay(28);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2683882965439777
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.addHierarchyListener((HierarchyListener) null);
      jDayChooser0.setDay(0);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.addListeners(0);
      jDayChooser0.drawWeeks();
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      Time time0 = new Time(1809L);
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      jDayChooser0.drawDays();
      jDayChooser0.setMaxDayCharacters(0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1609096373188827
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jDayChooser0.setMaxDayCharacters(23);
      Color.getColor("day", (Color) null);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FopImage.ImageInfo fopImage_ImageInfo1 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo1);
      jpegImage0.getColorSpace();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("{", false, true);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-178.8393F);
      floatArray1[1] = (-178.8393F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-178.8393F);
      floatArray1[4] = (-178.8393F);
      color0.getColorComponents(floatArray1);
      jDayChooser0.sundayForeground = color0;
      floatArray0[1] = (-178.8393F);
      floatArray0[2] = 1950.0F;
      floatArray0[3] = (-1203.718F);
      floatArray0[4] = 1958.8638F;
      floatArray0[5] = (-1.0F);
      floatArray0[6] = (-2699.0625F);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "{";
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters(0);
      SystemColor systemColor0 = SystemColor.controlShadow;
      Color.getColor("day", (Color) systemColor0);
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      float[] floatArray0 = new float[4];
      fopImage_ImageInfo0.width = 0;
      floatArray0[1] = (float) 459;
      floatArray0[2] = (float) 419;
      fopImage_ImageInfo0.width = 0;
      Color.RGBtoHSB(459, 419, (-2177), floatArray0);
      fopImage_ImageInfo0.str = "";
      jDayChooser0.isWeekOfYearVisible();
      try { 
        XmlDocument.createXmlDocument((InputStream) null, true);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.crimson.parser.Parser2", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.205447973345968
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      jYearChooser0.applyComponentOrientation(componentOrientation0);
      jDayChooser0.getDayPanel();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1699680061509725
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getGraphics();
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      jDayChooser0.focusLost((FocusEvent) null);
      try { 
        XmlDocument.createXmlDocument("day");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.crimson.parser.Parser2", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.186701326306983
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte)10;
      jDayChooser0.getColorModel();
      byteArray0[3] = (byte) (-102);
      String string0 = "w,w?.en?";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "w,w?.en?");
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.isDecorationBordersVisible();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("{", false, true);
      Color color0 = jDayChooser0.getSundayForeground();
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1.0F);
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-178.8393F);
      floatArray1[1] = (-178.8393F);
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (-178.8393F);
      floatArray1[4] = (-178.8393F);
      color0.getColorComponents(floatArray1);
      jDayChooser0.sundayForeground = color0;
      floatArray0[1] = (-178.8393F);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      SchemeMode schemeMode0 = new SchemeMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(schemeMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.2742351305314132
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.getDaysInMonth();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      float[] floatArray0 = new float[5];
      HierarchyListener hierarchyListener0 = mock(HierarchyListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyListener0, hierarchyListener0);
      AWTEventMulticaster.add((HierarchyListener) null, (HierarchyListener) null);
      jDayChooser0.removeHierarchyListener((HierarchyListener) null);
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-1003.1F);
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (-1346.19F);
      floatArray0[4] = (-2186.859F);
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setSundayForeground(color0);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.getDaysInMonth();
      jDayChooser0.focusLost((FocusEvent) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1699550666946883
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getSelectedDay();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.363945605826456
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser0 = new JDayChooser();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      jDayChooser0.getDayPanel();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setFocus();
      jDayChooser0.setMonth(1380);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      Color color0 = Color.BLACK;
      jDayChooser0.setDecorationBackgroundColor(color0);
      int int1 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, int1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.372796455451497
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      Point point0 = userAgentAdapter0.getClientAreaLocationOnScreen();
      point0.clone();
      JDayChooser jDayChooser0 = new JDayChooser();
      Point point1 = jDayChooser0.getLocation(point0);
      jDayChooser0.setMinSelectableDate((java.util.Date) null);
      jDayChooser0.getLocale();
      point0.setLocation((Point2D) point1);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 0, false, jDayChooser0);
      jDayChooser0.focusLost(focusEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getSelectedDay();
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser1.getSundayForeground();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.getSundayForeground();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.354531974119251
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Date date0 = new Date(333L);
      jDayChooser0.minSelectableDate = (java.util.Date) date0;
      jDayChooser_DecoratorButton0.isFocusable();
      jDayChooser0.getLocale();
      Color color0 = jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.drawWeeks();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getLocale();
      jDayChooser0.setMinSelectableDate(date0);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2083498095271596
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "day";
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-1904), (-1904), (-1904), (-642), 'b');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      boolean boolean0 = false;
      ActionMap actionMap0 = null;
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      try { 
        MockURI.URI("", "day", "day");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :day#day
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      JPasswordField jPasswordField0 = new JPasswordField("day");
      multiPanelUI0.getBaselineResizeBehavior(jPasswordField0);
      jDayChooser0.setUI(multiPanelUI0);
      jDayChooser0.init();
      jDayChooser0.getMaxDayCharacters();
      Locale locale0 = new Locale("SELECTED", "SELECTED");
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      hTMLDocumentImpl0.getDoctype();
      CoreDOMImplementationImpl coreDOMImplementationImpl0 = new CoreDOMImplementationImpl();
      GenericDocument genericDocument0 = new GenericDocument((DocumentType) null, coreDOMImplementationImpl0);
      genericDocument0.createTextNode("SELECTED");
      genericDocument0.getLocale();
      // Undeclared exception!
      try { 
        locale0.getDisplayCountry((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.124832311196471
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters(1584);
      jDayChooser0.setDecorationBackgroundVisible(true);
      Color color0 = Color.BLUE;
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      TransformerFactoryImpl transformerFactoryImpl0 = new TransformerFactoryImpl();
      StylesheetHandler stylesheetHandler0 = new StylesheetHandler(transformerFactoryImpl0);
      XSLTSchema xSLTSchema0 = stylesheetHandler0.getSchema();
      ListingErrorHandler listingErrorHandler0 = new ListingErrorHandler();
      StylesheetRoot stylesheetRoot0 = new StylesheetRoot(xSLTSchema0, listingErrorHandler0);
      stylesheetRoot0.getOutputComposed();
      // Undeclared exception!
      try { 
        sVGColorProfileElementBridge0.createICCColorSpaceExt(bridgeContext0, (Element) null, "http://xml.apache.org/xalan/features/incremental");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.bridge.SVGColorProfileElementBridge", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getDaysInMonth();
      java.util.Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(1641);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          EvoSuiteFile evoSuiteFile0 = null;
          String string0 = "";
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
          JDayChooser jDayChooser0 = new JDayChooser();
          jDayChooser0.drawWeeks();
          StyleContext styleContext0 = new StyleContext();
          String string1 = "remove_icon_xml_action";
          jDayChooser0.setFocusCycleRoot(true);
          styleContext0.getFont("remove_icon_xml_action", (-1425), (-1425));
          String string2 = "bObp;^?";
          JTextPane jTextPane0 = new JTextPane();
          MutableAttributeSet mutableAttributeSet0 = jTextPane0.getInputAttributes();
          Object object0 = new Object();
          styleContext0.addAttribute(mutableAttributeSet0, object0, jTextPane0);
          byte[] byteArray0 = new byte[2];
          byteArray0[0] = (byte)63;
          byteArray0[1] = (byte)87;
          jdbcBlob jdbcBlob0 = new jdbcBlob(byteArray0);
          InputStream inputStream0 = jdbcBlob0.getBinaryStream();
          // Undeclared exception!
          try { 
            Font.createFont((-1425), inputStream0);
            fail("Expecting exception: IllegalArgumentException");
          
          } catch(IllegalArgumentException e) {
             //
             // font format not recognized
             //
             verifyException("java.awt.Font", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0918293977637266
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = 32;
      ActionMap actionMap0 = jDayChooser0.getActionMap();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      actionMap0.keys();
      jDayChooser0.setActionMap(actionMap0);
      jDayChooser0.getActionMap();
      jDayChooser0.setDay(32);
      jDayChooser0.keyTyped((KeyEvent) null);
      jDayChooser0.addListeners(32);
      jDayChooser0.drawWeeks();
      boolean boolean1 = false;
      ForwardAction forwardAction0 = new ForwardAction((Object) null);
      jDayChooser0.addMouseListener(forwardAction0);
      Time time0 = new Time(1809L);
      // Undeclared exception!
      try { 
        time0.toInstant();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.sql.Time", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }
}
