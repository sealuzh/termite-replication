/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:15:36 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.728040183509058
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = 7L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 7L, 7L);
      Range range1 = Range.ofLength(7L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range range2 = range_Builder1.build();
      Long long1 = new Long(234L);
      Range range3 = range0.intersection(range2);
      range2.getEnd();
      range0.intersects(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("can not add null range to cache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not add null range to cache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3018469700675404
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(65535L);
      range0.toString();
      // Undeclared exception!
      try { 
        Range.of(0L, (-2584L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.355090466171735
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3095L));
      range_Builder0.expandBegin((-2288L));
      Range range0 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long((-4322L));
      range0.equals(long0);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = "23f!-n{!Vo|R";
      // Undeclared exception!
      try { 
        Range.parseRange("23f!-n{!Vo|R", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 23f!-n{!Vo|R into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.281946265499828
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder2 = range_Builder0.shift((-3095L));
      Range range0 = Range.ofLength(2147483647L);
      range0.toString();
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.equals(range_Builder0);
      range0.equals(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 2147483646 ]/0B", range_CoordinateSystem0);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      range1.getEnd();
      List<Range> list2 = range1.complement(range0);
      assertFalse(list2.equals((Object)list1));
      assertTrue(list2.isEmpty());
      
      Range range2 = Range.ofLength(2147483645L);
      Range.Comparators.values();
      Range range3 = Range.ofLength(170L);
      range2.complement(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2147483645L, 2147483645L);
      Range range4 = range_Builder1.build();
      range4.iterator();
      assertFalse(range4.isEmpty());
      
      String string0 = range_CoordinateSystem0.getAbbreviatedName();
      assertEquals("SB", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.978925801629393
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Long long0 = new Long(1898L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-3037L), (-3037L));
      range_Builder0.build();
      Range range1 = range_Builder0.build();
      range1.split(1L);
      Range range2 = Range.of(1898L, 1898L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("Residue Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Residue Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3035770196432024
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.of(65535L, (-17L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5957745511383075
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Range range0 = Range.of((-1233L), (-1233L));
      Object object0 = new Object();
      range0.endsBefore(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.280691111802308
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder2 = range_Builder0.shift((-3095L));
      Range range0 = Range.ofLength(2147483647L);
      range0.toString();
      range_Builder1.copy();
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      range0.isEmpty();
      range0.equals(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 2147483646 ]/0B", range_CoordinateSystem0);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.copy();
      range1.getEnd();
      range1.complement(range0);
      Range range2 = Range.ofLength(2147483645L);
      Range.Comparators.values();
      range_Builder1.expandBegin(2656L);
      Range range3 = Range.ofLength(170L);
      range2.complement(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, 2147483645L, 2147483645L);
      Range range4 = range_Builder1.build();
      Iterator<Long> iterator0 = range4.iterator();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.4878322220344296
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long((-1072L));
      Long long1 = new Long((-1L));
      Long.getLong("", long1);
      Range range0 = Range.of(4294967295L);
      range0.equals(long1);
      Long.min(0L, 6866L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8759725306774953
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2275L), 36L);
      Range range1 = Range.of(4294967274L);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ 0 .. 4622 ]/0B", string0);
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem2);
      assertEquals(4294967275L, long0);
      
      boolean boolean1 = range0.intersects(range1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.8213430787125207
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(212L, 4294967295L);
      Range.Builder range_Builder1 = range_Builder0.shift(4294967295L);
      Range.Builder range_Builder2 = range_Builder1.expandBegin(0L);
      Long long0 = new Long(1L);
      range_Builder2.shift(1L);
      Long.getLong((String) null, long0);
      Range range1 = Range.of(1L);
      Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = Range.of(126L);
      Range range3 = Range.of(126L, 212L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object0 = new Object();
      Range.of(4294967295L, 4294967295L);
      boolean boolean1 = range3.intersects(range1);
      assertNotSame(range3, range2);
      assertNotSame(range1, range2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=4.0499157508634545
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4623L, 4623L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4623L);
      long long0 = (-1270L);
      range_Builder1.shift((-1270L));
      Range range0 = Range.ofLength(2409L);
      range0.toString();
      List<Range> list0 = range0.split(2241L);
      range0.complementFrom(list0);
      range0.equals(list0);
      Object object0 = new Object();
      range0.equals(object0);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=4.109285392371858
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3095L));
      Range range0 = Range.ofLength(2147483647L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 0 .. 2147483646 ]/0B", string0);
      
      List<Range> list0 = range0.split(2147483647L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      
      range0.equals(range_Builder0);
      range0.equals(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 2147483646 ]/0B", range_CoordinateSystem0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.copy();
      range1.getEnd();
      List<Range> list2 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list2.equals((Object)list1));
      //  // Unstable assertion: assertEquals(0, list2.size());
      
      Range range2 = Range.ofLength(2147483645L);
      Range.Comparators.values();
      Range range3 = Range.ofLength(170L);
      List<Range> list3 = range2.complement(range3);
      //  // Unstable assertion: assertEquals(1, list3.size());
      
      range_Builder1.copy();
      Range.Comparators.values();
      boolean boolean0 = range3.endsBefore(range1);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.985433580197838
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2147483647L;
      range_Builder0.expandBegin(2147483647L);
      Range.Builder range_Builder1 = range_Builder0.shift((-3095L));
      Range range0 = Range.ofLength(2147483647L);
      range0.toString();
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      range0.equals(range_Builder0);
      range0.equals(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.parseRange("[ 0 .. 2147483646 ]/0B", range_CoordinateSystem0);
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-4179L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7883683627118705
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Long long0 = new Long(1898L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4623L, 9223372036854775807L);
      Object object0 = new Object();
      Range range2 = Range.of(9223372036854775807L);
      List<Range> list0 = range2.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list0);
      range1.complementFrom(linkedList0);
      range0.asRange();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4623L, 746L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.06858946110433
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3095L));
      range_Builder0.expandBegin((-2288L));
      Range range0 = Range.of((-2288L), (-2288L));
      Range range1 = Range.of((-2288L));
      List<Range> list0 = range0.complement(range1);
      List<Range> list1 = range1.complementFrom(list0);
      range0.isSubRangeOf(range1);
      range1.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.of((-2907L), (-821L));
      Range range2 = Range.of(1756L);
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.110800668227071
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2244L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      range_Builder0.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      Range range2 = Range.parseRange("[ 2244 .. 4294967295 ]/0B");
      range0.equals("[ 2244 .. 4294967295 ]/0B");
      List<Range> list0 = range0.split(9223372036854775807L);
      assertTrue(list0.contains(range2));
      
      Range range3 = Range.of((-2021L), 2244L);
      range_Builder0.expandEnd(255L);
      Range range4 = Range.ofLength(255L);
      boolean boolean0 = range3.startsBefore(range4);
      assertFalse(range4.isEmpty());
      
      Range range5 = Range.parseRange("[ 2244 .. 4294967295 ]/0B", range_CoordinateSystem0);
      Range range6 = range5.intersection(range1);
      assertTrue(range6.isEmpty());
      
      range0.endsBefore(range5);
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ 2244 .. 4294967295 ]/0B", string0);
      
      boolean boolean1 = range0.startsBefore(range1);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7210899884422255
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2244L, 4294967295L);
      Range range1 = Range.of((-1233L), (-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      range1.endsBefore(range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6584287759400813
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder1.build();
      long long1 = 234L;
      Long long2 = new Long(234L);
      range_Builder0.contractBegin((-544L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 234L, (-2308L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.0554878070033995
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(338L);
      range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder0.contractEnd(338L);
      range_Builder0.copy();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      String string0 = "@u";
      // Undeclared exception!
      try { 
        Range.parseRange("@u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse @u into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.5955644312155166
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      long long0 = 265L;
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      String string0 = "@u";
      // Undeclared exception!
      try { 
        Range.parseRange("@u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse @u into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.622088694627158
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = 4623L;
      Range range0 = Range.ofLength(4623L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(4623L);
      String string0 = "Zero Based";
      Long long1 = new Long(1898L);
      Range.Builder range_Builder2 = range_Builder1.shift(234L);
      Long.getLong("Zero Based", (Long) null);
      range0.equals((Object) null);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Zero Based", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Zero Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.599985363657137
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      Long long0 = new Long(1898L);
      range0.equals(long0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 4623L, 9223372036854775807L);
      Object object0 = new Object();
      Range range1 = Range.of(1978L, 32767L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.8962431550240364
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 4622 ]/0B", string0);
      
      List<Range> list0 = range0.split(4623L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      assertEquals(1, list0.size());
      
      Range range1 = Range.ofLength(4623L);
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range1.endsBefore(range2);
      assertSame(range2, range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4279783730534703
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 255L;
      Range range0 = Range.of(255L, 255L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6644173351086047
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-1233L), (-1233L));
      Object object0 = new Object();
      Range range1 = Range.of((-1233L));
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=4.199433973628787
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = Range.of(range_CoordinateSystem1, 1602L, 2147483647L);
      range1.equals(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.copy();
      Range.ofLength(0L);
      Range.Comparators.values();
      range0.complement(range2);
      Range range3 = Range.of(range_CoordinateSystem2, (-1292L), (-987L));
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6743955601042
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2244L, 4294967295L);
      Range.of((-1233L), (-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.7459153477106093
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 7L, 7L);
      Range range1 = Range.ofLength(7L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(7L);
      Range range2 = range_Builder1.build();
      Long long0 = new Long(234L);
      Range range3 = range0.intersection(range2);
      range2.getEnd();
      range0.intersects(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("can not add null range to cache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse can not add null range to cache into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.064073729277233
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      long long0 = 4623L;
      Range range0 = Range.ofLength(4623L);
      range0.toString();
      List<Range> list0 = range0.split(4623L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.parseRange("[ 0 .. 4622 ]/0B", range_CoordinateSystem0);
      range1.intersects(range0);
      range0.complementFrom(list0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1104L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.376805972532326
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1146L, 2147483647L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1486L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.9015608031656908
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range range0 = Range.of(127L, 127L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(127L);
      range0.intersects(range1);
      range1.complementFrom(linkedList0);
      linkedList0.add(range1);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      Range.of(127L, 127L);
      Range.ofLength(127L);
      // Undeclared exception!
      try { 
        linkedList0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.5495528997005446
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-5243L);
      Range.of(range_CoordinateSystem0, (-5243L), (-5243L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Comparators.values();
      Range.CoordinateSystem.values();
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-5243L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 17L;
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(17L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.4930838060757203
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Long long0 = new Long(234L);
      long long1 = 4294967295L;
      range_Builder0.shift(4294967295L);
      Long long2 = Long.getLong("Zero Based", long0);
      range0.equals(long2);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range0.getBegin(range_CoordinateSystem0);
      String string0 = "po{N$@YO";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("lWb9!*b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.lWb9!*b
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.869248549741173
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2147483647L);
      long long0 = (-3095L);
      range_Builder0.shift((-3095L));
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.6165941542174234
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.of((-1233L), 0L);
      Object object0 = new Object();
      range0.equals(object0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("kaOmm'd!_LfFOzK~t", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse kaOmm'd!_LfFOzK~t into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.129269543176895
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder1.build();
      Long long0 = new Long(234L);
      range_Builder0.contractBegin((-544L));
      range_Builder0.shift((-2308L));
      Long.getLong("", long0);
      Range range2 = Range.of((-2308L));
      range0.getLength();
      List<Range> list0 = range0.complement(range1);
      range2.complementFrom(list0);
      range2.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.9162352164304415
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 36L, 4294967275L);
      List<Range> list0 = range0.split(9223372032559808513L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.complementFrom(list1);
      Range range1 = Range.ofLength(4294967275L);
      range1.startsBefore(range0);
      Range range2 = range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 4294967275L, 4294967295L);
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.538809750787636
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 36L, 4294967275L);
      Range range1 = Range.ofLength(4294967275L);
      boolean boolean0 = range1.startsBefore(range0);
      assertTrue(boolean0);
      
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(range0.equals((Object)range2));
      assertNotSame(range1, range2);
      assertFalse(range1.equals((Object)range2));
      assertFalse(boolean1);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.6630299758109017
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of((-1L), 377L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.4184020626125546
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range range0 = Range.of(range_CoordinateSystem0, (-1241L), 848L);
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.704349405184062
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of((-1259L), 255L);
      Range range1 = Range.of((-1259L));
      long long0 = range1.getEnd();
      Long long1 = new Long(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 0L, (-1L));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      long long2 = range0.getBegin();
      //  // Unstable assertion: assertTrue(long2 == long0);
      //  // Unstable assertion: assertNotSame(range0, range1);
      
      Range.of((-1259L), 2147483647L);
      long long3 = new Long(255L);
      //  // Unstable assertion: assertFalse(long3 == long2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.6524582164215063
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-5250L), 2383L);
      range0.iterator();
      Range.of(2383L);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("yaD#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.yaD#
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.75584490153345
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of((-1233L), 0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-1233L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.7162796267881903
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2244L, 4294967295L);
      Range range1 = Range.of((-3493L), (-1L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.startsBefore(range1);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder0.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.317437099788056
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1146L, 1146L);
      range0.split(1661L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=4.028961001982163
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.of((-3234L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range_CoordinateSystem0.toString();
      range1.equals("Residue Based");
      String string0 = range_CoordinateSystem0.toString();
      assertEquals("Residue Based", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.6556072774598753
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2147483647L);
      Long long0 = new Long(2145L);
      Long.getLong("", long0);
      Range.of(2147483647L);
      Range range0 = Range.of(255L);
      Range range1 = Range.of(544L, 9223372036854775807L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
      
      Range range2 = Range.ofLength(2892L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.9503136552317866
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3095L));
      range_Builder0.expandBegin((-2275L));
      Range range0 = Range.of((-2275L), (-2275L));
      Range range1 = Range.of((-2275L));
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of((-4325L));
      range2.complementFrom(list0);
      Range.of(9223372036854775807L);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = "start offset can not be less than 0";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("start offset can not be less than 0", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse start offset can not be less than 0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.8204592303269456
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      long long0 = (-13L);
      Range range0 = Range.of((-13L), (-13L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-13L));
      range0.intersects(range1);
      range1.complementFrom(linkedList0);
      linkedList0.add(range1);
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      Range.of((-13L), (-13L));
      // Undeclared exception!
      try { 
        Range.ofLength((-13L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.5346453199178605
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      long long0 = new Long(0L);
      Range range1 = Range.of(0L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(list0.contains(range1));
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.88010425445136
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.shift((-3095L));
      range_Builder0.expandBegin((-2288L));
      Range range0 = Range.of((-2288L), (-2288L));
      Range range1 = Range.of((-2288L));
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.487314085704229
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.of((-1233L), 0L);
      Range range1 = Range.of((-2878L), 0L);
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      assertNotSame(range0, range1);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object2 = new Object();
      Range range2 = Range.of((-2878L), (-1233L));
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.595768554505984
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin(0L);
      range_Builder0.copy();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      range_Builder0.shift(265L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedList0;
      objectArray0[1] = (Object) range_Builder1;
      objectArray0[2] = (Object) range_Builder0;
      linkedList0.add(range0);
      objectArray0[3] = (Object) range_Builder0;
      linkedList0.toArray(objectArray0);
      linkedList0.add(range0);
      String string0 = "@u";
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("@u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse @u into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.974314475335494
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(0L);
      range_Builder0.expandBegin(0L);
      Range range2 = Range.of(0L);
      List<Range> list0 = range2.complement(range1);
      Range.of(0L);
      range2.complementFrom(list0);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(0L);
      Range.of(0L, 9223372036854771186L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854771218L, 420L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.876891106138263
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 36L, 4294967273L);
      Range range1 = Range.ofLength(4294967273L);
      range1.startsBefore(range0);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.of(4294967273L, 36L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.8522274050521084
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1521L), (-1521L));
      Range range1 = Range.ofLength(357L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 59
  /*Coverage entropy=4.075724065517123
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3095L));
      range_Builder0.expandBegin((-2275L));
      Range range0 = Range.of((-2275L), (-2275L));
      Range range1 = Range.of((-2275L));
      List<Range> list0 = range0.complement(range1);
      long long0 = (-4325L);
      Range range2 = Range.of((-4325L));
      List<Range> list1 = range2.complementFrom(list0);
      Range range3 = Range.of((-2456L), (-2456L));
      List<Range> list2 = range1.complement(range3);
      Range.of(2788L);
      range0.complementFrom(list2);
      range0.complementFrom(list1);
      long long1 = 4294967295L;
      Range.of(4294967295L);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.688010526889471
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range.of((-13L), (-13L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(2255L);
      Range.of((-2584L), 0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 32767L, (-2584L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.778611423183156
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range.ofLength(4623L);
      Long long0 = new Long(1898L);
      Range range0 = Range.of((-1548L), 1898L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6991775059191405
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1681L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1681L);
      Long long0 = new Long((-1072L));
      long long1 = 4294967295L;
      range_Builder1.shift(4294967295L);
      Long long2 = new Long((-1L));
      Long.getLong("", long2);
      Range range1 = Range.of(4294967295L);
      range1.equals(long2);
      Long.min(0L, 6866L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.parseRange("po{N$@YO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse po{N$@YO into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.8040537753906816
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(4294967295L, 4294967295L);
      Range range1 = Range.of((-1233L), (-1L));
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Object object2 = new Object();
      Range range3 = Range.of((-1L), (-1L));
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.6416725834415247
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range.of((-1233L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      range_Builder0.build();
      long long1 = 234L;
      Long long2 = new Long(0L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(234L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.553520103249491
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range range0 = Range.of((-1259L), 255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      range0.getBegin();
      long long0 = 0L;
      // Undeclared exception!
      try { 
        Range.parseRange("[ -1259 .. 256 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.8757705454009392
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3095L));
      range_Builder0.expandBegin((-2275L));
      Range range0 = Range.of((-2275L), (-2275L));
      Range range1 = Range.of((-2275L));
      range0.complement(range1);
      Range range2 = Range.of((-4325L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getEnd(range_CoordinateSystem0);
      String string0 = "bxx\"[.MVcSO4b";
      // Undeclared exception!
      try { 
        Range.parseRange("bxx\"[.MVcSO4b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse bxx\"[.MVcSO4b into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.8032346474488277
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      long long0 = 234L;
      Long long1 = new Long(234L);
      Long.valueOf(234L);
      Range.of(504L);
      Range.of((-2147483648L));
      range0.split(255L);
      Range.of((-2147483648L));
      Range range1 = Range.of((-2311L), (-128L));
      // Undeclared exception!
      try { 
        range1.split((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.9105586125305423
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      long long0 = 4623L;
      Range range0 = Range.ofLength(4623L);
      Long long1 = new Long(234L);
      Long.getLong("Zero Based", long1);
      Range.of(504L);
      Range range1 = Range.of((-2147483648L));
      range0.split(255L);
      Range.of((-2147483648L));
      Range.of((-2311L), (-128L));
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("Zero Based");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Zero Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.335000195261916
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.533766134703648
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-5250L), (-5250L));
      Range.of(range_CoordinateSystem0, 180L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3465L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.887521617758865
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range range0 = Range.ofLength(4623L);
      range0.toString();
      List<Range> list0 = range0.split(4623L);
      range0.complementFrom(list0);
      Range.ofLength(4623L);
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$EmptyLongRange");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$EmptyLongRange into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=4.112098152167364
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3095L));
      range_Builder0.expandBegin((-2275L));
      Range range0 = Range.of((-2275L), (-2275L));
      Range range1 = Range.of((-2275L));
      range0.complement(range1);
      Range range2 = Range.of((-4325L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range3 = Range.of(1L);
      Range.of(2118L);
      range2.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = "3bpf&1<=qq=R";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      String string1 = "Space Based";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Space Based", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Space Based into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.360538514024816
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(0L);
      long long0 = 255L;
      // Undeclared exception!
      try { 
        Range.of(2779L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.5974592242182952
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.expandEnd(2147483647L);
      range_Builder0.expandBegin((-4463L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        Range.parseRange("po{N$@YO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse po{N$@YO into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.6014620900107817
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-789L), 127L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of((-23L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) range1;
      objectArray0[1] = (Object) range_Builder0;
      objectArray0[2] = (Object) range1;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) range_CoordinateSystem0;
      linkedList0.toArray(objectArray0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.725718514994031
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(212L, 4294967295L);
      range_Builder0.shift(4294967295L);
      range_Builder0.expandBegin(4294967295L);
      long long0 = 32767L;
      Range.of(32767L, 32767L);
      Range.of(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        linkedList0.toArray((Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.948254850157572
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift((-3095L));
      range_Builder0.expandBegin((-2275L));
      Range range0 = Range.of((-2275L), (-2275L));
      Range range1 = Range.of((-2275L));
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of((-4325L));
      range2.complementFrom(list0);
      Range.of(9223372036854775794L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(420L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854771186L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.606821551335661
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2253L, 4294967295L);
      Range.of((-1233L), (-1L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(2253L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.347367941794885
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.5407063524141167
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-2584L));
      Range range1 = Range.of((-2584L), 861L);
      assertNotSame(range1, range0);
      assertFalse(range1.equals((Object)range0));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2584L), 127L);
      assertNotSame(range2, range1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.346895128556114
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1146L;
      Range.of(range_CoordinateSystem0, (-2147483648L), 1146L);
      long long1 = new Long((-2147483648L));
      String string0 = "number of entries must be <= Integer.MAX_VALUE";
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.5928728914693355
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-32780L));
      Range.of((-2584L), 861L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2584L), (-9223372036854775790L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.554944379242528
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-32768L));
      Range.of((-2584L), 861L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2584L), (-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-1181L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.550398200151205
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-32768L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }
}
