/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:45:06 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.Proxy;
import java.net.Socket;
import java.sql.BatchUpdateException;
import java.sql.DataTruncation;
import java.sql.SQLDataException;
import java.sql.SQLNonTransientConnectionException;
import java.sql.SQLWarning;
import messages.global.GlobalChatMsg;
import messages.global.JoinAckMsg;
import messages.round.RoundTimeOneSecondLeftMsg;
import messages.session.SessionParticipationMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string0 = "Lost connection to server!";
      boolean boolean0 = false;
      int int0 = (-2);
      String string1 = "Couldn't close input stream";
      SQLDataException sQLDataException0 = new SQLDataException(string0, string1);
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      String string2 = "w-7Hb%C>y[";
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(boolean0, int0, string2);
      clientMsgReceiver1.processMsg(sessionParticipationMsg0);
      String string3 = "Couldn't close input stream";
      GlobalChatMsg globalChatMsg0 = new GlobalChatMsg(string3);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalChatMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      MockURL.getHttpExample();
      SQLDataException sQLDataException0 = new SQLDataException();
      DataTruncation dataTruncation0 = new DataTruncation((-4817), true, true, (-2), (-2), sQLDataException0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      Thread thread1 = MockThread.currentThread();
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup1, mockThread1);
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread3 = new MockThread(threadGroup2, "kc;R@??");
      ThreadGroup threadGroup3 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread4 = new MockThread(threadGroup3, thread1, "");
      Thread[] threadArray0 = new Thread[7];
      threadArray0[0] = (Thread) mockThread3;
      threadArray0[1] = thread1;
      threadArray0[2] = (Thread) mockThread3;
      threadArray0[3] = (Thread) mockThread2;
      threadArray0[4] = (Thread) mockThread1;
      threadArray0[5] = (Thread) mockThread4;
      Thread thread2 = MockThread.currentThread();
      threadArray0[6] = thread2;
      MockThread.enumerate(threadArray0);
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getRemoteSocketAddress();
      MockSocket mockSocket1 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket1, (BomberClient) null);
      JoinAckMsg joinAckMsg0 = new JoinAckMsg(true, (-2));
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(joinAckMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.BomberClient", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      long long0 = (-1043L);
      RoundTimeOneSecondLeftMsg roundTimeOneSecondLeftMsg0 = new RoundTimeOneSecondLeftMsg(long0);
      clientMsgReceiver0.processMsg(roundTimeOneSecondLeftMsg0);
      assertFalse(clientMsgReceiver0.isInterrupted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      MockURL.getHttpExample();
      SQLDataException sQLDataException0 = new SQLDataException("", "OMtv$*h8b");
      SQLDataException sQLDataException1 = new SQLDataException();
      DataTruncation dataTruncation0 = new DataTruncation((-4817), true, true, (-2), (-2), sQLDataException1);
      MockThread mockThread0 = new MockThread("OMtv$*h8b");
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread1 = new MockThread(threadGroup0, thread0);
      Thread[] threadArray0 = new Thread[9];
      threadArray0[0] = (Thread) mockThread1;
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup1, thread0, "");
      threadArray0[1] = (Thread) mockThread2;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = (Thread) mockThread1;
      threadArray0[4] = (Thread) mockThread0;
      threadArray0[6] = (Thread) mockThread1;
      threadArray0[7] = thread0;
      threadArray0[8] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      ClientMsgReceiver clientMsgReceiver1 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      MockURL.getFtpExample();
      SQLDataException sQLDataException0 = new SQLDataException();
      Thread thread0 = MockThread.currentThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup1, "t|H&uLSfAm'O");
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup2, mockThread1, "");
      MockThread mockThread3 = new MockThread(mockThread2, "t|H&uLSfAm'O");
      Thread[] threadArray0 = new Thread[6];
      threadArray0[0] = (Thread) mockThread2;
      MockThread mockThread4 = new MockThread(mockThread2);
      MockThread.enumerate(threadArray0);
      ThreadGroup threadGroup3 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread5 = new MockThread(threadGroup3, mockThread1, "in ClientGameSession#doPostRoundProcessing()");
      MockThread mockThread6 = new MockThread(threadGroup3, mockThread5, "t|H&uLSfAm'O");
      ThreadGroup threadGroup4 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread7 = new MockThread(threadGroup4, thread0, "stop() exiting");
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      mockThread4.getContextClassLoader();
      MockThread.currentThread();
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver((Socket) null, (BomberClient) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      MockURL.getHttpExample();
      SQLDataException sQLDataException0 = new SQLDataException("", "");
      DataTruncation dataTruncation0 = new DataTruncation((-4817), true, true, (-2), (-2), sQLDataException0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup1, "");
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread2 = new MockThread(threadGroup2, mockThread0, "],levEl [");
      MockThread mockThread3 = new MockThread(mockThread2, ",uzjvy\"=]T:hlZA");
      MockThread mockThread4 = new MockThread(threadGroup2, mockThread3, "");
      Thread[] threadArray0 = new Thread[7];
      threadArray0[0] = (Thread) mockThread2;
      threadArray0[1] = (Thread) mockThread2;
      threadArray0[2] = (Thread) mockThread1;
      threadArray0[3] = thread0;
      threadArray0[4] = (Thread) mockThread1;
      threadArray0[5] = thread0;
      ThreadGroup threadGroup3 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread5 = new MockThread(threadGroup3, thread0, "],levEl [");
      threadArray0[6] = (Thread) mockThread4;
      MockThread.enumerate(threadArray0);
      MockSocket mockSocket0 = new MockSocket();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      MockURL.getHttpExample();
      SQLDataException sQLDataException0 = new SQLDataException("OMtv$*h8b", (String) null);
      SQLDataException sQLDataException1 = new SQLDataException();
      DataTruncation dataTruncation0 = new DataTruncation((-4817), true, true, (-2), 0, sQLDataException0);
      SQLWarning sQLWarning0 = new SQLWarning("", dataTruncation0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "#zQlfHV}e", "fr3Z'h(:", 3056);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", (String) null, 1);
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("r", "mK?3}'Nf", "q6C6UW*=^)", (-2));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("jb1BA!qG8q.", "OMtv$*h8b", "", 3056);
      stackTraceElementArray0[3] = stackTraceElement3;
      sQLWarning0.setStackTrace(stackTraceElementArray0);
      sQLWarning0.spliterator();
      dataTruncation0.setNextWarning(sQLWarning0);
      dataTruncation0.getNextWarning();
      dataTruncation0.getTransferSize();
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-2);
      intArray0[3] = (-903);
      intArray0[4] = 0;
      BatchUpdateException batchUpdateException0 = new BatchUpdateException("", "5{ffhx", (-4817), intArray0, dataTruncation0);
      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException("4.QH&H:.,q6xtP", "\"R.", batchUpdateException0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(batchUpdateException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
