/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:20:48 GMT 2019
 */

package org.jsecurity.authc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.UnknownHostException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.jsecurity.authc.UsernamePasswordToken;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UsernamePasswordToken_ESTest extends UsernamePasswordToken_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, true);
      Object object0 = new Object();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)21;
      byteArray0[3] = (byte) (-1);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = ')';
      charArray0[6] = '\u0017';
      charArray0[3] = 'W';
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", ";", true, inetAddress0);
      usernamePasswordToken0.getUsername();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Object object0 = new Object();
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = '?';
      charArray0[2] = '!';
      charArray0[3] = '2';
      charArray0[4] = '7';
      charArray0[5] = 'R';
      charArray0[6] = '1';
      InetAddress inetAddress0 = MockInetAddress.getLoopbackAddress();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("zpf=Hy[d}gk", charArray0, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2240585736572336
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "", false);
      char[] charArray0 = usernamePasswordToken0.getPassword();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.setPassword(charArray0);
      char[] charArray1 = usernamePasswordToken0.getPassword();
      char[] charArray2 = new char[3];
      charArray2[2] = '6';
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("", charArray1, false);
      usernamePasswordToken0.clear();
      usernamePasswordToken1.clear();
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Object object0 = new Object();
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'm';
      charArray0[2] = ')';
      charArray0[3] = 'Q';
      charArray0[5] = 'V';
      Object object1 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("(,nPYD3JKZT={", "(,nPYD3JKZT={", true);
      usernamePasswordToken0.getInetAddress();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "", true);
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = ')';
      charArray0[6] = ')';
      charArray0[3] = 'W';
      charArray0[4] = 'l';
      usernamePasswordToken0.getPrincipal();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[1] = 's';
      charArray0[2] = 'a';
      charArray0[3] = '.';
      charArray0[4] = 'v';
      charArray0[5] = 'w';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0516819854659416
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("b", "b", true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'e';
      charArray0[2] = 'C';
      charArray0[3] = '';
      charArray0[4] = '1';
      charArray0[5] = '=';
      charArray0[6] = 'h';
      charArray0[7] = 't';
      usernamePasswordToken0.setPassword(charArray0);
      assertTrue(usernamePasswordToken0.isRememberMe());
      
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.getCredentials();
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Object object0 = new Object();
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'm';
      charArray0[2] = ')';
      charArray0[3] = 'Q';
      charArray0[4] = '>';
      charArray0[5] = 'Z';
      Object object1 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.toString();
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = '>';
      charArray0[2] = '>';
      charArray0[3] = '>';
      charArray0[4] = 'q';
      charArray0[5] = 'q';
      charArray0[6] = '>';
      charArray0[7] = '>';
      charArray0[8] = '>';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, (String) null, false, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[1] = '\\';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("", "bZ", false);
      usernamePasswordToken0.getPassword();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      MockInetAddress.getByAddress(byteArray1);
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[6];
      charArray0[0] = 'S';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = 'S';
      charArray0[5] = 'o';
      char[] charArray1 = new char[1];
      charArray1[0] = 'o';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("MIL>\"),po3ZXb", charArray1, false, inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - MIL>\"),po3ZXb, rememberMe=false (/0.0.0.0)", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      char[] charArray0 = new char[2];
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("KERQ{)w%%Uk.1", "Z ", inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken((String) null, "", true);
      char[] charArray0 = new char[7];
      usernamePasswordToken0.getCredentials();
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByName("Z ");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(">;$=zBdg{C(WOp/8-", (String) null, inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Z ", "Z ", inetAddress0);
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress1 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)1;
      MockInetAddress.getByAddress(byteArray1);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByName("`%OI&|");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("nFwC&xmKy <@U/z/", "", inetAddress0);
      usernamePasswordToken0.setUsername("");
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("ro 7I$[,II6", "dSeSEWlM#\nf/-IKOM", inetAddress1);
      assertFalse(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'J';
      charArray0[1] = '3';
      charArray0[2] = 'd';
      charArray0[3] = 'm';
      charArray0[4] = 'e';
      charArray0[5] = '>';
      charArray0[6] = 'z';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Z ", charArray0, inetAddress0);
      usernamePasswordToken0.clear();
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("%Q\"]%", ")Vd$L", false, inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("Z ", "Z ", inetAddress0);
      usernamePasswordToken0.getUsername();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("dSeSEWlM#\nf/-IKOM", "dSeSEWlM#\nf/-IKOM", inetAddress0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - dSeSEWlM#\nf/-IKOM, rememberMe=false (/0.0.0.0)", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'T';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("WHO3O#)Mfo$tJJ", charArray0);
      String string0 = usernamePasswordToken0.toString();
      assertEquals("org.jsecurity.authc.UsernamePasswordToken - WHO3O#)Mfo$tJJ, rememberMe=false", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = 'm';
      charArray0[2] = ')';
      charArray0[3] = 'Q';
      charArray0[4] = '>';
      charArray0[5] = 'V';
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("TB=(", charArray0, true);
      usernamePasswordToken0.setRememberMe(true);
      assertTrue(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("#M.G'W2VH=", "#M.G'W2VH=", true);
      boolean boolean0 = usernamePasswordToken0.isRememberMe();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'b';
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("#M.G'W2VH=", charArray0, true);
      assertTrue(usernamePasswordToken1.isRememberMe());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = "";
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("h$&N>}pIUS$", "");
      String string1 = " (";
      InetAddress inetAddress0 = MockInetAddress.getByName(" (");
      usernamePasswordToken0.setInetAddress(inetAddress0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-1);
      try { 
        MockInetAddress.getByAddress(byteArray0);
        fail("Expecting exception: UnknownHostException");
      
      } catch(UnknownHostException e) {
         //
         // Not IPv4: [21, -1, 0, 12, -1, -1, -1]
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockInetAddress", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken(", rememberMe=", "o^r", inetAddress0);
      usernamePasswordToken0.getInetAddress();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.anyLocalAddress();
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      MockInetAddress.getByAddress(byteArray0);
      InetAddress inetAddress0 = MockInetAddress.getByName(" - ");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("+", "+", inetAddress0);
      usernamePasswordToken0.setPassword((char[]) null);
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken", "org.jsecurity.authc.UsernamePasswordToken", false);
      usernamePasswordToken0.getPrincipal();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Object object0 = new Object();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("!Nua=]tl", ")");
      usernamePasswordToken0.clear();
      assertFalse(usernamePasswordToken0.isRememberMe());
  }
}
