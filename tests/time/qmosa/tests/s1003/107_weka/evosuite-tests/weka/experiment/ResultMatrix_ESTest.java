/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:29:35 GMT 2019
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.7806032178351154
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 3847;
      intArray0[2] = 2;
      intArray0[3] = 2;
      intArray0[4] = 1;
      intArray0[5] = 2;
      intArray0[6] = 0;
      intArray0[7] = 1;
      resultMatrixCSV0.m_RowOrder = intArray0;
      resultMatrixCSV0.clearRanking();
      resultMatrixCSV0.setStdDev(1787, 88, 1787);
      int[] intArray1 = new int[0];
      resultMatrixCSV0.m_RankingWins = intArray1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.clear();
      resultMatrixLatex0.toStringMatrix();
      resultMatrixCSV0.setMeanPrec(67);
      resultMatrixLatex0.getDisplayCol((-835));
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(3277, 88);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7782720974220405
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[8];
      resultMatrixLatex0.m_EnumerateColNames = false;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.clear();
      resultMatrixLatex0.setColOrder(intArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.clearRanking();
      int[][] intArray1 = new int[1][6];
      intArray1[0] = intArray0;
      resultMatrixHTML0.setSummary(intArray1, intArray1);
      resultMatrixHTML0.toString();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(125, 2183);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.058786352760957
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setStdDevPrec(0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.add((Object) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(38, 0);
      resultMatrixGnuPlot0.addHeader("*", "");
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixHTML.main((String[]) null);
      resultMatrixGnuPlot0.getRowName(0);
      resultMatrixGnuPlot0.setStdDevPrec(1498);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1, 1);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.getCount(1498);
      resultMatrixCSV0.getRowHidden(2520);
      resultMatrixPlainText0.toStringSummary();
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6748666105770877
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setStdDevPrec(3090);
      resultMatrixPlainText0.getColName(0);
      resultMatrixPlainText0.doubleToString((-1981.191407566), 0);
      resultMatrixPlainText0.clearHeader();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.getSummaryTitle((-1));
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 713);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixLatex0.getColOrder();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText1.globalInfo();
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixLatex0.isStdDev(690);
      resultMatrixPlainText0.setStdDevPrec(1406);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setColNameWidth(0);
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      resultMatrixGnuPlot0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultRowNameWidth();
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      resultMatrixGnuPlot0.setShowAverage(false);
      resultMatrixLatex0.getRemoveFilterName();
      resultMatrixLatex0.clearHeader();
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.053287178592599
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 0);
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.assign(resultMatrixPlainText1);
      resultMatrixPlainText1.TIE_STRING = ")";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.m_ColNameWidth = (-783);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixPlainText1.setShowStdDev(false);
      Vector<String> vector0 = new Vector<String>();
      int[] intArray0 = new int[1];
      intArray0[0] = 2;
      resultMatrixPlainText0.setRowOrder(intArray0);
      resultMatrixPlainText1.m_HeaderKeys = vector0;
      ResultMatrixPlainText.main((String[]) null);
      vector0.add("*");
      resultMatrixSignificance0.removeFilterNameTipText();
      resultMatrixPlainText1.getShowStdDev();
      resultMatrixPlainText0.getRevision();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(25, 1);
      resultMatrixGnuPlot0.getRowName((-1219));
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixPlainText1.setSignificanceWidth(1);
      resultMatrixSignificance0.setCountWidth(97);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.054950416069489
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.assign(resultMatrixGnuPlot0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixPlainText0.setShowStdDev(false);
      Vector<String> vector1 = new Vector<String>();
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      resultMatrixPlainText0.setRowOrder(intArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-summary data not set-";
      ResultMatrixPlainText.main(stringArray0);
      vector1.add("f");
      resultMatrixSignificance0.removeFilterNameTipText();
      resultMatrixPlainText0.getShowStdDev();
      resultMatrixPlainText0.getRevision();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(1, 2200);
      resultMatrixGnuPlot0.m_MeanWidth = (-1752);
      resultMatrixGnuPlot0.getRowName(25);
      resultMatrixGnuPlot1.getDisplayName();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixPlainText0.setSignificanceWidth((-403));
      resultMatrixSignificance0.setCountWidth((-403));
      resultMatrixSignificance0.getDefaultSignificanceWidth();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.022895982925062
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add((Object) vector1);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixHTML.main((String[]) null);
      resultMatrixGnuPlot0.getRowName(0);
      resultMatrixGnuPlot0.setStdDevPrec(50);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(614, 50);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.3940709727626044
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixHTML0.getColName(1);
      resultMatrixLatex0.getColName(128);
      resultMatrixLatex0.getSignificance(0, 265);
      resultMatrixHTML0.getRowName(0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")";
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.setShowStdDev(true);
      resultMatrixCSV0.setShowAverage(true);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.8475692539420074
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*";
      stringArray0[1] = "*";
      stringArray0[2] = "(";
      stringArray0[3] = "(";
      stringArray0[4] = "v";
      resultMatrixHTML0.setOptions(stringArray0);
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 2;
      resultMatrixHTML0.m_RowOrder = intArray0;
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixHTML0.m_RowHidden = booleanArray0;
      int int0 = 0;
      String[] stringArray1 = new String[7];
      stringArray1[0] = " ";
      stringArray1[2] = ")";
      stringArray1[2] = "v";
      stringArray1[5] = "(";
      resultMatrixHTML0.m_ColNames = stringArray1;
      resultMatrixHTML0.clearRanking();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.8359643293201287
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.globalInfo();
      resultMatrixLatex0.m_EnumerateColNames = false;
      resultMatrixLatex0.WIN_STRING = null;
      int[] intArray0 = new int[4];
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      intArray0[0] = 0;
      intArray0[1] = 2;
      resultMatrixLatex0.setStdDevWidth(604);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.setSignificanceWidth(2);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.getDefaultMeanWidth();
      resultMatrixLatex0.toStringRanking();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDisplayName();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      resultMatrixHTML1.isSignificance((-1));
      resultMatrixLatex0.getSummaryTitle(123);
      resultMatrixLatex0.getEnumerateColNames();
      resultMatrixHTML0.setMeanWidth(548);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.8827504631882177
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.clear();
      resultMatrixLatex0.setColOrder(intArray0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(resultMatrixHTML0);
      assertEquals(0, resultMatrixLatex1.getStdDevWidth());
      
      resultMatrixLatex1.setStdDevWidth(2);
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.setSignificanceWidth(0);
      resultMatrixLatex1.getDisplayName();
      resultMatrixLatex1.getDefaultMeanWidth();
      resultMatrixLatex1.toStringRanking();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML();
      ResultMatrixHTML resultMatrixHTML2 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML2.getDisplayName();
      resultMatrixHTML2.isSignificance(0);
      resultMatrixLatex0.getSummaryTitle(40);
      resultMatrixLatex0.getEnumerateColNames();
      resultMatrixHTML1.setMeanWidth(718);
      ResultMatrixHTML resultMatrixHTML3 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 718);
      resultMatrixGnuPlot0.getRevision();
      resultMatrixHTML0.toStringRanking();
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5581853490248117
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.enumerateColNamesTipText();
      resultMatrixHTML0.getAverage(1);
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertTrue(resultMatrixHTML0.getEnumerateColNames());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertTrue(resultMatrixHTML0.getPrintRowNames());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertEquals(0, resultMatrixHTML0.getCountWidth());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText1.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      
      resultMatrixPlainText1.clear();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(284, 1);
      resultMatrixSignificance0.globalInfo();
      assertEquals(284, resultMatrixSignificance0.getColCount());
      assertEquals(1, resultMatrixSignificance0.getVisibleRowCount());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.3855482833762016
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixHTML0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixCSV0);
      resultMatrixGnuPlot0.enumerateColNamesTipText();
      double double0 = resultMatrixHTML0.getAverage(1);
      assertEquals(5, resultMatrixHTML0.getCountWidth());
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getSignificanceWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
      assertTrue(resultMatrixHTML0.getPrintColNames());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(0.0, double0, 0.01);
      
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText2.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      
      resultMatrixPlainText1.clear();
      assertFalse(resultMatrixPlainText1.getRemoveFilterName());
      
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 1);
      resultMatrixSignificance0.globalInfo();
      assertEquals(1, resultMatrixSignificance0.getRowCount());
      assertEquals(0, resultMatrixSignificance0.getDefaultCountWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultColNameWidth());
      assertEquals(0, resultMatrixSignificance0.getDefaultStdDevWidth());
      assertFalse(resultMatrixSignificance0.getDefaultShowAverage());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=4.049831131191203
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add((Object) vector1);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixHTML.main((String[]) null);
      resultMatrixGnuPlot0.getRowName(3);
      resultMatrixGnuPlot0.setStdDevPrec(50);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(614, 3);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      resultMatrixPlainText0.m_RowHidden = booleanArray0;
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.setColNameWidth(2);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.setMean(3437, 50, 0.0);
      assertEquals(2, resultMatrixPlainText0.getColNameWidth());
      assertEquals(25, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2243424993838863
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setColNameWidth((-740));
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance(resultMatrixSignificance0);
      resultMatrixSignificance1.m_ColNameWidth = (-568);
      resultMatrixSignificance1.getSummaryTitle(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.setMeanWidth(0);
      resultMatrixHTML0.toStringRanking();
      resultMatrixHTML0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(2, (-453));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.4834536907207365
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setPrintColNames(false);
      resultMatrixSignificance0.setMeanPrec(812);
      resultMatrixSignificance0.padString("/\"JrJD&wvoWz(lh(C", 812, false);
      resultMatrixSignificance0.setCountWidth(1938);
      resultMatrixSignificance0.globalInfo();
      assertEquals(812, resultMatrixSignificance0.getMeanPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(32, 32);
      resultMatrixCSV0.getSummaryTitle(1);
      resultMatrixCSV0.getDefaultEnumerateColNames();
      assertEquals(32, resultMatrixCSV0.getVisibleColCount());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.8835088465860275
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.setColNameWidth(758);
      resultMatrixSignificance0.m_StdDevWidth = 3;
      resultMatrixSignificance0.enumerateColNamesTipText();
      resultMatrixSignificance0.getMeanPrec();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(3, 1);
      resultMatrixPlainText0.toStringMatrix();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "(";
      stringArray0[1] = "v";
      stringArray0[2] = " ";
      stringArray0[3] = "Dataset                   (1) col | (2) (3)\n-------------------------------------------\nrow0                       (0)    |        \n-------------------------------------------\n                          (v/ /* (0/ (0/0/0\n";
      stringArray0[4] = "*";
      stringArray0[5] = "*";
      try { 
        resultMatrixPlainText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.383919653782287
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getDefaultEnumerateRowNames();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      resultMatrixCSV0.setShowStdDev(false);
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.isMean(0);
      resultMatrixCSV0.toStringKey();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1, (-2063));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3674853671986376
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 0);
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.assign(resultMatrixPlainText1);
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText0.setMeanWidth(2);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      String string0 = resultMatrixCSV0.meanPrecTipText();
      assertEquals(2, resultMatrixPlainText0.getMeanWidth());
      assertEquals("The number of decimals after the decimal point for the mean.", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.9661193525639833
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[8];
      resultMatrixLatex0.m_EnumerateColNames = false;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.clear();
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setStdDevWidth((-2791));
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.setSignificanceWidth(40);
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.toStringRanking();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      resultMatrixLatex1.getSummaryTitle(40);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~>Y3{y:S;.cv{Tn";
      stringArray0[1] = "$circ$";
      stringArray0[2] = " ";
      stringArray0[3] = "$\bullet$";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixLatex resultMatrixLatex2 = new ResultMatrixLatex(695, 1203);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=4.046876500975587
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 0);
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.assign(resultMatrixPlainText1);
      resultMatrixPlainText1.TIE_STRING = ")";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.m_ColNameWidth = (-783);
      resultMatrixSignificance0.toStringSummary();
      resultMatrixPlainText1.setShowStdDev(false);
      Vector<String> vector0 = new Vector<String>();
      resultMatrixPlainText1.m_HeaderKeys = vector0;
      ResultMatrixPlainText.main((String[]) null);
      vector0.add("*");
      resultMatrixSignificance0.removeFilterNameTipText();
      resultMatrixPlainText1.getShowStdDev();
      resultMatrixSignificance0.enumerateRowNamesTipText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(25, 1);
      resultMatrixGnuPlot0.getRowName((-1219));
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixPlainText1.setSignificanceWidth(1);
      resultMatrixSignificance0.setCountWidth(97);
      assertEquals((-783), resultMatrixSignificance0.getColNameWidth());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4760233619604413
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(0, 0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixCSV0.getDefaultStdDevPrec();
      resultMatrixPlainText0.setEnumerateRowNames(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowStdDev());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.3189073220198044
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      resultMatrixCSV1.getCount(2);
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(2, resultMatrixCSV1.getRowCount());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      
      boolean boolean0 = resultMatrixCSV0.getRowHidden(2);
      assertFalse(boolean0);
      assertFalse(resultMatrixCSV0.getRemoveFilterName());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.937194786428744
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixHTML0.m_EnumerateColNames = true;
      resultMatrixHTML0.stdDevPrecTipText();
      resultMatrixHTML0.setPrintColNames(true);
      resultMatrixHTML0.getColHidden((-1392));
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.RIGHT_PARENTHESES = ")";
      resultMatrixCSV0.toStringRanking();
      resultMatrixCSV0.toStringRanking();
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-ranking data not set-";
      stringArray0[1] = "v";
      stringArray0[2] = ")";
      ResultMatrixCSV.main(stringArray0);
      resultMatrixHTML0.countWidthTipText();
      resultMatrixCSV0.printColNamesTipText();
      resultMatrixCSV0.getDefaultRowNameWidth();
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getColNameWidth());
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.358659878334121
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2568, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray1[2] = 2568;
      intArray1[3] = 2;
      intArray1[4] = 2;
      intArray1[5] = 1;
      intArray1[6] = 26;
      intArray1[7] = 1;
      intArray1[8] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      intArray2[0] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[0];
      intArray0[2] = intArray3;
      int[] intArray4 = new int[7];
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 2;
      intArray4[3] = 26;
      intArray4[4] = 2568;
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 26;
      intArray5[1] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      intArray6[0] = 2;
      intArray6[1] = 0;
      intArray6[2] = 1;
      intArray6[3] = 2568;
      intArray6[4] = 2;
      intArray6[5] = 0;
      intArray6[6] = 26;
      intArray6[7] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[4];
      intArray7[0] = 2568;
      intArray7[1] = 0;
      intArray7[2] = 0;
      intArray7[3] = 0;
      intArray0[6] = intArray7;
      resultMatrixPlainText0.m_Significance = intArray0;
      double double0 = resultMatrixPlainText0.getAverage(1951);
      assertEquals(2, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      assertEquals(25, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(0, resultMatrixPlainText0.getStdDevWidth());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
      assertEquals(0, resultMatrixPlainText0.getSignificanceWidth());
      assertEquals(0, resultMatrixPlainText0.getMeanWidth());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertEquals(0, resultMatrixPlainText0.getDefaultColNameWidth());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.208676515886898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      int int0 = 0;
      resultMatrixCSV0.m_ColNameWidth = 0;
      int[][] intArray0 = new int[2][8];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[6];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray2[4] = 1;
      intArray2[5] = 1;
      intArray0[1] = intArray2;
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.291697895352307
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.padString("2VH=L1TO\u0001X>dh;5TN", (-573));
      int[][] intArray0 = new int[6][3];
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = (-573);
      intArray1[2] = 1;
      intArray1[3] = 0;
      intArray1[4] = 1;
      intArray1[5] = (-573);
      intArray1[6] = 0;
      intArray1[7] = (-573);
      intArray1[8] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 2;
      intArray2[1] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 1;
      intArray3[2] = (-1868);
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray3[5] = (-573);
      intArray3[6] = 1;
      intArray3[7] = (-573);
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = (-1868);
      intArray4[1] = 2;
      intArray4[2] = (-573);
      intArray4[3] = 0;
      intArray4[4] = (-1868);
      intArray4[5] = 1;
      intArray4[6] = 2;
      intArray4[7] = (-1868);
      intArray0[3] = intArray4;
      int[] intArray5 = new int[3];
      intArray5[0] = 2;
      intArray5[1] = 2;
      intArray5[2] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[7];
      intArray6[0] = 1;
      intArray6[1] = 1;
      intArray6[2] = 2;
      intArray6[3] = 1;
      intArray6[4] = 0;
      intArray6[5] = 0;
      intArray6[6] = 3;
      intArray0[5] = intArray6;
      resultMatrixSignificance0.m_Wins = intArray0;
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(0, (-573));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.337588728123289
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getRowName((-428));
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.padString((String) null, (-428), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3281951888891284
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      resultMatrixCSV0.WIN_STRING = "(";
      booleanArray0[2] = false;
      resultMatrixSignificance0.LEFT_PARENTHESES = "*";
      int int0 = (-3876);
      resultMatrixCSV0.getRowName((-3876));
      resultMatrixCSV0.m_RowHidden = booleanArray0;
      resultMatrixCSV0.listOptions();
      resultMatrixCSV0.colNameWidthTipText();
      resultMatrixCSV0.setCountWidth(1);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixSignificance0);
      resultMatrixHTML0.toStringSummary();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.14535757225562
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.globalInfo();
      resultMatrixPlainText0.getRowHidden(0);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex1);
      resultMatrixGnuPlot0.getRevision();
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.665832325993587
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.m_SignificanceWidth = 0;
      resultMatrixSignificance0.m_PrintRowNames = false;
      resultMatrixSignificance0.setRemoveFilterName(false);
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.m_EnumerateRowNames = true;
      resultMatrixSignificance0.globalInfo();
      resultMatrixSignificance0.getEnumerateColNames();
      resultMatrixSignificance0.clearHeader();
      resultMatrixSignificance0.getDefaultEnumerateRowNames();
      resultMatrixSignificance0.setMeanPrec(0);
      resultMatrixSignificance0.getShowAverage();
      int int0 = resultMatrixSignificance0.getSignificanceWidth();
      assertEquals(0, resultMatrixSignificance0.getMeanPrec());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9265038249119817
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.getColNameWidth();
      resultMatrixGnuPlot0.setStdDevWidth(0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      resultMatrixGnuPlot0.m_Counts = doubleArray0;
      assertEquals(0, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(2, resultMatrixSignificance0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      
      resultMatrixCSV0.globalInfo();
      resultMatrixCSV0.setPrintRowNames(true);
      assertFalse(resultMatrixCSV0.getEnumerateRowNames());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      String string0 = resultMatrixPlainText0.toString();
      assertFalse(resultMatrixPlainText0.getRemoveFilterName());
      assertEquals("Dataset                   (1) col0 \n-----------------------------------\nrow0                       (0)    |\n-----------------------------------\n(v/ /*)                           |\n", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.176400616587317
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.isSignificance(0);
      resultMatrixCSV0.getDefaultCountWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setMeanPrec(1);
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray2[3] = 97;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 97;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = 97;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray3[7] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 1;
      intArray4[1] = (-2317);
      intArray4[2] = 1;
      intArray4[3] = 0;
      intArray4[4] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = (-2317);
      intArray0[4] = intArray5;
      int[] intArray6 = new int[5];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 1;
      intArray6[3] = 1;
      intArray6[4] = 566;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      intArray7[0] = 1;
      intArray7[1] = 0;
      intArray7[2] = 97;
      intArray7[3] = (-2933);
      intArray7[4] = 2;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[2];
      intArray8[0] = 97;
      intArray8[1] = (-2933);
      intArray0[7] = intArray8;
      resultMatrixGnuPlot0.m_NonSigWins = intArray0;
      resultMatrixCSV0.setShowStdDev(true);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.assign(resultMatrixGnuPlot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.328610594503038
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.isSignificance(0);
      resultMatrixCSV0.getDefaultCountWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[2] = 1;
      intArray2[3] = 97;
      resultMatrixCSV0.setColNameWidth(0);
      intArray0[1] = intArray2;
      resultMatrixCSV0.setShowStdDev(true);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.assign(resultMatrixGnuPlot0);
      resultMatrixCSV0.setShowAverage(false);
      assertTrue(resultMatrixCSV0.getShowStdDev());
      assertFalse(resultMatrixCSV0.getDefaultShowStdDev());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3302839449545543
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.m_ColNameWidth = 0;
      int[] intArray0 = new int[0];
      int[] intArray1 = new int[6];
      intArray1[0] = 0;
      intArray1[1] = 2;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setColOrder(intArray0);
      String string0 = resultMatrixLatex0.getSummaryTitle(1);
      assertEquals("b", string0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 26);
      resultMatrixGnuPlot0.getDisplayName();
      int[] intArray2 = resultMatrixLatex0.getColOrder();
      assertNull(intArray2);
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.globalInfo();
      resultMatrixGnuPlot0.toStringSummary();
      assertEquals(26, resultMatrixGnuPlot0.getVisibleRowCount());
      assertEquals(0, resultMatrixGnuPlot0.getColCount());
      
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      String string1 = resultMatrixCSV1.meanPrecTipText();
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertFalse(resultMatrixCSV0.getShowAverage());
      assertEquals("The number of decimals after the decimal point for the mean.", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3999993976367024
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText1.setMeanWidth(0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.isStdDev(1);
      resultMatrixPlainText1.setStdDevPrec(3);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.setColNameWidth(97);
      resultMatrixPlainText1.m_CountWidth = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = null;
      try {
        resultMatrixGnuPlot0 = new ResultMatrixGnuPlot((-21), (-1981));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5996117360957784
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setStdDevPrec(3090);
      resultMatrixPlainText0.getColName(0);
      resultMatrixPlainText0.doubleToString((-1981.191407566), 0);
      resultMatrixPlainText0.clearHeader();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.getSummaryTitle((-1));
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 713);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixLatex0.getColOrder();
      assertEquals(3090, resultMatrixPlainText0.getStdDevPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getCount(0);
      resultMatrixCSV0.getRowHidden(0);
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintColNames());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.537371242696592
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(25, 25);
      resultMatrixGnuPlot0.m_PrintRowNames = true;
      resultMatrixGnuPlot0.setCountWidth(22);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.getRowCount();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(417, 1);
      resultMatrixHTML0.m_StdDevPrec = (-1);
      resultMatrixHTML0.globalInfo();
      resultMatrixGnuPlot0.stdDevPrecTipText();
      assertEquals(22, resultMatrixGnuPlot0.getCountWidth());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.035654620534062
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add((Object) vector1);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixHTML.main((String[]) null);
      resultMatrixGnuPlot0.getRowName(3);
      resultMatrixGnuPlot0.setStdDevPrec(50);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(614, 3);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1835);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixHTML0);
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixGnuPlot0.getDefaultPrintColNames();
      assertEquals(50, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixPlainText0.getRowCount();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 682);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.054558850646242
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add((Object) vector1);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      assertEquals(1, resultMatrixGnuPlot0.getVisibleColCount());
      assertEquals(1, resultMatrixGnuPlot0.getVisibleRowCount());
      
      ResultMatrixHTML.main((String[]) null);
      resultMatrixGnuPlot0.getRowName(3);
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixGnuPlot0.setStdDevPrec(50);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(614, 3);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.getCount(50);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getRemoveFilterName();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=4.060432762439033
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add((Object) vector1);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixHTML.main((String[]) null);
      resultMatrixGnuPlot0.getRowName(3);
      resultMatrixGnuPlot0.setStdDevPrec(50);
      assertEquals(0, resultMatrixGnuPlot0.getMeanPrec());
      
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(614, 3);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      resultMatrixPlainText0.m_RowHidden = booleanArray0;
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.setColNameWidth(2);
      resultMatrixPlainText0.showStdDevTipText();
      assertEquals(2, resultMatrixPlainText0.getColNameWidth());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.2834713987917805
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      String string0 = resultMatrixGnuPlot0.getSummaryTitle(18);
      assertEquals("s", string0);
      
      String string1 = resultMatrixGnuPlot0.toStringKey();
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals("Key:\n(1) col0\n", string1);
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(1, resultMatrixPlainText0.getRowCount());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.447952576635067
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText();
      String string0 = resultMatrixPlainText2.toStringKey();
      assertEquals("Key:\n(1) col0\n", string0);
      
      resultMatrixPlainText1.clear();
      int int0 = ResultMatrix.SIGNIFICANCE_TIE;
      int int1 = resultMatrixPlainText1.getDisplayCol((-1539));
      assertEquals(1, resultMatrixPlainText1.getColCount());
      assertFalse(resultMatrixPlainText1.getShowAverage());
      assertEquals((-1), int1);
      assertTrue(resultMatrixPlainText1.getDefaultPrintRowNames());
      assertTrue(resultMatrixPlainText1.getDefaultPrintColNames());
      assertEquals(1, resultMatrixPlainText1.getRowCount());
      assertEquals(2, resultMatrixPlainText1.getMeanPrec());
      assertTrue(resultMatrixPlainText1.getEnumerateColNames());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.9665862961192984
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "]";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.globalInfo();
      resultMatrixPlainText0.setEnumerateRowNames(true);
      int[][] intArray0 = new int[8][1];
      int[] intArray1 = new int[9];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = (-882);
      intArray1[4] = 1;
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray1[7] = 0;
      intArray1[8] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = (-882);
      intArray2[1] = 2;
      intArray2[2] = 0;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[4];
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 0;
      intArray5[1] = 2;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 1867;
      intArray5[5] = 1;
      intArray5[6] = 0;
      intArray5[7] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[9];
      intArray6[0] = (-882);
      intArray6[1] = 2;
      intArray6[2] = 1867;
      intArray6[3] = 0;
      intArray6[4] = (-882);
      intArray6[5] = 0;
      intArray6[6] = 0;
      intArray6[7] = 0;
      intArray6[8] = 1;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[9];
      intArray7[0] = 0;
      intArray7[1] = (-882);
      intArray7[2] = 0;
      intArray7[3] = 0;
      intArray7[4] = 1;
      intArray7[5] = 1;
      intArray7[6] = (-882);
      intArray7[7] = (-1236);
      intArray7[8] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[9];
      intArray8[0] = 0;
      intArray8[1] = (-1236);
      intArray8[2] = 0;
      intArray8[3] = (-1);
      intArray8[4] = 0;
      intArray8[5] = 0;
      intArray8[6] = 0;
      intArray8[7] = 2;
      intArray8[8] = 1867;
      intArray0[7] = intArray8;
      resultMatrixPlainText0.m_Wins = intArray0;
      resultMatrixPlainText0.getColHidden(1916);
      String[][] stringArray1 = new String[0][1];
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.getColSize(stringArray1, 1916, false, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.7886476528721515
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[8];
      resultMatrixLatex0.m_EnumerateColNames = false;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.clear();
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixLatex0.setStdDevWidth((-696));
      resultMatrixLatex0.toStringMatrix();
      resultMatrixLatex0.setSignificanceWidth((-1));
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.getSummaryTitle(2);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex(695, 40);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4777172750350522
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixHTML0);
      double double0 = resultMatrixCSV1.getCount((-2025));
      assertEquals(0.0, double0, 0.01);
      assertFalse(resultMatrixCSV1.getEnumerateRowNames());
      assertTrue(resultMatrixCSV1.getEnumerateColNames());
      assertEquals(2, resultMatrixCSV1.getMeanPrec());
      assertEquals(2, resultMatrixCSV1.getStdDevPrec());
      assertEquals(0, resultMatrixCSV1.getStdDevWidth());
      assertEquals(25, resultMatrixCSV1.getRowNameWidth());
      assertEquals(0, resultMatrixCSV1.getMeanWidth());
      assertTrue(resultMatrixCSV1.getPrintRowNames());
      assertEquals(0, resultMatrixCSV1.getCountWidth());
      
      resultMatrixCSV0.getRowHidden(0);
      assertEquals(0, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1752469723307137
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[6] = 2;
      resultMatrixHTML0.m_RowOrder = intArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      boolean[] booleanArray0 = new boolean[0];
      resultMatrixHTML0.m_RowHidden = booleanArray0;
      resultMatrixGnuPlot0.enumerateColNamesTipText();
      int int0 = 0;
      resultMatrixGnuPlot0.setCountWidth(0);
      resultMatrixGnuPlot0.toStringRanking();
      int[][] intArray1 = new int[0][6];
      String[] stringArray0 = new String[7];
      stringArray0[0] = " ";
      stringArray0[1] = ")";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      stringArray0[6] = "(";
      resultMatrixHTML0.m_ColNames = stringArray0;
      resultMatrixHTML0.clearRanking();
      // Undeclared exception!
      try { 
        resultMatrixHTML0.setSummary(intArray1, (int[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.931585653977049
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 2568;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2568, 0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixHTML0);
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 1;
      resultMatrixHTML0.clearRanking();
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      // Undeclared exception!
      resultMatrixHTML0.toString();
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.368449193589409
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(0, 0);
      resultMatrixPlainText0.clearSummary();
      resultMatrixPlainText0.assign(resultMatrixPlainText1);
      resultMatrixPlainText1.TIE_STRING = ")";
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixSignificance0.m_ColNameWidth = (-783);
      resultMatrixSignificance0.toStringSummary();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.clearRanking();
      ResultMatrixHTML resultMatrixHTML1 = new ResultMatrixHTML(2, 0);
      // Undeclared exception!
      try { 
        resultMatrixHTML1.setSummary((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.285182207734642
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add((Object) vector1);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixGnuPlot0.getRowNameWidth();
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      resultMatrixGnuPlot0.enumerateColNamesTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(50, 1246);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.3386858777722086
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.isSignificance(0);
      resultMatrixCSV0.getDefaultCountWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      int[][] intArray0 = new int[8][8];
      int[] intArray1 = new int[3];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[2] = 1;
      intArray2[3] = 97;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[8];
      intArray3[0] = 0;
      intArray3[1] = 97;
      intArray3[2] = 0;
      intArray3[3] = 2;
      intArray3[4] = 97;
      intArray3[5] = 0;
      resultMatrixCSV0.setRanking(intArray0);
      resultMatrixCSV0.setCountWidth(0);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.540056638600307
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      int[] intArray0 = new int[8];
      resultMatrixLatex0.m_EnumerateColNames = false;
      String string0 = resultMatrixLatex0.toStringKey();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption (Key)}\n\\scriptsize\n{\\centering\n\\begin{tabular}{cl}\\\\\n(1) & col0 \\\\\n\\end{tabular}\n}\n\\end{table}\n", string0);
      
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 0;
      resultMatrixLatex0.clear();
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 1821;
      intArray0[7] = 0;
      resultMatrixLatex0.setColOrder(intArray0);
      int[] intArray1 = new int[2];
      intArray1[0] = 40;
      resultMatrixLatex0.setStdDevWidth(0);
      intArray1[1] = 1;
      resultMatrixLatex0.m_StdDevPrec = 0;
      resultMatrixLatex0.setSignificanceWidth((-1));
      resultMatrixLatex0.getDisplayName();
      resultMatrixLatex0.getDefaultMeanWidth();
      resultMatrixLatex0.toStringRanking();
      assertEquals(0, resultMatrixLatex0.getSignificanceWidth());
      assertFalse(resultMatrixLatex0.getDefaultShowAverage());
      assertFalse(resultMatrixLatex0.getRemoveFilterName());
      assertEquals(1, resultMatrixLatex0.getVisibleRowCount());
      assertEquals(0, resultMatrixLatex0.getStdDevWidth());
      assertEquals(2, resultMatrixLatex0.getDefaultMeanPrec());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.542226573227249
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setStdDevPrec(3090);
      resultMatrixPlainText0.getColName(0);
      resultMatrixPlainText0.doubleToString((-1981.191407566), 0);
      resultMatrixPlainText0.clearHeader();
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 3230.2775766678697;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (double) 3090;
      doubleArray2[1] = (double) 0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = (-1981.191407566);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-1981.191407566);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = (double) 0;
      doubleArray5[1] = (double) 2;
      doubleArray5[2] = (double) 1;
      doubleArray5[3] = (double) 0;
      doubleArray5[4] = (double) 1;
      doubleArray5[5] = (double) 0;
      doubleArray5[6] = (-1.0);
      doubleArray5[7] = 3230.2775766678697;
      doubleArray5[8] = (double) 1;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 3230.2775766678697;
      doubleArray6[1] = (-1.0);
      doubleArray6[2] = (double) 1;
      doubleArray6[3] = (-1981.191407566);
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = (double) 0;
      doubleArray7[1] = 1.0;
      doubleArray7[2] = 3230.2775766678697;
      doubleArray7[3] = (double) 0;
      doubleArray7[4] = 3230.2775766678697;
      doubleArray7[5] = (double) 0;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[4];
      doubleArray8[0] = 3230.2775766678697;
      doubleArray8[1] = (-108.68);
      doubleArray8[2] = (-1.0);
      doubleArray8[3] = (double) 0;
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[9];
      doubleArray9[0] = (double) 0;
      doubleArray9[1] = (-1.0);
      doubleArray9[2] = (-843.0);
      doubleArray9[3] = (double) 2;
      doubleArray9[4] = (double) 1;
      doubleArray9[5] = (double) 3090;
      doubleArray9[6] = (double) 0;
      doubleArray9[7] = 0.0;
      doubleArray9[8] = (-108.68);
      doubleArray0[8] = doubleArray9;
      resultMatrixPlainText0.m_StdDev = doubleArray0;
      resultMatrixPlainText0.getStdDevWidth();
      resultMatrixPlainText0.toStringKey();
      resultMatrixPlainText0.setMeanWidth(3090);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.getDefaultStdDevWidth();
      assertEquals(3090, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(25, resultMatrixCSV0.getRowNameWidth());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=4.058785709749019
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      Vector<Object> vector0 = new Vector<Object>();
      resultMatrixGnuPlot0.m_HeaderKeys = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.add((Object) vector1);
      resultMatrixGnuPlot0.setMeanPrec(0);
      resultMatrixGnuPlot0.clearHeader();
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      ResultMatrixHTML.main((String[]) null);
      resultMatrixGnuPlot0.getRowName(3);
      resultMatrixGnuPlot0.setStdDevPrec(50);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(614, 3);
      boolean[] booleanArray0 = new boolean[9];
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.getCount(50);
      resultMatrixCSV0.getRowHidden((-2807));
      assertEquals(50, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(50, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.8495309785158773
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "*";
      stringArray0[1] = "*";
      stringArray0[2] = "(";
      stringArray0[3] = "(";
      stringArray0[4] = "v";
      resultMatrixHTML0.setOptions(stringArray0);
      intArray0[3] = 1;
      intArray0[4] = 2;
      intArray0[5] = 1;
      intArray0[4] = 2;
      resultMatrixHTML0.m_RowOrder = intArray0;
      assertEquals(0, resultMatrixHTML0.getStdDevPrec());
      
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getCount(6);
      resultMatrixCSV0.getRowHidden(1203);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_MeanWidth = 2116;
      resultMatrixGnuPlot0.getDefaultRowNameWidth();
      resultMatrixCSV0.stdDevWidthTipText();
      assertEquals(0, resultMatrixCSV0.getDefaultStdDevWidth());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.309538607305853
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(431, 0);
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      
      resultMatrixGnuPlot0.m_StdDevPrec = 0;
      resultMatrixGnuPlot0.getPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.WIN_STRING = " ";
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.toStringSummary();
      assertEquals(0, resultMatrixSignificance0.getCountWidth());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.004656710214629
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      
      resultMatrixLatex0.m_EnumerateColNames = false;
      resultMatrixHTML0.getColName(1);
      resultMatrixLatex0.getSignificance(2, 265);
      resultMatrixHTML0.getRowName(2);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")";
      stringArray0[1] = "v";
      stringArray0[2] = " ";
      stringArray0[3] = "az(#Fe/st)";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "(";
      ResultMatrixHTML.main(stringArray0);
      int int0 = resultMatrixLatex0.getDisplayRow(32);
      assertEquals((-1), int0);
  }
}
