/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:26:24 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.evaluation.output.prediction.Null;
import weka.classifiers.evaluation.output.prediction.PlainText;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.converters.ArffLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.321674553052585
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      textDirectoryLoader0.setRetrieval(2);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      evaluation0.toSummaryString("@data", false);
      stringArray0[0] = "@end";
      stringArray0[2] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      stringArray0[4] = "@attribute";
      double double0 = evaluation0.m_SumSchemeEntropy;
      double double1 = evaluation0.m_WithClass;
      evaluation0.toCumulativeMarginDistributionString();
      boolean boolean0 = evaluation0.m_ClassIsNominal;
      evaluation0.SFEntropyGain();
      instances0.sort(attribute0);
      evaluation0.toSummaryString("@attribute", true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      evaluation0.toClassDetailsString("string");
      doubleArray0[1] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-570.27), (int[]) null, (-2161));
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3204863871626777
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.KBInformation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = evaluation0.m_Correct;
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(101);
      OneR oneR0 = new OneR();
      evaluation0.toCumulativeMarginDistributionString();
      double double1 = evaluation0.m_SumAbsErr;
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9225240175862939
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (double) 101;
      Attribute attribute0 = new Attribute(".arff", instances0, 33);
      instances0.deleteWithMissing(attribute0);
      textDirectoryLoader0.reset();
      Attribute attribute1 = new Attribute("iArkeSGga=S_oxr 4", instances0, 103);
      instances0.deleteWithMissing(attribute1);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[1] = "@data";
      stringArray0[2] = "real";
      stringArray0[3] = "@end";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "iArkeSGga=S_oxr 4";
      AbstractClassifier.runClassifier((Classifier) null, stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, (int[]) null, 33);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.06969217178135
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.setRetrieval(44);
      M5Rules m5Rules0 = new M5Rules();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(m5Rules0);
      Evaluation.makeOptionString(additiveRegression0, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString("Attribute selection has not been performed yet!", true);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals("Attribute selection has not been performed yet!\nTotal Number of Instances                0     \n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.4877197342355832
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      textDirectoryLoader0.setRetrieval(2);
      instances0.deleteWithMissing(attribute0);
      double double0 = evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1100);
      instances0.add((Instance) binarySparseInstance0);
      stringArray0[4] = "@attribute";
      double double1 = evaluation0.numTrueNegatives(4);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      evaluation0.weightedFMeasure();
      double double2 = evaluation0.SFMeanPriorEntropy();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.truePositiveRate(99);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.255744796435741
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("V[PBrS2P5O,", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN(1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = 2355.0155792504547;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 1;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      evaluation0.toClassDetailsString();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0;
      evaluation1.priorEntropy();
      try { 
        evaluation0.evaluateModel((Classifier) lWL0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Double cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.926151122656106
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("selves", instances0);
      textDirectoryLoader0.setRetrieval(1906);
      instances0.deleteWithMissing(attribute0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      evaluation0.useNoPriors();
      attribute0.toString();
      double double1 = evaluation0.m_WithClass;
      evaluation0.weightedFalseNegativeRate();
      evaluation0.pctUnclassified();
      attribute0.value(1826);
      evaluation0.getDiscardPredictions();
      evaluation0.SFEntropyGain();
      evaluation0.toSummaryString("date", false);
      evaluation0.trueNegativeRate((-7));
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation1.weightedFalsePositiveRate();
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.973423374968563
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (double) 101;
      Attribute attribute0 = new Attribute(".arff", instances0, 33);
      instances0.deleteWithMissing(attribute0);
      textDirectoryLoader0.reset();
      Attribute attribute1 = new Attribute("iArkeSGga=S_oxr 4", instances0, 103);
      instances0.deleteWithMissing(attribute1);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives((-17));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties1.clone();
      Attribute attribute2 = new Attribute("_!kHtB7&<HBFz%rv", (List<String>) null, protectedProperties1);
      evaluation0.getDiscardPredictions();
      evaluation0.SFEntropyGain();
      evaluation0.toSummaryString("@data", false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(580.2523536, (int[]) null, 7);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-17);
      doubleArray0[1] = 101.0;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7878934005032803
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (double) 101;
      Attribute attribute0 = new Attribute(".arff", instances0, 33);
      instances0.deleteWithMissing(attribute0);
      textDirectoryLoader0.reset();
      Attribute attribute1 = new Attribute("@end", instances0, 103);
      instances0.deleteWithMissing(attribute1);
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(33);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute2 = new Attribute("_!kHtB7&<HBFz%rv", (List<String>) null, protectedProperties1);
      attribute2.enumerateValues();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "real");
      evaluation0.priorEntropy();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.weightedFalsePositiveRate();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8934284047624406
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Attribute attribute0 = new Attribute("a:|F", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      JRip jRip0 = new JRip();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      try { 
        CostMatrix.parseMatlab("seedTipText");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7809234795355935
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("V[PBrS2P5O,", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      
      LWL lWL0 = new LWL();
      lWL0.setKNN(2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      evaluation1.useNoPriors();
      evaluation1.numTrueNegatives(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+k'~W`nQ");
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.numTrueNegatives(1);
      evaluation0.weightedFMeasure();
      evaluation1.weightedFalseNegativeRate();
      evaluation1.pctUnclassified();
      evaluation2.setDiscardPredictions(false);
      evaluation1.makeDistribution(Double.NaN);
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Evaluation.getGlobalInfo(classificationViaRegression0);
      int int0 = (-206797271);
      RandomTree randomTree0 = new RandomTree();
      AbstractClassifier.runClassifier(randomTree0, (String[]) null);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      int int1 = 122;
      double double0 = 0.0;
      ArffLoader arffLoader0 = new ArffLoader();
      try { 
        arffLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.ArffLoader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1890755810210387
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-1766.15980099);
      Attribute attribute0 = new Attribute(".arff", instances0, (-8));
      instances0.deleteWithMissing(attribute0);
      Attribute.typeToString(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[3] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "string";
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 101;
      doubleArray0[3] = (double) 101;
      doubleArray0[4] = (double) 2;
      lWL0.setKNN(72);
      doubleArray0[5] = (double) 101;
      doubleArray0[6] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0);
      evaluation0.toClassDetailsString();
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      evaluation1.numFalsePositives(101);
      try { 
        Evaluation.evaluateModel("\nWeka exception: ", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 
         // Weka exception: .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.286742642027288
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@data");
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      textDirectoryLoader0.setRetrieval(2);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      evaluation0.getRevision();
      stringArray0[0] = "@end";
      stringArray0[2] = "@data";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Instances instances1 = null;
      JSONLoader jSONLoader0 = new JSONLoader();
      try { 
        jSONLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7094458197175149
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.toArray();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (double) 101;
      JRip jRip0 = new JRip();
      evaluation0.toMatrixString(".bsi");
      try { 
        CostMatrix.parseMatlab("seedTipText");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.2376830354502575
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      Instances instances1 = textDirectoryLoader0.getStructure();
      attribute0.copy(".bsi");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "date");
      instances1.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(109);
      // Undeclared exception!
      try { 
        evaluation0.addNumericTrainClass(7.0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 101
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.5357537518264803
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      attribute0.toString();
      textDirectoryLoader0.setRetrieval(2);
      textDirectoryLoader0.getStructure();
      Attribute attribute1 = attribute0.copy("W#W2.Kf}O@#.@g");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "   * Runs the classfier from commandline.\n");
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[1] = "@data";
      attribute1.copy();
      evaluation0.addNumericTrainClass(0.0, 0);
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      LogitBoost logitBoost0 = new LogitBoost();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1814.37339781), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) logitBoost0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 63);
      int int0 = 11;
      Evaluation.handleCostOption((String) null, 11);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.035336244516708
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      evaluation1.numTrueNegatives(1648);
      OneR oneR0 = new OneR();
      evaluation1.toSummaryString();
      String[] stringArray0 = new String[9];
      stringArray0[2] = "l{-";
      stringArray0[3] = "\nTotal Number of Instances                0     \n";
      stringArray0[4] = "@data";
      stringArray0[5] = "\nTotal Number of Instances                0     \n";
      stringArray0[6] = "4y@d.vau$so,6n'j";
      stringArray0[7] = "@data";
      Evaluation.main(stringArray0);
      evaluation1.setDiscardPredictions(false);
      evaluation1.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, evaluation1.SFPriorEntropy(), 0.01);
      
      evaluation0.SFSchemeEntropy();
      String string0 = evaluation0.toSummaryString(false);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8634686842586974
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("debugTipText", instances0, 3134);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      double double0 = evaluation1.numTrueNegatives(1648);
      assertEquals(0.0, double0, 0.01);
      
      OneR oneR0 = new OneR();
      oneR0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "string";
      stringArray0[1] = "date";
      stringArray0[2] = "l{-";
      stringArray0[3] = "Class for building and using a 1R classifier; in other words, uses the minimum-error attribute for prediction, discretizing numeric attributes. For more information, see:\n\nR.C. Holte (1993). Very simple classification rules perform well on most commonly used datasets. Machine Learning. 11:63-91.";
      stringArray0[4] = "@data";
      stringArray0[5] = "Class for building and using a 1R classifier; in other words, uses the minimum-error attribute for prediction, discretizing numeric attributes. For more information, see:\n\nR.C. Holte (1993). Very simple classification rules perform well on most commonly used datasets. Machine Learning. 11:63-91.";
      stringArray0[6] = "4y@d.vau$so,6n'j";
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.runClassifier(oneR0, stringArray0);
      double double1 = evaluation1.m_TotalSizeOfRegions;
      double double2 = evaluation0.avgCost();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.SFMeanEntropyGain();
      evaluation0.equals((Object) null);
      evaluation0.confusionMatrix();
      evaluation1.weightedAreaUnderPRC();
      double double4 = evaluation0.pctUnclassified();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9316511444802997
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      String string0 = "a+:I(F";
      Attribute attribute0 = new Attribute("a+:I(F", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[1];
      String string1 = "p";
      stringArray0[0] = "@attribute";
      AbstractClassifier.runClassifier(lWL0, stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1920.7741318979, (int[]) null, 1);
      try { 
        evaluation0.updatePriors(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.490233574650489
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, evaluation0.sizeOfPredictedRegions(), 0.01);
      
      evaluation0.useNoPriors();
      attribute0.toString();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation1.m_WithClass;
      double double2 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.pctUnclassified();
      attribute0.value((byte) (-1));
      evaluation2.getDiscardPredictions();
      evaluation0.SFEntropyGain();
      evaluation1.toSummaryString("numeric", false);
      evaluation0.areaUnderROC(1826);
      Evaluation evaluation3 = new Evaluation(instances0);
      String string0 = evaluation3.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.weightedFMeasure();
      Evaluation evaluation5 = new Evaluation(instances0, (CostMatrix) null);
      evaluation5.sizeOfPredictedRegions();
      assertEquals(0.0, evaluation5.unclassified(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.566524658175303
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      attribute0.toString();
      textDirectoryLoader0.setRetrieval(2);
      textDirectoryLoader0.getStructure();
      attribute0.copy("W#W2.Kf}O@#.@g");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "   * Runs the classfier from commandline.\n");
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      stringArray0[4] = "@attribute";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      double double0 = evaluation0.numTrueNegatives(4);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.SFSchemeEntropy();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.falsePositiveRate(3);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.sizeOfPredictedRegions();
      double double4 = evaluation0.weightedPrecision();
      assertEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.080747840101659
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (double) 101;
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.runClassifier(zeroR0, (String[]) null);
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 101;
      doubleArray0[1] = (-1.7976931348623157E308);
      doubleArray0[2] = (-1.7976931348623157E308);
      doubleArray0[3] = (double) 101;
      doubleArray0[4] = (double) (-1641);
      doubleArray0[5] = (-1.7976931348623157E308);
      doubleArray0[6] = (double) 101;
      doubleArray0[7] = 2520.683667;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 844, (-3343.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 844
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.78565733829864
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      attribute0.toString();
      textDirectoryLoader0.setRetrieval(2);
      textDirectoryLoader0.getStructure();
      attribute0.copy("W#W2.Kf}O@#.@g");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "   * Runs the classfier from commandline.\n");
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      stringArray0[4] = "@attribute";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      evaluation0.numTrueNegatives(4);
      evaluation0.weightedFMeasure();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.pctUnclassified();
      evaluation0.setDiscardPredictions(false);
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.542746016770894
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (double) 101;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Instances instances1 = instances0.resampleWithWeights((Random) null, booleanArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setPriors(instances1);
      evaluation1.numTrueNegatives(0);
      Evaluation evaluation2 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = ".bsi";
      Evaluation.main(stringArray0);
      evaluation0.setDiscardPredictions(false);
      double double0 = evaluation2.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.341748649525924
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)82;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-55);
      byteArray0[4] = (byte)1;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      textDirectoryLoader0.setRetrieval(2);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1107);
      instances0.add((Instance) binarySparseInstance0);
      stringArray0[4] = "@attribute";
      evaluation0.numTrueNegatives(4);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      evaluation0.weightedFMeasure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(3);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) naiveBayesMultinomialText0, (Instance) binarySparseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (double) 101;
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      JSONLoader jSONLoader0 = new JSONLoader();
      evaluation0.weightedAreaUnderPRC();
      try { 
        jSONLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // JSONLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.JSONLoader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.134163907688782
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "string";
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "getClass");
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      MultiScheme multiScheme0 = new MultiScheme();
      CostMatrix costMatrix0 = new CostMatrix(1481);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9999683577390484
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      MockRandom mockRandom0 = new MockRandom(2);
      MockRandom mockRandom1 = new MockRandom();
      mockRandom0.nextInt(1);
      try { 
        evaluation0.crossValidateModel((Classifier) costSensitiveClassifier1, instances1, 113, (Random) mockRandom0, (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1545998441247325
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (double) 101;
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Instances instances1 = instances0.resampleWithWeights((Random) null, booleanArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_SumErr = (double) 101;
      evaluation1.setPriors(instances1);
      evaluation1.numTrueNegatives(0);
      Evaluation evaluation2 = new Evaluation(instances0);
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '\"';
      charArray0[2] = '>';
      evaluation2.num2ShortID(0, charArray0, 101);
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 2;
      doubleArray0[4] = (double) 2;
      try { 
        Evaluation.handleCostOption(".arff", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.818420076954501
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedPrecision();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.useNoPriors();
      OneR oneR0 = new OneR();
      evaluation1.toSummaryString();
      textDirectoryLoader0.setRetrieval(1648);
      evaluation1.setDiscardPredictions(false);
      evaluation1.rootMeanPriorSquaredError();
      evaluation0.SFSchemeEntropy();
      evaluation0.errorRate();
      BallNode ballNode0 = new BallNode(2942, 2942, 2942);
      try { 
        BallNode.calcPivot(ballNode0, ballNode0, instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom(0L);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.setDiscardPredictions(true);
      int[] intArray0 = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[4] = (double) 0L;
      doubleArray0[5] = (double) 0L;
      doubleArray0[7] = (double) 0L;
      KDTree kDTree0 = new KDTree(instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2062.6859762517, doubleArray0);
      try { 
        kDTree0.nearestNeighbour(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.KDTree", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.4407696753202024
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.KBInformation();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double0 = evaluation0.m_Correct;
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(101);
      OneR oneR0 = new OneR();
      oneR0.globalInfo();
      evaluation0.weightedFMeasure();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7769895692287485
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      Attribute.typeToString(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      stringArray0[4] = "@attribute";
      stringArray0[5] = "string";
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 101;
      double double0 = evaluation0.numTrueNegatives((-2736));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation1.weightedFMeasure();
      evaluation1.weightedFalseNegativeRate();
      double double2 = evaluation0.pctUnclassified();
      assertEquals(double2, double1, 0.01);
      
      evaluation0.getDiscardPredictions();
      assertEquals(Double.NaN, evaluation0.weightedFalseNegativeRate(), 0.01);
      
      evaluation1.getHeader();
      assertEquals(Double.NaN, evaluation1.weightedFalseNegativeRate(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.448442309591302
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (-937.048618010424);
      Attribute attribute0 = new Attribute("@relation", instances0);
      attribute0.toString();
      textDirectoryLoader0.setRetrieval(2);
      Instances instances1 = textDirectoryLoader0.getStructure();
      attribute0.copy("W#W2.Kf}O@#.@g");
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      Integer integer0 = new Integer(2478);
      evaluation0.SFMeanEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances1);
      Null null0 = new Null();
      PlainText plainText0 = new PlainText();
      evaluation0.equals(integer0);
      StringReader stringReader0 = new StringReader(".bsi");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 100);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(bufferedReader0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \".bsi\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.665583188414471
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (double) 101;
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      double double0 = evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      double double1 = evaluation0.numTrueNegatives(3);
      OneR oneR0 = new OneR();
      oneR0.globalInfo();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "numeric";
      stringArray0[1] = "numeric";
      stringArray0[2] = "integer";
      stringArray0[3] = "relational";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "integer";
      stringArray0[6] = "&VCU9Aq||XI<1Z!";
      Evaluation.main(stringArray0);
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.totalCost();
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2962664515510975
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("selves", instances0);
      Attribute attribute1 = new Attribute("real", instances0, (-1278));
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(22);
      Evaluation evaluation1 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(3);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@end";
      stringArray0[1] = "string";
      try { 
        evaluation1.crossValidateModel("@end", instances0, 0, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: @end
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setRetrieval(26);
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.871648335419235
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("selves", instances0);
      textDirectoryLoader0.setRetrieval(1906);
      instances0.deleteWithMissing(attribute0);
      double double0 = evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      attribute0.toString();
      double double1 = evaluation0.m_WithClass;
      evaluation0.weightedFalseNegativeRate();
      evaluation0.pctUnclassified();
      attribute0.value(1826);
      evaluation0.getDiscardPredictions();
      double double2 = evaluation0.numTrueNegatives(2);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedFMeasure();
      double double4 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.pctUnclassified();
      assertEquals(double5, double3, 0.01);
      
      evaluation0.setDiscardPredictions(false);
      evaluation0.weightedTruePositiveRate();
      assertFalse(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.3563525160596757
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      evaluation0.m_SumPriorSqrErr = (double) 101;
      Attribute attribute0 = new Attribute(".arff", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(2);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@end";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "relational";
      stringArray0[4] = "@attribute";
      stringArray0[4] = "string";
      evaluation0.weightedFMeasure();
      OneR oneR0 = new OneR();
      String string0 = Evaluation.makeOptionString(oneR0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.485132800746791
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@relation";
      AbstractClassifier.runClassifier(lWL0, stringArray0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      Integer integer0 = new Integer(4);
      evaluation0.SFMeanEntropyGain();
      Evaluation evaluation1 = new Evaluation(instances0);
      Null null0 = new Null();
      evaluation1.equals(null0);
      evaluation0.confusionMatrix();
      evaluation0.weightedAreaUnderPRC();
      try { 
        Evaluation.handleCostOption("@relation", 250007);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5715401270751177
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_NumTrainClassVals = 101;
      Attribute attribute0 = new Attribute("@data", instances0, 101);
      instances0.deleteWithMissing(attribute0);
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives((-3390));
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "string";
      stringArray0[2] = ".bsi";
      evaluation0.m_SumKBInfo = (double) 1;
      stringArray0[3] = "integer";
      stringArray0[4] = "date";
      stringArray0[5] = "@relation";
      stringArray0[6] = ".arff";
      stringArray0[7] = "string";
      AbstractClassifier.runClassifier(zeroR0, stringArray0);
      double double0 = evaluation0.m_TotalSizeOfRegions;
      evaluation1.avgCost();
      evaluation0.SFMeanEntropyGain();
      evaluation1.totalCost();
      try { 
        Evaluation.handleCostOption("string", 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.254948317720226
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("V[PBrS2P5O,", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      double double0 = evaluation0.numTrueNegatives(0);
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN(1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 4;
      lWL0.setKNN((-3624));
      SparseInstance sparseInstance0 = new SparseInstance((-1.7976931348623157E308), doubleArray0);
      String string0 = evaluation0.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      evaluation0.numFalsePositives(2731);
      evaluation1.weightedFMeasure();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      double double1 = evaluation1.precision(0);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      MockRandom mockRandom0 = new MockRandom(2);
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      LWL lWL0 = new LWL();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[4];
      AbstractClassifier.runClassifier(lWL0, stringArray0);
      try { 
        Evaluation.evaluateModel((Classifier) zeroR0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2464595940144045
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Attribute attribute0 = new Attribute("V[PBrS2P5O,", instances0, 0);
      instances0.deleteWithMissing(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedPrecision();
      evaluation0.useNoPriors();
      evaluation0.numTrueNegatives(0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN(1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 4;
      lWL0.setKNN((-3624));
      SparseInstance sparseInstance0 = new SparseInstance((-1.7976931348623157E308), doubleArray0);
      evaluation0.toClassDetailsString();
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      evaluation0.numFalsePositives(2731);
      try { 
        evaluation1.evaluateModel((Classifier) lWL0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AdditiveRegression additiveRegression0 = new AdditiveRegression(naiveBayesMultinomialText0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "x:(PFa^}n`p>";
      stringArray0[1] = "";
      stringArray0[2] = "(WA88'zmU5";
      stringArray0[3] = "\tOutput help information.\n";
      stringArray0[4] = "";
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.AdditiveRegression:
         // 
         // -S
         // \tSpecify shrinkage rate. (default = 1.0, ie. no shrinkage)
         // 
         // -I <num>
         // \tNumber of iterations.
         // \t(default 10)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.trees.DecisionStump)
         // 
         // Options specific to classifier weka.classifiers.bayes.NaiveBayesMultinomialText:
         // 
         // -W
         // \tUse word frequencies instead of binary bag of words.
         // -P <# instances>
         // \tHow often to prune the dictionary of low frequency words (default = 0, i.e. don't prune)
         // -M <double>
         // \tMinimum word frequency. Words with less than this frequence are ignored.
         // \tIf periodic pruning is turned on then this is also used to determine which
         // \twords to remove from the dictionary (default = 3).
         // -normalize
         // \tNormalize document length (use in conjunction with -norm and -lnorm)
         // -norm <num>
         // \tSpecify the norm that each instance must have (default 1.0)
         // -lnorm <num>
         // \tSpecify L-norm to use (default 2.0)
         // -lowercase
         // \tConvert all tokens to lowercase before adding to the dictionary.
         // -stoplist
         // \tIgnore words that are in the stoplist.
         // -stopwords <file>
         // \tA file containing stopwords to override the default ones.
         // \tUsing this option automatically sets the flag ('-stoplist') to use the
         // \tstoplist if the file exists.
         // \tFormat: one stopword per line, lines starting with '#'
         // \tare interpreted as comments and ignored.
         // -tokenizer <spec>
         // \tThe tokenizing algorihtm (classname plus parameters) to use.
         // \t(default: weka.core.tokenizers.WordTokenizer)
         // -stemmer <spec>
         // \tThe stemmering algorihtm (classname plus parameters) to use.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      J48 j48_0 = new J48();
      j48_0.setCollapseTree(false);
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "b=;BggZB<vMIM_kT");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[1];
      OneR oneR0 = new OneR();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[9];
      objectArray0[1] = (Object) "a+:I(F";
      objectArray0[2] = (Object) instances0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "p";
      objectArray0[5] = (Object) "p";
      objectArray0[7] = (Object) "p";
      Object object1 = new Object();
      objectArray0[8] = object1;
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances0, (-534), (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Instances instances0 = null;
      int int0 = 14;
      CostMatrix costMatrix0 = new CostMatrix(14);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
