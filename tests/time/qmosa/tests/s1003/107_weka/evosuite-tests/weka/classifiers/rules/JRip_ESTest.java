/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:37:43 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.Environment;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.balltrees.TopDownConstructor;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-F <number of folds>";
      stringArray0[1] = "\nRule #";
      stringArray0[2] = "l#w?[=cp-79S-6WUp";
      stringArray0[3] = "One rule found after pruning:";
      stringArray0[4] = "";
      jRip0.enumerateMeasures();
      stringArray0[5] = "\nReplace: ";
      jRip0.setOptions(stringArray0);
      Utils.log2 = 0.0;
      Utils.SMALL = 1792.30473383;
      jRip0.getMinNo();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      jRip_NumericAntd0.att = null;
      jRip_NumericAntd0.maxInfoGain = (-3462.0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList1.add("");
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Attribute attribute0 = new Attribute("", list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.getAccu();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList1.add("relational");
      jRip_RipperRule0.copy();
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd1.splitData((Instances) null, (-1.0), 15.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int int0 = 11;
      IBk iBk0 = new IBk();
      AbstractClassifier.makeCopies(jRip0, 70);
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk1 = new IBk(4);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 11;
      String[] stringArray0 = decisionTable0.getOptions();
      String string0 = "1Qg/UbaW>\"6[";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"weka.attributeSelection.BestFirst -D 1 -N 5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5735143214270813
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      IBk iBk0 = new IBk();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      IBk iBk1 = new IBk(4);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 11;
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(11);
      MockRandom mockRandom0 = new MockRandom();
      StringReader stringReader0 = new StringReader("1Qg/UbaW>\"6[");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader(stringReader0, (-429));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      jRip0.getUsePruning();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Attribute attribute0 = new Attribute("", list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccu();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList1.add("integer");
      jRip_RipperRule0.getRevision();
      jRip_NumericAntd0.att = attribute0;
      jRip_RipperRule0.copy();
      jRip_NumericAntd0.getRevision();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 3, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9663881312694826
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      jRip0.setDebug(true);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Attribute attribute0 = new Attribute("", list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getAccu();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getDebug();
      jRip0.setMinNo((-0.1998815257936172));
      jRip_RipperRule0.copy();
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 3, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      jRip0.setDebug(true);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Attribute attribute0 = new Attribute("", list0);
      Attribute.main((String[]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      arrayList1.add("@end");
      Utils.log2 = (double) 2;
      jRip_NumericAntd0.getAccu();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList1.add("integer");
      jRip0.setMinNo(0.0);
      jRip_RipperRule0.copy();
      jRip_RipperRule0.getConsequent();
      assertEquals(2, jRip0.getOptimizations());
      
      jRip0.setOptimizations(0);
      jRip0.setDebug(true);
      jRip0.setFolds(2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAttr();
      jRip0.setCheckErrorRate(false);
      int int0 = jRip0.getOptimizations();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      attribute0.copy("2 9->9^'2@");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.clear();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = 899.933;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = (double) 3;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1797.435), doubleArray0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      boolean boolean0 = jRip0.getCheckErrorRate();
      boolean boolean1 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean1 == boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      JRip jRip1 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip1.getRevision();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("8118", linkedList0, 403);
      Attribute attribute1 = new Attribute(";j0Er ", protectedProperties1);
      attribute0.copy("8118");
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.clear();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(jRip1.getCheckErrorRate());
      
      boolean boolean0 = jRip0.getCheckErrorRate();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("date");
      properties0.put(protectedProperties0, locale_LanguageRange0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (-690.830834306334);
      doubleArray0[6] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      jRip0.getCheckErrorRate();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData((Instances) null, 6, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("date");
      properties0.put(protectedProperties0, locale_LanguageRange0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = " xL8b#`KN#{\".";
      stringArray0[2] = null;
      stringArray0[3] = "\n";
      stringArray0[4] = "\n";
      stringArray0[5] = "\n";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, protectedProperties0);
      DecisionTable decisionTable0 = new DecisionTable();
      BestFirst bestFirst0 = new BestFirst();
      SelectedTag selectedTag0 = bestFirst0.getDirection();
      decisionTable0.setEvaluationMeasure(selectedTag0);
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable1.m_theInstances;
      IBk iBk0 = new IBk();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      iBk0.pruneToK((Instances) null, doubleArray0, (-5047));
      try { 
        jRip0.rulesetForOneClass(4, (Instances) null, 2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, (List<String>) null, protectedProperties0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("date");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "integer";
      stringArray0[1] = "relational";
      JRip.main(stringArray0);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 3, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo(1.0);
      jRip0.getUsePruning();
      jRip0.setCheckErrorRate(true);
      jRip0.getRevision();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("8118", linkedList0, 0);
      Attribute attribute1 = attribute0.copy("\n\nClass ");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 3;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1060.5), doubleArray0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      jRip_NominalAntd0.getRevision();
      jRip0.setFolds(3);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.756125861090611
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "+o{;{i";
      stringArray0[1] = "/vvEvf-_";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "`{p[X0";
      JRip.main(stringArray0);
      JRip jRip0 = new JRip();
      jRip0.getRevision();
      jRip0.setSeed(0L);
      jRip0.setUsePruning(true);
      String[] stringArray1 = jRip0.getOptions();
      jRip0.getFolds();
      jRip0.getCheckErrorRate();
      jRip0.setFolds(3);
      Utils.SMALL = (double) 3;
      jRip0.setSeed(3);
      jRip0.getFolds();
      jRip0.optimizationsTipText();
      jRip0.minNoTipText();
      String[] stringArray2 = new String[1];
      stringArray2[0] = "The minimum total weight of the instances in a rule.";
      JRip.main(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      IBk iBk0 = new IBk();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      IBk iBk1 = new IBk(4);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 11;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 1;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule1.hasAntds();
      jRip0.getOptimizations();
      Instances instances1 = decisionTable0.m_theInstances;
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JRIP: No model built yet.");
      JRip jRip1 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      JRip jRip2 = new JRip();
      DecisionTable decisionTable3 = new DecisionTable();
      JRip jRip3 = new JRip();
      Attribute attribute0 = new Attribute(" not supported (RIPPER)");
      JRip.NominalAntd jRip_NominalAntd0 = jRip3.new NominalAntd(attribute0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      binarySparseInstance0.dataset();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData((Instances) null, 0.0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 436);
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      String string0 = "{nK=93;8ElFT:qIw%dZ";
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, 436, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip1.getMeasure("PS.  We have compared this implementation with the original ripper ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PS.  We have compared this implementation with the original ripper  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      IBk iBk0 = new IBk(11);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      double[] doubleArray0 = new double[7];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      doubleArray0[0] = (double) 3;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      doubleArray0[1] = (double) 1;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Environment environment0 = new Environment();
      environment0.addVariable("", ".bsi");
      Set<String> set0 = environment0.getVariableNames();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      //  // Unstable assertion: assertEquals(118, set0.size());
      
      Properties properties0 = new Properties();
      double double0 = jRip0.getMinNo();
      //  // Unstable assertion: assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IBk iBk0 = new IBk();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      IBk iBk1 = new IBk((-99));
      iBk1.pruneToK((Instances) null, (double[]) null, (-99));
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      JRip jRip1 = new JRip();
      JRip jRip2 = new JRip();
      jRip2.setCheckErrorRate(true);
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("PUqI|BXf{:0hg 3T/D6", linkedList0, 0);
      Attribute attribute1 = new Attribute("ve+H", protectedProperties2);
      attribute0.copy("j,>4ezi03(JFh{|=]4j");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      linkedList0.clear();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      
      boolean boolean1 = jRip2.getCheckErrorRate();
      assertEquals(2, jRip2.getOptimizations());
      assertEquals(2.0, jRip2.getMinNo(), 0.01);
      assertEquals(3, jRip2.getFolds());
      assertTrue(jRip2.getUsePruning());
      assertEquals(1L, jRip2.getSeed());
      assertFalse(boolean1 == boolean0);
      assertFalse(jRip2.getDebug());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getMaxInfoGain();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-3836.0343712));
      String string0 = null;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(446);
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(446);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = "C39eQ'zW1u?V)Cr";
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      jRip0.setDebug(true);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      Attribute attribute0 = new Attribute("C39eQ'zW1u?V)Cr", list0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.copy();
      jRip_NumericAntd0.getAccu();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      arrayList1.add("integer");
      jRip0.setMinNo(0.5774694133363342);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      jRip0.setOptimizations(0);
      String string1 = "E";
      // Undeclared exception!
      try { 
        arrayList0.subList(3, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(3) > toIndex(0)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      String string1 = jRip0.usePruningTipText();
      assertEquals("Whether pruning is performed.", string1);
      
      JRip jRip1 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      arrayList0.ensureCapacity(0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("ask", arrayList0, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getCover();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[0];
      int int0 = (-8);
      SparseInstance sparseInstance0 = new SparseInstance(972.439534, doubleArray0, intArray0, (-8));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_RipperRule0.hasAntds();
      jRip0.setSeed((-8));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, "Mathematics of Computation", protectedProperties2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 't'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JRip jRip0 = new JRip();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip1 = new JRip();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      Instances instances0 = decisionTable4.m_theInstances;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 453.49;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-68);
      SparseInstance sparseInstance0 = new SparseInstance(2, doubleArray0);
      MockRandom mockRandom0 = new MockRandom();
      JRip jRip0 = new JRip();
      int int0 = jRip0.getFolds();
      assertEquals(3, int0);
      
      jRip0.enumerateMeasures();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertEquals(1L, long0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Input: ", arrayList0, 116);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd0.getAttrValue();
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IBk iBk0 = new IBk();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BestFirst bestFirst0 = new BestFirst();
      decisionTable0.setSearch(bestFirst0);
      JRip jRip0 = new JRip();
      jRip0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      IBk iBk0 = new IBk();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      DecisionTable decisionTable1 = new DecisionTable();
      decisionTable1.getSearchSpec();
      ASSearch aSSearch0 = decisionTable1.getSearch();
      decisionTable1.setSearch(aSSearch0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) null, locale_FilteringMode0);
      Attribute attribute0 = new Attribute((String) null, list0, protectedProperties0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("ariness");
      RuleStats ruleStats0 = new RuleStats();
      properties0.put(list0, linkedList0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getSeed();
      jRip0.getTechnicalInformation();
      jRip0.listOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      IBk iBk0 = new IBk((-68));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 453.49;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-68);
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0);
      try { 
        coverTree0.kNearestNeighbours(sparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Attribute attribute0 = new Attribute("7", "7", 2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "relational");
      jRip_RipperRule0.toString(attribute0);
      jRip_RipperRule0.getRevision();
      Instances instances0 = decisionTable0.m_theInstances;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("    if (i[", "");
      attribute0.setStringValue("    if (i[");
      attribute0.toString();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.toString();
      jRip_NominalAntd0.copy();
      Attribute.typeToString(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.setConsequent((-1668.458033865));
      jRip_NominalAntd0.getAccu();
      jRip0.getTechnicalInformation();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 4;
      int[] intArray0 = new int[0];
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(4, doubleArray0, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1013448627418367
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      jRip0.foldsTipText();
      jRip0.getUsePruning();
      JRip jRip1 = new JRip();
      jRip1.globalInfo();
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", (List<String>) null);
      attribute0.addStringValue("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.");
      attribute0.equals(capabilities0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      Attribute.typeToString(attribute0);
      jRip_NominalAntd0.att = attribute0;
      jRip_NominalAntd0.accu = (double) 0;
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.getAttrValue();
      jRip1.getFolds();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      jRip_RipperRule0.hasAntds();
      jRip_NominalAntd0.maxInfoGain = 0.0;
      attribute0.enumerateValues();
      costSensitiveClassifier0.getCostMatrix();
      ClassOrder classOrder0 = new ClassOrder();
      double double0 = 859.0;
      StringReader stringReader0 = new StringReader("@attribute");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[@attribute], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("second_value", protectedProperties1);
      Attribute.typeToString(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getSplitPoint();
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      double double1 = jRip_NumericAntd0.getAttrValue();
      assertEquals(double1, double0, 0.01);
      
      jRip_NumericAntd0.getAttr();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      String string1 = jRip0.checkErrorRateTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      attribute0.value(2207);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      JRip jRip1 = new JRip();
      Enumeration enumeration0 = new NGramTokenizer();
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances0 = decisionTable2.m_theInstances;
      String string0 = jRip1.optimizationsTipText();
      assertFalse(jRip1.getDebug());
      assertEquals("The number of optimization runs.", string0);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(3, jRip1.getFolds());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getUsePruning());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      jRip0.seedTipText();
      jRip0.minNoTipText();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      TopDownConstructor topDownConstructor0 = new TopDownConstructor();
      try { 
        topDownConstructor0.buildTree();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.neighboursearch.balltrees.TopDownConstructor", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.850863601176158
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      JRip jRip1 = new JRip();
      jRip1.setCheckErrorRate(true);
      String string0 = jRip0.getRevision();
      assertEquals("8118", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("f/8i}zt.?aY/@)Zu,bZ", linkedList0, 403);
      Attribute attribute1 = new Attribute("@attribute", protectedProperties0);
      Attribute attribute2 = attribute0.copy("rQ");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute2);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.clear();
      double[] doubleArray0 = new double[8];
      MockPrintStream mockPrintStream0 = new MockPrintStream("integer");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) attribute2;
      objectArray0[1] = (Object) attribute1;
      objectArray0[2] = (Object) "f/8i}zt.?aY/@)Zu,bZ";
      JRip.RipperRule jRip_RipperRule1 = (JRip.RipperRule)jRip_RipperRule0.copy();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertNotSame(jRip_RipperRule1, jRip_RipperRule0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      objectArray0[3] = (Object) jRip_RipperRule1;
      Object object0 = new Object();
      objectArray0[4] = object0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format("", objectArray0);
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(mockPrintWriter1, false);
      Locale locale0 = Locale.US;
      MockPrintWriter mockPrintWriter3 = (MockPrintWriter)mockPrintWriter2.format(locale0, "weka.core.Attribute", objectArray0);
      protectedProperties0.list((PrintWriter) mockPrintWriter3);
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2974.011), doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      boolean boolean1 = jRip1.getCheckErrorRate();
      assertFalse(jRip1.getDebug());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertTrue(boolean1 == boolean0);
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(boolean1);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setMinNo(305.937);
      jRip0.globalInfo();
      jRip0.debugTipText();
      String string0 = "";
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      IBk iBk0 = new IBk(11);
      DecisionTable decisionTable0 = new DecisionTable();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 4;
      doubleArray0[4] = (double) 11;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = 0.0;
      boolean boolean0 = jRip0.getDebug();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(boolean0);
  }
}
