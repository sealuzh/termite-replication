/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:10:44 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9606599682564196
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-55), (byte) (-128));
      Byte.compare((byte) (-116), (byte) (-128));
      Byte.compare((byte) (-128), (byte) (-128));
      Float float0 = new Float(0.0);
      String string0 = JSONObject.doubleToString(73);
      assertEquals("73", string0);
      
      Double double0 = Double.valueOf("73");
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.min((byte) (-116), (byte) (-116));
      String string1 = jSONObject0.optString(">A6/-rzjUER1N-g3lt", ".XM),-E#<Bb");
      assertEquals(".XM),-E#<Bb", string1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5649550569506574
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-55), (byte) (-128));
      Byte.compare((byte) (-116), (byte) (-128));
      Byte.compare((byte) (-128), (byte) (-128));
      JSONObject.quote("");
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.append("'`od<+c0`f4Kz)a", linkedList1);
      jSONObject1.toString((int) (byte) (-116), (int) (byte) (-116));
      jSONObject1.optBoolean("N(3");
      boolean boolean0 = jSONObject1.optBoolean("\"\"");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4725385010074816
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-55), (byte) (-128));
      JSONObject.doubleToString(0.0);
      JSONObject.valueToString(linkedList1, (byte) (-55), (-3347));
      JSONTokener jSONTokener0 = new JSONTokener("0");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5710570006819866
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      Long.compareUnsigned(583L, 0L);
      Long.getLong("toJ", 0L);
      JSONObject.valueToString("null", 1, 1);
      Byte byte0 = new Byte((byte)50);
      jSONObject0.putOpt(stringArray0[0], "\"java.lang.String@0000000002\"");
      Byte.toUnsignedInt((byte)50);
      JSONObject.valueToString(byte0, 0, 1600);
      Boolean boolean0 = Boolean.valueOf((String) null);
      JSONObject jSONObject1 = jSONObject0.append("tWj/UEghy8zk3", boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("\"Y}oX2}QjWXg`<", (Collection) linkedList0);
      JSONObject.quote("\"Y}oX2}QjWXg`<");
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject2.getInt("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.353326130367473
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 91;
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      JSONObject.valueToString("t$d($$p_06X<l_.mS$", 91, 91);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      Short short0 = new Short((short)1326);
      linkedList0.add((Object) short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote("t$d($$p_06X<l_.mS$");
      jSONObject1.toJSONArray(jSONArray0);
      JSONObject.quote("\"java.lang.String@0000000002\"");
      JSONObject.valueToString(jSONObject1);
      Integer integer0 = new Integer(91);
      String string0 = "`";
      try { 
        Integer.valueOf("aYIlu4sZY.K]R", 91);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 91 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2029611642157896
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "*^6);lT";
      String string1 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("*^6);lT", "");
      String string2 = "^ivA7TFM&^e|(cL LW";
      jSONObject1.put("^ivA7TFM&^e|(cL LW", false);
      jSONObject0.optString("*^6);lT");
      try { 
        jSONObject1.getBoolean("SV2Qf_4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"SV2Qf_4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.682235522545385
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "[#EoV";
      stringArray0[2] = "[#EoV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "[#EoV";
      stringArray0[5] = "[#EoV";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long long0 = new Long((-919L));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("[#EoV", 966.485);
      jSONObject1.optLong("XMER#^vz]-");
      jSONObject0.toString();
      try { 
        jSONObject0.getJSONObject("[#EoV");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[#EoV\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.6847854169135204
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Long.getLong("Y2Wx_[#>.^S", (-1123L));
      JSONObject.quote((String) null);
      Boolean.valueOf("is");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short)3282);
      JSONObject jSONObject1 = jSONObject0.append("getintern", short0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("A JSONArray text must start with '['", (Collection) linkedList0);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("tWj/UEghy8zk3");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of tWj/UEghy8zk3
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6755953770410574
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.pollLast();
      JSONObject jSONObject1 = jSONObject0.put("i", (Collection) linkedList0);
      jSONObject0.optInt("co", (-1889));
      jSONObject1.putOpt("i", (Object) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "co";
      stringArray0[1] = ",:]}/\"[{;=#";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = "i";
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      JSONObject.doubleToString(Double.NaN);
      jSONObject0.optLong((String) null, (long) (-1889));
      jSONObject0.optLong("co", 0L);
      jSONObject1.optLong("co", 0L);
      jSONObject0.put("%W,;OCs6,", 4263L);
      JSONObject jSONObject3 = null;
      try {
        jSONObject3 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.8086685609437407
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      Long.compareUnsigned(583L, 0L);
      Long.getLong("toJ", 0L);
      JSONObject.quote("null");
      Boolean boolean0 = Boolean.valueOf((String) null);
      JSONObject jSONObject1 = jSONObject0.append("tWj/UEghy8zk3", boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("\"Y}oX2}QjWXg`<", (Collection) linkedList0);
      jSONObject2.toString(1);
      jSONObject2.toString();
      JSONObject jSONObject3 = new JSONObject("{\"java.lang.String@0000000005\":wheel.json.JSONArray@0000000004,\"java.lang.String@0000000003\":wheel.json.JSONArray@0000000002}");
      linkedList0.add("null");
      JSONObject jSONObject4 = jSONObject2.append("false", "null");
      assertSame(jSONObject0, jSONObject4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0135865122863823
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.pollLast();
      JSONObject jSONObject1 = jSONObject0.put("i", (Collection) linkedList0);
      jSONObject1.get("i");
      jSONObject1.toString((-5633), (-5633));
      jSONObject1.optInt("i");
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject0.optInt((String) null, (-1889));
      jSONObject2.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.doubleToString(1513.60791904039);
      jSONObject2.optLong(",:]}/\"[{;=#", (-1840L));
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("1513.60791904039");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 1513.60791904039
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "[#EoV";
      stringArray0[2] = "[#EoV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "[#EoV";
      stringArray0[5] = "[#EoV";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-101));
      Byte.compare((byte) (-62), (byte)70);
      Byte.compare((byte)47, (byte) (-101));
      Float float0 = new Float((double) (byte)47);
      Float.isFinite((byte)70);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.946709135308211
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "3#EOV";
      stringArray0[2] = "3#EOV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "3#EOV";
      stringArray0[5] = "3#EOV";
      stringArray0[6] = "3#EOV";
      stringArray0[7] = "3#EOV";
      stringArray0[8] = "3#EOV";
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      jSONObject0.optBoolean("[x=oV5Y", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-948));
      JSONObject.getNames(jSONObject0);
      JSONObject.getNames((Object) "JSONArray initial value should be a string or collection or array.");
      jSONObject0.append(":", "JSONArray initial value should be a string or collection or array.");
      jSONObject0.getDouble("");
      jSONObject0.keys();
      jSONObject1.remove(">ktQJ");
      jSONObject0.optBoolean("JSONArray initial value should be a string or collection or array.", false);
      jSONObject0.getDouble("");
      jSONObject1.optDouble("isnumberToString");
      JSONObject jSONObject2 = jSONObject0.append("JSONArray initial value should be a string or collection or array.", "JSONArray initial value should be a string or collection or array.");
      jSONObject2.length();
      jSONObject2.put("3#EOV", (long) 3);
      Float float0 = new Float((float) (-948));
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.831842963000351
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSONObject.valueToString("Y2Wx_[#>.^S", (-57), (-57));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.quote("ChcPp0EN,9K&4[b3nwA");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Y2Wx_[#>.^S";
      stringArray0[1] = "Y2Wx_[#>.^S";
      stringArray0[2] = "Y2Wx_[#>.^S";
      stringArray0[3] = "ChcPp0EN,9K&4[b3nwA";
      stringArray0[4] = "\"ChcPp0EN,9K&4[b3nwA\"";
      stringArray0[5] = "\"ChcPp0EN,9K&4[b3nwA\"";
      stringArray0[6] = "wvj&hl8+Iun<-b";
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.quote("Z.Ge\"J@(wk)N3oS[");
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      int int0 = 977;
      Integer integer0 = new Integer(977);
      try { 
        Integer.valueOf("Z.Ge\"J@(wk)N3oS[", 977);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 977 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2560103561794644
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", true);
      Object object0 = jSONObject0.opt("] is not a Boolean.");
      assertEquals(true, object0);
      
      JSONObject jSONObject2 = jSONObject0.put("null", (Object) "] is not a Boolean.");
      JSONObject.testValidity("null");
      jSONObject2.optJSONObject("jN+6z0=!JG1O(0'T%");
      double double0 = jSONObject1.optDouble("", (-632.2949380980601));
      assertEquals((-632.2949380980601), double0, 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3166165252560558
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("*^6);lT", "");
      JSONObject jSONObject2 = jSONObject1.put("^ivA7TFM&^e|(cL LW", false);
      jSONObject0.opt("Expected a ',' or '}'");
      jSONObject1.put("", (Object) null);
      JSONObject.testValidity(jSONObject2);
      jSONObject2.optJSONObject("");
      long long0 = jSONObject2.optLong("Ki62#HY-,;A'C<#u", 138L);
      assertEquals(2, jSONObject1.length());
      assertEquals(138L, long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.7032333699834616
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f(#h";
      stringArray0[1] = ",";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "9wn";
      stringArray0[5] = "P>Z+Qza NssL";
      Short short0 = new Short((short) (-620));
      JSONObject jSONObject0 = new JSONObject("] is not a number.", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("f(#h", "f(#h");
      jSONObject1.optBoolean("for");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject2 = jSONObject1.put("Null pointer", (Map) hashMap0);
      jSONObject0.keys();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject2.accumulate("f(#h", "/+1aD`##eZ}");
      Object object2 = new Object();
      JSONObject jSONObject4 = new JSONObject(object2);
      jSONObject2.opt("A JSONObject text must end with '}'");
      boolean boolean0 = jSONObject3.isNull("null");
      assertEquals(2, jSONObject1.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.420929818880985
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("Y2Wx_[#>.^S");
      assertTrue(boolean0);
      
      JSONObject jSONObject1 = jSONObject0.put(")iEgZuNX70)cu3Y`", true);
      int int0 = jSONObject1.optInt("ax>cbc^");
      assertEquals(0, int0);
      
      Long long0 = new Long(0);
      JSONObject jSONObject2 = jSONObject1.put("ax>cbc^", (Object) long0);
      JSONObject.testValidity(jSONObject2);
      jSONObject1.optJSONObject("");
      double double0 = jSONObject0.optDouble(")iEgZuNX70)cu3Y`", (-1583.40473002));
      assertEquals((-1583.40473002), double0, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3574945083662966
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-55), (byte) (-128));
      Double double0 = new Double((-1.0));
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.isFinite(3332.94793067);
      double double1 = jSONObject0.optDouble("?", 0.0);
      assertEquals(0.0, double1, 0.01);
      
      String string0 = JSONObject.doubleToString(2502.19861815519);
      assertEquals("2502.19861815519", string0);
      
      jSONObject0.optLong("Expected a ':' after a key", (long) (byte) (-128));
      jSONObject0.optJSONArray("-i`o,wg<JZ=090}j+fU");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.554974224703888
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Short short0 = new Short((short) (-200));
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EB|8";
      stringArray0[1] = "P>Z+Qza NssL";
      stringArray0[2] = "Y2Wx_[#>.^S";
      stringArray0[3] = "P>Z+Qza NssL";
      stringArray0[4] = "Y2Wx_[#>.^S";
      stringArray0[5] = "Y2Wx_[#>.^S";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate("", "P>Z+Qza NssL");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      jSONObject1.toString(86, (int) (short) (-200));
      jSONObject1.put("QH", (Map) hashMap0);
      jSONObject1.keys();
      hashMap0.put("Y2Wx_[#>.^S", (Byte) null);
      Object object1 = JSONObject.NULL;
      byte byte0 = (byte) (-39);
      Byte byte1 = new Byte((byte) (-39));
      hashMap0.put("Y2Wx_[#>.^S", byte1);
      Integer integer0 = new Integer((short) (-200));
      Object object2 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(object2, stringArray0);
      try { 
        jSONObject2.getString("'XIuC9]_r2V}D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'XIuC9]_r2V}D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.03462181261016
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", 62.3199);
      JSONObject.quote("e8");
      jSONObject1.optDouble("");
      jSONObject1.names();
      Long long0 = new Long(0L);
      Long.compareUnsigned(0L, 0L);
      Long.getLong("Bad value from toJSONString: ", 0L);
      Long.toUnsignedString(0L);
      JSONObject.valueToString(jSONObject1, 45, 70);
      Integer integer0 = new Integer(38);
      JSONObject jSONObject2 = jSONObject1.append("0", integer0);
      jSONObject2.toString();
      JSONObject.valueToString((Object) null);
      jSONObject1.optDouble("{\"java.lang.String@0000000002\": java.lang.Double@0000000003}");
      Object object0 = JSONObject.NULL;
      JSONObject.getNames((Object) "0");
      try { 
        jSONObject2.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0716068957833853
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      JSONObject jSONObject2 = jSONObject0.putOpt("toL", "toL");
      jSONObject1.optDouble("\f", Double.NaN);
      jSONObject0.toString(0);
      jSONObject0.toString(0);
      jSONObject0.optBoolean("&");
      jSONObject0.optString("&");
      jSONObject0.optLong("{\n\"java.lang.String@0000000002\": \"java.lang.String@0000000002\",\n\"java.lang.String@0000000003\": \"java.lang.String@0000000003\"\n}");
      jSONObject0.optDouble("&", 200.327802539);
      jSONObject0.toString();
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      jSONObject2.put("", (Map) hashMap0);
      try { 
        jSONObject0.get("FV;lvwxi#dN#2mi9x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FV;lvwxi#dN#2mi9x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6406751842438685
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Long.compareUnsigned(0L, 602L);
      String string0 = "toJ";
      Long.getLong("", (long) (-1));
      Long.toUnsignedString(0L);
      Long long0 = new Long(0L);
      Long long1 = new Long(0L);
      JSONObject.valueToString(long1, 47, 45);
      Short short0 = new Short((short)91);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("", "toL");
      JSONObject.valueToString(linkedList0);
      jSONObject0.optDouble("s;3J#Y <@](rc");
      Object object0 = JSONObject.NULL;
      Integer integer0 = new Integer(3545);
      JSONObject.getNames((Object) integer0);
      try { 
        jSONObject1.getString("java.lang.Long@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Long@0000000001\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4973748852738455
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "3#EOV";
      stringArray0[2] = "3#EOV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "3#EOV";
      stringArray0[5] = "3#EOV";
      stringArray0[6] = "3#EOV";
      Short short0 = new Short((short) (-174));
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      JSONObject jSONObject1 = jSONObject0.accumulate(">ktQJ", "3#EOV");
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.optBoolean("isremainderUnsigned");
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      jSONObject0.put("/+1aD`##eZ}", (Map) hashMap0);
      jSONObject0.keys();
      Object object0 = JSONObject.NULL;
      String string0 = "] is not a JSONObject.";
      Float float0 = new Float(Double.NaN);
      try { 
        jSONObject1.accumulate("] is not a JSONObject.", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.669767632935727
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.pollLast();
      jSONObject0.put("i", (Collection) linkedList0);
      String string0 = ",:]}/\\\"[{;=#";
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject0.optInt((String) null, (-1889));
      JSONObject jSONObject2 = jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.doubleToString(1513.60791904039);
      jSONObject1.optLong(",:]}/\"[{;=#", (-1840L));
      jSONObject2.optLong((String) null, 0L);
      jSONObject2.optLong("1513.60791904039", 0L);
      jSONObject1.put(",:]}/\"[{;=#", 0L);
      try { 
        jSONObject2.get("getintValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getintValue\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.6813335684604476
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      Object object1 = new Object();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getaccumulate";
      JSONObject jSONObject0 = new JSONObject(object1, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("getaccumulate", 449);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.getNames(jSONObject2);
      JSONObject.getNames((Object) jSONObject2);
      jSONObject1.getDouble("getaccumulate");
      jSONObject2.keys();
      HashMap<Integer, JSONArray> hashMap0 = new HashMap<Integer, JSONArray>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject3.remove("@");
      JSONObject jSONObject4 = new JSONObject();
      jSONObject4.optBoolean("y", false);
      try { 
        jSONObject2.getDouble("getaccumulate");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getaccumulate\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8263370949856568
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      JSONObject.valueToString("t$d($$p_06X<l_.mS$", 91, 91);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.toString(91);
      jSONObject2.toString();
      jSONObject0.putOpt("\"java.lang.String@0000000002\"", hashMap0);
      int int0 = jSONObject1.optInt("A[XEch*4");
      assertEquals(2, jSONObject1.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8239044247468157
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "[#EoV";
      stringArray0[2] = "[#EoV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "[#EoV";
      String string0 = ")iEgZuNX70)cu3Y\\`";
      HashMap<JSONObject, String> hashMap0 = new HashMap<JSONObject, String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.put("v+Tk|8G\"5&/,a$J?],(", false);
      try { 
        jSONObject0.getJSONArray("v+Tk|8G\"5&/,a$J?],(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"v+Tk|8G\\\"5&/,a$J?],(\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("fPJwK", "fPJwK");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("-s/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of -s/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = "] is not a number.";
      JSONObject jSONObject0 = new JSONObject((Map) null);
      try { 
        jSONObject0.getJSONObject("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.79372342017561
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[1] = "3#EOV";
      stringArray0[2] = "3#EOV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "3#EOV";
      stringArray0[5] = "3#EOV";
      stringArray0[6] = "3#EOV";
      stringArray0[7] = "3#EOV";
      stringArray0[8] = "3#EOV";
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      jSONObject0.optBoolean("[x=oV5Y", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-948));
      JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      
      JSONObject.getNames((Object) stringArray0[0]);
      jSONObject0.getDouble("");
      jSONObject0.keys();
      jSONObject1.remove(">ktQJ");
      jSONObject0.optBoolean(stringArray0[0], false);
      jSONObject0.getDouble("");
      double double0 = jSONObject1.optDouble("isnumberToString");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3183056868918186
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("*^6);lT", "");
      jSONObject1.put("^ivA7TFM&^e|(cL LW", false);
      Short short0 = new Short((short)1823);
      jSONObject1.names();
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-70));
      Byte byte1 = new Byte((byte)44);
      JSONObject.getNames((Object) byte0);
      Integer integer0 = new Integer((byte) (-70));
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2594994750841786
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      String string0 = "i";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      String string1 = null;
      jSONObject0.optInt((String) null, 8);
      JSONObject jSONObject3 = jSONObject2.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject jSONObject4 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject3.get("1s>Ve.fX_OCs");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1s>Ve.fX_OCs\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = JSONObject.doubleToString(2785.3181);
      assertEquals("2785.3181", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8702443301470444
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HashMap<JSONArray, Long> hashMap0 = new HashMap<JSONArray, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.keys();
      jSONObject0.toString(110, 110);
      jSONObject0.optLong("{");
      jSONObject0.toString();
      jSONObject0.opt("{}");
      JSONArray jSONArray0 = new JSONArray();
      Function<JSONArray, Long> function0 = (Function<JSONArray, Long>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any(wheel.json.JSONArray.class));
      hashMap0.computeIfAbsent(jSONArray0, function0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(jSONObject1, 110, (-1726));
      JSONObject jSONObject2 = jSONObject0.put("{}", 1709.0);
      jSONObject2.toString();
      jSONObject1.toString(52, (-1726));
      try { 
        jSONObject1.getString("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5848382027973327
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Double double0 = new Double((-4.396248336249584));
      String[] stringArray0 = new String[2];
      stringArray0[0] = " V(2h_$]b j}COs";
      stringArray0[1] = "CA";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("Null pointer", "CA");
      Double.isFinite(0.0);
      Double.min((-4.396248336249584), (-4.396248336249584));
      Double.max((-4.396248336249584), (-4.396248336249584));
      try { 
        jSONObject1.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.619418366446825
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Short short0 = new Short((short)60);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.has("4ERJrNgNED<_Ur/@=");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      String string0 = "f(#h";
      stringArray0[0] = "f(#h";
      stringArray0[1] = ",";
      stringArray0[2] = "wheel.json.JSONArray";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "f(#h";
      stringArray1[1] = "f(#h";
      stringArray1[2] = "wheel.json.JSONArray";
      stringArray1[3] = ",";
      stringArray1[4] = "wheel.json.JSONArray";
      stringArray1[5] = "f(#h";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.774704257433461
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      Long.compareUnsigned(583L, 0L);
      Long.getLong("toJ", 0L);
      Byte byte0 = new Byte((byte)50);
      Byte.toUnsignedInt((byte)50);
      JSONObject.valueToString(byte0, 2, 1600);
      Boolean boolean0 = Boolean.valueOf((String) null);
      JSONObject jSONObject1 = jSONObject0.append("fo", boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("\"Y}oX2}QjWXg`<", (Collection) linkedList0);
      jSONObject2.toString(1);
      jSONObject2.toString();
      jSONObject2.putOpt(stringArray0[0], stringArray0[0]);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Y2Wx\\_[#>.^S";
      Object object0 = new Object();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(object0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Boolean boolean0 = new Boolean(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "getjoin";
      stringArray0[1] = "66..";
      stringArray0[2] = ",:]}/\"[{;=#";
      stringArray0[3] = "2Zu6M|Bk8p7u\"";
      stringArray0[4] = "l3RpUzO,T`";
      JSONObject jSONObject0 = new JSONObject("66..", stringArray0);
      Double double0 = new Double(609.492546);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      hashMap1.put(jSONObject0, double0);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject1 = jSONObject0.optJSONObject("1}EaHDTak-wi_");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4043982342147494
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Short short0 = new Short((short)62);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "000";
      stringArray0[2] = "";
      String string0 = "";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      int int0 = 59;
      jSONObject0.toString(59);
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, 59);
      Double.max((short)62, Double.NaN);
      Double.min(59, 59);
      try { 
        jSONObject0.putOpt("", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1531183626432506
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string1 = "toL";
      JSONObject jSONObject2 = jSONObject0.putOpt("toL", "toL");
      jSONObject1.optDouble("\f", Double.NaN);
      String string2 = "t>wW~!~OUky";
      try { 
        jSONObject2.put("t>wW~!~OUky", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5954294970095337
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("t$d($$p_06X<l_.mS$", 91);
      jSONObject0.getInt("t$d($$p_06X<l_.mS$");
      jSONObject0.toString(44);
      jSONObject0.opt("wheel.json.JSONArray");
      String string0 = "_L<";
      try { 
        jSONObject0.get("_L<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"_L<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5012964739744272
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] not found.";
      stringArray0[1] = "] not found.";
      stringArray0[2] = "] not found.";
      stringArray0[3] = "] not found.";
      stringArray0[4] = "2502.19861815519.";
      stringArray0[5] = "] not found.";
      JSONObject jSONObject0 = new JSONObject("] not found.", stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "u4QWCG";
      stringArray1[1] = "2502.19861815519.";
      stringArray1[2] = "2502.19861815519.";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      String string0 = jSONObject1.toString(35);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1065965221696015
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "issum";
      stringArray0[1] = "Unterminated string";
      stringArray0[2] = "JSONArray[";
      stringArray0[3] = "E:'y-sy/qy]_}4";
      stringArray0[4] = "mi";
      stringArray0[5] = "has";
      stringArray0[6] = "*GhEv)'9R1y!c";
      stringArray0[7] = "ismax";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.remove("] is not a Boolean.");
      jSONObject0.remove("wheel.json.JSONArray");
      jSONObject0.put("issum", (-728));
      try { 
        jSONObject0.getBoolean("wb");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wb\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.393612348983956
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("UU;Mv&rs^kKb?7qS3");
      try { 
        jSONObject0.getDouble("hGqs)G");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hGqs)G\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = new JSONArray();
      jSONArray0.toJSONObject(jSONArray1);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7492902502231065
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      String string0 = "\\f";
      jSONObject1.optDouble("Expected a ',' or ']'", 0.0);
      jSONObject1.optDouble("\f", Double.NaN);
      jSONObject0.toString(0);
      jSONObject0.optBoolean("&");
      jSONObject0.optString("&");
      jSONObject0.optDouble("&", 200.327802539);
      try { 
        jSONObject0.get("FV;lvwxi#dN#2mi9x");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"FV;lvwxi#dN#2mi9x\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, Double> hashMap0 = new HashMap<Byte, Double>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte)114, (byte) (-55));
      Byte.compare((byte) (-55), (byte)71);
      Float float0 = new Float((double) 169);
      JSONObject.numberToString(byte0);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "fM:\\s{\\;F2*uEKGNc";
      JSONTokener jSONTokener0 = new JSONTokener("fM:s{;F2*uEKGNc");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of fM:s{;F2*uEKGNc
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.12531460762738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("", "");
      String string0 = "\\f";
      JSONObject jSONObject1 = jSONObject0.putOpt("toL", "toL");
      jSONObject1.getString("");
      try { 
        jSONObject1.getBoolean("toL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toL\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.opt("Expected a ',' or '}'");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of to
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6895849294624012
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long.getLong("A}=WEy2", (-3085L));
      Long.toUnsignedString(0L);
      JSONObject.valueToString("A}=WEy2", 0, 0);
      JSONObject jSONObject1 = jSONObject0.append(".", (Object) null);
      jSONObject1.toString();
      Boolean boolean0 = Boolean.valueOf("istoLowerCase");
      JSONObject.valueToString(boolean0);
      String string0 = "";
      jSONObject1.optDouble("e0)b");
      Object object0 = JSONObject.NULL;
      JSONObject.getNames((Object) "A}=WEy2");
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6062657778399383
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "*^6);lT";
      JSONObject jSONObject1 = jSONObject0.putOpt("*^6);lT", "");
      Long.getLong("", 0L);
      Long.toUnsignedString(0L);
      Long long0 = new Long(0L);
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject3 = jSONObject2.put("(M^<:5W *rc~2k)*d", (-1.0));
      jSONObject2.optLong("val");
      jSONObject1.toString();
      try { 
        jSONObject3.getJSONObject("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.353318341540234
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "par";
      JSONObject jSONObject1 = new JSONObject((Object) "par");
      String string1 = "toL";
      JSONObject jSONObject2 = jSONObject0.putOpt("toL", "toL");
      String string2 = "";
      JSONObject.valueToString(jSONObject2);
      try { 
        jSONObject2.getBoolean("toL");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toL\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.6240203294740194
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "] is not a number.");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      jSONObject0.write(stringWriter0);
      JSONObject.getNames(jSONObject0);
      JSONObject.valueToString("] is not a number.");
      jSONObject0.opt("KXG~T");
      try { 
        jSONObject0.getJSONArray("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3957094260849363
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Bad value from toJSONString: ";
      JSONObject jSONObject1 = jSONObject0.put("Bad value from toJSONString: ", 62.3199);
      JSONObject.quote("");
      String string1 = "";
      jSONObject1.optDouble("");
      long long0 = 0L;
      Long long1 = new Long(0L);
      long long2 = 0L;
      // Undeclared exception!
      try { 
        Long.remainderUnsigned(0L, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // BigInteger divide by zero
         //
         verifyException("java.math.MutableBigInteger", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.2464032050752407
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0, 117, 117);
      jSONObject0.isNull("Y2Wx_[#>.^S");
      jSONObject0.put("A JSONObject text must end with '}'", false);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject1.getJSONArray("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.644620921406631
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte byte0 = (byte)117;
      Byte byte1 = new Byte((byte)117);
      JSONObject.valueToString(byte1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "java.lang.Byte@0000000001";
      stringArray0[1] = "wheel.json.JSONArray";
      stringArray0[2] = "java.lang.Byte@0000000001";
      stringArray0[3] = "java.lang.Byte@0000000001";
      stringArray0[4] = "java.lang.Byte@0000000001";
      stringArray0[5] = "java.lang.Byte@0000000001";
      stringArray0[6] = "%k";
      JSONObject jSONObject0 = new JSONObject(byte1, stringArray0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Byte byte2 = new Byte((byte)123);
      Byte.compare((byte)117, (byte)117);
      hashMap0.putIfAbsent(byte2, byte1);
      hashMap0.put("java.lang.Byte@0000000001", "java.lang.Byte@0000000001");
      JSONObject jSONObject1 = jSONObject0.put("%k", (Map) hashMap0);
      try { 
        jSONObject1.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.6422754154403054
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      String string0 = "9wn";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "9wn";
      stringArray0[1] = "9wn";
      stringArray0[2] = "P>Z+Qza NssL";
      stringArray0[3] = "?lXb=;BggZB<vMI";
      JSONObject jSONObject0 = new JSONObject("P>Z+Qza NssL", stringArray0);
      jSONObject0.names();
      jSONObject0.optDouble((String) null);
      try { 
        jSONObject0.put("P>Z+Qza NssL", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.3469992135645263
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte byte0 = new Byte((byte) (-55));
      Byte.compare((byte) (-128), (byte) (-128));
      Byte.compare((byte) (-128), (byte)99);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.9761970597833662
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray initial value should be a string or collection or array.";
      stringArray0[1] = "3#EOV";
      stringArray0[2] = "3#EOV";
      stringArray0[3] = ">ktQJ";
      stringArray0[4] = "3#EOV";
      stringArray0[5] = "3#EOV";
      stringArray0[6] = "3#EOV";
      stringArray0[7] = "3#EOV";
      stringArray0[8] = "3#EOV";
      JSONObject jSONObject0 = new JSONObject("3#EOV", stringArray0);
      jSONObject0.optBoolean(">ktQJ", true);
      JSONObject jSONObject1 = jSONObject0.put("", (-948));
      JSONObject jSONObject2 = jSONObject0.append(":", "JSONArray initial value should be a string or collection or array.");
      jSONObject0.put(">ktQJ", (long) (-948));
      JSONObject.valueToString("JSONArray initial value should be a string or collection or array.");
      jSONObject0.getDouble("");
      jSONObject0.keys();
      jSONObject1.remove(">ktQJ");
      jSONObject0.optBoolean("JSONArray initial value should be a string or collection or array.", false);
      jSONObject0.getDouble("");
      jSONObject1.optDouble("1DN R6l4PyhM#b");
      jSONObject0.keys();
      jSONObject2.optBoolean("");
      jSONObject2.optLong("] is not a Boolean.");
      JSONObject jSONObject3 = jSONObject2.put("get", (double) (-948));
      assertSame(jSONObject3, jSONObject0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4753388632580924
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("*^6);lT", "");
      JSONObject jSONObject2 = jSONObject1.put("^ivA7TFM&^e|(cL LW", false);
      jSONObject0.opt("Expected a ',' or '}'");
      jSONObject0.optInt("Bad value from toJSONString: ");
      jSONObject1.put("", (Object) null);
      JSONObject.testValidity(jSONObject2);
      jSONObject2.optJSONObject("");
      double double0 = jSONObject1.optDouble("", 0.0);
      assertEquals(2, jSONObject1.length());
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("getcopyValueOf");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getcopyValueOf\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.580138463042278
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      String string0 = "null";
      stringArray0[0] = "null";
      Long.compareUnsigned(602L, 0L);
      Long long0 = Long.getLong("toJ", 0L);
      Long.toUnsignedString(0L);
      Long long1 = new Long(0L);
      JSONObject.valueToString(long1, 1, (-5));
      hashMap0.put("null", long0);
      Short short0 = new Short((short) (-1));
      jSONObject0.append("null", short0);
      jSONObject0.toString((-647));
      jSONObject0.optJSONArray("null");
      try { 
        jSONObject0.getJSONObject(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Double double0 = new Double(0.0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = " V(2h_$]b j}COs";
      Double.sum(0.0, 0.0);
      stringArray0[1] = "CA";
      Double.isFinite(0.0);
      Double.min(0.0, 0.0);
      Double.max(0.0, 0.0);
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.597327734055535
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject0.optInt((String) null, (-1889));
      jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("", 1513.60791904039);
      JSONObject jSONObject3 = new JSONObject((Object) "");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject4 = new JSONObject((Map) hashMap0);
      boolean boolean0 = new Boolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.986869780903064
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = jSONObject0.put(",:]}/\"[{;=#", 1513.60791904039);
      jSONObject0.optInt((String) null, (-1889));
      jSONObject1.putOpt(",:]}/\"[{;=#", jSONObject0);
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optDouble("", 1513.60791904039);
      jSONObject2.keys();
      try { 
        jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[,:]}/\"[{;=#] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.059786537394265
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f(#h";
      stringArray0[1] = ",";
      stringArray0[2] = "wheel.json.JSONArray";
      String string0 = "Substring bounds error";
      JSONTokener jSONTokener0 = new JSONTokener("Substring bounds error");
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optString("zoGX");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      int int0 = 128;
      jSONArray0.optJSONObject(128);
      jSONObject0.append("wheel.json.JSONArray", (Object) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.8102956514390822
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fPJwK";
      JSONObject jSONObject1 = jSONObject0.putOpt("fPJwK", "fPJwK");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject1.put("e2^(Oa", (Collection) linkedList0);
      try { 
        jSONObject0.get("-s/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-s/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.989164155585533
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("Y2Wx_[#>.^S");
      jSONObject0.put(")iEgZuNX70)cu3Y`", true);
      try { 
        jSONObject0.getJSONArray(")iEgZuNX70)cu3Y`");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")iEgZuNX70)cu3Y`\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.6955912486391242
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("fPJwK", "fPJwK");
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject0.get("/_mHHD5U=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/_mHHD5U=\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.0116585526031
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "P{oL3%xm;gv2(u";
      stringArray0[1] = "P{oL3%xm;gv2(u";
      stringArray0[2] = "P{oL3%xm;gv2(u";
      stringArray0[3] = "P{oL3%xm;gv2(u";
      stringArray0[4] = "Nyh|xB";
      JSONObject jSONObject0 = new JSONObject("P{oL3%xm;gv2(u", stringArray0);
      jSONObject0.putOpt("P{oL3%xm;gv2(u", "P{oL3%xm;gv2(u");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0355403315924874
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "-z.";
      stringArray0[6] = "(x5>a%jw\" h";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.074092848193129
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(869);
      Float float0 = new Float(2032.34238301251);
      JSONObject jSONObject0 = new JSONObject(float0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "co";
      stringArray0[1] = "getreplaceFirst";
      stringArray0[2] = "issubstring";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject1.put(",\n", (Collection) linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.6525318567746736
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "null";
      Long.compareUnsigned(583L, 0L);
      String string0 = "toJ";
      Long.getLong("toJ", 0L);
      JSONObject.valueToString("null", 1, 1);
      Byte byte0 = new Byte((byte)50);
      jSONObject0.putOpt("null", "\"java.lang.String@0000000002\"");
      Byte.toUnsignedInt((byte)50);
      JSONObject.valueToString(byte0, 0, 1600);
      Boolean boolean0 = Boolean.valueOf((String) null);
      JSONObject jSONObject1 = jSONObject0.append("tWj/UEghy8zk3", boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("\"Y}oX2}QjWXg`<", (Collection) linkedList0);
      JSONObject.quote("\"Y}oX2}QjWXg`<");
      JSONObject.valueToString(hashMap0);
      try { 
        jSONObject2.getInt("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Boolean.valueOf((String) null);
      String[] stringArray0 = new String[6];
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = null;
      String string0 = JSONObject.doubleToString((-1889));
      assertEquals("-1889", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.173750346086737
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = new JSONObject((Object) "");
      String string1 = "toL";
      JSONObject jSONObject2 = jSONObject0.putOpt("toL", "toL");
      String string2 = "";
      try { 
        jSONObject2.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.038198852167527
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSONObject.quote("e8");
      Object object0 = new Object();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "e8";
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Bad value from toJSONString: ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Bad value from toJSONString: 
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.1161405306531647
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("fPJwK", "fPJwK");
      jSONObject0.optLong("~j5oX>E%x", (-469L));
      jSONObject0.optLong("58M]8>onv", 0L);
      jSONObject1.put("isformat", 1L);
      try { 
        jSONObject0.get("MhE,@s6i|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"MhE,@s6i|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0093994817375425
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("*^6)=lT", "");
      JSONObject jSONObject2 = jSONObject1.put("dhycYy;2w<Q-X", true);
      try { 
        jSONObject2.getJSONArray("dhycYy;2w<Q-X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dhycYy;2w<Q-X\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "f(#h";
      stringArray0[1] = ",";
      stringArray0[2] = "wheel.json.JSONArray";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "9wn";
      stringArray0[5] = "P>Z+Qza NssL";
      stringArray0[6] = "hY?T3";
      stringArray0[7] = "j.hH";
      stringArray0[8] = "?lXb=;BggZB<vMI";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.957491293605532
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      String string0 = "25vG|O!&Pw|]";
      JSONObject jSONObject0 = new JSONObject((Object) "25vG|O!&Pw|]");
      jSONObject0.accumulate("25vG|O!&Pw|]", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("25vG|O!&Pw|]");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 25vG|O!&Pw|]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
