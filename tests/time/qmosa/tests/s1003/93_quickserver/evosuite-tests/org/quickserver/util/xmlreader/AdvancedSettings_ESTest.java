/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:32:54 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.379038423481982
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.toXML("");
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getMaxThreadsForNioWrite();
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2176504333111726
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-905));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(10);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setCharset((String) null);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize((-1385));
      assertEquals(10, advancedSettings0.getBacklog());
      
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings2.setClientSocketTrafficClass("ISO-8859-1");
      advancedSettings2.getPerformancePreferencesConnectionTime();
      advancedSettings1.setQSObjectPoolMaker((String) null);
      AdvancedSettings advancedSettings3 = new AdvancedSettings();
      advancedSettings3.getClientSocketSendBufferSize();
      advancedSettings1.getClientSocketSendBufferSize();
      advancedSettings3.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings4 = new AdvancedSettings();
      advancedSettings2.setQSObjectPoolMaker((String) null);
      AdvancedSettings advancedSettings5 = new AdvancedSettings();
      advancedSettings5.setClientSocketReceiveBufferSize(10);
      advancedSettings5.setClientSocketTcpNoDelay(false);
      advancedSettings5.setQSObjectPoolMaker("??;Kh>B[Vy}r");
      advancedSettings1.setCharset("ISO-8859-1");
      advancedSettings4.setBacklog(0);
      advancedSettings2.setCharset("");
      AdvancedSettings advancedSettings6 = new AdvancedSettings();
      advancedSettings6.setMaxThreadsForNioWrite(0);
      AdvancedSettings advancedSettings7 = new AdvancedSettings();
      int int0 = advancedSettings7.getClientSocketReceiveBufferSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6421265278028705
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketTrafficClass("_i#c");
      advancedSettings0.setClientSocketTrafficClass("_i#c");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog((-36));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.toXML("m}FswQ");
      advancedSettings0.setPerformancePreferencesBandwidth((-2812));
      advancedSettings0.setByteBufferSize(42);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getBacklog();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getDebugNonBlockingMode();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals((-2812), int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.6379357855006327
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-3739));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setPerformancePreferencesLatency((-3739));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.toXML((String) null);
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("4");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 4
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0871068051485753
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("</backlog>\n");
      advancedSettings0.setClientSocketSendBufferSize((-3142));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(3574);
      advancedSettings0.setClientSocketSendBufferSize((-3142));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketReceiveBufferSize((-3142));
      advancedSettings0.setClientSocketSendBufferSize((-447));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setCharset("");
      assertEquals((-447), advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.754627133386218
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.setClientSocketTrafficClass(";}vW[5qoNw$`\"WR;Q_~");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setQSObjectPoolMaker("WCh~kQe~\"7c#");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("h5~Y{\"e");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // h5~Y{\"e
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.56618637089529
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(1);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesBandwidth(1554);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("S]`&`<XuOD\"Jz`hKYM");
      advancedSettings0.setPerformancePreferencesConnectionTime((-3739));
      advancedSettings0.setPerformancePreferencesLatency((-3739));
      advancedSettings0.setClientSocketSendBufferSize((-2005));
      advancedSettings0.setPerformancePreferencesConnectionTime((-2));
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setByteBufferSize(13);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesBandwidth(65536);
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.toXML("");
      int int0 = advancedSettings0.getBacklog();
      assertEquals("S]`&`<XuOD\"Jz`hKYM", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.5753216678208934
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setSocketLinger(132);
      advancedSettings0.setQSObjectPoolMaker("</debug-non-blocking-mode>\n");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.toXML("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setQSObjectPoolMaker("!<cz,7[Z");
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getUseDirectByteBuffer();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings1.setCharset("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>132</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker></debug-non-blocking-mode>\n</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>1</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // <advanced-settings>
         // \t<charset>ISO-8859-1</charset>
         // \t<use-direct-byte-buffer>true</use-direct-byte-buffer>
         // \t<byte-buffer-size>65536</byte-buffer-size>
         // \t<backlog>0</backlog>
         // \t<socket-linger>132</socket-linger>
         // \t<debug-non-blocking-mode>true</debug-non-blocking-mode>
         // \t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>
         // \t<qsobject-pool-maker></debug-non-blocking-mode>
         // </qsobject-pool-maker>
         // \t<max-threads-for-nio-write>10</max-threads-for-nio-write>
         // \t<performance-preferences-connection-time>1</performance-preferences-connection-time>
         // \t<performance-preferences-latency>0</performance-preferences-latency>
         // \t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>
         // \t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>
         // </advanced-settings>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.122928297357194
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-609));
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite((-609));
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setPerformancePreferencesBandwidth(65536);
      advancedSettings0.setPerformancePreferencesLatency(65536);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals(65536, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.517941861547736
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("S]`&`<XuOD\"Jz`hKYM");
      advancedSettings0.setPerformancePreferencesConnectionTime((-3739));
      advancedSettings0.setPerformancePreferencesLatency((-3739));
      advancedSettings0.setClientSocketSendBufferSize((-2005));
      advancedSettings0.setPerformancePreferencesConnectionTime((-2));
      advancedSettings0.toXML("");
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setByteBufferSize(13);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setPerformancePreferencesBandwidth(65536);
      advancedSettings1.setClientIdentifier("");
      advancedSettings1.toXML("");
      assertEquals(65536, advancedSettings1.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.526050523701461
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketReceiveBufferSize(1);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.toXML("T&b=ijQp:3wp:1");
      assertEquals(1, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3786042072422946
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.toXML("");
      advancedSettings0.getQSObjectPoolMaker();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9421822974250196
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1474);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("VCfy:x62:b*");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientIdentifier("VCfy:x62:b*");
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0265227903074674
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1472);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTrafficClass("VCfy:x62:b*");
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setCharset("");
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientIdentifier();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.288709335374667
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientIdentifier("DN9yby$+*g");
      advancedSettings0.setBacklog((-3249));
      advancedSettings0.setCharset("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getCharset();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setQSObjectPoolMaker("fb1wnwcKr}Y*[(X");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getSocketLinger();
      advancedSettings0.setQSObjectPoolMaker("org.quickserver.util.xmlreader.AdvancedSettings");
      advancedSettings1.setClientSocketSendBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings1.setCharset("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings1.getDebugNonBlockingMode();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals("DN9yby$+*g", advancedSettings0.getClientIdentifier());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1924);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setPerformancePreferencesLatency(1163);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTrafficClass("2Po8\"5hS=~");
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize((-1377));
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketReceiveBufferSize((-1324));
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setPerformancePreferencesConnectionTime(1878);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      assertEquals(1163, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      
      advancedSettings0.setPerformancePreferencesBandwidth(1);
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals(1, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-232));
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      int int1 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertTrue(int1 == int0);
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, int1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.026522790307467
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("</backlog>\n");
      advancedSettings0.setClientSocketSendBufferSize((-3142));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize((-3142));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketReceiveBufferSize((-3142));
      advancedSettings0.setClientSocketSendBufferSize((-447));
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getDebugNonBlockingMode();
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-447), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals((-3142), int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7130415601881177
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("p<8`E:>");
      advancedSettings0.setClientIdentifier("D|T(IP^7");
      advancedSettings0.getClientIdentifier();
      assertEquals("D|T(IP^7", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-1642));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals((-1642), advancedSettings0.getClientSocketSendBufferSize());
      
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientIdentifier("");
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings1.getClientIdentifier());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(30);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(30, int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals("", string0);
      
      advancedSettings0.setCharset("");
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3841954627973854
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(122);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings0.toXML("");
      assertEquals(122, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.382771637453294
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      String string0 = advancedSettings0.toXML("");
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
      
      advancedSettings0.setUseDirectByteBuffer(false);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5980223283748383
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientIdentifier("=");
      advancedSettings0.setPerformancePreferencesConnectionTime((-3708));
      advancedSettings0.setPerformancePreferencesLatency((-3708));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-3708));
      advancedSettings0.toXML((String) null);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setByteBufferSize((-1));
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals("=", advancedSettings0.getClientIdentifier());
      assertEquals((-3708), int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, int0);
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, int0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(824);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      assertEquals(824, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getQSObjectPoolMaker();
      assertTrue(advancedSettings0.getDebugNonBlockingMode());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setSocketLinger((-1558));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientIdentifier("I");
      assertEquals((-1558), advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(3593);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(504);
      advancedSettings1.setByteBufferSize(504);
      advancedSettings0.setClientIdentifier("");
      advancedSettings1.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      assertEquals(504, advancedSettings0.getClientSocketReceiveBufferSize());
  }
}
