/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:20:52 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.InetAddress;
import java.net.Proxy;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5350884754592706
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeout(0);
      theClient0.getClientObjectHandler();
      QuickServer quickServer0 = new QuickServer();
      quickServer0.setRawCommunicationMaxLength(0);
      theClient0.setServer(quickServer0);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxAuthTry(0);
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getAuthenticator();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient0.getClientEvent();
      theClient0.getSocket();
      theClient0.getServer();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientData();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getTimeoutMsg();
      theClient0.getMaxConnectionMsg();
      theClient0.getMaxConnectionMsg();
      theClient0.setClientData((ClientData) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientAuthenticationHandler();
      assertEquals(0, theClient0.getTimeout());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.4872576972828044
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      int int0 = theClient0.getMaxAuthTry();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      theClient0.getTimeoutMsg();
      theClient0.toString();
      theClient0.getTimeoutMsg();
      theClient0.getSocket();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setTimeoutMsg("<secure-store>\n");
      int int1 = theClient0.getTimeout();
      assertTrue(int1 == int0);
      
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler1 = new CommandHandler();
      TheClient theClient1 = new TheClient();
      theClient1.setClientEventHandler(commandHandler1);
      theClient0.getServer();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient1.getClientEventHandler();
      theClient1.getClientObjectHandler();
      theClient0.getMaxConnectionMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.379260646785054
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setTimeout((-1));
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      theClient0.getTimeoutMsg();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxConnectionMsg("</load>\n");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getTimeout();
      theClient0.getClientBinaryHandler();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientBinaryHandler();
      assertEquals((-1), theClient0.getTimeout());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setTimeout((-1));
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getAuthenticator();
      theClient0.getTimeoutMsg();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxConnectionMsg("</load>\n");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.getMaxConnectionMsg();
      assertEquals((-1), theClient0.getTimeout());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeout(10);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      theClient0.setTrusted(true);
      theClient0.setTimeout((-2984));
      TheClient theClient1 = new TheClient();
      theClient1.getServer();
      theClient0.setServer((QuickServer) null);
      theClient0.getClientBinaryHandler();
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient1.getServer();
      theClient1.getSocketChannel();
      boolean boolean0 = theClient0.getTrusted();
      assertEquals((-2984), theClient0.getTimeout());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("no socket");
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxAuthTryMsg("no socket");
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-8));
      blockingClientHandler0.getClientData();
      assertEquals("<ClientHandler-Pool#-8-ID:1>", blockingClientHandler0.getName());
      
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient0.setClientEvent(clientEvent0);
      Data data0 = new Data();
      Data data1 = new Data();
      theClient0.setClientData(data1);
      theClient0.getClientData();
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Max Connection)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "7-]7WA]_G36MAiX@.");
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getTimeoutMsg();
      theClient0.getSocket();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("", 1676);
      Object[] objectArray0 = new Object[6];
      objectArray0[5] = (Object) theClient0;
      objectArray0[1] = (Object) quickServer0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      objectArray0[2] = (Object) "";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) quickServer0;
      objectArray0[5] = (Object) quickServer0;
      quickServer0.initService(objectArray0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientObjectHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      org.quickserver.net.qsadmin.Authenticator authenticator1 = new org.quickserver.net.qsadmin.Authenticator();
      assertFalse(authenticator1.equals((Object)authenticator0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      ClientEvent clientEvent0 = ClientEvent.WRITE;
      theClient0.setClientEvent(clientEvent0);
      theClient0.getClientEventHandler();
      theClient0.getSocket();
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 1122);
      mockInetSocketAddress0.getHostName();
      mockInetSocketAddress0.getHostName();
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxAuthTryMsg("");
      theClient0.getSocket();
      theClient0.getClientCommandHandler();
      theClient0.setMaxAuthTry(869);
      theClient0.setTimeout(3018);
      int int0 = theClient0.getTimeout();
      assertEquals(3018, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9676652704776565
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("no socket");
      theClient0.getSocket();
      theClient0.getClientBinaryHandler();
      theClient0.setCommunicationLogging(false);
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setMaxAuthTryMsg("no socket");
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler((-19));
      blockingClientHandler0.getClientData();
      assertEquals("<ClientHandler-Pool#-19-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientData((ClientData) null);
      theClient0.setClientData((ClientData) null);
      theClient0.getTimeoutMsg();
      theClient0.setMaxAuthTryMsg(":X_~");
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler0.closingConnection(blockingClientHandler0);
      commandHandler0.closingConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.getServer();
      theClient0.setServer((QuickServer) null);
      theClient0.setTimeout(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientCommandHandler();
      theClient0.getServer();
      theClient0.getClientData();
      theClient0.getClientEventHandler();
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      assertEquals(0, theClient0.getTimeout());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-171));
      theClient0.setTimeout((-1571));
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxAuthTry(525);
      theClient0.getServer();
      theClient0.toString();
      theClient0.getClientCommandHandler();
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-1571), theClient0.getTimeout());
      assertEquals(525, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 1122);
      mockInetSocketAddress0.getHostName();
      mockInetSocketAddress0.getHostName();
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      theClient0.setSocket(mockSocket0);
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxAuthTryMsg("");
      theClient0.getSocket();
      theClient0.getClientCommandHandler();
      String string0 = theClient0.toString();
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientExtendedEventHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-1353));
      theClient0.getClientBinaryHandler();
      theClient0.getMaxAuthTry();
      theClient0.setMaxAuthTryMsg("");
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      assertEquals("(ClientEvent-Max Connection Blocking)", clientEvent0.toString());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.876156142363588
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientWriteHandler();
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.ACCEPT;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setTimeoutMsg("\t<communication-logging>\n");
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientEventHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      SocketChannel socketChannel0 = SocketChannel.open();
      theClient0.setSocketChannel(socketChannel0);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4338006812941
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setTimeout(1);
      theClient0.getMaxAuthTry();
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxConnectionMsg("");
      TheClient theClient1 = new TheClient();
      theClient1.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      theClient1.setClientEvent(clientEvent0);
      theClient1.getClientData();
      theClient1.setClientData((ClientData) null);
      TheClient theClient2 = new TheClient();
      theClient2.getClientData();
      theClient0.toString();
      assertEquals(1, theClient0.getTimeout());
      
      theClient1.getClientEvent();
      assertTrue(theClient1.getCommunicationLogging());
  }
}
