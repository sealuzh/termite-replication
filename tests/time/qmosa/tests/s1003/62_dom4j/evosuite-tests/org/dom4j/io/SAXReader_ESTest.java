/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 16:36:39 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URI;
import java.net.URL;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttribute;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-50);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      byteArray0[1] = (byte) (-115);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl1);
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader1.isMergeAdjacentText());
      
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertSame(documentFactory0, defaultDocumentFactory0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 18);
      mockFileInputStream0.skip(0L);
      mockFileInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 18);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(mockFileInputStream0, 2447);
      StringReader stringReader0 = new StringReader("");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      sAXReader0.getErrorHandler();
      SAXReader sAXReader1 = new SAXReader();
      sAXReader0.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      String string0 = "http://xml.org/sax/features/validation";
      sAXReader0.setFeature("http://xml.org/sax/features/validation", false);
      String string1 = "//tmp/[(DefaultRelativeLocationPath): 0";
      try { 
        sAXReader1.setXMLReaderClassName("//tmp/[(DefaultRelativeLocationPath): 0");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/[(DefaultRelativeLocationPath): 0 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.processingInstruction("H", "H");
      xMLFilterImpl0.getEntityResolver();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      sAXReader0.setEncoding((String) null);
      sAXReader0.getEncoding();
      XMLReader xMLReader0 = sAXReader0.createXMLReader();
      sAXReader0.getEntityResolver();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, xMLReader0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.notationDecl("//tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF", "//tmp/http:/xml.org/sax/features/validation0http:/xml.org/sax/features/validation", "//tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader1 = new SAXReader((String) null);
      try { 
        sAXReader1.setXMLReaderClassName("//tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3720491019563554
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.getErrorHandler();
      SAXReader sAXReader2 = new SAXReader();
      sAXReader2.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      SAXReader sAXReader3 = new SAXReader(documentFactory0, true);
      try { 
        sAXReader3.configureReader(xMLFilterImpl0, (DefaultHandler) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@49f51b84 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4383740327894543
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          sAXReader0.setEncoding("]8T{=b*zMCh");
          sAXReader0.getXMLReader();
          sAXReader0.getErrorHandler();
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
          MockURL.getFtpExample();
          URI uRI0 = MockURI.aHttpURI;
          URI uRI1 = MockURI.parseServerAuthority(uRI0);
          URL uRL0 = MockURI.toURL(uRI1);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"foo.bar\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor233.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"foo.bar\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor233.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.514491472225595
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("]8T{=b*zMCh");
      sAXReader0.getXMLReader();
      sAXReader0.getErrorHandler();
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList((BeanElement) null, beanMetaData0);
      QName qName0 = beanAttributeList0.getQName(0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      InputStream inputStream0 = null;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 1780);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      String string0 = "//tmp/http:/xml.org/sax/features/validation0http:/xml.org/sax/features/validation";
      xMLFilterImpl0.notationDecl((String) null, "//tmp/http:/xml.org/sax/features/validation0http:/xml.org/sax/features/validation", (String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(mockFileInputStream0, sequenceInputStream0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-50);
      byteArray0[5] = (byte)18;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("//tmp/yn#M.G'W2VH=L0yn#M.G'W2VH=L");
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.568413258053965
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      sAXReader0.getEncoding();
      InputSource inputSource0 = null;
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.507949694759748
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/62_dom4j");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "3?nI~r+tkYYJ_sG,P^");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setStripWhitespaceText(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("3?nI~r+tkYYJ_sG,P^");
      DefaultDocumentFactory.getInstance();
      sAXReader0.addHandler("^l((&YLJUb`.'$", dispatchHandler0);
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler1);
      sAXReader0.isMergeAdjacentText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("(eoGcw@Ph?u9");
      sAXReader_SAXEntityResolver0.resolveEntity("", "org.jaxen.saxpath.base.Verifier");
      MockFile mockFile0 = new MockFile("//tmp/yn#M.G'W2VH=L0.tmp");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      defaultDocumentFactory0.createQName("]c", namespace0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", (String) null);
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("wgv9hU%,w");
      sAXReader_SAXEntityResolver0.resolveEntity("O{(K$?Pz>}2oM-z", "//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      MockFile.createTempFile("//tmp/wK^Ua5Oy^9;'[`mAFF0/tmp/yn#M.G'W2VH=L0.tmp", "/");
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.6447702087468468
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.getHandler((String) null);
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      handlerBase0.resolveEntity((String) null, (String) null);
      handlerBase0.startDocument();
      handlerBase0.endElement("");
      sAXReader0.setErrorHandler(handlerBase0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.getXMLFilter();
      sAXReader0.isIgnoreComments();
      sAXReader0.isStringInternEnabled();
      try { 
        sAXReader0.read("<p");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: <p Nested exception: no protocol: <p
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.335000195261916
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
          sAXReader0.getXMLFilter();
          sAXReader0.installXMLFilter((XMLReader) null);
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
          String string0 = "//tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF";
          FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor233.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor233.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.312129845596213
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.setDefaultHandler(dispatchHandler0);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.notationDecl((String) null, (String) null, (String) null);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      handlerBase0.resolveEntity("org.dom4j.tree.FlyweightText", (String) null);
      handlerBase0.resolveEntity((String) null, (String) null);
      handlerBase0.startDocument();
      handlerBase0.endElement("");
      sAXReader0.setErrorHandler(handlerBase0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.getXMLFilter();
      sAXReader0.isIgnoreComments();
      sAXReader0.isStringInternEnabled();
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("JFc\"7S[X)'k");
      sAXReader0.resetHandlers();
      sAXReader0.addHandler("JFc\"7S[X)'k", dispatchHandler0);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.addHandler("JFc\"7S[X)'k", dispatchHandler0);
      sAXReader0.getErrorHandler();
      try { 
        sAXReader0.setProperty("org.dom4j.tree.AbstractAttribute", entityResolver0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'org.dom4j.tree.AbstractAttribute' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.24314403920656
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.getHandler((String) null);
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      HandlerBase handlerBase0 = new HandlerBase();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      handlerBase0.resolveEntity((String) null, (String) null);
      handlerBase0.startDocument();
      handlerBase0.endElement("");
      sAXReader0.setErrorHandler(handlerBase0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.getXMLFilter();
      sAXReader0.isIgnoreComments();
      sAXReader0.isStringInternEnabled();
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("JFc\"7S[X)'k");
      sAXReader0.createDefaultEntityResolver("");
      entityResolver0.resolveEntity("F>I", "JFc\"7S[X)'k");
      sAXReader0.resetHandlers();
      sAXReader0.addHandler("JFc\"7S[X)'k", (ElementHandler) null);
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.addHandler("JFc\"7S[X)'k", (ElementHandler) null);
      try { 
        sAXReader0.setProperty("org.dom4j.tree.AbstractAttribute", entityResolver0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'org.dom4j.tree.AbstractAttribute' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("G[yF%f");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespace-prefixes", "http://xml.org/sax/features/namespace-prefixes");
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.334010586157512
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
      mockFileInputStream0.skip(0L);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3);
      defaultDocumentFactory0.createDocument();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = new InputSource("");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/62_dom4j");
      FileSystemHandling.createFolder(evoSuiteFile0);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "//tmp/(eoGcwPh?u90wK^Ua5Oy^9;'[`mAFF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      sAXContentHandler0.resolveEntity("org.dom4j.io.SAXReader$SAXEntityResolver", "org.dom4j.io.SAXReader$SAXEntityResolver");
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      sAXReader0.setEntityResolver((EntityResolver) null);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      DispatchHandler dispatchHandler1 = sAXReader0.getDispatchHandler();
      dispatchHandler1.setDefaultHandler(dispatchHandler0);
      String string0 = "//tmp/l}Td0l}Td";
      sAXReader0.addHandler("//tmp/l}Td0l}Td", dispatchHandler1);
      try { 
        sAXReader0.setXMLReaderClassName("");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4030657843241525
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("0,_#KD*&{\"B");
      sAXReader_SAXEntityResolver0.resolveEntity("0,_#KD*&{\"B", "0,_#KD*&{\"B");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("^");
      sAXReader_SAXEntityResolver1.resolveEntity(",x][w_]+\"P;,1w:46V", "(_wI)ngO?Mx:>vabh");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl0, sAXContentHandler0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.0164927125448684
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.getHandler((String) null);
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.setDefaultHandler(dispatchHandler0);
      String string0 = "";
      String string1 = "YCqX`,fizetZ!$ULg4";
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("YCqX`,fizetZ!$ULg4");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class YCqX`,fizetZ!$ULg4 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-115);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-50);
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String string0 = "?";
      dispatchHandler0.removeHandler("?");
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      dispatchHandler0.resetHandlers();
      sAXReader0.addHandler("V8EeO2a-)})&{zj4", (ElementHandler) null);
      StringReader stringReader0 = new StringReader("?");
      String string1 = "Q-kF+-eOS=mXC";
      DefaultDocument defaultDocument0 = new DefaultDocument();
      String string2 = "http://xml.org/sax/features/use-locator2";
      ElementStack elementStack0 = null;
      try {
        elementStack0 = new ElementStack((byte) (-115));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.ElementStack", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      String string0 = "/K#";
      StringReader stringReader0 = new StringReader("/K#");
      DispatchHandler dispatchHandler0 = null;
      sAXReader0.isValidating();
      sAXReader0.isIncludeInternalDTDDeclarations();
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.setStripWhitespaceText(true);
      String string1 = "Comment";
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.setDefaultHandler((ElementHandler) null);
      pruningDispatchHandler0.addHandler("Comment", (ElementHandler) null);
      ElementStack elementStack0 = new ElementStack();
      pruningDispatchHandler0.resetHandlers();
      elementStack0.lastElementIndex = (-1860);
      // Undeclared exception!
      try { 
        pruningDispatchHandler0.onEnd(elementStack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      QName qName0 = QName.get("");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.removeHandler("");
      sAXReader0.getEncoding();
      ElementStack elementStack0 = new ElementStack(0);
      elementStack0.getDispatchHandler();
      sAXReader0.addHandler((String) null, (ElementHandler) null);
      elementStack0.getDispatchHandler();
      sAXReader0.setDefaultHandler((ElementHandler) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      StringReader stringReader0 = new StringReader("/K#");
      try { 
        sAXReader0.read("/K#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /K (No such file or directory) Nested exception: /K (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("2");
      StringReader stringReader1 = new StringReader("<GZ6");
      try { 
        sAXReader0.read((Reader) stringReader1, "<GZ6");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document <GZ6 : XML document structures must start and end within the same entity. Nested exception: XML document structures must start and end within the same entity.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/62_dom4j");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)36;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      defaultDocumentFactory0.createDocument();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.214734015212756
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      sAXReader_SAXEntityResolver0.uriPrefix = "Validation not supported for XMLReader: ";
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF", "//tmp/&,dJo0http:/xml.org/sax/features/namespace-prefixes");
      try { 
        sAXReader0.setFeature("//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.49649273994102
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement(" r4M", " r4M");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      QName qName0 = beanAttributeList0.getQName(0);
      Element element0 = beanElement0.createCopy("F3ks514_Bwtn>b");
      beanElement0.getPath(element0);
      DocumentFactory documentFactory0 = qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      sAXReader0.isIgnoreComments();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/ r4M");
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList0, 0);
      Namespace namespace0 = beanAttribute0.getNamespace();
      QName.get("F3ks514_Bwtn>b", namespace0);
      sAXReader_SAXEntityResolver0.resolveEntity("p1g", "+3t6d");
      sAXReader0.getEntityResolver();
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "O{(K$?Pz>}2oM-z";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        sAXReader0.read("}'T'wqn!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: }'T'wqn! Nested exception: no protocol: }'T'wqn!
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
      mockFileInputStream0.skip(0L);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      MockFile.createTempFile("wK^Ua5Oy^9;'[`mAFF", "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0798592819319524
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setStripWhitespaceText(false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("");
      DefaultDocumentFactory.getInstance();
      sAXReader0.addHandler("", (ElementHandler) null);
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.isMergeAdjacentText();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("(eoGcw@Ph?u9");
      sAXReader_SAXEntityResolver0.resolveEntity("(eoGcw@Ph?u9", "//tmp/yn#M.G'W2VH=L0.tmp");
      sAXReader0.getErrorHandler();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      sAXReader1.setMergeAdjacentText(false);
      sAXReader1.setValidation(true);
      MockThrowable mockThrowable0 = new MockThrowable();
      MockException mockException0 = new MockException("aC_kdi/", mockThrowable0);
      MockException mockException1 = new MockException(mockException0);
      SAXParseException sAXParseException0 = new SAXParseException("(eoGcw@Ph?u9", (Locator) null, mockException1);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/features/string-interning", sAXParseException0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property 'http://xml.org/sax/features/string-interning' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3675800087985097
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      sAXReader0.installXMLFilter((XMLReader) null);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 3);
      mockFileInputStream0.skip(3);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.close();
      pipedInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 47);
      try { 
        sAXReader0.read((InputStream) pipedInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      String string0 = "%%B.]{p";
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.isValidating();
      try { 
        sAXReader0.setFeature("%%B.]{p", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '%%B.]{p' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.3187301285838133
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/yn#M.G'W2VH=L0.tmp", "http://xml.org/sax/properties/declaration-handler");
      File file0 = MockFile.createTempFile("//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF", "O{(K$?Pz>}2oM-z");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%%B.]{p");
      MockURL.getFtpExample();
      DefaultDocument defaultDocument0 = new DefaultDocument();
      sAXReader0.getEncoding();
      MockFile.createTempFile("*/|0WK^H RgR>U", "http://xml.org/sax/features/validation");
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/[(De,aultRelativeLo!ationPath): 0");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/[(De,aultRelativeLo!ationPath): 0 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getXMLFilter();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      assertNotNull(inputSource0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.334010586157512
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      defaultDocumentFactory0.createQName("]c", namespace0);
      StringReader stringReader0 = new StringReader("");
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader1.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 18);
      mockFileInputStream0.skip(0L);
      mockFileInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 18);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(mockFileInputStream0, 2447);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("]8T{=b*zMCh");
      sAXReader0.getXMLReader();
      SAXReader sAXReader1 = null;
      try {
        sAXReader1 = new SAXReader("]8T{=b*zMCh", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class ]8T{=b*zMCh not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5350813079469847
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getErrorHandler();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("D5U=");
      InputSource inputSource1 = sAXReader_SAXEntityResolver0.resolveEntity(",x][w_]+\"P;,1w:46V", "//tmp/[(DefaultRelativeLocationPath): 0");
      assertNotSame(inputSource1, inputSource0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      assertTrue(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/(eoGcOw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/&,dJo0http:/xml.org/sax/features/namespace-prefixes", "Z|/-h =UZnU");
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = '3';
      charArray0[2] = '+';
      charArray0[3] = 'T';
      charArray0[4] = 'd';
      xMLFilterImpl0.characters(charArray0, 0, 0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getEncoding();
      sAXReader0.setStringInternEnabled(true);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = new QName("", namespace0, "");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(boolean0);
      
      sAXReader0.setIgnoreComments(false);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIgnoreComments());
      
      sAXReader0.setIgnoreComments(true);
      assertTrue(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
      mockFileInputStream0.skip(0L);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3);
      defaultDocumentFactory0.createDocument();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("//tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: //tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF Nested exception: no protocol: //tmp/(eoGcw@Ph?u90wK^Ua5Oy^9;'[`mAFF
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3922896470698074
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
      mockFileInputStream0.release();
      mockFileInputStream0.skip(0L);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3);
      defaultDocumentFactory0.createDocument();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("X]q1ep7YtBq3M\"koRi7");
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0, true);
      try { 
        sAXReader1.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      mockFileInputStream0.markSupported();
      mockFileInputStream0.getChannel();
      mockFileInputStream0.skip(0L);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 3);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertNotNull(xMLReader0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      mockFileInputStream0.markSupported();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(mockFileInputStream0, 3);
      mockFileInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 3337);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(dataInputStream0, 4436);
      String string0 = "";
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.resetHandlers();
      dispatchHandler0.removeHandler("m663cj3i0T,#");
      dispatchHandler0.removeHandler("f(#h");
      dispatchHandler0.removeHandler("");
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.createContentHandler(xMLFilterImpl0);
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }
}
