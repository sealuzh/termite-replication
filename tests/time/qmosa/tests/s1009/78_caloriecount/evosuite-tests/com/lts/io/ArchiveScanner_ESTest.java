/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:45:54 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "TC+P";
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.filesIncluded = vector0;
      DirectoryScanner.matchPatternStart("TC+P", "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "TC+P");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate.isEqual((Object) "TC+P");
      predicate4.negate();
      predicate1.negate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "f7\"zSokFJJQx ^";
      stringArray0[1] = "<8uQ@.|9|s{bgc";
      stringArray0[2] = "<8uQ@.|9|s{bgc";
      stringArray0[3] = "f7\"zSokFJJQx ^";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "<8uQ@.|9|s{bgc");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      DirectoryScanner.matchPatternStart("TC+P", "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "repos.jar";
      stringArray0[1] = "TC+P";
      stringArray0[2] = "RlLj<0RlLj<.jar0~7Sb?e;(.jar";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "TC+P", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      DirectoryScanner.matchPatternStart("TC+P", "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "repos.jar";
      stringArray0[1] = "TC+P";
      archiveScanner0.excludes = stringArray0;
      stringArray0[2] = "RlLj<0RlLj<.jar0~7Sb?e;(.jar";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "TC+P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      DirectoryScanner.matchPatternStart("TC+P", "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "repos.jar";
      stringArray0[1] = "TC+P";
      stringArray0[2] = "RlLj<0RlLj<.jar0~7Sb?e;(.jar";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "TC+P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "RlLj<0RlLj<.jar0~7Sb?e;(.jar";
      DirectoryScanner.matchPatternStart("TC+P", "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "repos.jar";
      stringArray0[1] = "TC+P";
      archiveScanner0.excludes = stringArray0;
      stringArray0[2] = "RlLj<0RlLj<.jar0~7Sb?e;(.jar";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsExcluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("TC+P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.892246898188396
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BfaT");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g\">j.jar");
      MockFile mockFile0 = new MockFile("BfaT");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      stringArray0[0] = "/resources/swing.properties";
      stringArray0[1] = ".ZIP.jar";
      stringArray0[2] = "";
      archiveScanner0.setIncludes(stringArray0);
      MockFile.createTempFile("BfaT", " ]dZUIH", (File) mockFile0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2633);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 552);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0);
      vector0.add((InputStream) pushbackInputStream0);
      File file0 = archiveScanner0.basedir;
      mockFile0.setReadOnly();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "Quit", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String string0 = "TC+P";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "repos.jar";
      stringArray0[1] = "TC+P";
      stringArray0[2] = "TC+P";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.addDefaultExcludes();
      vector0.toArray(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("TC+P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.892246898188396
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "BfaT";
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BfaT");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g\">j.jar");
      MockFile mockFile0 = new MockFile("BfaT");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      stringArray0[0] = "/resources/swing.properties";
      stringArray0[1] = ".ZIP.jar";
      stringArray0[2] = "";
      archiveScanner0.setIncludes(stringArray0);
      MockFile.createTempFile("BfaT", " ]dZUIH", (File) mockFile0);
      File file0 = archiveScanner0.basedir;
      mockFile0.setReadOnly();
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsExcluded = vector0;
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(mockFile0, "Quit", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".WAR";
      stringArray0[1] = "TC+P";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector0;
      stringArray0[2] = "&";
      archiveScanner0.setIncludes(stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = ".WAR";
      Vector<Object> vector1 = new Vector<Object>();
      archiveScanner0.filesNotIncluded = vector1;
      stringArray1[1] = "&";
      stringArray1[2] = "&";
      stringArray1[3] = "&";
      stringArray1[4] = "&";
      stringArray1[5] = ".WAR";
      stringArray1[6] = "TC+P";
      archiveScanner0.setIncludes(stringArray1);
      archiveScanner0.processFile("rj-77gM>O+CLTR&;");
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".WAR";
      stringArray0[1] = "TC+P";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.filesIncluded = vector0;
      stringArray0[2] = "&";
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "com.lts.io.ArchiveScanner");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.892246898188396
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g\">j.jar");
      MockFile mockFile0 = new MockFile("BfaT");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      stringArray0[0] = "/resources/swing.properties";
      stringArray0[1] = ".ZIP.jar";
      stringArray0[2] = "";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesExcluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      MockFile.createTempFile("&U:mN;=", ".WAR", (File) improvedFile0);
      MockFile mockFile1 = new MockFile(improvedFile0, "k<xVM6DUJ#ikx+?fNV");
      mockFile1.setReadOnly();
      mockFile1.setExecutable(false, false);
      mockFile1.delete();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "hvFOq?|0i :", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockFile mockFile0 = new MockFile("BfaT");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("BfaT/\\H#iBfaT0\\H#iBfaT/q9.hcp^#@.60.jar1BfaT");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.createFolder(evoSuiteFile1);
      System.setCurrentTimeMillis((-2197L));
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.clone();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 1248);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(bufferedInputStream0, 1248);
      vector0.add((InputStream) bufferedInputStream0);
      vector0.add((InputStream) pipedInputStream0);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      Vector<InputStream> vector2 = new Vector<InputStream>(vector0);
      MockFile mockFile0 = new MockFile(".ear", "");
      mockFile0.setWritable(true);
      ImprovedFile improvedFile0 = new ImprovedFile(".ear", "m<394nH`o)6C<");
      System.setCurrentTimeMillis(0L);
      ImprovedFile improvedFile1 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(mockFile0, "ry, ", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/.ear
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BfaT");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "g\">j.jar");
      MockFile mockFile0 = new MockFile("BfaT");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      ImprovedFile improvedFile0 = new ImprovedFile(mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      stringArray0[0] = "/resources/swing.properties";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("BfaT/\\H#iBfaT0\\H#iBfaT/q9.hcp^#@.60.jar1BfaT");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/78_caloriecount");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile1);
      System.setCurrentTimeMillis(1L);
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner1.scandir(improvedFile1, "=]]2h|3CCh0@.60.jar", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      ImprovedFile improvedFile0 = new ImprovedFile((String) null, "H#if0T.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9140273284145395
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".zip");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".zip";
      stringArray0[1] = ".zip";
      stringArray0[2] = ".zip";
      stringArray0[3] = ".zip";
      archiveScanner0.setIncludes(stringArray0);
      File file0 = MockFile.createTempFile(".zip", ".zip", (File) improvedFile0);
      file0.deleteOnExit();
      file0.setReadOnly();
      MockFile mockFile0 = new MockFile(file0, "k<xVM6DUJ#ikx+?fNV");
      mockFile0.toPath();
      mockFile0.delete();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, ".zip", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("RlLj<");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1248);
      vector0.add((InputStream) pushbackInputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      vector0.add((InputStream) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      Consumer<InputStream> consumer0 = (Consumer<InputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      mockFileInputStream0.getChannel();
      vector0.add(0, (InputStream) mockFileInputStream0);
      Vector<InputStream> vector1 = new Vector<InputStream>(vector0);
      ImprovedFile improvedFile1 = improvedFile0.createTempDir("=]]2h|3CCh", "V.6:");
      MockFile mockFile0 = new MockFile(improvedFile0, "RlLj<");
      DirectoryScanner.matchPatternStart("=]]2h|3CCh", "=]]2h|3CCh");
      MockFile mockFile1 = new MockFile(mockFile0, "RlLj<");
      ImprovedFile improvedFile2 = new ImprovedFile("jhy.Pcbp-pt(KZ", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      archiveScanner0.scandir(improvedFile1, "", false);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("RlLj<");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 8);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      vector0.removeElement(pipedInputStream1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream1, 8);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) pushbackInputStream2);
      Object object0 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Integer integer0 = new Integer((-519));
      predicate0.test(integer0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate3);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate5 = predicate3.negate();
      predicate2.negate();
      predicate5.and(predicate1);
      predicate3.negate();
      LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
      vector1.addAll((Collection<? extends InputStream>) linkedList0);
      vector0.removeIf(predicate2);
      Consumer<InputStream> consumer0 = (Consumer<InputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector1.forEach(consumer0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scandir(improvedFile0, "RlLj<", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/RlLj<
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("RlLj<");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 8);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      vector0.removeElement(pipedInputStream1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream1, 8);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) pushbackInputStream2);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "]mNA=jFv'bm`Nf96J");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate6.and(predicate4);
      MockFile mockFile0 = new MockFile("]mNA=jFv'bm`Nf96J", "NrySQ'g>a5y%P");
      improvedFile0.setWritable(false);
      ImprovedFile improvedFile1 = new ImprovedFile("fp`_o].FrhoGZ", "RlLj<");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      // Undeclared exception!
      try { 
        archiveScanner0.isArchive(improvedFile1);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "Law5Y7ROYigu$C%");
      ImprovedFile improvedFile0 = ImprovedFile.createTempImprovedFile("joqnKH", (String) null, mockFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(mockFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.clone();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 1248);
      vector0.add((InputStream) pushbackInputStream0);
      vector0.add((InputStream) null);
      Vector<InputStream> vector1 = new Vector<InputStream>(1248);
      Vector<InputStream> vector2 = new Vector<InputStream>(vector0);
      MockFile mockFile0 = new MockFile("", "Yi:jbwVe3C{M4&ZM");
      ImprovedFile improvedFile0 = new ImprovedFile("root should have null as its parent.", "Csn0435*7,HHJINFl5");
      ImprovedFile improvedFile1 = new ImprovedFile("Csn0435*7,HHJINFl5", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Csn0435*7,HHJINFl5";
      stringArray0[1] = "";
      stringArray0[2] = "root should have null as its parent.";
      stringArray0[3] = "root should have null as its parent.";
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType(mockFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("RlLj<");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "RlLj<");
      Object object0 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) pipedInputStream0);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate<Object> predicate6 = predicate3.or(predicate5);
      Integer integer0 = new Integer((-3910));
      Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate4.and(predicate0);
      Predicate<Object> predicate9 = predicate3.negate();
      LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
      Vector<InputStream> vector2 = new Vector<InputStream>();
      vector1.addAll((Collection<? extends InputStream>) linkedList0);
      predicate6.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate8);
      predicate3.or(predicate9);
      vector2.removeIf(predicate10);
      Vector<InputStream> vector3 = new Vector<InputStream>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector2.forEach(consumer0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<String> vector4 = new Vector<String>();
      vector4.add("5y%P");
      try { 
        archiveScanner0.scanArchive(improvedFile0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, RlLj<
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      DirectoryScanner.matchPatternStart("TC+P", "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "TC+P");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      predicate1.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate2);
      Predicate<Object> predicate7 = predicate4.negate();
      LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      vector0.addAll((Collection<? extends InputStream>) linkedList0);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate7.and(predicate8);
      Predicate<Object> predicate10 = predicate9.or(predicate6);
      vector0.removeIf(predicate10);
      Vector<InputStream> vector1 = new Vector<InputStream>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector1.forEach(consumer0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner((ImprovedFile) null);
      Vector<String> vector2 = new Vector<String>();
      vector2.add("fo2}3H,");
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "TC+P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("RlLj<");
      Vector<InputStream> vector0 = new Vector<InputStream>();
      Vector<InputStream> vector1 = new Vector<InputStream>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 8);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      vector0.removeElement(pipedInputStream0);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(pushbackInputStream1, 8);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) pushbackInputStream2);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "]mNA=jFv'bm`Nf96J");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate6.and(predicate4);
      predicate1.negate();
      LinkedList<SequenceInputStream> linkedList0 = new LinkedList<SequenceInputStream>();
      vector1.addAll((Collection<? extends InputStream>) vector0);
      vector0.removeIf(predicate5);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector1.forEach(consumer0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType(improvedFile0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DirectoryScanner.matchPatternStart("<TC+P", "<TC+P");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<TC+P");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "<TC+P");
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      predicate2.or(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate.isEqual((Object) "<TC+P");
      predicate1.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate2);
      predicate4.negate();
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<TC+P";
      stringArray0[1] = "<TC+P";
      stringArray0[2] = "RlLj<.jar";
      stringArray0[3] = "<TC+P";
      stringArray0[4] = "<TC+P";
      stringArray0[5] = "<TC+P";
      stringArray0[7] = "<TC+P";
      System.setCurrentTimeMillis(0L);
      vector0.add((Object) predicate5);
      System.setCurrentTimeMillis(2911L);
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      // Undeclared exception!
      try { 
        archiveScanner0.toFileType((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      DirectoryScanner.matchPatternStart("TC+P", "RlLj<0RlLj<.jar0~7Sb?e;(.jar");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "repos.jar";
      stringArray0[1] = "TC+P";
      archiveScanner0.excludes = stringArray0;
      stringArray0[2] = "RlLj<0RlLj<.jar0~7Sb?e;(.jar";
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "B.jar", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }
}
