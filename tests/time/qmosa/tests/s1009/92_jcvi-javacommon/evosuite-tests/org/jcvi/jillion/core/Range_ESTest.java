/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:32:47 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.562630844288131
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.getLength();
      range0.split(9223372036854775807L);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.equals("");
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6656029504026724
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-966L), (-922L));
      Long long0 = new Long(75L);
      Long.sum(888L, 2920L);
      range0.getBegin(range_CoordinateSystem0);
      Long.divideUnsigned(127L, (-966L));
      range0.equals(long0);
      Range range1 = range0.asRange();
      range1.iterator();
      range1.getLength();
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=4.08379067928186
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Range range0 = Range.of((-181L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.ofLength(86L);
      range0.endsBefore(range1);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2147483635L, 2147483635L);
      Long long0 = new Long((-181L));
      Range.of(2147483635L);
      range2.getLength();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem2.getAbbreviatedName();
      range2.asRange();
      Range range3 = Range.of(86L, 2147483635L);
      range1.startsBefore(range3);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -181 .. -181 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -181 .. -181 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.913530455321978
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-181L), (-181L));
      range0.iterator();
      Range.of((-695L), (-181L));
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.getBegin();
      Range.CoordinateSystem.values();
      Range range1 = Range.of((-128L));
      range0.startsBefore(range1);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        Range.parseRange("[ -182 .. -181 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -182 .. -181 ]/SB into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5141649952385063
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Range range0 = Range.of(2147483562L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483562L, 2147483562L);
      Object object1 = new Object();
      range1.equals(range0);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 1746L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.shift((-85L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483562L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.024245978768623
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.of((-85L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-84L));
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder((-85L), 1435L);
      range_Builder0.shift((-1423L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      Range range2 = range_Builder2.build();
      Range range3 = Range.ofLength(255L);
      range1.intersects(range2);
      range3.endsBefore(range1);
      Range range4 = Range.of(4294967295L);
      range4.split(205L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.605621811313893
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483562L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder(0L, 1746L);
      long long1 = (-1114L);
      range_Builder1.shift((-1114L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(2147483562L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.8852333808009343
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range range2 = Range.of((-2147483648L), (-85L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.toString(range_CoordinateSystem1);
      Range range3 = Range.ofLength(9223372036854775563L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 2115L, 9223372036854775563L);
      range3.equals(range0);
      range3.intersects(range2);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem2, 9223372036854775563L, (-2147483648L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854775563 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.18024495296694
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-181L), (-181L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.ofLength(86L);
      range0.endsBefore(range1);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Long long0 = new Long((-181L));
      Range range3 = Range.of(2147483647L);
      range2.getLength();
      Range.of(0L, 0L);
      List<Range> list0 = range3.split(9223372036854775807L);
      range3.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("[ -182 .. -182 ]/0B", range_CoordinateSystem3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -182 .. -182 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.5803848998511163
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder(0L, 1746L);
      range_Builder1.shift((-1114L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range_Builder2.contractBegin(0L);
      range0.getBegin();
      Range.CoordinateSystem.values();
      String string0 = "Q}Z)TLOb";
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Q}Z)TLOb", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Q}Z)TLOb into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4662219007937636
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      range0.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range1.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("hn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.hn
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.734748354636248
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      range0.getLength();
      long long0 = range0.getLength();
      assertEquals(5786L, long0);
      
      Range range1 = Range.of((-2789L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-1026L));
      Range range2 = range_Builder0.build();
      assertFalse(range2.isEmpty());
      
      range0.iterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.9686969465516073
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range range0 = Range.of((-2664L), (-2664L));
      Range range1 = Range.of((-2664L), (-2664L));
      range1.getBegin();
      range0.getLength();
      range1.intersects(range0);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getLength();
      Range range2 = Range.of((-2664L));
      Range.CoordinateSystem.values();
      range2.equals(range0);
      Range range3 = Range.of((-2790L));
      range2.startsBefore(range0);
      range1.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8213106392770166
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long long0 = 5786L;
      Range range0 = Range.of(5786L);
      range0.getBegin();
      range0.getLength();
      Range range1 = Range.ofLength(1640L);
      range0.intersects(range1);
      range0.spliterator();
      Range range2 = Range.ofLength(9995L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range2.forEach(consumer0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.818033636148919
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      Range range2 = Range.ofLength(9223372036854775550L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 2115L, 9223372036854775550L);
      range3.startsBefore(range1);
      range2.equals(range0);
      range2.intersects(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.7025837812457496
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.ofLength(1L);
      Range.of(range_CoordinateSystem1, 2115L, 2147483647L);
      range0.equals((Object) null);
      Range range1 = Range.of(2252L, 2147483647L);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("&bmJVxt1abt}-:{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.&bmJVxt1abt}-:{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.7051291260406187
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      String string0 = null;
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(1746L, 1746L);
      range_Builder0.shift((-380L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.074971488470723
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range range0 = Range.of(1861L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1861L, 1861L);
      Range.of((-1690L), 1861L);
      range1.complementFrom(linkedList0);
      Range range2 = Range.of(1861L);
      Range range3 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range3.isSubRangeOf(range2);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      range_Builder0.build();
      range2.iterator();
      // Undeclared exception!
      try { 
        Range.parseRange("1_LhRk59YLaWFQDL?c", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 1_LhRk59YLaWFQDL?c into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.744622411190898
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      long long0 = range0.getEnd();
      assertEquals(5785L, long0);
      
      Range range1 = Range.of(1291L, 5786L);
      List<Range> list0 = range1.complement(range0);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range1));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(5786L, long1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.136481162615244
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(2147483647L);
      boolean boolean0 = range0.intersects(range1);
      assertTrue(boolean0);
      assertSame(range1, range0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.8252633260675406
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483562L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483562L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder(0L, 1746L);
      range_Builder1.shift((-1114L));
      range_Builder0.expandBegin(1746L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(255L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("zA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.zA
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.6214275564463914
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Range range0 = Range.of(5786L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(5786L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.104395966755622
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Range range0 = Range.of((-2664L), (-2664L));
      Range range1 = Range.of((-2664L), (-2664L));
      range1.getBegin();
      range0.getLength();
      range1.intersects(range0);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.of((-2664L));
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-2790L));
      range2.startsBefore(range0);
      range1.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range3.equals(range4);
      range3.intersects(range1);
      Range.of(682L);
      // Undeclared exception!
      try { 
        range3.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.9185010532383973
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483562L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483562L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.split(2147483562L);
      Range.Builder range_Builder2 = new Range.Builder(0L, 1746L);
      range_Builder1.shift((-1114L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.00266438883795
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Range range0 = Range.of((-132L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range.of((-132L), 1000L);
      Range range2 = Range.of(625L);
      range2.split(1L);
      range1.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 5785L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.0525366515944805
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Range range0 = Range.of((-132L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range.of((-132L), 1000L);
      Range range2 = Range.of(625L);
      range2.split(1L);
      range1.complement(range2);
      range1.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.ofLength(65535L);
      long long0 = new Long(1L);
      range_CoordinateSystem0.getAbbreviatedName();
      range3.asRange();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.9378839507756305
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range range0 = Range.of((-2664L), (-2664L));
      Range range1 = Range.of((-2664L), (-2664L));
      range1.getBegin();
      range0.getLength();
      range1.intersects(range0);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getLength();
      Range range2 = Range.of((-2664L));
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-2790L));
      range2.startsBefore(range0);
      range1.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7281295574675393
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder(0L, 1746L);
      range_Builder1.shift((-1114L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range_Builder2.contractBegin(0L);
      range0.getBegin();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 86L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.739378352104419
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      long long0 = (-85L);
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range.of((-2147483648L), (-85L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-2644L));
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange("(d+)s*,s*(d+)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse (d+)s*,s*(d+) into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.883084172685963
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Range range1 = range0.asRange();
      range1.iterator();
      Range range2 = Range.of((-2147483648L), (-85L));
      List<Range> list0 = range2.complement(range0);
      range0.getBegin();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      range_CoordinateSystem0.getAbbreviatedName();
      range1.asRange();
      List<Range> list1 = range1.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list0.size());
      //  // Unstable assertion: assertEquals(3, list1.size());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.058118972802814
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Range range0 = Range.of((-2664L), (-2664L));
      Range range1 = Range.of((-2664L), (-2664L));
      range1.getBegin();
      range0.getLength();
      boolean boolean0 = range1.intersects(range0);
      range0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      Range range2 = Range.of((-2664L));
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = Range.ofLength(4340L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range3.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(4340L, long1);
      
      Range.Comparators.values();
      List<Range> list0 = range1.complement(range2);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem.values();
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(object2);
      boolean boolean1 = range1.intersects(range3);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertSame(range1, range2);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.461972390960514
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = Range.of((-85L), 0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-85L), 0L);
      long long0 = (-1693L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-85L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.034185475601284
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-181L), (-181L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      assertEquals("[ -182 .. -182 ]/0B", string0);
      
      Range range1 = Range.ofLength(86L);
      range0.endsBefore(range1);
      range0.iterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 2147483647L, 2147483647L);
      Long long0 = new Long((-181L));
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
      
      long long1 = range2.getLength();
      assertEquals(0L, long1);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem3.getAbbreviatedName();
      range2.asRange();
      Range range4 = Range.of(86L, 2147483647L);
      boolean boolean0 = range1.startsBefore(range4);
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.9597914591449968
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(622L);
      Range range1 = Range.of(622L);
      range1.startsBefore(range0);
      Range range2 = range1.intersection(range0);
      Range.of((-2153L), (-2153L));
      List<Range> list0 = range2.split(622L);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertFalse(range1.equals((Object)range0));
      //  // Unstable assertion: assertTrue(list0.contains(range2));
      //  // Unstable assertion: assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.7235804405837847
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Long long0 = new Long(0L);
      Range range0 = Range.of(1771L, 2147483647L);
      range0.equals(range_Builder1);
      long long1 = 1746L;
      Range.Builder range_Builder2 = new Range.Builder(1746L, 2392L);
      range_Builder0.shift(2392L);
      range_Builder1.expandBegin((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.213106987547767
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      long long0 = 255L;
      Range range1 = Range.ofLength(255L);
      range0.isSubRangeOf(range1);
      range_Builder0.contractEnd((-36L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.ofLength(2636L);
      Range range3 = Range.parseRange("[ 1 .. 0 ]/RB");
      range3.equals(range_Builder0);
      Range.of((-2591L), (-36L));
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.containsAll(linkedList1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range2.complement(range2);
      long long1 = (-274L);
      Range range4 = Range.of(0L);
      range4.complement(range1);
      range2.iterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6202913151981857
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3172L), 5786L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.621584281007991
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(5786L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.7670019584241405
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range range0 = Range.of((-2664L), (-2664L));
      Range range1 = Range.of((-2664L), (-2664L));
      Object object0 = new Object();
      Long long0 = new Long((-2664L));
      range0.equals(long0);
      range1.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractBegin((-2664L));
      range_Builder1.expandBegin((-2664L));
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.0646924500665085
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-1252L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.243354668712959
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Range range0 = Range.of(0L);
      long long0 = 488L;
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.098208224642417
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range range0 = Range.of((-85L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range0.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-84L));
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder((-85L), 1435L);
      range_Builder0.shift((-1423L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(0L);
      Range range2 = range_Builder2.build();
      Range range3 = Range.ofLength(255L);
      Range range4 = Range.of(0L, 2190L);
      long long0 = range1.getLength();
      //  // Unstable assertion: assertEquals(1L, long0);
      
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      List<Range> list0 = range3.complementFrom(linkedList2);
      Range.ofLength(127L);
      List<Range> list1 = range4.complement(range2);
      //  // Unstable assertion: assertFalse(list1.contains(range4));
      
      List<Range> list2 = range1.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list2.equals((Object)list1));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.312305887286281
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      long long0 = 2147483562L;
      Range range0 = Range.of(2147483562L);
      Object object0 = new Object();
      Long long1 = new Long(2147483562L);
      range0.equals(long1);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483562L, 1746L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.8565574238958105
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range range0 = Range.of(86L, 9223372036854775807L);
      Range range1 = Range.of(86L);
      Range range2 = range1.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(4294967295L, 9223372036854775807L);
      range0.intersection(range2);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 86L, 6L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.18417852136684
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      long long0 = 255L;
      Range range1 = Range.ofLength(255L);
      range0.isSubRangeOf(range1);
      range_Builder0.contractEnd((-36L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.ofLength(2636L);
      Range range3 = Range.parseRange("[ 1 .. 0 ]/RB");
      range3.equals(range_Builder0);
      range_Builder0.expandEnd((-2147483560L));
      Range.of((-2591L), (-36L));
      range0.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.containsAll(linkedList1);
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      long long1 = (-274L);
      Range range4 = Range.of(0L);
      range4.complement(range1);
      range2.iterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.6375409065782165
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.of(1L);
      long long0 = range1.getEnd();
      assertEquals(1L, long0);
      
      range0.isSubRangeOf(range1);
      assertFalse(range0.isEmpty());
      
      range_Builder0.build();
      range1.iterator();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.594730752393624
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2147483647L);
      range0.getEnd();
      range0.toString();
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-249L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -249 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.7556066681692397
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2147483562L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 2147483562L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder2 = new Range.Builder(0L, 1746L);
      range_Builder1.shift((-1114L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.495005124687873
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 255L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 912L, 655L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.424544111524192
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 2147483647L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2360211251104927
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range.of((-85L), 0L);
      Range.of((-85L), (-85L));
      long long0 = 4294967295L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-85L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -85 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3911765450520486
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.of(2048L, 2048L);
      // Undeclared exception!
      try { 
        Range.parseRange("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Range coordinates %d, %d are not valid %s coordinates into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.428748492421972
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range range0 = Range.of(1L, 1L);
      range0.getBegin();
      range0.getLength();
      // Undeclared exception!
      try { 
        Range.ofLength((-910L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.4501293555996493
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 159L, 4233L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 159L, 159L);
      range1.intersects(range0);
      range0.getBegin(range_CoordinateSystem0);
      range1.isEmpty();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.6980469861904344
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.parseRange("ZSN<bum A:", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ZSN<bum A: into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.7982825029926337
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.ofLength(255L);
      range0.isSubRangeOf(range1);
      range_Builder0.contractEnd(0L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(0L);
      range1.getBegin();
      Range range2 = range_Builder2.build();
      Range.CoordinateSystem.values();
      Range.of(1330L);
      range2.startsBefore(range1);
      range0.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(622L, (-268L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.7978077001498485
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range range0 = Range.of(357L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.of(range_CoordinateSystem0, 871L, 871L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3363332418622282
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Range range0 = Range.ofLength(1L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(1L);
      range1.iterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5959614929586183
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range range0 = Range.of((-85L), 6L);
      Range range1 = range0.asRange();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of((-85L), (-782L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.767732977181608
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1585L), (-1585L));
      Range range1 = Range.of(range_CoordinateSystem0, (-1585L), (-1585L));
      Range range2 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range0.asRange();
      Range.of((-32768L));
      // Undeclared exception!
      try { 
        range2.split((-1585L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6327148628761163
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      Range range2 = range0.intersection(range1);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2584L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.7650364215965775
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range range0 = Range.of((-132L), 0L);
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractBegin((-132L));
      Range.Builder range_Builder2 = new Range.Builder(0L);
      Range.of((-132L));
      // Undeclared exception!
      try { 
        Range.parseRange("%c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %c into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5721978810540636
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range0.intersection(range1);
      range1.intersects(range2);
      range_Builder0.expandBegin(0L);
      long long0 = 2488L;
      // Undeclared exception!
      try { 
        Range.of(2488L, (-753L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.663990977311106
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range.ofLength(5786L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-9223372032559810863L), (-9223372032559810863L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-3172L), 5786L);
      // Undeclared exception!
      try { 
        Range.ofLength((-3172L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.9310386452244788
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      long long0 = (-1501L);
      Range range0 = Range.of((-1501L));
      Range range1 = range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 255L, 255L);
      Range range3 = range2.intersection(range1);
      range3.spliterator();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854774517L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.55262584883411
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      long long0 = (-132L);
      Range.of((-132L), (-132L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-132L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.621578696459503
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range range0 = Range.of(5786L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.asRange();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      String string0 = null;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      long long0 = (-1L);
      Range.Builder range_Builder0 = new Range.Builder((-1123L), (-1L));
      range_Builder0.shift(32767L);
      long long1 = 2132L;
      range_Builder0.expandBegin(2132L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("r-ga?bv~WtM]Ygd", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse r-ga?bv~WtM]Ygd into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.6774289151718054
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-181L), (-181L));
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-181L));
      range_Builder1.shift(9223372036854775807L);
      Range.Builder range_Builder2 = range_Builder1.contractBegin(0L);
      range_Builder2.expandBegin(0L);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.840995159940433
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      long long0 = 622L;
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      Range range0 = Range.ofLength(1L);
      long long1 = 2147481731L;
      Range range1 = Range.ofLength(2147481731L);
      Range.of((-2558L), 263L);
      range1.getLength();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.parseRange("bitLength must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse bitLength must be >=0 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.7684238521329947
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range range0 = Range.ofLength(676L);
      range0.toString();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.parseRange("[ 0 .. 675 ]/0B");
      range0.forEach(consumer0);
      range0.toString();
      range0.getBegin();
      Range.of(676L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.7071266489361028
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(622L, 622L);
      range_Builder0.copy();
      Range range0 = Range.ofLength(1L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(622L);
      range0.intersects(range1);
      Range.of(1L);
      range0.isEmpty();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("p");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.p
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.5953012921581835
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      Range range2 = range0.intersection(range1);
      range2.spliterator();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-2584L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.8017185857649824
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range range0 = Range.of(365L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      Range.of(range_CoordinateSystem0, 871L, 871L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1786334995603744
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      long long0 = 5786L;
      Range range0 = Range.of(5786L);
      Object object0 = new Object();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.407629051723588
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      long long0 = (-85L);
      Range.of((-85L), (-85L));
      Range.Builder range_Builder0 = new Range.Builder(2762L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2762L, (-85L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.694501988283953
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 255L;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.ofLength(255L);
      range0.getEnd(range_CoordinateSystem0);
      range0.endsBefore(range1);
      range1.spliterator();
      range1.endsBefore(range0);
      range0.intersects(range1);
      long long1 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=4.023052399939958
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Range range0 = Range.ofLength(5786L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range1 = Range.of(1291L, 5786L);
      List<Range> list0 = range0.split(1291L);
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertEquals(5, list0.size());
      //  // Unstable assertion: assertTrue(list1.contains(range0));
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      range1.asRange();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      String string0 = range0.toString(range_CoordinateSystem1);
      //  // Unstable assertion: assertEquals("[ 1 .. 5786 ]/RB", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.929520977781025
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Range range0 = Range.of((-2664L), (-2664L));
      Range range1 = Range.of((-2664L), (-2664L));
      long long0 = range1.getBegin();
      //  // Unstable assertion: assertEquals((-2664L), long0);
      
      long long1 = range0.getLength();
      //  // Unstable assertion: assertEquals(1L, long1);
      
      boolean boolean0 = range1.intersects(range0);
      range0.spliterator();
      Range range2 = Range.ofLength(127L);
      Range range3 = Range.of((-2664L), 1L);
      boolean boolean1 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      //  // Unstable assertion: assertNotSame(range1, range3);
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range4 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      range2.iterator();
      //  // Unstable assertion: assertNotSame(range2, range4);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.7339461794331776
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Range range0 = Range.of(5786L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.ofLength(5786L);
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-125L));
      range_Builder2.contractEnd(1L);
      range1.asRange();
      // Undeclared exception!
      try { 
        Range.parseRange("N1Zrb8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse N1Zrb8 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2019506338289605
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem.values();
      Range.of(182L);
      // Undeclared exception!
      try { 
        Range.ofLength((-85L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.298672366892937
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Range range0 = Range.of(5786L, 5786L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1123L), (-1L));
      range_Builder0.shift((-1123L));
      // Undeclared exception!
      try { 
        Range.of(9223372032559808513L, (-2351L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.8851218920964308
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.contractBegin((-132L));
      range_Builder1.expandBegin(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("%c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %c into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.34911217213855
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-4746L), (-2650L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-4746L), (-1L));
      assertFalse(range2.equals((Object)range1));
  }
}
