/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 22:06:30 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|lK4*<?cT`-\"atkL`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |lK4*<?cT`-\"atkL`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2337380151460804
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null key.");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      jSONObject0.put("Null key.", (Collection) linkedList0);
      jSONObject0.remove("Null key.");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.783383609440196
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.putOpt("n~g\"UdP9ob9u@Bd1ZP\"", integer0);
      jSONObject1.optInt("n~g\"UdP9ob9u@Bd1ZP\"");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("%L%JzK}*vSQ", (Object) jSONObject0);
      Object object0 = jSONObject1.opt("%L%JzK}*vSQ");
      assertSame(object0, jSONObject0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      int int0 = jSONObject0.length();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.put("toB", (Object) jSONObject0);
      jSONObject0.has("toB");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6792706702716655
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      HashMap<JSONObject, Integer> hashMap0 = new HashMap<JSONObject, Integer>();
      JSONObject jSONObject1 = jSONObject0.put(": ", (Map) hashMap0);
      jSONObject1.getString(": ");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(32);
      jSONObject0.putOpt("{}", integer0);
      long long0 = jSONObject0.getLong("{}");
      assertEquals(32L, long0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("z+#Vy32t[plmh.)r?DA", 646);
      int int0 = jSONObject0.getInt("z+#Vy32t[plmh.)r?DA");
      assertEquals(646, int0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("C'+{{/@e%_**^;R", (Object) jSONArray0);
      jSONObject1.get("C'+{{/@e%_**^;R");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Byte byte0 = new Byte((byte)43);
      String string0 = JSONObject.valueToString(byte0, 0, 0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Byte byte0 = new Byte((byte)43);
      String string0 = JSONObject.valueToString(byte0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(120, (-372));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString(0, 0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.toString((-1239), 2147);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = jSONObject0.toString((int) (short)0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.849817938409554
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString((-507));
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = new Boolean("{}");
      JSONObject.testValidity(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.remove("");
      assertNull(object0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = JSONObject.quote("-0TjBi`!_BW{%)x+L");
      assertEquals("\"-0TjBi`!_BW{%)x+L\"", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6769877743224173
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONObject, Boolean> hashMap0 = new HashMap<JSONObject, Boolean>();
      Boolean boolean0 = Boolean.valueOf("t#3)0[QnT3[");
      hashMap0.put(jSONObject0, boolean0);
      JSONObject jSONObject1 = jSONObject0.put("h}(>8", (Map) hashMap0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2337380151460802
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double double0 = new Double((-918.62175296924));
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      jSONObject0.put("", (Map) hashMap0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("[dXTLi\"c", (Collection) null);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0587872171855681
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.put((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONArray.", 0L);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("v IhgF\"", 1346L);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("", (-432L));
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 120);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-105));
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("z^pt$*RN|9M)Q78C", (double) (byte) (-105));
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (double) 0L);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("`U$U9Bx", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optString("n~g\"UdP9ob9u@Bd1ZP\"", "n~g\"UdP9ob9u@Bd1ZP\"");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = jSONObject0.optString("", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong("/YfxobRTQ", 0L);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0530721162798569
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      long long0 = jSONObject0.optLong("+!3<KHwDrc/*iGg_qU", (long) (short)12);
      assertEquals(12L, long0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.847039638507847
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      long long0 = jSONObject0.optLong(",`GNF--_B,(?/szJ", (long) (-486));
      assertEquals((-486L), long0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      long long0 = jSONObject0.optLong((String) null);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.optJSONArray("");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt((String) null, 3546);
      assertEquals(3546, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      int int0 = jSONObject0.optInt((String) null, (int) (short)0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("] is not a Boolean.", (-1040));
      assertEquals((-1040), int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7851038147158325
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      double double0 = jSONObject0.optDouble("8'ZX`9M-H", (-2171.0));
      assertEquals((-2171.0), double0, 0.01);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble((String) null, (double) (byte)0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      double double0 = jSONObject0.optDouble("C'+{{/@e%_**^;R", (double) (byte)48);
      assertEquals(1, jSONObject0.length());
      assertEquals(48.0, double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      double double0 = jSONObject0.optDouble((String) null);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("\"/YfxobRTQ\"");
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.6792706702716655
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      boolean boolean0 = jSONObject0.optBoolean((String) null, false);
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("", true);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject0.optBoolean("");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Object object0 = jSONObject0.opt("7K$d.u?;\u0001@~TxwB");
      assertNull(object0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = jSONObject0.opt("");
      assertNull(object0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Short short0 = new Short((short)0);
      String string0 = JSONObject.numberToString(short0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      boolean boolean0 = jSONObject0.has((String) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.has("");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5228146795137598
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5751765904639272
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      try { 
        jSONObject0.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      try { 
        jSONObject0.getJSONObject(stringArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6162572902207617
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.get((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1.0F);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.2945056947207823
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      jSONObject0.append("n~g\"UdP9ob9u@Bd1ZP\"", (Object) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      Float float0 = new Float((float) (short)0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", float0);
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.9430096637858085
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null key.");
      // Undeclared exception!
      jSONObject0.toString(2048);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1752045970807579
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.put((String) null, (-474));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.2092536248090335
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      try { 
        jSONObject0.put((String) null, (double) (byte)48);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4216010062582942
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "Null key.");
      try { 
        jSONObject0.getDouble(".gB/1X0NN:Ny");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".gB/1X0NN:Ny\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.4298983731002695
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("pa");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of pa
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.734421304154317
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("C'+{{/@e%_**^;R", (Object) jSONArray0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.write(stringWriter0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.4849258911092231
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Byte, JSONObject> hashMap0 = new HashMap<Byte, JSONObject>();
      jSONObject0.put("java.lang.Float@0000000006.", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(418);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.8855741515766717
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HashMap<Double, Float> hashMap0 = new HashMap<Double, Float>();
      String string0 = JSONObject.valueToString(hashMap0, 64, 3);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0, (byte)72, (-185));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null, (-1), (-1));
      assertEquals("null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6707549559936354
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.6707739227240033
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"/YfxobRTQ\"", (Map) null);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7152863051349312
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(748.26032);
      JSONObject jSONObject0 = new JSONObject(float0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.6824672866976624
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.putOpt("", object0);
      StringWriter stringWriter0 = new StringWriter(418);
      Writer writer0 = jSONObject0.write(stringWriter0);
      assertSame(writer0, stringWriter0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7943829382677616
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("C'+{{/@e%_**^;R", (Object) jSONArray0);
      jSONObject0.toString(58, (int) (short)97);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.2446725381717776
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.offerFirst((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.2013670042689852
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertEquals(1, jSONObject0.length());
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.1285962936622183
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.6816102690529532
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getBoolean(".&qkglYMz/N\u0005y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".&qkglYMz/N\\u0005y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.9525127468791601
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Short short0 = new Short((short)0);
      String[] stringArray0 = new String[3];
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getLong(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4218956404837546
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Float float0 = new Float(617.48057068);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Float float0 = new Float(748.26032);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.getJSONArray(stringArray0[1]);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6310786296750122
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[9];
      stringArray0[1] = "Unclosed comment";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      JSONObject jSONObject1 = jSONObject0.accumulate("is", stringArray0[6]);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.310686555367963
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      try { 
        jSONObject0.append((String) null, integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.put("{\"java.lang.String@0000000005\":java.lang.Short@0000000007,\"java.lang.String@0000000002\":\"java.lang.Class@0000000003\"}", true);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.put("C'+{{/@e%_**^;R", (Object) jSONArray0);
      jSONObject0.optString("C'+{{/@e%_**^;R");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.optJSONObject("par");
      assertNull(jSONObject1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3097558619082146
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("C'+{{/@e%_**^;R", (Object) jSONArray0);
      jSONObject1.optJSONArray("C'+{{/@e%_**^;R");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.9469236291416967
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      Short short0 = new Short((short)12);
      jSONObject0.putOpt("C'+{{/@e%_**^;R", short0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.037734194785151
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Integer, Short> hashMap0 = new HashMap<Integer, Short>();
      JSONObject jSONObject1 = jSONObject0.put("Missing value", (Map) hashMap0);
      JSONArray jSONArray0 = jSONObject1.names();
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames((Object) jSONObject0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames(object0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5294599036351055
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Byte byte0 = new Byte((byte)52);
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(1, jSONObject0.length());
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8462202193216335
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-185));
      jSONObject0.putOpt("{}", integer0);
      long long0 = jSONObject0.getLong("{}");
      assertEquals((-185L), long0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5137964583122197
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("C'+{{/@e%_**^;R", (Object) jSONArray0);
      try { 
        jSONObject1.getLong("C'+{{/@e%_**^;R");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C'+{{/@e%_**^;R\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.139820771427714
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("\"/YfxobRTQ\"", (Object) "\"/YfxobRTQ\"");
      try { 
        jSONObject0.getJSONObject("\"/YfxobRTQ\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"/YfxobRTQ\\\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.195510093068952
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}", (Object) jSONObject0);
      try { 
        jSONObject0.getJSONArray("{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000003\\\": [\\\"java.lang.String@0000000003\\\"]}\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.540305825226517
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      Float float0 = new Float((float) (short)0);
      jSONObject0.put("Null key.", (Object) float0);
      double double0 = jSONObject0.getDouble("Null key.");
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.6425559869377246
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.putOpt("Null key.", "+}:");
      boolean boolean0 = jSONObject0.optBoolean("Null key.", true);
      assertEquals(1, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.578689253491529
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("toB", (Object) jSONObject0);
      try { 
        jSONObject1.getBoolean("toB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toB\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.442783312158676
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.put("C'+{{/@e%_**^;R", (Object) jSONArray0);
      jSONObject1.getJSONArray("C'+{{/@e%_**^;R");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-918.62175296924));
      assertEquals("-918.62175296924", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.6957425341696346
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"a", 0);
      Long long0 = new Long(0L);
      try { 
        jSONObject1.append("\"a", long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"a] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5047882836811908
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      JSONObject jSONObject2 = jSONObject0.append("{}", "{\"java.lang.String@0000000003\": [\"java.lang.String@0000000003\"]}");
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.6762349391347309
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-185));
      jSONObject0.putOpt("{}", integer0);
      jSONObject0.accumulate("{}", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)8);
      jSONObject0.accumulate("su", short0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject1.accumulate("{}", (Object) null);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.6264553276101599
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"/YfxobRTQ\"", (Map) null);
      int int0 = jSONObject1.optInt("\"/YfxobRTQ\"");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.4598012994628564
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Integer integer0 = new Integer(123);
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.put("toB", (Object) jSONObject0);
      boolean boolean0 = jSONObject1.isNull("toB");
      assertEquals(2, jSONObject0.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.7913563426828252
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString((int) (byte)48);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.7260509192674385
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString(58, (int) (short)97);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.6117376823630047
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      long long0 = jSONObject0.optLong("\"HeYjF5SAh+gR5EAR");
      assertEquals(0L, long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.6528388233121019
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Byte byte0 = new Byte((byte)48);
      JSONObject jSONObject0 = new JSONObject(byte0);
      boolean boolean0 = jSONObject0.optBoolean("2");
      assertFalse(boolean0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HashMap<JSONArray, JSONArray> hashMap0 = new HashMap<JSONArray, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = jSONObject0.optString("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.7677614722893296
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("P,W0|(y", 0.0);
      int int0 = jSONObject1.getInt("P,W0|(y");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 151
  /*Coverage entropy=1.4016171508386506
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, jSONObject0.length());
  }
}
