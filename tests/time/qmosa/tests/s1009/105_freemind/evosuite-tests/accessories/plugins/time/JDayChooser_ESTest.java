/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:48:49 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.mindmapmode.actions.NodeHookAction;
import freemind.modes.schememode.SchemeMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.awt.event.MouseWheelEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.sql.Time;
import java.util.Date;
import java.util.Locale;
import java.util.Properties;
import java.util.Stack;
import java.util.concurrent.PriorityBlockingQueue;
import javax.help.BackAction;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.event.RowSorterEvent;
import javax.swing.plaf.basic.BasicOptionPaneUI;
import javax.swing.plaf.metal.MetalComboBoxEditor;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.SVGUseElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.ext.awt.g2d.GraphicContext;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.CompositeGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.fop.image.FopImage;
import org.apache.fop.image.JpegImage;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xalan.processor.ProcessorCharacters;
import org.apache.xml.serializer.ToTextSAXHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.w3c.dom.Element;
import org.xml.sax.ContentHandler;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.4545558103843668
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.init();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getLocale();
      jDayChooser0.setMonth(90);
      jDayChooser0.setFocus();
      System.setCurrentTimeMillis(0);
      jDayChooser0.getDayPanel();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.updateUI();
      jDayChooser0.setEnabled(false);
      jDayChooser0.updateUI();
      jDayChooser0.addListeners(14);
      jDayChooser0.updateUI();
      JDayChooser jDayChooser1 = new JDayChooser();
      boolean boolean0 = jDayChooser1.isWeekOfYearVisible();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.2054733035890117
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getComponentListeners();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDecorationBordersVisible(false);
      Color color0 = Color.RED;
      FocusEvent focusEvent0 = null;
      jDayChooser0.focusLost((FocusEvent) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "day";
      int[] intArray0 = new int[0];
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(530, 0, intArray0, 0, 530);
      jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      stringArray0[4] = "day";
      jDayChooser0.firePropertyChange("HK35L]js YM tH#", 0L, 1323L);
      stringArray0[5] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.1609349675619263
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      jDayChooser0.getTransferHandler();
      jDayChooser0.setYear(53);
      jDayChooser0.setMaxDayCharacters(53);
      // Undeclared exception!
      try { 
        jDayChooser0.remove(47);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 47
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.160947366049311
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      int int0 = 6155;
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 6155);
      focusEvent0.paramString();
      focusEvent0.setSource("onevent");
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 806.7455F;
      floatArray0[1] = 806.7455F;
      floatArray0[2] = (float) 6155;
      floatArray0[3] = (float) 6155;
      floatArray0[4] = (float) 6155;
      floatArray0[5] = (-269.4173F);
      floatArray0[6] = 806.7455F;
      floatArray0[7] = (float) 6155;
      floatArray0[8] = 806.7455F;
      systemColor0.getRGBColorComponents(floatArray0);
      jDayChooser0.setSundayForeground(systemColor0);
      int int1 = 1883;
      int int2 = 2279;
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2279);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2279
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.453870881963893
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.init();
      jDayChooser0.getSundayForeground();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getLocale();
      jDayChooser0.setMonth(90);
      jDayChooser0.setFocus();
      System.setCurrentTimeMillis(0);
      jDayChooser0.getDayPanel();
      jDayChooser0.getDay();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      jDayChooser0.updateUI();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setMonth((-2165));
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.278979400325194
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.minSelectableDate;
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.init();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getComponents();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setYear(628);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.535318991230767
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer.getInteger("T/{qs", integer0);
      mockGregorianCalendar0.before(integer0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      SchemeMode schemeMode0 = new SchemeMode();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.getTemporaryCalendar();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.init();
      JYearChooser jYearChooser1 = new JYearChooser();
      jYearChooser1.getComponents();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setYear(952);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.setDay(777);
      assertEquals(29, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jDayChooser0, 1828, 0L, 212, 0, (-301), (-2781), 0, 0, false, (-2973), (-1), (-1));
      jDayChooser0.getPopupLocation(mouseWheelEvent0);
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.170005734881401
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getHeight();
      Class<NodeHookAction> class0 = NodeHookAction.class;
      jDayChooser0.getListeners(class0);
      MetalComboBoxEditor metalComboBoxEditor0 = new MetalComboBoxEditor();
      metalComboBoxEditor0.addActionListener(jDayChooser0);
      jDayChooser0.addFocusListener(metalComboBoxEditor0);
      Dimension dimension0 = jDayChooser0.getPreferredSize();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getDayPanel();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isContentAreaFilled();
      BackAction backAction0 = new BackAction(dimension0);
      jDayChooser_DecoratorButton0.addMouseListener(backAction0);
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORT_ORDER_CHANGED;
      int int0 = (-623);
      // Undeclared exception!
      try { 
        RowSorterEvent.Type.valueOf("day");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant javax.swing.event.RowSorterEvent.Type.day
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      ToTextSAXHandler toTextSAXHandler0 = new ToTextSAXHandler((ContentHandler) null, "day");
      toTextSAXHandler0.getOutputFormat();
      HsqlProperties hsqlProperties0 = new HsqlProperties((Properties) null);
      jdbcConnection jdbcConnection0 = null;
      try {
        jdbcConnection0 = new jdbcConnection(hsqlProperties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.1337180792574855
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.requestFocus(false);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.drawWeeks();
      FopImage.ImageInfo fopImage_ImageInfo0 = new FopImage.ImageInfo();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "0[s,F')@5.E>");
      JpegImage jpegImage0 = new JpegImage(fopImage_ImageInfo0);
      jpegImage0.load(11);
      jpegImage0.load(0);
      jpegImage0.getTransparentColor();
      jDayChooser0.setWeekdayForeground((Color) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      jDayChooser0.getTransferHandler();
      jDayChooser0.getDay();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.removeHierarchyBoundsListener((HierarchyBoundsListener) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.297787860728799
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      jDayChooser0.setSelectableDateRange(date0, date0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer.getInteger("T/{qs", integer0);
      mockGregorianCalendar0.before(integer0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      SchemeMode schemeMode0 = new SchemeMode();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      // Undeclared exception!
      try { 
        JDayChooser.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.initDecorations();
      Time time0 = new Time(3511L);
      jDayChooser0.setMinSelectableDate(time0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1337304777448702
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getInitialValue();
      basicOptionPaneUI0.selectInitialValue(jOptionPane0);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.init();
      jDayChooser0.setYear(262);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      Parser parser0 = new Parser();
      parser0.getLocale();
      // Undeclared exception!
      try { 
        priorityBlockingQueue0.add((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.concurrent.PriorityBlockingQueue", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.151027626853596
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      JOptionPane jOptionPane0 = new JOptionPane();
      jOptionPane0.getInitialValue();
      basicOptionPaneUI0.selectInitialValue(jOptionPane0);
      Dimension dimension0 = basicOptionPaneUI0.getMinimumOptionPaneSize();
      jDayChooser0.setSize(dimension0);
      Color color0 = Color.cyan;
      jDayChooser0.init();
      jDayChooser0.setYear(90);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      Locale.lookup(stack0, priorityBlockingQueue0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.grabFocus();
      Class<NodeHookAction> class0 = NodeHookAction.class;
      jDayChooser0.getListeners(class0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getAccessibleContext();
      jDayChooser0.contains(100, 100);
      jDayChooser0.getDayPanel();
      jDayChooser0.setAlwaysFireDayProperty(true);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.264762637253946
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.getWeeksInWeekYear();
      mockGregorianCalendar0.getCalendarType();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_TERMINAL;
      Integer.getInteger("T/{qs", integer0);
      mockGregorianCalendar0.before(integer0);
      jDayChooser_DecoratorButton0.paint((Graphics) null);
      int[] intArray0 = new int[0];
      MemoryImageSource memoryImageSource0 = new MemoryImageSource(530, 4405, intArray0, 52, 52);
      jDayChooser0.createImage((ImageProducer) memoryImageSource0);
      jDayChooser0.init();
      jDayChooser0.setYear(4405);
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      PriorityBlockingQueue<Locale> priorityBlockingQueue0 = new PriorityBlockingQueue<Locale>();
      Locale locale0 = jDayChooser_DecoratorButton0.getLocale();
      JCheckBox jCheckBox0 = new JCheckBox("Metal");
      MouseEvent mouseEvent0 = new MouseEvent(jCheckBox0, 530, (-2541L), 52, 530, (-1642), 52, false);
      jDayChooser0.getToolTipText(mouseEvent0);
      jDayChooser0.setLocale(locale0);
      System.setCurrentTimeMillis(60000L);
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDecorationBackgroundVisible(true);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.096676908145428
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      GraphicContext graphicContext0 = new GraphicContext();
      graphicContext0.getTransform();
      graphicContext0.getColor();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "|";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "8AJf";
      stringArray0[5] = "BcSVEyj)rdX_s{(WHol";
      jDayChooser0.firePropertyChange("day", (byte) (-9), (byte) (-9));
      stringArray0[6] = "|";
      stringArray0[7] = "org.openstreetmap.gui.jmapviewer.MemoryTileCache";
      stringArray0[8] = "|";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2054733035890117
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "nq";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "7hV9_SH";
      stringArray0[4] = "nq";
      JDayChooser jDayChooser0 = new JDayChooser(false);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((-1.0), (-1.0), (-1.0), 0.0);
      AffineTransform affineTransform1 = new AffineTransform(affineTransform0);
      GraphicContext graphicContext0 = new GraphicContext(affineTransform1);
      Font font0 = graphicContext0.getFont();
      jDayChooser0.setFont(font0);
      jDayChooser0.setYear(0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 2527L, 0, 0, '4', 0);
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getMinSelectableDate();
      jDayChooser0.getMaxSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners((-4123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4123
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.22172802334861
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      BasicOptionPaneUI basicOptionPaneUI0 = new BasicOptionPaneUI();
      jDayChooser0.getTransferHandler();
      jDayChooser0.setYear(53);
      jDayChooser0.setMaxDayCharacters((-693));
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setWeekOfYearVisible(true);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-693), false, jDayChooser0);
      SVGUseElementBridge sVGUseElementBridge0 = new SVGUseElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0);
      ProcessorCharacters processorCharacters0 = new ProcessorCharacters();
      processorCharacters0.getNextSiblingElem();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      canvasGraphicsNode0.getParent();
      // Undeclared exception!
      try { 
        sVGUseElementBridge0.buildCompositeGraphicsNode(bridgeContext0, (Element) null, (CompositeGraphicsNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.batik.dom.util.XLinkSupport", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.0918793521803214
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G<\"&U$B#%qDg");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.firePropertyChange("H+'s66|w]F,z", 0L, (-1383L));
      jDayChooser0.setMonth(4598);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setDay(4872);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.307510876247433
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMonth(4872);
      boolean boolean0 = false;
      jDayChooser0.firePropertyChange("", 'X', 'X');
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 4598);
      focusEvent0.paramString();
      focusEvent0.setSource("onevent");
      jDayChooser0.focusGained(focusEvent0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G<\"&U$B#%qDg");
      jDayChooser0.getDayPanel();
      jDayChooser0.getPopupLocation((MouseEvent) null);
      jDayChooser0.setYear(2663);
      jDayChooser0.getSelectedDay();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.setMinSelectableDate(date1);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1962674566168174
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 6155);
      focusEvent0.paramString();
      SystemColor systemColor0 = SystemColor.inactiveCaptionBorder;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 806.7455F;
      floatArray0[1] = 806.7455F;
      floatArray0[2] = (float) 6155;
      floatArray0[3] = (float) 6155;
      floatArray0[4] = (float) 6155;
      floatArray0[5] = (-269.4173F);
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.setMinSelectableDate(date1);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color.getColor("day", (Color) null);
      jDayChooser0.weekdayForeground = null;
      jDayChooser0.isDecorationBackgroundVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }
}
