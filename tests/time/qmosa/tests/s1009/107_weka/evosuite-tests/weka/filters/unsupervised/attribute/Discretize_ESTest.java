/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:31:06 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1441.13;
      doubleArray0[1] = 1441.13;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1441.13, doubleArray0);
      Locale locale0 = Locale.GERMANY;
      Locale locale1 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList0, locale_FilteringMode0);
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>(list0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1, locale_FilteringMode1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      double[][] doubleArray1 = new double[7][4];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1441.13;
      doubleArray2[1] = 1441.13;
      doubleArray2[2] = 1441.13;
      doubleArray2[3] = (double) 6;
      doubleArray2[4] = 5.3;
      doubleArray2[5] = 1441.13;
      doubleArray1[3] = doubleArray2;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      discretize0.getCutPoints(6);
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("Make resulting attributes binary.");
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 4666.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      SparseInstance sparseInstance0 = new SparseInstance(4666.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      Discretize discretize1 = new Discretize("\tSpecifies the (maximum) number of bins to divide numeric attributes into.\n\t(default = 10)");
      discretize1.m_DesiredWeightOfInstancesPerInterval = 4666.0;
      discretize0.getCutPoints(6);
      double double0 = discretize1.getDesiredWeightOfInstancesPerInterval();
      assertEquals(4666.0, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.US;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      int int0 = 18;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9596941021622234
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]havR0M(,s");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      discretize0.setFindNumBins(false);
      int[] intArray0 = new int[2];
      discretize0.m_UseBinNumbers = true;
      intArray0[0] = (-1321);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.getInvertSelection();
      intArray0[1] = 0;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.getUseBinNumbers();
      discretize0.attributeIndicesTipText();
      discretize0.useBinNumbersTipText();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.959694102162223
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize("t\"=4FDll'IGlc[mk");
      discretize0.setMakeBinary(true);
      discretize0.setUseBinNumbers(true);
      discretize0.setFindNumBins(false);
      discretize0.setAttributeIndices("-F");
      discretize0.getOptions();
      assertTrue(discretize0.getMakeBinary());
      
      Discretize discretize1 = new Discretize("t\"=4FDll'IGlc[mk");
      discretize1.useBinNumbersTipText();
      discretize1.invertSelectionTipText();
      assertFalse(discretize1.getMakeBinary());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize("^");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("\tOptimize number of bins using leave-one-out estimate\n\tof estimated entropy (for equal-width discretization).\n\tIf this is set then the -B option will be ignored.", arrayList0, 10);
      Instances instances1 = new Instances(instances0, 82);
      Instances.mergeInstances(instances0, instances0);
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1435);
      Discretize discretize0 = new Discretize("M");
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1435;
      doubleArray0[1] = (double) 6;
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-461.5);
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 1435;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(247.5, doubleArray0);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.203814053870156
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_NumBins = (-3);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-3);
      doubleArray0[1] = (double) (-3);
      doubleArray0[2] = (double) (-3);
      doubleArray0[3] = (double) (-3);
      doubleArray0[4] = (double) (-3);
      doubleArray0[5] = (double) (-3);
      Discretize discretize1 = new Discretize("");
      discretize1.setInvertSelection(true);
      discretize0.getAttributeIndices();
      String[] stringArray0 = new String[0];
      Discretize.main(stringArray0);
      discretize0.getBins();
      discretize0.getCutPoints((-3));
      discretize0.binsTipText();
      assertEquals((-3), discretize0.getBins());
      
      discretize1.listOptions();
      assertFalse(discretize1.getUseBinNumbers());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.206515843805988
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize(";O[{8Ng)h=v(_4,+");
      discretize0.m_IgnoreClass = true;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "7qDgh]w_aL7f0W";
      Filter.runFilter(discretize0, stringArray0);
      String[] stringArray1 = new String[4];
      stringArray1[0] = ";O[{8Ng)h=v(_4,+";
      double[][] doubleArray0 = new double[5][0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 762.33290696;
      doubleArray1[1] = 1.7976931348623157E308;
      doubleArray1[2] = (-1643.46833);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = (-1643.46833);
      doubleArray2[2] = 762.33290696;
      doubleArray2[3] = 1.7976931348623157E308;
      doubleArray2[4] = 1.7976931348623157E308;
      doubleArray2[5] = 1.7976931348623157E308;
      doubleArray2[6] = 1.7976931348623157E308;
      doubleArray2[7] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 1.7976931348623157E308;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 9.223372036854776E18;
      doubleArray4[1] = 1.7976931348623157E308;
      doubleArray4[2] = 1.7976931348623157E308;
      doubleArray4[3] = 762.33290696;
      doubleArray4[4] = 1.7976931348623157E308;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[9];
      doubleArray5[0] = 762.33290696;
      doubleArray5[1] = 1.7976931348623157E308;
      doubleArray5[2] = 1.7976931348623157E308;
      doubleArray5[3] = (-1643.46833);
      doubleArray5[4] = 762.33290696;
      doubleArray5[5] = 1.7976931348623157E308;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 9.223372036854776E18;
      doubleArray5[8] = 762.33290696;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      stringArray1[1] = ";O[{8Ng)h=v(_4,+";
      stringArray1[2] = ";O[{8Ng)h=v(_4,+";
      stringArray1[3] = "&B&J^H.FUl2N";
      Discretize.main(stringArray1);
      discretize0.getAttributeIndices();
      discretize0.attributeIndicesTipText();
      discretize0.setUseEqualFrequency(true);
      discretize0.getInvertSelection();
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3071);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1, locale_FilteringMode2);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list2);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Discretize discretize0 = new Discretize("first-last");
      discretize0.getDesiredWeightOfInstancesPerInterval();
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-2034458190));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[2] = "OFF";
      stringArray0[1] = "";
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = true;
      discretize0.setMakeBinary(true);
      discretize0.getInvertSelection();
      discretize0.attributeIndicesTipText();
      boolean boolean1 = true;
      discretize0.setFindNumBins(false);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3654974204887425
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      
      String string1 = discretize0.getAttributeIndices();
      assertEquals("first-last", string1);
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.setUseBinNumbers(false);
      discretize0.setAttributeIndices("");
      String[] stringArray0 = discretize0.getOptions();
      String string2 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-0.11035110493070323);
      doubleArray0[1] = (-0.11035110493070323);
      doubleArray0[2] = (-0.11035110493070323);
      doubleArray0[3] = 644.651102688159;
      doubleArray0[4] = (-0.11035110493070323);
      doubleArray0[5] = (-0.11035110493070323);
      doubleArray0[6] = (-0.11035110493070323);
      discretize0.getAttributeIndices();
      Discretize.main(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.US;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list1);
      Locale locale1 = Locale.PRC;
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = Locale.PRC;
      Discretize discretize0 = new Discretize(".setMinimumNumberInstances(");
      String[] stringArray0 = discretize0.getOptions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-2028178998);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-2028178998);
      doubleArray0[3] = (double) (-2028178998);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2028178998);
      intArray0[1] = (-2028178998);
      discretize0.setOptions(stringArray0);
      assertEquals(6, stringArray0.length);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1961762832549665
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Value of positio fo copy (internal forma): ";
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.setAttributeIndices("Value of positio fo copy (internal forma): ");
      String[] stringArray1 = discretize0.getOptions();
      discretize0.useBinNumbersTipText();
      discretize0.setOptions(stringArray1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize("Value of position for copy (internal format):");
      String string0 = discretize0.useEqualFrequencyTipText();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "qAmV?`iZw<99r";
      stringArray0[1] = ".setMinimumNumberInstances(";
      stringArray0[2] = "lu";
      stringArray0[3] = "aO{Fvik~%";
      stringArray0[4] = ".setMinimumNumberInstances(";
      stringArray0[5] = "Hz%E4=.>|U^)p!z1:";
      stringArray0[6] = "org.pentaho.packageManagement.DefaultPackageManager";
      Filter.runFilter(discretize0, stringArray0);
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayVariant();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList1);
      Locale locale1 = Locale.PRC;
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = Locale.PRC;
      locale0.getDisplayName(locale3);
      locale3.getDisplayCountry(locale0);
      Locale locale4 = Locale.PRC;
      Discretize discretize0 = new Discretize("*N0SE*z`w");
      int int0 = discretize0.getBins();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, int0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1441.13;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.0, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      int int0 = (-2106185883);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7qDgh]w_aL7f0W";
      stringArray0[1] = "first-last";
      stringArray0[2] = "WHWr7vgRI:h+<s2R";
      String string0 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      
      String string1 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string1);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.US;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Locale locale1 = Locale.PRC;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode2);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      linkedList1.remove((Object) list1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list2, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) linkedList0);
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      Discretize discretize0 = new Discretize("");
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.US;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0);
      Locale locale1 = Locale.PRC;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0, locale_FilteringMode2);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-F";
      stringArray0[1] = "mElB}e";
      stringArray0[2] = "GYeD+/x_[Gm|";
      stringArray0[3] = "Fn~$SeuU";
      stringArray0[4] = "j),3PO[ 3I?X28rV_BG";
      stringArray0[5] = "LF0k0Wz<";
      stringArray0[6] = " s?]*;YmqeW(GU^";
      stringArray0[7] = "_O`";
      linkedList1.toArray(stringArray0);
      List<String> list2 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList1, locale_FilteringMode0);
      linkedList1.remove((Object) list1);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) list2, locale_FilteringMode1);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList2, (Collection<String>) linkedList0);
      Locale locale2 = Locale.SIMPLIFIED_CHINESE;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1632.7608, (int[]) null, 1);
      binarySparseInstance0.setWeight(0.0);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.069485831493454
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      discretize0.getBinRangesString(77);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Value of position for copy (internal format):";
      stringArray0[1] = "\tOutput binary attributes for discretized attributes.";
      stringArray0[2] = "q=*0sL%FN!in";
      stringArray0[3] = "Value of position for copy (internal format):";
      stringArray0[4] = "7qDgh]w_aL7f0W";
      stringArray0[5] = "Unable to find the name of the package in the Description file for ";
      stringArray0[6] = "Unable to find the name of the package in the Description file for ";
      stringArray0[7] = "-M <num>";
      discretize0.setOptions(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setBins((-2714));
      Instances instances0 = new Instances("-M <num>", arrayList0, 16);
      discretize0.getCapabilities();
      Instances instances1 = new Instances(instances0, 3373);
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize("'B1of2'");
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Make resulting attributes binary.", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.US;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale1 = Locale.PRC;
      Locale locale2 = Locale.GERMANY;
      Locale locale3 = Locale.JAPAN;
      Locale locale4 = Locale.GERMANY;
      Locale locale5 = Locale.PRC;
      Locale locale6 = new Locale("Value ", "Value of positio fo copy (internal forma):");
      locale5.getDisplayName(locale0);
      Locale locale7 = Locale.forLanguageTag("Value of positio fo copy (internal forma):");
      Locale locale8 = Locale.CHINESE;
      locale7.getDisplayCountry(locale0);
      Locale locale9 = Locale.PRC;
      Locale locale10 = Locale.CHINA;
      Locale locale11 = Locale.ITALY;
      locale11.getUnicodeLocaleKeys();
      Discretize discretize0 = new Discretize("Value of positio fo copy (internal forma):");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(68);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Locale locale0 = Locale.ROOT;
      Discretize discretize0 = new Discretize("S}Xd^=<Z.=X<ojp");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(">Y.HE", arrayList0, 16);
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize("d[");
      discretize0.getUseBinNumbers();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-6;
      doubleArray0[1] = 1.0E-6;
      doubleArray0[2] = 1.0E-6;
      doubleArray0[3] = 1.0E-6;
      doubleArray0[4] = (-1.7976931348623157E308);
      SparseInstance sparseInstance0 = new SparseInstance(1.0E-6, doubleArray0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0E-6;
      doubleArray1[1] = 1.0E-6;
      SparseInstance sparseInstance1 = new SparseInstance(1.0E-6, doubleArray1);
      // Undeclared exception!
      try { 
        sparseInstance1.value((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      locale0.getDisplayName();
      Locale locale1 = Locale.US;
      locale0.getDisplayCountry(locale1);
      locale0.getDisplayVariant();
      Locale locale2 = Locale.PRC;
      Locale locale3 = Locale.GERMANY;
      locale3.getDisplayName(locale0);
      locale1.getDisplayCountry(locale3);
      Locale locale4 = Locale.PRC;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("t\"=4FDll'IGlc[mk");
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Range range0 = new Range("kY5*b$lF)vrp>xED");
      Discretize discretize0 = new Discretize("yJC?Cx|Z*WH6%hWBb");
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList1, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.GERMANY;
      Locale locale2 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList2, locale_FilteringMode1);
      ArrayList<Locale> arrayList3 = new ArrayList<Locale>(list1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list1, locale_FilteringMode2);
      ArrayList<Locale.LanguageRange> arrayList4 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1441.13;
      doubleArray0[1] = 1441.13;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1441.13, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      Discretize discretize0 = new Discretize();
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(sparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.724454707919629
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.useBinNumbersTipText();
      discretize0.setDesiredWeightOfInstancesPerInterval((-864.22));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unable to find the name of the package in the Description file for ";
      stringArray0[1] = "Unable to find the name of the package in the Description file for ";
      stringArray0[2] = "Value of position for copy (internal format):";
      stringArray0[3] = "Value of position for copy (internal format):";
      stringArray0[4] = "Value of position for copy (internal format):";
      stringArray0[5] = "-M <num>";
      discretize0.setOptions(stringArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("q=*0sL%FN!in", (ArrayList<Attribute>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6262021243965052
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7qDgh]w_aL7f0W";
      stringArray0[1] = "first-last";
      stringArray0[2] = "WHWr7vgRI:h+<s2R";
      discretize0.setOptions(stringArray0);
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7qDgh]w_aL7f0W";
      stringArray0[1] = "first-last";
      stringArray0[2] = "WHWr7vgRI:h+<s2R";
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("position");
      discretize0.setMakeBinary(true);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "position";
      stringArray0[1] = "position";
      stringArray0[2] = "position";
      stringArray0[3] = "position";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // null
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize("chV;1q5vc[ebB");
      double[][] doubleArray0 = new double[2][2];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 865.2516;
      doubleArray1[2] = Double.POSITIVE_INFINITY;
      doubleArray1[3] = 847.6393698514227;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-539.0480202);
      doubleArray1[6] = 1168.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 3806.79985244;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = (-539.0480202);
      doubleArray2[1] = 1168.0;
      doubleArray2[2] = (-539.0480202);
      doubleArray2[3] = (-539.0480202);
      doubleArray2[4] = 847.6393698514227;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getCapabilities();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1435);
      Discretize discretize0 = new Discretize("M");
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1435;
      doubleArray0[1] = (double) 6;
      doubleArray0[2] = (double) 6;
      doubleArray0[3] = (double) 1435;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(247.5, doubleArray0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "M";
      stringArray0[1] = "M";
      stringArray0[2] = "M";
      stringArray0[3] = "M";
      stringArray0[4] = "M";
      stringArray0[5] = "J2";
      stringArray0[6] = "M";
      stringArray0[7] = "M";
      stringArray0[8] = "M";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 108.8681;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.7, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(108.8681, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-4069.26779424489), (int[]) null, 6);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance0.setWeight(729.2528);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(6);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      Discretize discretize0 = new Discretize("t\"=4FDll'IGlc[mk");
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 108.8681;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(4526);
      Instances instances0 = new Instances("No value given for -", arrayList0, 4526);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Instances instances1 = new Instances(instances0, 4526);
      Instances instances2 = new Instances(instances1, 1049);
      Instances instances3 = new Instances(instances2);
      Instances.mergeInstances(instances1, instances3);
      Discretize discretize0 = new Discretize("Queue is empty");
      try { 
        discretize0.setInputFormat(instances3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("ts^7m?5xQ", arrayList0, 4526);
      Instances instances1 = new Instances(instances0, (-1667));
      Discretize discretize0 = new Discretize("-F");
      String[] stringArray0 = new String[2];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      Filter.runFilter(discretize0, stringArray0);
      Filter filter0 = Filter.makeCopy(discretize0);
      try { 
        Filter.useFilter(instances1, filter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Q~SqT");
      Discretize discretize0 = new Discretize("{]mW?|+{");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.getBinRangesString((-2));
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }
}
