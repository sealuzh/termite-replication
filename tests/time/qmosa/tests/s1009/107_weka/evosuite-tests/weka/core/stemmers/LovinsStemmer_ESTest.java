/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:52:55 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.742335370680872
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nUg0-*887A@Je%Z;";
      stringArray0[2] = "nUg0-*887A@Je%Z;";
      stringArray0[3] = "nUg0-*887A@Je%Z;";
      lovinsStemmer0.stemString("'Pj#?B* 5Emvy3Fhr<");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("nUg0-*887A@Je%Z;");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034ix");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      lovinsStemmer4.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string0 = lovinsStemmer5.globalInfo();
      lovinsStemmer4.stemString("yz");
      lovinsStemmer2.getTechnicalInformation();
      String string1 = lovinsStemmer5.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6730659341125482
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Sorted array (doubles): ");
      assertEquals("sort arra (doubl): ", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("sort arra (doubl): ");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.stem(")AX&mH{Z?#i");
      lovinsStemmer2.toString();
      lovinsStemmer1.stem("cid");
      String string1 = lovinsStemmer2.stemString("sort arra (doubl): ");
      assertEquals("sort ar (doubl): ", string1);
      
      lovinsStemmer0.stemString(").");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("'-?M*(I|-Cf");
      lovinsStemmer2.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("A Table of Contents ");
      assertEquals("a tabl of content ", string2);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("arly");
      lovinsStemmer4.globalInfo();
      lovinsStemmer4.getRevision();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string3 = lovinsStemmer5.stemString(">|?36zZ*RXMsujRmk");
      assertEquals(">|?36zz*rxmsujrmk", string3);
      
      lovinsStemmer5.getTechnicalInformation();
      String string4 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.646491105172093
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray1 = new String[4];
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("A`a'Xig}4QX6{NVE`RK");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.stemString("C2dj*`u~!w}jw>Y98");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("end");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7105996525292553
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      String string0 = lovinsStemmer0.stemString("'Pj#?B* 5Emvy3Fhr<");
      assertEquals("'pj#?b* 5emvy3fhr<", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("0Kiev");
      assertEquals("0kief", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer1.stem("'Pj#?B* 5Emvy3Fhr<");
      String string3 = lovinsStemmer1.getRevision();
      assertEquals("8034", string3);
      
      lovinsStemmer0.stemString("0Yu6)` a/JDVmX:Uo");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("p");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string4);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5361794649146687
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("iocnist");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "iocn";
      stringArray0[2] = "ized";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      lovinsStemmer0.stemString("herond");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("iocn");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("ator");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ized");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7060686970448904
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("ional");
      assertEquals("ion", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.stem("umpt");
      assertEquals("um", string2);
      
      String string3 = lovinsStemmer0.stemString("A link to a PDF file.");
      assertEquals("a link to a pdf fil.", string3);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("8034");
      lovinsStemmer2.globalInfo();
      String string4 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5923130990350913
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "/l_q;t";
      stringArray0[1] = "/l_q;t";
      stringArray0[2] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[3] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[4] = "/l_q;t";
      stringArray0[5] = "/l_q;t";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("/l_q;t");
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("/l_q;t");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("/l_q;t");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("al3yz");
      String string1 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("/l_q;t");
      assertEquals("/l_q;t", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5931236598653178
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("aL3");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]3x[KSe";
      stringArray0[1] = "";
      stringArray0[2] = "sS.Urx";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("PROCEEDINGS");
      assertEquals("proceed", string0);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("proceed");
      lovinsStemmer0.stemString("G");
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6904319804256174
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "typond";
      stringArray0[1] = "olut";
      stringArray0[2] = "typond";
      stringArray0[3] = "olut";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("olut");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("olut");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("typond");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stemString("olut");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("linguerid");
      assertEquals("lingueris", string1);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6619535728662322
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("K");
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("_E");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("ent");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("HmOPtqC^+JJkL)b+(c");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "K";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string3 = lovinsStemmer0.stemString("|tbzb>%_~*8ckhpxpex");
      assertEquals("|tbzb>%_~*8ckhpxpic", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.646987860046042
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("5EAR_[w4M?");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("dex");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer3.stemString("8034");
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.693810460468295
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("B]6wa?CV");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("QoqB^wUYf");
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer1.stemString("rud");
      String string1 = lovinsStemmer0.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6919429598721718
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("8034");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString(")5/mI?~r_");
      String string3 = lovinsStemmer1.stem("Lf,vDduXUU1mx7rr");
      assertEquals("lf,vdduxuu1mx7r", string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "'Pj#?B* 5Emvy3Fhr<";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = ")5/mi?~r_";
      stringArray0[5] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("IeQV~uxA8GC3");
      String string4 = lovinsStemmer0.stemString("");
      assertFalse(string4.equals((Object)string1));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6695822105963378
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nUg0-*887A@Je%Z;";
      stringArray0[2] = "nUg0-*887A@Je%Z;";
      lovinsStemmer0.stem("nUg0-*887A@Je%Z;");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("nUg0-*887A@Je%Z;");
      lovinsStemmer0.stemString("8$vgZeQ{5");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("dex");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("8$vgzeq{5");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.590630235097175
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      lovinsStemmer0.stemString("mnt\".&22c=\"XYB8");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("addresend");
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray1[1] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray1[2] = "addrespex";
      stringArray1[3] = "mnt\".&22c=\"XYB8";
      stringArray1[4] = "usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.";
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("addrespex");
      LovinsStemmer.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.60029374326978
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      lovinsStemmer0.stemString("mnt\".&22c=\"XYB8");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("xjj&1$t^bex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6544267473460095
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      lovinsStemmer0.globalInfo();
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ities");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6770500411610891
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("aL3");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "aL3";
      stringArray0[1] = "";
      stringArray0[2] = "sS.Urx";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("]3x[KSe");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer1.stemString("aL3");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("tex");
      LovinsStemmer.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6816254374252753
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("aL3");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]3x[KSe";
      lovinsStemmer0.stemString("lid");
      stringArray0[1] = "";
      stringArray0[2] = "sS.Urx";
      lovinsStemmer0.globalInfo();
      stringArray0[3] = "Machine Learning";
      lovinsStemmer0.getRevision();
      stringArray0[4] = "2.i";
      lovinsStemmer0.stemString("sS.Urx");
      stringArray0[5] = "izations";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("9~HiLVN\u0003xl+Gu@H");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ativeness");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem(" O?DKD");
      lovinsStemmer0.stemString("15UPb(<l]mOpm#A9mMl");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6530967675613573
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("aL3");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "]3x[KSe";
      stringArray0[1] = "";
      stringArray0[2] = "sS.Urx";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("]3x[KSe");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("aL3");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Machine Learning");
      TechnicalInformation technicalInformation1 = lovinsStemmer2.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6653654142410665
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("lo5end");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("9");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("Correlation: ");
      assertEquals("correl: ", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stemString("lux");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("9");
      String string3 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string4);
      
      String string5 = lovinsStemmer0.stem("*fzN`CgJIu%");
      assertEquals("*fzn`cgjiu%", string5);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.661700668683197
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A}QrlpU@zJ");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("rud");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer2.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6654882241920184
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("ization");
      assertEquals("izat", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("?[6>Z{y");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("CfpeZlCfBn9g6J{");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("cfpezlcfbn9g6j{");
      String string2 = lovinsStemmer0.stemString("d.ja8c{zsybij3'uh1lux");
      assertEquals("d.ja8c{zsybij3'uh1luc", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("uad");
      assertEquals("uas", string3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6356776710875502
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("nUg0-*887A@Je%Z;");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "mnt\".&22c=\"XYB8";
      stringArray0[1] = "mnt\".&22c=\"XYB8";
      stringArray0[2] = "{{co(|3>Rl=+CSb";
      stringArray0[3] = "mnt\".&22c=\"XYB8";
      stringArray0[4] = "{{co(|3>Rl=+CSb";
      stringArray0[5] = "{{co(|3>Rl=+CSb";
      stringArray0[6] = "nug0-*887@je%z;";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("{{co(|3>Rl=+CSb");
      lovinsStemmer0.stem("mnt\".&22c=\"XYB8");
      String string0 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("{{co(|3>Rl=+CSb");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("X_g _bUr!");
      String string2 = lovinsStemmer1.stemString("nUg0-*887A@Je%Z;");
      assertEquals("nug0-*887@je%z;", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6619385495049053
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("i=zIGvCjHb:0<%iMj");
      lovinsStemmer0.stem("i=zIGvCjHb:0<%iMj");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem(").");
      lovinsStemmer0.stemString("i=zigvcjhb:0<%imj");
      lovinsStemmer0.stemString("M#8W+B69pL>+\"ca");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("i=zigvcjhb:0<%imj");
      String[] stringArray0 = new String[4];
      stringArray0[0] = ").";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("887ert");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.721385215868321
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("umpt");
      lovinsStemmer0.stemString("A link to a PDF file.");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7378727683282662
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      lovinsStemmer0.stemString("mnt\".&22c=\"XYB8");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("typax");
      lovinsStemmer0.stem("vad");
      lovinsStemmer0.stemString("+>{Nt--i:");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Title of a book, part of which is being cited. See the LaTeX book for how to type titles. For book entries, use the title field instead.");
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.584789085939971
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[1] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[2] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[3] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[4] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[5] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[6] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[7] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      String string1 = lovinsStemmer0.stem("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      assertTrue(string1.equals((Object)string0));
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stem("arizability");
      assertEquals("ar", string2);
      
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer1.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      assertEquals("usu th addr of th publish or other typ of institut. for major publ hous, van leun recommen om th inform entir. for smal publish, on th other hand, you can help th reader by giv th compl addr.", string3);
      
      lovinsStemmer0.stem("lid");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.stemString("QnR+zb\"v9[FKn<");
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
      
      String string5 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string5);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.595518637679482
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("");
      String string0 = lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("I=~XaV[9O/Jh,<,)VVL");
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("weka.core.Utils");
      assertEquals("wek.cor.util", string1);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer2.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string3);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6004558070850168
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      String string0 = lovinsStemmer0.stemString("mnt\".&22c=\"XYB8");
      assertEquals("mnt\".&22c=\"xyb8", string0);
      
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray1[1] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray1[2] = "addrespex";
      stringArray1[3] = "mnt\".&22c=\"XYB8";
      stringArray1[4] = "usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.";
      stringArray1[5] = "mnt\".&22c=\"xyb8";
      stringArray1[6] = "A}QrlpU@zJ";
      stringArray1[7] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer2.getRevision();
      lovinsStemmer1.stemString(">$#");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.stemString("entist");
      String string3 = lovinsStemmer2.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.661700668683197
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("iocnist");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("lovinsstemmeryt");
      LovinsStemmer.main(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6451314306154512
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8034");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("pand");
      assertEquals("pans", string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      stringArray0[1] = "pans";
      stringArray0[2] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.toString();
      assertFalse(string4.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7329439124204427
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{{co(|3>Rl=+CSb";
      stringArray0[1] = "nUg0-*887A@Je%Z;";
      stringArray0[2] = "nUg0-*887A@Je%Z;";
      stringArray0[3] = "nUg0-*887A@Je%Z;";
      stringArray0[4] = "olut";
      stringArray0[5] = "nUg0-*887A@Je%Z;";
      stringArray0[6] = "nUg0-*887A@Je%Z;";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("nUg0-*887A@Je%Z;");
      lovinsStemmer0.stemString("nUg0-*887A@Je%Z;");
      lovinsStemmer0.stemString("httpcid");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("=VK>bJ");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("C:owO");
      lovinsStemmer2.stem("MONTH");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.69173030702794
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("V[");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "V[";
      stringArray0[1] = "V[";
      stringArray0[2] = "";
      stringArray0[3] = "8034";
      stringArray0[4] = "V[";
      stringArray0[5] = "v[";
      stringArray0[6] = "8034";
      stringArray0[7] = "V[";
      stringArray0[8] = "V[";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("!N8PXBQ");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stem("o*I5$EA3(E@heX_,ix");
      assertEquals("o*i5$ea3(e@hex_,ic", string3);
      
      String string4 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string4);
      
      String string5 = lovinsStemmer0.stemString("");
      assertFalse(string5.equals((Object)string0));
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6613199722326315
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("olv");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "olv";
      stringArray0[1] = "olut";
      stringArray0[2] = "olut";
      stringArray0[3] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.";
      stringArray0[4] = "olv";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("olut");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("(A96d");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("Lr");
      assertEquals("lr", string2);
      
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6603691391049549
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[17];
      stringArray0[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String[] stringArray1 = new String[2];
      String string3 = lovinsStemmer0.stemString("{L8yOc=DP");
      assertEquals("{l8yoc=dp", string3);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6905955363527454
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "{{co(|3>Rl=+CSb";
      stringArray0[1] = "nUg0-*887A@Je%Z;";
      stringArray0[2] = "nUg0-*887A@Je%Z;";
      stringArray0[3] = "nUg0-*887A@Je%Z;";
      stringArray0[4] = "olut";
      stringArray0[5] = "nUg0-*887A@Je%Z;";
      stringArray0[6] = "{{co(|3>Rl=+CSb";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("nUg0-*887A@Je%Z;");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      String[] stringArray1 = new String[1];
      stringArray1[0] = "";
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.stemString("A`a'Xig}4QX6{NVE`RK");
      assertEquals("a`a'xig}4qx6{nv`rk", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("VOLUME");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("");
      assertFalse(string3.equals((Object)string0));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5782719866816177
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nUg0-*887A@Je%Z;";
      stringArray0[2] = "nUg0-*887A@Je%Z;";
      stringArray0[3] = "nUg0-*887A@Je%Z;";
      lovinsStemmer0.stemString("'Pj#?B* 5Emvy3Fhr");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("zLK[");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6778561108770762
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "olut";
      stringArray0[1] = "{{co(|3>Rl=+CSb";
      stringArray0[2] = "{{co(|3>Rl=+CSb";
      stringArray0[3] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[4] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[5] = "typond";
      stringArray0[6] = "{{co(|3>Rl=+CSb";
      stringArray0[7] = "{{co(|3>Rl=+CSb";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("typond");
      assertEquals("typons", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("UARojvd|^D7`");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Get option -o: ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("Get option -o: ");
      assertEquals("ges opt -o: ", string2);
      
      String string3 = lovinsStemmer1.stem("gg");
      assertEquals("gg", string3);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.8408783986311716
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer0.stem("");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem(").");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("M#8W+B69pL>+\"ca");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = ",AOR.W~X&";
      stringArray0[3] = "antaneous";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("number");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("8034");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem(").");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6627709627713414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("ization");
      assertEquals("izat", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("?[6>Z{y");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("CfpeZlCfBn9g6J{");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("cfpezlcfbn9g6j{");
      String string2 = lovinsStemmer0.stemString("d.ja8c{zsybij3'uh1lux");
      assertEquals("d.ja8c{zsybij3'uh1luc", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("nUg0-*887A@Je%Z;");
      assertEquals("nug0-*887@je%z;", string3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6714080300149565
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "olut";
      stringArray0[1] = "{{co(|3>Rl=+CSb";
      stringArray0[2] = "{{co(|3>Rl=+CSb";
      stringArray0[3] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[4] = "Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.";
      stringArray0[5] = "typond";
      stringArray0[6] = "{{co(|3>Rl=+CSb";
      stringArray0[7] = "{{co(|3>Rl=+CSb";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("typond");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("UARojvd|^D7`");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Get option -o: ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("Get option -o: ");
      assertEquals("ges opt -o: ", string1);
      
      String string2 = lovinsStemmer0.stemString("a^k8|zYo");
      assertEquals("a^k8|zy", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.593800135427638
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "nUg0-*887A@Je%Z;";
      stringArray0[2] = "nUg0-*887A@Je%Z;";
      stringArray0[3] = "nUg0-*887A@Je%Z;";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("How something strange has been published. The first word should be capitalized.");
      assertEquals("how someth strang ha been publ. th first word should be capital.", string1);
  }
}
