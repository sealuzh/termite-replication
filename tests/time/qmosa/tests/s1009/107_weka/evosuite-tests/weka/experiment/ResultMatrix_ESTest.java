/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 21:57:55 GMT 2020
 */

package weka.experiment;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.experiment.ResultMatrix;
import weka.experiment.ResultMatrixCSV;
import weka.experiment.ResultMatrixGnuPlot;
import weka.experiment.ResultMatrixHTML;
import weka.experiment.ResultMatrixLatex;
import weka.experiment.ResultMatrixPlainText;
import weka.experiment.ResultMatrixSignificance;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultMatrix_ESTest extends ResultMatrix_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.printRowNamesTipText();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getDefaultEnumerateColNames();
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5013930289186157
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 2);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringMatrix();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setRowNameWidth(2);
      resultMatrixLatex0.getDefaultShowStdDev();
      resultMatrixLatex0.setSignificance((-149), 3, 2);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(2);
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.setRowOrder(intArray1);
      resultMatrixGnuPlot0.setPrintRowNames(false);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixGnuPlot0);
      resultMatrixGnuPlot1.getDisplayName();
      resultMatrixLatex0.enumerateColNamesTipText();
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5486379363055978
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_CountWidth = 2;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setColNameWidth((-717));
      resultMatrixLatex0.m_PrintColNames = false;
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.removeFilterName("pBY+1*q\"F");
      resultMatrixLatex0.setRowNameWidth((-717));
      resultMatrixLatex0.getDefaultShowStdDev();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.setPrintRowNames(false);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixLatex0.enumerateColNamesTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixLatex0);
      resultMatrixSignificance0.getDisplayName();
      resultMatrixLatex0.doubleToString((-2784.5673), 2);
      resultMatrixLatex0.setRowHidden(1623, false);
      resultMatrixGnuPlot0.setColOrder(intArray0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.339282581485154
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getRevision();
      resultMatrixSignificance0.toStringMatrix();
      resultMatrixSignificance0.enumerateRowNamesTipText();
      resultMatrixSignificance0.getStdDevPrec();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      resultMatrixGnuPlot0.getDefaultColNameWidth();
      resultMatrixSignificance0.getEnumerateRowNames();
      int[][] intArray0 = new int[9][0];
      int[] intArray1 = new int[4];
      intArray1[0] = 2;
      intArray1[1] = 50;
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 2;
      intArray2[1] = 510;
      intArray2[2] = 1;
      intArray2[3] = 2;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[5];
      intArray3[0] = 510;
      intArray3[1] = 2;
      intArray3[2] = 50;
      intArray3[3] = 1;
      intArray3[4] = 510;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 1010;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 1;
      intArray5[1] = 2;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 510;
      intArray5[5] = 0;
      intArray5[6] = 510;
      intArray5[7] = 2;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[26];
      intArray6[0] = 2;
      intArray6[1] = 510;
      intArray6[2] = 50;
      intArray6[3] = 2;
      intArray6[4] = 2;
      intArray6[5] = 50;
      intArray6[6] = 1;
      intArray6[7] = 1;
      intArray6[8] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = (-717);
      intArray7[1] = 2;
      intArray7[2] = 0;
      intArray7[3] = 2;
      intArray7[4] = 2;
      intArray7[5] = 2;
      intArray7[6] = 0;
      intArray7[7] = 50;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[1];
      intArray8[0] = 1;
      intArray0[7] = intArray8;
      int[] intArray9 = new int[6];
      intArray9[0] = 30;
      intArray9[1] = 510;
      intArray9[2] = 1;
      intArray9[3] = 0;
      intArray9[4] = 507;
      intArray9[5] = 2;
      intArray0[8] = intArray9;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.425555003473302
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getDefaultPrintRowNames();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*";
      stringArray0[1] = ")";
      stringArray0[2] = " ";
      resultMatrixHTML0.m_StdDevPrec = (-770);
      stringArray0[3] = "*";
      stringArray0[4] = ")";
      stringArray0[5] = "(";
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixHTML0.globalInfo();
      resultMatrixHTML0.getShowStdDev();
      resultMatrixHTML0.getEnumerateRowNames();
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.146298104072032
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.colNameWidthTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(748, 1);
      resultMatrixSignificance0.WIN_STRING = "]";
      resultMatrixPlainText0.m_RemoveFilterName = true;
      resultMatrixPlainText0.LOSS_STRING = "B|'.]";
      resultMatrixSignificance0.padString(")", 0, true);
      resultMatrixSignificance0.setPrintColNames(false);
      resultMatrixSignificance0.setMeanPrec(0);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getRowCount();
      resultMatrixCSV0.setMeanPrec(748);
      resultMatrixCSV0.isStdDev(2);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixPlainText0.setPrintColNames(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]";
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(366, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 1);
      resultMatrixGnuPlot0.getRevision();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 1133);
      resultMatrixLatex0.setMeanWidth((-974));
      resultMatrixLatex0.toStringSummary();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      resultMatrixHTML0.toStringKey();
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5141130544825647
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 2);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringMatrix();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_RankingWins = intArray1;
      resultMatrixPlainText0.setShowAverage(true);
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1669, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot1.setMeanWidth(0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.9205615590173397
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringKey();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      intArray4[0] = 1;
      intArray3[5] = intArray4;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setSummary(intArray0, intArray3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixPlainText0);
      resultMatrixGnuPlot0.setRanking(intArray0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1169, 3127);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.845638493134258
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixGnuPlot0.toStringKey();
      resultMatrixGnuPlot0.globalInfo();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixHTML0.getDefaultRowNameWidth();
      resultMatrixPlainText0.toStringKey();
      resultMatrixSignificance0.setColHidden(26, false);
      resultMatrixCSV0.toStringSummary();
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.475532560205853
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      String string0 = resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The width of the significance indicator (0 = optimal).";
      stringArray0[1] = string0;
      stringArray0[2] = "ga?bv~WtM";
      stringArray0[3] = "T1@";
      stringArray0[4] = "T1@";
      stringArray0[5] = "\"";
      stringArray0[6] = "The width of the significance indicator (0 = optimal).";
      stringArray0[7] = "";
      ResultMatrixLatex.main(stringArray0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1173, 1);
      resultMatrixGnuPlot0.setMeanWidth(2);
      resultMatrixPlainText0.getRemoveFilterName();
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0987651368490177
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixSignificance0.padString(")", (-458), true);
      resultMatrixSignificance0.setPrintColNames(false);
      resultMatrixSignificance0.setMeanPrec(1);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getRowCount();
      resultMatrixCSV0.setMeanPrec(1);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV();
      resultMatrixCSV1.isStdDev(12);
      resultMatrixCSV0.getDefaultRowNameWidth();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setPrintColNames(true);
      ResultMatrixCSV resultMatrixCSV2 = null;
      try {
        resultMatrixCSV2 = new ResultMatrixCSV((-3790), 1242);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6808649498588037
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance1);
      resultMatrixCSV0.toStringSummary();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setPrintColNames(true);
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(1, 1842);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixPlainText0.setPrintColNames(true);
      // Undeclared exception!
      resultMatrixCSV1.setSize(26, 1412);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.996306798305616
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.colNameWidthTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(748, 1);
      resultMatrixSignificance0.WIN_STRING = "]";
      resultMatrixPlainText0.m_RemoveFilterName = true;
      resultMatrixPlainText0.setStdDevPrec(2);
      resultMatrixPlainText0.setMean((-1453), 2, 0.0);
      resultMatrixPlainText0.getSignificanceCount(9, 39);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.643015966143856
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getDefaultPrintRowNames();
      String[] stringArray0 = new String[8];
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixHTML0);
      resultMatrixLatex0.setOptions((String[]) null);
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixLatex0.getShowAverage();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(1172, 2);
      resultMatrixGnuPlot0.clear();
      resultMatrixGnuPlot0.getRevision();
      resultMatrixLatex0.setMeanWidth(0);
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixLatex0);
      resultMatrixPlainText0.getRowHidden((-827));
      resultMatrixLatex0.getDisplayCol(567);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "(";
      stringArray1[1] = "v";
      stringArray1[2] = " ";
      stringArray1[3] = " ";
      stringArray1[4] = " ";
      stringArray1[5] = "v";
      stringArray1[6] = "(";
      stringArray1[7] = "v";
      stringArray1[8] = "*";
      ResultMatrixCSV.main(stringArray1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.928332521116136
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.globalInfo();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(1, 1);
      resultMatrixSignificance0.WIN_STRING = "]";
      resultMatrixCSV0.toStringSummary();
      resultMatrixSignificance0.getAverage(0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 2300);
      resultMatrixLatex0.globalInfo();
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(resultMatrixCSV0);
      resultMatrixCSV1.clearSummary();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|";
      stringArray0[1] = "$\bullet$";
      stringArray0[2] = "(";
      stringArray0[3] = "Generates the output as plain text (for fixed width fonts).";
      stringArray0[4] = "]";
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1;
      resultMatrixLatex0.setColOrder(intArray0);
      resultMatrixPlainText0.setPrintColNames(false);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSize((-3033), 2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.937805393109593
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      resultMatrixSignificance0.setColOrder((int[]) null);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance1.getAverage(0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(2, 1);
      resultMatrixLatex0.globalInfo();
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6808649498588037
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance1);
      resultMatrixCSV0.toStringSummary();
      ResultMatrixSignificance resultMatrixSignificance2 = new ResultMatrixSignificance(1, 2);
      resultMatrixSignificance2.getAverage((-275));
      resultMatrixSignificance2.m_ColNameWidth = 160;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 1);
      resultMatrixLatex0.globalInfo();
      resultMatrixCSV0.clearSummary();
      resultMatrixLatex0.getDefaultEnumerateColNames();
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.430358216598914
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "row-name-width";
      stringArray0[2] = "}Y`";
      stringArray0[3] = "";
      stringArray0[4] = "ir'Pz&aR5)U[";
      stringArray0[5] = "F+q";
      stringArray0[6] = "";
      stringArray0[7] = "2AV4.u`u:e5mG;}o+";
      stringArray0[8] = "A^xPA~v`D>eOEQr";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 657);
      resultMatrixHTML0.getColHidden(26);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(9, 1375);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5354375925484596
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringMatrix();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixPlainText0.setShowAverage(true);
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setSummary(intArray0, intArray3);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "(";
      ResultMatrixGnuPlot.main(stringArray0);
      int int0 = resultMatrixPlainText0.getMeanPrec();
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2425644893119774
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.colNameWidthTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(748, 1);
      resultMatrixSignificance0.WIN_STRING = "]";
      resultMatrixPlainText0.m_RemoveFilterName = true;
      resultMatrixSignificance0.padString(")", 0, true);
      resultMatrixSignificance0.setPrintColNames(false);
      resultMatrixSignificance0.setMeanPrec(0);
      resultMatrixCSV0.toStringKey();
      resultMatrixSignificance0.getRowCount();
      resultMatrixCSV0.setMeanPrec(748);
      resultMatrixCSV0.isStdDev(2);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixPlainText0.setPrintColNames(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]";
      stringArray0[1] = "";
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(0, 366);
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      resultMatrixPlainText0.setPrintColNames(true);
      // Undeclared exception!
      try { 
        resultMatrixCSV0.setSize((-2467), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4824519468249324
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringKey();
      assertFalse(resultMatrixPlainText0.getEnumerateRowNames());
      
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      intArray4[0] = 1;
      intArray3[5] = intArray4;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setSummary(intArray3, intArray3);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$\bullet$";
      stringArray0[1] = ")";
      stringArray0[2] = "..P:.3g6ZPTny#)Ean";
      stringArray0[3] = "\tThe width of the counts (0 = optimal).\n\t(default: ";
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixPlainText0.getRowOrder();
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
      assertEquals(2, resultMatrixPlainText0.getMeanPrec());
      assertTrue(resultMatrixPlainText0.getPrintRowNames());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.0045706252519193
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.m_EnumerateColNames = false;
      resultMatrixCSV0.m_MeanPrec = 3123;
      resultMatrixPlainText0.setMeanPrec(2);
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixCSV0.padString("5.70001 > 5.7 ? ", (-1), true);
      resultMatrixPlainText0.clear();
      resultMatrixCSV0.setRowHidden(2, true);
      resultMatrixCSV0.getShowAverage();
      resultMatrixPlainText0.clearRanking();
      resultMatrixPlainText0.setPrintColNames(false);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3123, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      resultMatrixSignificance0.clearRanking();
      stringArray0[1] = "v";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.LOSS_STRING = "(";
      int[][] intArray0 = new int[0][5];
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.915803308756176
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringKey();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      intArray4[0] = 1;
      intArray3[5] = intArray4;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      int[][] intArray5 = new int[0][5];
      int[][] intArray6 = new int[2][1];
      intArray6[0] = intArray4;
      intArray6[1] = intArray2;
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setSummary(intArray5, intArray6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.425555003473302
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getDefaultPrintRowNames();
      resultMatrixHTML0.m_PrintColNames = true;
      assertFalse(resultMatrixHTML0.getShowStdDev());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*";
      stringArray0[1] = ")";
      stringArray0[2] = " ";
      stringArray0[3] = "*";
      stringArray0[4] = ")";
      resultMatrixHTML0.setShowStdDev(true);
      stringArray0[5] = "(";
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixHTML0.getDefaultMeanPrec();
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.443857882924003
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "v";
      stringArray0[2] = "v";
      stringArray0[3] = "v";
      stringArray0[4] = "v";
      stringArray0[5] = "(";
      stringArray0[6] = "v";
      stringArray0[7] = "(";
      stringArray0[8] = " ";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixPlainText0);
      resultMatrixHTML0.getColHidden((-986));
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(1447, 26);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.9083826809913753
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText1.getDisplayName();
      resultMatrixPlainText0.setStdDevPrec(1155);
      int[][] intArray0 = new int[5][2];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 2;
      intArray1[2] = 1588;
      intArray1[3] = 2;
      intArray0[0] = intArray1;
      resultMatrixPlainText0.LOSS_STRING = "weka/core/version.txt";
      int[] intArray2 = new int[3];
      intArray2[0] = 1;
      intArray2[1] = 1155;
      intArray2[2] = 1155;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 1588;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[1];
      intArray4[0] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[2];
      intArray5[0] = 0;
      intArray5[1] = 0;
      intArray0[4] = intArray5;
      resultMatrixPlainText0.m_NonSigWins = intArray0;
      resultMatrixPlainText0.setMean(16, 0, 170.823083978625);
      assertEquals(1155, resultMatrixPlainText0.getStdDevPrec());
      
      int int0 = resultMatrixPlainText1.getSignificanceCount(1, 1588);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.824364840923503
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getDefaultPrintRowNames();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "*";
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDisplayName();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(1, 2);
      resultMatrixPlainText1.setMean(0, 0, (-942.14261557));
      assertEquals(1, resultMatrixPlainText1.getColCount());
      assertEquals(2, resultMatrixPlainText1.getStdDevPrec());
      assertEquals(0, resultMatrixPlainText1.getSignificanceWidth());
      assertEquals(2, resultMatrixPlainText1.getRowCount());
      assertEquals(0, resultMatrixPlainText1.getMeanWidth());
      assertEquals(2, resultMatrixPlainText1.getDefaultMeanPrec());
      assertTrue(resultMatrixPlainText1.getDefaultEnumerateColNames());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.52299675741061
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_CountWidth = 2;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setColNameWidth((-717));
      resultMatrixLatex0.m_PrintColNames = false;
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.removeFilterName("pBY+1*q\"F");
      resultMatrixLatex0.setRowNameWidth((-717));
      resultMatrixLatex0.getDefaultShowStdDev();
      resultMatrixLatex0.setSignificance(3, 3, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.setPrintRowNames(false);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixLatex0.enumerateColNamesTipText();
      int int0 = resultMatrixLatex0.getVisibleRowCount();
      assertEquals(1, int0);
      assertEquals(2, resultMatrixLatex0.getMeanPrec());
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.490976690150309
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringKey();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixPlainText0.setSignificanceWidth(3044);
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      ResultMatrixGnuPlot.main((String[]) null);
      resultMatrixLatex0.getCount(26);
      assertEquals(0, resultMatrixLatex0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.936158557953129
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      resultMatrixCSV0.toStringSummary();
      resultMatrixSignificance0.getAverage(2);
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex((-707), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.452577255092425
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.colNameWidthTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(748, 1);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "[";
      stringArray0[1] = "The maximum width of the column names (0 = optimal).";
      ResultMatrixGnuPlot.main(stringArray0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      resultMatrixHTML0.getColHidden(0);
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(1608, (-2229));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.496381175812203
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_CountWidth = 2;
      resultMatrixLatex0.toStringKey();
      ResultMatrixGnuPlot.main((String[]) null);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixLatex0);
      resultMatrixHTML0.getColHidden(1);
      ResultMatrixLatex resultMatrixLatex1 = null;
      try {
        resultMatrixLatex1 = new ResultMatrixLatex(1608, (-587));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.6455156028485933
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.m_MeanPrec = 3123;
      resultMatrixPlainText0.setMeanPrec(2);
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixCSV0.padString("5.70001 > 5.7 ? ", (-1), true);
      resultMatrixPlainText0.clear();
      resultMatrixCSV0.setRowHidden(2, true);
      resultMatrixCSV0.getShowAverage();
      resultMatrixPlainText0.clearRanking();
      resultMatrixPlainText0.setPrintColNames(false);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3123, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      resultMatrixSignificance0.clearRanking();
      resultMatrixPlainText0.m_EnumerateRowNames = true;
      stringArray0[1] = "v";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      stringArray0[4] = ")";
      stringArray0[5] = " ";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixCSV0.setRemoveFilterName(false);
      resultMatrixPlainText0.getOptions();
      resultMatrixPlainText0.getEnumerateColNames();
      resultMatrixPlainText0.globalInfo();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixPlainText0.getRevision();
      assertFalse(resultMatrixPlainText0.getPrintColNames());
      
      resultMatrixSignificance0.getCount(1);
      resultMatrixSignificance0.padString("6afTuPlzh1S,a&ju~", 3123);
      assertFalse(resultMatrixSignificance0.getRemoveFilterName());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.4948497780935677
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_CountWidth = 2;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setColNameWidth((-717));
      resultMatrixLatex0.m_PrintColNames = false;
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setPrintColNames(false);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      resultMatrixPlainText1.getRevision();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 1);
      resultMatrixGnuPlot0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 26);
      resultMatrixGnuPlot0.m_CountWidth = 0;
      String string0 = resultMatrixCSV0.toStringMatrix();
      assertEquals("Dataset,[1],[2],''\nrow0,'','',''\nrow1,'','',''\nrow2,'','',''\nrow3,'','',''\nrow4,'','',''\nrow5,'','',''\nrow6,'','',''\nrow7,'','',''\nrow8,'','',''\nrow9,'','',''\nrow10,'','',''\nrow11,'','',''\nrow12,'','',''\nrow13,'','',''\nrow14,'','',''\nrow15,'','',''\nrow16,'','',''\nrow17,'','',''\nrow18,'','',''\nrow19,'','',''\nrow20,'','',''\nrow21,'','',''\nrow22,'','',''\nrow23,'','',''\nrow24,'','',''\nrow25,'','',''\n'[v/ /*]','','',[0/0/0]\n", string0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.m_ColNames = null;
      resultMatrixHTML0.globalInfo();
      assertEquals(50, resultMatrixHTML0.getRowNameWidth());
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      
      resultMatrixCSV0.setRowHidden((-717), true);
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.366080455672883
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setColNameWidth(2465);
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.removeFilterName("\begin{table}[thb]\ncaption{label{labelname}Table Caption (Key)}\nscriptsize\n{centering\n\begin{tabular}{cl}\\\n(1) & col0 \\\nend{tabular}\n}\nend{table}\n");
      resultMatrixLatex0.setRowNameWidth(2466);
      resultMatrixLatex0.getDefaultShowStdDev();
      resultMatrixLatex0.setSignificance(9, 3, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(1);
      resultMatrixLatex0.toStringMatrix();
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(365, 2466);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.34917906095663
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setColNameWidth(535);
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.removeFilterName("}hl");
      resultMatrixLatex0.setRowNameWidth(0);
      resultMatrixLatex0.getDefaultShowStdDev();
      resultMatrixLatex0.setSignificance(1145, 1571, 2331);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(1171);
      resultMatrixGnuPlot0.toStringMatrix();
      resultMatrixGnuPlot0.setRowOrder((int[]) null);
      resultMatrixGnuPlot0.setPrintRowNames(true);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixLatex0.enumerateColNamesTipText();
      assertEquals(535, resultMatrixLatex0.getColNameWidth());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.938000954745576
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringKey();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      resultMatrixPlainText0.clearSummary();
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      intArray4[0] = 1;
      intArray3[5] = intArray4;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setSummary(intArray0, intArray3);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.clearSummary();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.getHeader("8o3s-Jr");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.4610258967677523
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.colNameWidthTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(748, 1);
      resultMatrixSignificance0.WIN_STRING = "]";
      resultMatrixPlainText0.m_RemoveFilterName = true;
      resultMatrixSignificance0.padString(")", 0, true);
      resultMatrixSignificance0.setPrintColNames(false);
      resultMatrixSignificance0.setMeanPrec(0);
      resultMatrixSignificance0.toStringRanking();
      resultMatrixSignificance0.getRowCount();
      resultMatrixCSV0.setMeanPrec(748);
      resultMatrixCSV0.isStdDev(2);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixPlainText0.setPrintColNames(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "]";
      ResultMatrixCSV resultMatrixCSV1 = new ResultMatrixCSV(366, 0);
      resultMatrixCSV1.setEnumerateRowNames(false);
      resultMatrixCSV1.getDefaultRowNameWidth();
      resultMatrixCSV1.getOptions();
      resultMatrixPlainText0.setPrintColNames(true);
      resultMatrixCSV1.setSize(0, 397);
      resultMatrixCSV0.setMean(5, 396, 0);
      assertEquals(748, resultMatrixCSV0.getMeanPrec());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.465128575069156
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getAverage(1);
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance0);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      
      resultMatrixCSV0.clear();
      String string0 = resultMatrixSignificance0.toStringMatrix();
      assertEquals("Dataset (1)\n-----------\nrow0       \n", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2423606966230087
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.LOSS_STRING = "[";
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearSummary();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Vector<Object>> vector2 = new Vector<Vector<Object>>();
      vector0.add(vector1);
      ResultMatrixPlainText resultMatrixPlainText2 = new ResultMatrixPlainText(resultMatrixPlainText1);
      vector0.setSize(1);
      resultMatrixPlainText2.listOptions();
      resultMatrixPlainText0.setOptions((String[]) null);
      assertFalse(resultMatrixPlainText0.getEnumerateColNames());
      
      resultMatrixPlainText1.padString("(", 0, true);
      resultMatrixPlainText1.getShowAverage();
      resultMatrixPlainText1.getRowCount();
      assertEquals(1, resultMatrixPlainText1.getVisibleColCount());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.648625546111829
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(25, 1);
      ResultMatrixPlainText resultMatrixPlainText1 = new ResultMatrixPlainText(resultMatrixPlainText0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText1);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      String[][] stringArray0 = new String[7][6];
      String[] stringArray1 = new String[3];
      stringArray1[0] = " ";
      stringArray1[1] = ")";
      stringArray1[2] = "*";
      stringArray0[0] = stringArray1;
      String[] stringArray2 = new String[8];
      stringArray2[0] = "v";
      stringArray2[1] = " ";
      stringArray2[2] = "v";
      stringArray2[3] = "*";
      stringArray2[4] = "*";
      stringArray2[5] = ")";
      stringArray2[6] = " ";
      stringArray2[7] = "v";
      stringArray0[1] = stringArray2;
      String[] stringArray3 = new String[3];
      stringArray3[0] = "v";
      stringArray3[1] = " ";
      stringArray3[2] = "(";
      stringArray0[2] = stringArray3;
      String[] stringArray4 = new String[2];
      stringArray4[0] = " ";
      stringArray4[1] = ")";
      stringArray0[3] = stringArray4;
      String[] stringArray5 = new String[9];
      stringArray5[0] = " ";
      stringArray5[1] = "*";
      stringArray5[2] = " ";
      stringArray5[3] = "*";
      stringArray5[4] = "(";
      stringArray5[5] = ")";
      stringArray5[6] = "*";
      stringArray5[7] = " ";
      stringArray5[8] = " ";
      stringArray0[4] = stringArray5;
      String[] stringArray6 = new String[2];
      stringArray6[0] = "# the plot commands\n";
      stringArray6[1] = "-mean-width";
      stringArray0[5] = stringArray6;
      String[] stringArray7 = new String[6];
      stringArray7[0] = "v";
      stringArray7[1] = "(";
      stringArray7[2] = "XFMW4GIM";
      stringArray7[3] = "iW7[!4}pQ91DfS$\"C:";
      stringArray7[4] = "show-stddev";
      stringArray7[5] = " ";
      stringArray0[6] = stringArray7;
      int int0 = resultMatrixGnuPlot0.getColSize(stringArray0, 1605, true, false);
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, int0);
      assertEquals(25, resultMatrixGnuPlot0.getVisibleColCount());
      assertTrue(resultMatrixGnuPlot0.getPrintRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.126906336003093
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(32, 5);
      resultMatrixPlainText0.m_RemoveFilterName = false;
      int[] intArray0 = new int[5];
      intArray0[0] = 5;
      intArray0[1] = 5;
      intArray0[2] = 1820;
      intArray0[3] = 1;
      intArray0[4] = 0;
      resultMatrixPlainText0.m_RowOrder = intArray0;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixPlainText0);
      resultMatrixLatex0.listOptions();
      resultMatrixLatex0.setSize(0, 596);
      resultMatrixLatex0.getDefaultEnumerateColNames();
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringMatrix();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.5262774312013216
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.m_CountWidth = 2;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setColNameWidth((-717));
      resultMatrixLatex0.m_PrintColNames = false;
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.removeFilterName("pBY+1*q\"F");
      resultMatrixLatex0.setRowNameWidth((-717));
      boolean boolean0 = resultMatrixLatex0.getDefaultShowStdDev();
      resultMatrixLatex0.setSignificance(3, 3, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 3;
      intArray0[6] = 0;
      resultMatrixLatex0.toStringMatrix();
      intArray0[7] = 0;
      resultMatrixGnuPlot0.setRowOrder(intArray0);
      resultMatrixGnuPlot0.setPrintRowNames(true);
      resultMatrixGnuPlot0.getDisplayName();
      resultMatrixLatex0.enumerateColNamesTipText();
      boolean boolean1 = resultMatrixLatex0.isSignificance(12);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2659515020816237
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringRanking();
      resultMatrixLatex0.isSignificance(0);
      resultMatrixLatex0.getDefaultMeanPrec();
      assertEquals(1, resultMatrixLatex0.getColCount());
      
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
      
      resultMatrixLatex0.getDefaultShowAverage();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5805376244873655
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(3, 3);
      int[] intArray0 = new int[1];
      resultMatrixGnuPlot0.toStringSummary();
      resultMatrixGnuPlot0.getSummaryTitle((-790));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "v";
      stringArray0[1] = "W";
      stringArray0[2] = "";
      stringArray0[3] = "-summary data not set-";
      stringArray0[4] = "";
      stringArray0[5] = "Inf";
      resultMatrixGnuPlot0.m_RowNames = stringArray0;
      intArray0[0] = 3;
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "*";
      stringArray1[4] = " ";
      resultMatrixGnuPlot0.m_RowNames = stringArray1;
      resultMatrixGnuPlot0.getSummaryTitle((-3286));
      resultMatrixGnuPlot0.m_RowOrder = intArray0;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setSummary((int[][]) null, (int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      boolean[] booleanArray0 = new boolean[1];
      resultMatrixLatex0.LOSS_STRING = "";
      booleanArray0[0] = false;
      resultMatrixLatex0.WIN_STRING = ",BjOD2";
      resultMatrixLatex0.setCountWidth((-3019));
      resultMatrixLatex0.m_RowHidden = booleanArray0;
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.getRevision();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText(1472, 1378);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.988040846684039
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      int int0 = 3574;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3574, 1);
      resultMatrixSignificance0.padString("(", 26, true);
      resultMatrixSignificance0.setPrintColNames(true);
      resultMatrixSignificance0.setMeanPrec(0);
      // Undeclared exception!
      resultMatrixSignificance0.toStringRanking();
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.9288799345939394
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_PrintColNames = true;
      resultMatrixSignificance0.getDefaultShowAverage();
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      resultMatrixSignificance0.m_RemoveFilterName = true;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 2;
      resultMatrixSignificance0.listOptions();
      intArray0[0] = intArray1;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.m_StdDevWidth = 2;
      resultMatrixSignificance0.doubleToString(10.0, 0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.padString((String) null, 2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.1613089306593967
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.colNameWidthTipText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixCSV0.setShowAverage(false);
      resultMatrixCSV0.TIE_STRING = "";
      resultMatrixPlainText0.m_RemoveFilterName = true;
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 747;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 747;
      resultMatrixCSV0.m_RankingLosses = intArray0;
      resultMatrixCSV0.setMeanPrec(747);
      resultMatrixCSV0.isStdDev(2);
      resultMatrixCSV0.getDefaultRowNameWidth();
      resultMatrixPlainText0.setPrintColNames(false);
      int int0 = resultMatrixCSV0.getColNameWidth();
      assertEquals(747, resultMatrixCSV0.getMeanPrec());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.0131781049762463
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.m_MeanWidth = (-1114);
      resultMatrixPlainText0.WIN_STRING = "\tWhether to remove the classname package prefixes from the\n\tfilter names in datasets.\n\t(default: no)";
      resultMatrixPlainText0.getDefaultCountWidth();
      resultMatrixPlainText0.getDefaultPrintColNames();
      resultMatrixPlainText0.getPrintColNames();
      resultMatrixPlainText0.getDisplayRow(97);
      resultMatrixPlainText0.getSummaryTitle(0);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixPlainText0);
      resultMatrixPlainText0.padString("\".2-p\"e", 1, true);
      resultMatrixPlainText0.getRowName(0);
      resultMatrixSignificance0.clear();
      resultMatrixSignificance0.m_ShowStdDev = true;
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.doubleToString((-3345.0238309384), (-5263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.2450167964005505
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      resultMatrixLatex0.getDisplayRow(0);
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      int[][] intArray0 = new int[8][5];
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray1[1] = 1;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[4];
      intArray2[0] = 0;
      intArray2[1] = 2;
      intArray2[2] = 1;
      intArray2[3] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[3];
      intArray3[0] = 2;
      intArray3[1] = 0;
      intArray3[2] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 0;
      intArray4[2] = 1;
      intArray4[3] = 0;
      intArray4[4] = 0;
      intArray4[5] = 0;
      intArray4[6] = 0;
      intArray4[7] = 1;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[8];
      intArray5[0] = 0;
      intArray5[1] = 1;
      intArray5[2] = 2;
      intArray5[3] = 1;
      intArray5[4] = 1;
      intArray5[5] = 0;
      intArray5[6] = 0;
      intArray5[7] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[8];
      intArray6[0] = 0;
      intArray6[1] = 0;
      intArray6[2] = 0;
      intArray6[3] = 0;
      intArray6[4] = 0;
      intArray6[5] = 2;
      intArray6[6] = 1;
      intArray6[7] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[8];
      intArray7[0] = 2;
      intArray7[1] = 0;
      intArray7[2] = 0;
      intArray7[3] = 2;
      intArray7[4] = 0;
      intArray7[5] = 0;
      intArray7[6] = 1;
      intArray7[7] = 0;
      intArray0[6] = intArray7;
      int[] intArray8 = new int[5];
      intArray8[0] = 0;
      intArray8[1] = 0;
      intArray8[2] = 1;
      intArray8[3] = 0;
      intArray8[4] = 0;
      intArray0[7] = intArray8;
      resultMatrixHTML0.setSummary(intArray0, intArray0);
      String string0 = resultMatrixHTML0.toStringMatrix();
      assertEquals("<table border=\"1\" cellpadding=\"3\" cellspacing=\"0\">\n   <tr><td><b>Dataset</b></td><td align=\"center\" colspan=\"1\"><b>[1]</b></td></tr>\n   <tr><td>row0</td><td align=\"right\">&nbsp;</td></tr>\n   <tr><td>[v/ /*]</td><td align=\"right\">&nbsp;</td></tr>\n</table>\n", string0);
      
      resultMatrixHTML0.addHeader("", "v");
      assertEquals(2, resultMatrixHTML0.getMeanPrec());
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
      assertEquals(2, resultMatrixHTML0.getStdDevPrec());
      assertEquals(0, resultMatrixHTML0.getStdDevWidth());
      assertEquals(25, resultMatrixHTML0.getRowNameWidth());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.280903868261231
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(5, 5);
      int[] intArray0 = new int[1];
      resultMatrixHTML0.setMeanWidth(5);
      intArray0[0] = 0;
      resultMatrixHTML0.m_RowOrder = intArray0;
      resultMatrixHTML0.setEnumerateColNames(false);
      resultMatrixHTML0.m_ColNameWidth = 0;
      resultMatrixHTML0.getDisplayName();
      resultMatrixHTML0.setMeanPrec(5);
      resultMatrixHTML0.showAverageTipText();
      resultMatrixHTML0.getColNameWidth();
      assertEquals(5, resultMatrixHTML0.getMeanPrec());
      
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string0 = resultMatrixLatex0.toStringMatrix();
      assertEquals("\\begin{table}[thb]\n\\caption{\\label{labelname}Table Caption}\n\\footnotesize\n{\\centering \\begin{tabular}{lr}\n\\\\\n\\hline\nDataset & (1)\\\\\n\\hline\nrow0 &    \\\\\n\\hline\n\\multicolumn{2}{c}{$\\circ$, $\\bullet$ statistically significant improvement or degradation}\\\\\n\\end{tabular} \\footnotesize \\par}\n\\end{table}\n", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.9312653139563003
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringKey();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      intArray4[0] = 1;
      intArray3[5] = intArray4;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setSummary(intArray0, intArray3);
      resultMatrixPlainText0.getDefaultRemoveFilterName();
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.824364840923503
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.getDefaultPrintColNames();
      resultMatrixLatex0.getSummaryTitle(1972);
      int[][] intArray0 = new int[6][7];
      int[] intArray1 = new int[9];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 1972;
      intArray1[4] = 1;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 1972;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 1;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = 1972;
      intArray4[4] = 2;
      intArray4[5] = 2;
      intArray4[6] = 1;
      intArray4[7] = 0;
      intArray4[8] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 1972;
      intArray6[1] = 1;
      intArray6[2] = 1972;
      intArray6[3] = 2;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.824364840923503
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.toStringSummary();
      resultMatrixLatex0.getDefaultPrintColNames();
      resultMatrixLatex0.getSummaryTitle(1972);
      int[][] intArray0 = new int[6][7];
      int[] intArray1 = new int[9];
      intArray1[0] = 2;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 1972;
      intArray1[4] = 1;
      intArray1[5] = 1972;
      intArray1[6] = 0;
      intArray1[7] = 0;
      intArray1[8] = 1972;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[3];
      intArray2[0] = 1;
      intArray2[1] = 0;
      intArray2[2] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[9];
      intArray4[0] = 1;
      intArray4[1] = 0;
      intArray4[2] = 0;
      intArray4[3] = 1972;
      intArray4[4] = 2;
      intArray4[5] = 2;
      intArray4[6] = 1;
      intArray4[7] = 0;
      intArray4[8] = 0;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[1];
      intArray5[0] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[4];
      intArray6[0] = 1972;
      intArray6[1] = 1;
      intArray6[2] = 1972;
      intArray6[3] = 2;
      intArray0[5] = intArray6;
      // Undeclared exception!
      try { 
        resultMatrixLatex0.setSummary(intArray0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.0312301321965327
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance1);
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      assertEquals(2, resultMatrixCSV0.getStdDevPrec());
      assertEquals(0, resultMatrixCSV0.getCountWidth());
      assertTrue(resultMatrixCSV0.getPrintRowNames());
      assertEquals(0, resultMatrixCSV0.getSignificanceWidth());
      assertEquals(0, resultMatrixCSV0.getMeanWidth());
      assertEquals(40, resultMatrixCSV0.getRowNameWidth());
      assertEquals(0, resultMatrixCSV0.getStdDevWidth());
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 1174);
      resultMatrixHTML0.getColNameWidth();
      resultMatrixHTML0.getSignificanceWidth();
      resultMatrixHTML0.setPrintRowNames(true);
      String string0 = resultMatrixHTML0.removeFilterName(")");
      assertEquals(")", string0);
      
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.colNameWidthTipText();
      resultMatrixHTML0.enumerateRowNamesTipText();
      resultMatrixHTML0.getDefaultPrintColNames();
      boolean boolean0 = resultMatrixHTML0.getEnumerateRowNames();
      assertFalse(boolean0);
      
      resultMatrixHTML0.getDefaultEnumerateColNames();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      String string1 = resultMatrixLatex0.getColName(1143);
      assertEquals(1, resultMatrixLatex0.getVisibleColCount());
      assertFalse(resultMatrixLatex0.getShowStdDev());
      assertEquals(1, resultMatrixLatex0.getRowCount());
      assertNull(string1);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.965984268590563
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringKey();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      intArray4[0] = 1;
      intArray3[5] = intArray4;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setMean(1175, 2, 1175);
      assertEquals(2, resultMatrixPlainText0.getMeanWidth());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.503354318374593
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultMatrixLatex.main((String[]) null);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_CountWidth = 2;
      resultMatrixLatex0.toStringKey();
      resultMatrixLatex0.setColNameWidth((-717));
      resultMatrixLatex0.m_PrintColNames = false;
      resultMatrixLatex0.setEnumerateColNames(false);
      resultMatrixLatex0.removeFilterName("pBY+1*q\"F");
      resultMatrixLatex0.setRowNameWidth((-717));
      resultMatrixLatex0.getDefaultShowStdDev();
      resultMatrixLatex0.setSignificance(3, 3, 3);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getSummaryTitle(0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 1;
      intArray0[4] = 1;
      ResultMatrixGnuPlot resultMatrixGnuPlot1 = new ResultMatrixGnuPlot(1677, 2);
      resultMatrixGnuPlot1.getRevision();
      resultMatrixLatex0.setMeanWidth(1);
      assertEquals(1, resultMatrixLatex0.getMeanWidth());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.671086278878679
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(3598, 0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = " ";
      stringArray0[1] = " ";
      resultMatrixLatex0.m_RowNameWidth = 0;
      resultMatrixLatex0.m_RemoveFilterName = true;
      assertTrue(resultMatrixLatex0.getRemoveFilterName());
      
      stringArray0[2] = " ";
      resultMatrixLatex0.setOptions(stringArray0);
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixLatex0.getShowAverage();
      int[][] intArray0 = new int[4][6];
      int[] intArray1 = new int[9];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 2;
      intArray1[3] = 2339;
      intArray1[4] = 0;
      intArray1[5] = 0;
      intArray1[6] = 1;
      intArray1[7] = 0;
      intArray1[8] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[5];
      intArray2[0] = 0;
      intArray2[1] = (-313);
      intArray2[2] = 2;
      intArray2[3] = 3598;
      intArray2[4] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[7];
      intArray3[0] = 0;
      intArray3[1] = 1;
      intArray3[2] = 0;
      intArray3[3] = 0;
      intArray3[4] = 2339;
      intArray3[5] = 0;
      intArray3[6] = 0;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = (-1388);
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 1;
      intArray4[4] = 0;
      intArray4[5] = 2339;
      intArray4[6] = (-313);
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      resultMatrixLatex0.m_Wins = intArray0;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 0);
      resultMatrixGnuPlot0.getRevision();
      resultMatrixLatex0.setMeanWidth(0);
      assertEquals(2, resultMatrixLatex0.getDefaultStdDevPrec());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.7936567840058286
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.setRowNameWidth(3);
      int int0 = 2;
      resultMatrixPlainText0.clearHeader();
      // Undeclared exception!
      try { 
        resultMatrixPlainText0.setSize(2, (-1131));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8871876276384967
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      int int0 = 0;
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.addHeader("z)pb34~", "z)pb34~");
      int int1 = (-1169);
      resultMatrixHTML0.m_RowNameWidth = (-1169);
      String[] stringArray0 = new String[0];
      resultMatrixHTML0.m_ColNames = stringArray0;
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.toStringKey();
      resultMatrixHTML0.enumerateColNamesTipText();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.padString("weka.experiment.ResultMatrixGnuPlot", 0);
      // Undeclared exception!
      try { 
        resultMatrixSignificance0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.936854587182045
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.padString("jkS\"'H", 0);
      resultMatrixPlainText0.toStringKey();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[8];
      intArray1[0] = 0;
      intArray1[1] = (-1288);
      intArray1[2] = 1;
      intArray1[3] = 1;
      intArray1[4] = 1;
      intArray1[5] = 280;
      intArray1[6] = 1175;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      resultMatrixPlainText0.setSummary(intArray0, intArray0);
      resultMatrixPlainText0.getDefaultRemoveFilterName();
      assertEquals(0, resultMatrixPlainText0.getRowNameWidth());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.435158658284827
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixCSV0.TIE_STRING = "]Jx aE(";
      resultMatrixCSV0.toStringKey();
      resultMatrixCSV0.setMeanPrec(748);
      resultMatrixCSV0.getDefaultRowNameWidth();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "";
      int int0 = ResultMatrix.SIGNIFICANCE_LOSS;
      ResultMatrixLatex.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.8322602295395347
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixCSV0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixHTML0);
      assertFalse(resultMatrixHTML0.getEnumerateRowNames());
      
      resultMatrixHTML0.m_EnumerateRowNames = true;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixGnuPlot0);
      resultMatrixSignificance0.meanWidthTipText();
      resultMatrixGnuPlot0.globalInfo();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.toStringKey();
      resultMatrixHTML0.getDefaultRowNameWidth();
      assertEquals(0, resultMatrixHTML0.getMeanWidth());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.873986707618567
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(3598, 0);
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      vector0.iterator();
      ResultMatrixLatex resultMatrixLatex1 = new ResultMatrixLatex();
      boolean boolean0 = resultMatrixLatex1.isMean(5724);
      assertTrue(boolean0);
      
      int int0 = ResultMatrix.SIGNIFICANCE_WIN;
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.getRevision();
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertTrue(resultMatrixGnuPlot0.getDefaultPrintRowNames());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(2, resultMatrixGnuPlot0.getStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getDefaultMeanWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.9025538185947704
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_EnumerateColNames = false;
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      vector0.iterator();
      resultMatrixLatex0.m_HeaderKeys = vector0;
      boolean boolean0 = resultMatrixLatex0.isMean(0);
      assertFalse(boolean0);
      
      int int0 = resultMatrixLatex0.getSignificanceWidth();
      assertEquals(0, int0);
      assertEquals(0, resultMatrixLatex0.getRowNameWidth());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.m_StdDev = null;
      resultMatrixGnuPlot0.getRevision();
      assertTrue(resultMatrixGnuPlot0.getPrintColNames());
      assertEquals(2, resultMatrixGnuPlot0.getDefaultStdDevPrec());
      assertEquals(0, resultMatrixGnuPlot0.getCountWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertFalse(resultMatrixGnuPlot0.getShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.337165041277663
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(0, 0);
      resultMatrixHTML0.getDefaultPrintRowNames();
      resultMatrixHTML0.clearHeader();
      resultMatrixHTML0.getColNameWidth();
      resultMatrixHTML0.getSignificanceWidth();
      resultMatrixHTML0.setPrintRowNames(true);
      resultMatrixHTML0.removeFilterName((String) null);
      resultMatrixHTML0.toStringSummary();
      resultMatrixHTML0.colNameWidthTipText();
      resultMatrixHTML0.enumerateRowNamesTipText();
      resultMatrixHTML0.getDefaultPrintColNames();
      resultMatrixHTML0.getEnumerateRowNames();
      resultMatrixHTML0.getDefaultEnumerateColNames();
      int int0 = 1;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(0, 0);
      // Undeclared exception!
      try { 
        resultMatrixLatex0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.9831555865510544
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = 2;
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(2, 2);
      double[][] doubleArray0 = new double[0][2];
      resultMatrixSignificance0.m_StdDev = doubleArray0;
      int int1 = 2208;
      resultMatrixSignificance0.doubleToString((-417.3594217387), 2208);
      int int2 = 34;
      Vector<Integer> vector0 = new Vector<Integer>();
      resultMatrixSignificance0.m_HeaderKeys = vector0;
      resultMatrixSignificance0.setRowNameWidth(34);
      int int3 = 908;
      resultMatrixSignificance0.isAverage(908);
      ResultMatrixPlainText resultMatrixPlainText0 = null;
      try {
        resultMatrixPlainText0 = new ResultMatrixPlainText(resultMatrixSignificance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.186096506861489
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.m_PrintColNames = true;
      resultMatrixSignificance0.getDefaultShowAverage();
      int[][] intArray0 = new int[1][9];
      int[] intArray1 = new int[6];
      intArray1[0] = 2;
      resultMatrixSignificance0.m_RemoveFilterName = true;
      intArray1[1] = 0;
      intArray1[2] = 1;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 2;
      resultMatrixSignificance0.listOptions();
      intArray0[0] = intArray1;
      resultMatrixSignificance0.setSummary(intArray0, intArray0);
      resultMatrixSignificance0.setShowAverage(false);
      resultMatrixSignificance0.m_StdDevWidth = 2;
      String string0 = resultMatrixSignificance0.doubleToString(10.0, 0);
      assertEquals("10.", string0);
      
      String string1 = resultMatrixSignificance0.padString("(", 2, false);
      assertEquals("( ", string1);
      
      resultMatrixSignificance0.getDefaultCountWidth();
      resultMatrixSignificance0.setColNameWidth(0);
      int int0 = resultMatrixSignificance0.getVisibleColCount();
      assertEquals(1, int0);
      
      resultMatrixSignificance0.rowNameWidthTipText();
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setEnumerateColNames(true);
      resultMatrixLatex0.clearHeader();
      resultMatrixLatex0.globalInfo();
      assertTrue(resultMatrixLatex0.getEnumerateColNames());
      assertTrue(resultMatrixLatex0.getPrintRowNames());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.805856357615832
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.setShowStdDev(false);
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex(resultMatrixCSV0);
      int[] intArray0 = new int[8];
      resultMatrixPlainText0.listOptions();
      intArray0[0] = 2;
      resultMatrixPlainText0.doubleToString(2, 1102);
      intArray0[1] = 1;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 442;
      Vector<String> vector0 = new Vector<String>();
      resultMatrixPlainText0.m_HeaderKeys = vector0;
      vector0.add(")");
      intArray0[5] = 1564;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) resultMatrixCSV0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      vector0.toArray(objectArray0);
      intArray0[6] = 1;
      intArray0[7] = 1;
      resultMatrixLatex0.m_RankingDiff = intArray0;
      resultMatrixLatex0.toStringRanking();
      String string0 = resultMatrixCSV0.getRowName(1395);
      assertNull(string0);
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixLatex0);
      resultMatrixGnuPlot0.getDefaultEnumerateColNames();
      assertEquals(0, resultMatrixGnuPlot0.getMeanWidth());
      assertEquals(0, resultMatrixGnuPlot0.getSignificanceWidth());
      assertEquals(25, resultMatrixGnuPlot0.getRowNameWidth());
      assertFalse(resultMatrixGnuPlot0.getDefaultShowAverage());
      assertEquals(1, resultMatrixGnuPlot0.getColCount());
      assertFalse(resultMatrixGnuPlot0.getShowStdDev());
      assertTrue(resultMatrixGnuPlot0.getEnumerateColNames());
      assertEquals(2, resultMatrixGnuPlot0.getMeanPrec());
      assertEquals(5, resultMatrixGnuPlot0.getCountWidth());
      assertFalse(resultMatrixGnuPlot0.getEnumerateRowNames());
      assertEquals(0, resultMatrixGnuPlot0.getStdDevWidth());
      assertEquals(1, resultMatrixGnuPlot0.getRowCount());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.228730695852141
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.doubleToString(2, 0);
      resultMatrixPlainText0.getRevision();
      assertEquals(1, resultMatrixPlainText0.getVisibleColCount());
      
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(2, 2);
      resultMatrixGnuPlot0.toStringMatrix();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(1, 3);
      String string0 = resultMatrixCSV0.toStringMatrix();
      assertEquals("Dataset,[1]\nrow0,''\nrow1,''\nrow2,''\n'[v/ /*]',''\n", string0);
      
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(resultMatrixGnuPlot0);
      resultMatrixHTML0.globalInfo();
      resultMatrixCSV0.setRowHidden(0, true);
      assertEquals(2, resultMatrixCSV0.getVisibleRowCount());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.8707533410548467
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixGnuPlot0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ")";
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      try { 
        resultMatrixLatex0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.3471811016013646
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "F+|a+*gwlacMDUI(a";
      stringArray0[1] = "}\n";
      stringArray0[2] = "ga?bv~WtM";
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearSummary();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Vector<Object>> vector2 = new Vector<Vector<Object>>();
      vector2.add(vector1);
      resultMatrixPlainText0.listOptions();
      resultMatrixPlainText0.setOptions((String[]) null);
      resultMatrixPlainText0.padString("Generates the output as plain text (for fixed width fonts).", (-1863), true);
      resultMatrixPlainText0.getShowAverage();
      int int0 = resultMatrixPlainText0.getRowCount();
      assertEquals(5, resultMatrixPlainText0.getStdDevPrec());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.439320670932715
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      resultMatrixCSV0.setMeanWidth(0);
      assertEquals(1, resultMatrixCSV0.getVisibleColCount());
      assertEquals(1, resultMatrixCSV0.getVisibleRowCount());
      
      stringArray0[1] = "v";
      stringArray0[2] = "fq3td^JZmnW5";
      stringArray0[3] = " ";
      stringArray0[4] = "plot";
      stringArray0[5] = "*";
      stringArray0[6] = "[";
      stringArray0[7] = "v";
      stringArray0[8] = "[";
      ResultMatrixCSV.main(stringArray0);
      resultMatrixCSV0.m_PrintRowNames = false;
      resultMatrixCSV0.padString("plot", 0, true);
      resultMatrixCSV0.getColOrder();
      resultMatrixCSV0.toStringRanking();
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(resultMatrixCSV0);
      resultMatrixSignificance0.setCountWidth(1);
      resultMatrixSignificance0.getDefaultRowNameWidth();
      resultMatrixSignificance0.getCountWidth();
      resultMatrixSignificance0.getDefaultPrintColNames();
      resultMatrixSignificance0.getDefaultEnumerateRowNames();
      resultMatrixCSV0.setStdDevPrec((-1950));
      String[][] stringArray1 = new String[9][7];
      stringArray1[0] = stringArray0;
      String[] stringArray2 = new String[9];
      stringArray2[0] = " ";
      stringArray2[1] = "[";
      stringArray2[2] = "]couGS9'&";
      stringArray2[3] = "*";
      stringArray2[4] = "v";
      stringArray2[5] = "fq3td^JZmnW5";
      stringArray2[6] = "fq3td^JZmnW5";
      stringArray2[7] = "[";
      stringArray2[8] = " ";
      stringArray1[1] = stringArray2;
      stringArray1[2] = stringArray0;
      stringArray1[3] = stringArray0;
      stringArray1[4] = stringArray0;
      stringArray1[5] = stringArray0;
      stringArray1[6] = stringArray0;
      String[] stringArray3 = new String[2];
      stringArray3[0] = "v";
      stringArray3[1] = "# display it in a window:\n";
      stringArray1[7] = stringArray3;
      stringArray1[8] = stringArray0;
      resultMatrixSignificance0.getColSize(stringArray1, 1448, true, true);
      assertEquals(1, resultMatrixSignificance0.getCountWidth());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.8428806153171315
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance();
      resultMatrixSignificance0.getSummaryTitle(0);
      resultMatrixSignificance0.getDisplayCol(0);
      resultMatrixSignificance0.getDefaultMeanWidth();
      resultMatrixSignificance0.getColOrder();
      resultMatrixSignificance0.getDefaultShowStdDev();
      ResultMatrixLatex resultMatrixLatex0 = null;
      try {
        resultMatrixLatex0 = new ResultMatrixLatex(523, (-1066));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.034417934231353
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringKey();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      int[] intArray4 = new int[1];
      intArray4[0] = 1;
      intArray3[5] = intArray4;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setSummary(intArray0, intArray3);
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.toStringSummary();
      resultMatrixCSV0.clearSummary();
      resultMatrixPlainText0.getRowHidden(50);
      assertEquals(2, resultMatrixPlainText0.getMeanWidth());
      
      int int0 = resultMatrixLatex0.getDisplayCol(0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.992400521059247
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(0, 0);
      resultMatrixCSV0.LOSS_STRING = "";
      resultMatrixCSV0.setCountWidth(0);
      resultMatrixCSV0.clear();
      resultMatrixCSV0.m_StdDevWidth = 0;
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.m_ColHidden = null;
      int[][] intArray0 = new int[5][1];
      int[] intArray1 = new int[4];
      intArray1[0] = 0;
      intArray1[1] = 0;
      intArray1[2] = 0;
      intArray1[3] = 2;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[2];
      intArray2[0] = 2;
      intArray2[1] = 0;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      intArray3[0] = 1;
      intArray3[1] = 0;
      intArray3[2] = 1;
      intArray3[3] = 1;
      intArray3[4] = 0;
      intArray3[5] = 0;
      intArray3[6] = 1;
      intArray3[7] = 0;
      intArray3[8] = 2612;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[5];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 2;
      intArray4[4] = 50;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[7];
      intArray5[0] = 2;
      intArray5[1] = 2612;
      intArray5[2] = 2612;
      intArray5[3] = (-903);
      intArray5[4] = 0;
      intArray5[5] = 1;
      intArray5[6] = 0;
      intArray0[4] = intArray5;
      resultMatrixCSV0.m_NonSigWins = intArray0;
      resultMatrixCSV0.m_EnumerateRowNames = false;
      resultMatrixCSV0.listOptions();
      assertFalse(resultMatrixCSV0.getShowStdDev());
      
      resultMatrixCSV0.m_ShowStdDev = true;
      resultMatrixCSV0.m_ColNameWidth = 0;
      resultMatrixCSV0.getRevision();
      resultMatrixCSV0.getSummaryTitle(0);
      resultMatrixCSV0.getColNameWidth();
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(0, 0);
      resultMatrixGnuPlot0.getDefaultEnumerateRowNames();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDefaultRowNameWidth();
      assertEquals(0, resultMatrixPlainText0.getColNameWidth());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.6455156028485933
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixPlainText0);
      resultMatrixCSV0.m_EnumerateColNames = false;
      assertEquals(2, resultMatrixCSV0.getMeanPrec());
      
      resultMatrixCSV0.m_MeanPrec = 3123;
      resultMatrixPlainText0.setMeanPrec(2);
      resultMatrixPlainText0.m_PrintRowNames = true;
      resultMatrixCSV0.padString("5.70001 > 5.7 ? ", (-1), true);
      resultMatrixPlainText0.clear();
      resultMatrixCSV0.setRowHidden(2, true);
      resultMatrixCSV0.getShowAverage();
      resultMatrixPlainText0.clearRanking();
      resultMatrixPlainText0.setPrintColNames(false);
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(3123, 0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "(";
      resultMatrixSignificance0.clearRanking();
      stringArray0[1] = "v";
      stringArray0[2] = " ";
      stringArray0[3] = "v";
      stringArray0[4] = ")";
      stringArray0[5] = " ";
      ResultMatrixSignificance.main(stringArray0);
      resultMatrixSignificance0.getDefaultShowStdDev();
      resultMatrixCSV0.setRemoveFilterName(false);
      resultMatrixPlainText0.getOptions();
      resultMatrixPlainText0.getEnumerateColNames();
      resultMatrixPlainText0.globalInfo();
      resultMatrixCSV0.getDefaultPrintColNames();
      resultMatrixPlainText0.getRevision();
      resultMatrixSignificance0.getCount(1);
      resultMatrixSignificance0.padString("6afTuPlzh1S,a&ju~", 3123);
      assertEquals(40, resultMatrixSignificance0.getRowNameWidth());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.0008303170414576
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.getDisplayName();
      resultMatrixPlainText0.setMeanPrec(499);
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      resultMatrixPlainText0.setStdDevPrec(0);
      booleanArray0[2] = false;
      resultMatrixPlainText0.setMean(1, 1588, 0);
      resultMatrixPlainText0.getSignificanceCount(1, (-898));
      resultMatrixPlainText0.stdDevWidthTipText();
      assertEquals(499, resultMatrixPlainText0.getMeanPrec());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.521590497214403
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.RIGHT_PARENTHESES = "T1@";
      resultMatrixPlainText0.padString("T1@", 1175);
      resultMatrixPlainText0.LEFT_PARENTHESES = "T1@";
      resultMatrixPlainText0.toStringMatrix();
      int[][] intArray0 = new int[2][9];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      int[][] intArray3 = new int[8][1];
      intArray3[0] = intArray2;
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.m_MeanWidth = 2;
      resultMatrixPlainText0.assign(resultMatrixLatex0);
      intArray3[1] = intArray1;
      intArray3[2] = intArray2;
      intArray3[3] = intArray1;
      intArray3[4] = intArray2;
      intArray3[6] = intArray2;
      intArray3[7] = intArray2;
      resultMatrixPlainText0.setSummary(intArray0, intArray3);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "(";
      ResultMatrixGnuPlot.main(stringArray0);
      resultMatrixPlainText0.getMeanPrec();
      resultMatrixPlainText0.getSignificanceCount(2, 1175);
      assertEquals(0, resultMatrixPlainText0.getCountWidth());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.252956529634416
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      ResultMatrixLatex resultMatrixLatex0 = new ResultMatrixLatex();
      resultMatrixLatex0.setStdDevWidth(0);
      resultMatrixLatex0.m_PrintRowNames = false;
      resultMatrixLatex0.setRemoveFilterName(true);
      resultMatrixLatex0.toArray();
      ResultMatrixHTML resultMatrixHTML0 = new ResultMatrixHTML(2, 2);
      resultMatrixLatex0.assign(resultMatrixHTML0);
      resultMatrixHTML0.setMeanPrec(2);
      resultMatrixHTML0.isStdDev((-1007));
      resultMatrixLatex0.setMeanPrec(527);
      // Undeclared exception!
      try { 
        resultMatrixHTML0.toStringHeader();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.0370801618679657
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "F+|a+*gwlacMDUI(a";
      stringArray0[1] = "}\n";
      stringArray0[2] = "ga?bv~WtM";
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearSummary();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(2, 1576);
      resultMatrixCSV0.setMeanPrec(23);
      resultMatrixCSV0.isStdDev((-1256));
      resultMatrixCSV0.getDefaultRowNameWidth();
      boolean boolean0 = false;
      resultMatrixPlainText0.setPrintColNames(false);
      int int0 = 366;
      ResultMatrixCSV resultMatrixCSV1 = null;
      try {
        resultMatrixCSV1 = new ResultMatrixCSV((-1256), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.3471811016013646
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "F+|a+*gwlacMDUI(a";
      stringArray0[1] = "}\n";
      stringArray0[2] = "ga?bv~WtM";
      Vector<Vector<Object>> vector0 = new Vector<Vector<Object>>();
      ResultMatrixPlainText resultMatrixPlainText0 = new ResultMatrixPlainText();
      resultMatrixPlainText0.clearSummary();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Vector<Object>> vector2 = new Vector<Vector<Object>>();
      vector2.add(vector1);
      resultMatrixPlainText0.listOptions();
      resultMatrixPlainText0.setOptions((String[]) null);
      resultMatrixPlainText0.padString("Generates the output as plain text (for fixed width fonts).", (-1859), false);
      resultMatrixPlainText0.getShowAverage();
      resultMatrixPlainText0.getRowCount();
      assertEquals(5, resultMatrixPlainText0.getStdDevPrec());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.6042175808819583
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      ResultMatrixSignificance resultMatrixSignificance0 = new ResultMatrixSignificance(0, 0);
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot(resultMatrixSignificance0);
      ResultMatrixSignificance resultMatrixSignificance1 = new ResultMatrixSignificance();
      ResultMatrixCSV resultMatrixCSV0 = new ResultMatrixCSV(resultMatrixSignificance1);
      int[][] intArray0 = new int[4][2];
      int[] intArray1 = new int[8];
      intArray1[0] = 1;
      intArray1[1] = 0;
      intArray1[0] = 2;
      intArray1[3] = 2;
      intArray1[4] = 0;
      intArray1[5] = 1;
      intArray1[6] = 26;
      intArray1[7] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[8];
      intArray2[0] = 1;
      intArray2[1] = 26;
      intArray2[2] = 1;
      intArray2[3] = 1;
      intArray2[4] = 2;
      intArray2[5] = 2;
      intArray2[6] = 0;
      intArray2[7] = 1;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[1];
      intArray3[0] = 2;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      intArray4[0] = 0;
      intArray4[1] = 1;
      intArray4[2] = 0;
      intArray4[3] = 2;
      intArray4[4] = 1;
      intArray4[5] = 1;
      intArray4[6] = 2;
      intArray4[7] = 0;
      intArray0[3] = intArray4;
      // Undeclared exception!
      try { 
        resultMatrixGnuPlot0.setRanking(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.experiment.ResultMatrix", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.679706038839934
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ResultMatrixGnuPlot resultMatrixGnuPlot0 = new ResultMatrixGnuPlot();
      resultMatrixGnuPlot0.setColNameWidth(0);
      assertEquals(0, resultMatrixGnuPlot0.getColNameWidth());
  }
}
