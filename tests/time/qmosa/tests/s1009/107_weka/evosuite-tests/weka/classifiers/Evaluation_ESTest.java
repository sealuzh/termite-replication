/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 21:07:13 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Properties;
import java.util.Random;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.NormalizedPolyKernel;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiClassClassifier;
import weka.classifiers.meta.MultiClassClassifierUpdateable;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.RandomForest;
import weka.classifiers.trees.RandomTree;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.PoissonEstimator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.934480219304384
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      int[] intArray0 = new int[1];
      intArray0[0] = 445;
      Instance instance0 = BallNode.calcCentroidPivot(445, 16, intArray0, instances1);
      BallNode ballNode0 = new BallNode(1847, 16, 16, instance0, 16);
      SparseInstance sparseInstance0 = new SparseInstance(instance0);
      Evaluation evaluation1 = new Evaluation(instances1);
      DenseInstance denseInstance0 = new DenseInstance(instance0);
      evaluation0.toMatrixString("@relation");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 105.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1847, doubleArray0);
      binarySparseInstance0.replaceMissingValues(doubleArray0);
      double double0 = evaluation1.SFPriorEntropy();
      evaluation1.weightedRecall();
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      double double1 = evaluation2.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Evaluation evaluation3 = new Evaluation(instances1);
      double double2 = evaluation3.fMeasure(10);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation3.sizeOfPredictedRegions();
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      Evaluation.main((String[]) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      RandomTree randomTree0 = new RandomTree();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.KBMeanInformation();
      evaluation0.kappa();
      evaluation0.toSummaryString(false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1372.700664), doubleArray0);
      try { 
        regressionByDiscretization0.predictIntervals(binarySparseInstance0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1133905679419227
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader2.getStructure();
      Instance instance0 = BallNode.calcCentroidPivot(2219, (-1035), (int[]) null, instances0);
      BallNode ballNode0 = new BallNode((-1035), 3082, 15, instance0, 105);
      BallNode.calcPivot(ballNode0, ballNode0, instances0);
      SparseInstance sparseInstance0 = new SparseInstance(instance0);
      Evaluation evaluation1 = new Evaluation(instances1);
      try { 
        evaluation1.evaluateModelOnce((double[]) null, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3042259383512906
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      int[] intArray0 = new int[1];
      intArray0[0] = 445;
      Instance instance0 = BallNode.calcCentroidPivot(445, 16, intArray0, instances1);
      BallNode ballNode0 = new BallNode(1847, 16, 16, instance0, 16);
      Instance instance1 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      SparseInstance sparseInstance0 = new SparseInstance(instance1);
      Evaluation evaluation1 = new Evaluation(instances1);
      ZeroR zeroR0 = new ZeroR();
      AbstractClassifier.runClassifier(zeroR0, (String[]) null);
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      TextDirectoryLoader textDirectoryLoader2 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances2 = null;
      try { 
        Evaluation.handleCostOption("s}C", 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.643670278538215
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      ArffLoader arffLoader0 = new ArffLoader();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection3 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection4 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection5 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(cVParameterSelection2);
      CVParameterSelection cVParameterSelection6 = new CVParameterSelection();
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[5];
      String[] stringArray0 = new String[0];
      AbstractClassifier.runClassifier(cVParameterSelection4, stringArray0);
      cVParameterSelectionArray0[0] = cVParameterSelection4;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      String string0 = cVParameterSelection2.toString();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.pctUnclassified();
      evaluation0.incorrect();
      evaluation0.confusionMatrix();
      evaluation0.relativeAbsoluteError();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      evaluation0.updateMargins(doubleArray0, 0, Double.NaN);
      evaluation0.incorrect();
      ZeroR zeroR0 = new ZeroR();
      String string1 = Evaluation.wekaStaticWrapper(zeroR0, ".gz");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1360414599491286
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      evaluation0.SFMeanPriorEntropy();
      evaluation0.toClassDetailsString();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      try { 
        evaluation0.evaluateModel((Classifier) regressionByDiscretization0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.7675577434166407
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      Evaluation.main((String[]) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      RandomTree randomTree0 = new RandomTree();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      evaluation0.weightedAreaUnderPRC();
      evaluation0.kappa();
      evaluation0.toSummaryString(false);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1372.700664), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) costSensitiveClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.509408633807204
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection3 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection4 = new CVParameterSelection();
      cVParameterSelection0.setClassifier(cVParameterSelection3);
      CVParameterSelection cVParameterSelection5 = new CVParameterSelection();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ".bsi";
      AbstractClassifier.runClassifier(cVParameterSelection2, stringArray0);
      cVParameterSelection5.toString();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Evaluation.handleCostOption((String) null, 476);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation1.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.incorrect();
      evaluation2.confusionMatrix();
      evaluation0.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      MockRandom mockRandom0 = new MockRandom((-1134L));
      Instances instances1 = new Instances(instances0);
      try { 
        evaluation0.crossValidateModel((Classifier) sGDText0, instances1, 3842, (Random) mockRandom0, (Object[]) sGDText0.TAGS_SELECTION);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2731738319283363
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.clone();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      evaluation0.toSummaryString();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      try { 
        evaluation0.evaluateModel((Classifier) classificationViaRegression1, instances0, (Object[]) regressionByDiscretization1.TAGS_ESTIMATOR);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2836498400459764
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedTruePositiveRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[9];
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ".bsi");
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ".arff");
      doubleArray0[0] = 105.0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      textDirectoryLoader0.setOptions(stringArray0);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      evaluation0.toSummaryString("ese", true);
      double double1 = evaluation0.priorEntropy();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3074153952359477
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[4];
      cVParameterSelectionArray0[0] = cVParameterSelection0;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      cVParameterSelection1.getOptions();
      cVParameterSelection0.globalInfo();
      cVParameterSelectionArray0[2] = cVParameterSelection1;
      evaluation0.updateNumericScores((double[]) null, (double[]) null, (-1504.95));
      double double0 = evaluation0.weightedPrecision();
      double double1 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.addNumericTrainClass(2, 1920.0);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.69229272428174
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      capabilities0.enableAllAttributes();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("e;cWH'^>#jYg8");
      testInstances0.clone();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[4];
      cVParameterSelectionArray0[0] = cVParameterSelection0;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      cVParameterSelection0.globalInfo();
      cVParameterSelectionArray0[2] = cVParameterSelection0;
      double[] doubleArray0 = new double[1];
      multiClassClassifierUpdateable0.setRandomWidthFactor((-4.57826535));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-461.0), doubleArray0);
      binarySparseInstance0.replaceMissingValues(doubleArray0);
      evaluation0.SFPriorEntropy();
      evaluation0.weightedRecall();
      evaluation0.SFMeanEntropyGain();
      evaluation0.SFSchemeEntropy();
      evaluation0.numFalseNegatives((-1));
      MockRandom mockRandom0 = new MockRandom();
      try { 
        evaluation0.crossValidateModel((Classifier) multiClassClassifier0, instances0, 0, (Random) mockRandom0, (Object[]) multiClassClassifierUpdateable0.TAGS_METHOD);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      Object object0 = new Object();
      Object object1 = new Object();
      MockRandom mockRandom0 = new MockRandom(2);
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) mockRandom0;
      try { 
        evaluation0.crossValidateModel((Classifier) cVParameterSelection0, (Instances) null, 453, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString();
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(1847.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1847
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.clone();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[4];
      cVParameterSelectionArray0[0] = cVParameterSelection0;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      cVParameterSelection0.globalInfo();
      cVParameterSelectionArray0[2] = cVParameterSelection1;
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-461.0), doubleArray0);
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.0109555036194973
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      ArffLoader arffLoader0 = new ArffLoader();
      BayesNet bayesNet0 = new BayesNet();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection3 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection4 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection5 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection6 = new CVParameterSelection();
      cVParameterSelection6.getRevision();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      multiClassClassifier0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.clone();
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[5];
      cVParameterSelectionArray0[0] = cVParameterSelection4;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      cVParameterSelection2.toString();
      cVParameterSelectionArray0[2] = cVParameterSelection6;
      cVParameterSelectionArray0[3] = cVParameterSelection2;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.597669154853748
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      capabilities0.enableAllAttributes();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("@relation");
      testInstances0.clone();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      cVParameterSelection0.globalInfo();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (-461.0);
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (-461.0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      binarySparseInstance0.replaceMissingValues(doubleArray0);
      double double0 = evaluation0.SFPriorEntropy();
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      evaluation1.weightedRecall();
      double double1 = evaluation1.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances1);
      double double2 = evaluation2.SFMeanEntropyGain();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.592965132436166
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      capabilities1.enableAllAttributes();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("e;cWH'^>#jYg8");
      testInstances0.clone();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[4];
      cVParameterSelectionArray0[0] = cVParameterSelection0;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      cVParameterSelection0.globalInfo();
      cVParameterSelectionArray0[2] = cVParameterSelection0;
      double[] doubleArray0 = new double[1];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-461.0), doubleArray0);
      binarySparseInstance0.replaceMissingValues(doubleArray0);
      double double0 = evaluation0.SFPriorEntropy();
      double double1 = evaluation0.weightedRecall();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.weightedTrueNegativeRate();
      double double3 = evaluation0.SFMeanEntropyGain();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.SFSchemeEntropy();
      assertEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.327533996181044
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      int[] intArray0 = new int[1];
      intArray0[0] = 445;
      Instance instance0 = BallNode.calcCentroidPivot(445, 16, intArray0, instances1);
      BallNode ballNode0 = new BallNode(1847, 16, 16, instance0, 16);
      Instance instance1 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      SparseInstance sparseInstance0 = new SparseInstance(instance1);
      Evaluation evaluation1 = new Evaluation(instances1);
      DenseInstance denseInstance0 = new DenseInstance(instance1);
      denseInstance0.toStringMaxDecimalDigits(93);
      double double0 = evaluation1.weightedTruePositiveRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 105.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1847, doubleArray0);
      binarySparseInstance0.replaceMissingValues(doubleArray0);
      double double1 = evaluation1.SFPriorEntropy();
      assertNotEquals(double1, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances1);
      double double2 = evaluation1.weightedMatthewsCorrelation();
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = regressionByDiscretization0.getCapabilities();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      Capabilities capabilities1 = adaBoostM1_0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate("e;cWH'^>#jYg8");
      TestInstances testInstances2 = (TestInstances)testInstances0.clone();
      TestInstances.forCapabilities(capabilities1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      testInstances2.generate("e;cWH'^>#jYg8");
      testInstances0.clone();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      Instances instances1 = testInstances1.getData();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances1, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1133905679419227
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedTruePositiveRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 105.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[8] = (double) 1847;
      evaluation0.pctUnclassified();
      try { 
        CostMatrix.parseMatlab("Evaluation: No confusion matrix possible!");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.044804502385667
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      ArffLoader arffLoader0 = new ArffLoader();
      BayesNet bayesNet0 = new BayesNet();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection3 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection4 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection5 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection6 = new CVParameterSelection();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Capabilities capabilities0 = multiClassClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.clone();
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[5];
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".arff.gz";
      stringArray0[1] = ".arff";
      stringArray0[2] = ".arff";
      stringArray0[3] = "@data";
      stringArray0[4] = ".arff";
      stringArray0[5] = ".arff.gz";
      stringArray0[6] = "@data";
      stringArray0[7] = ".bsi";
      AbstractClassifier.runClassifier(cVParameterSelection2, stringArray0);
      cVParameterSelectionArray0[0] = cVParameterSelection4;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      cVParameterSelection2.toString();
      cVParameterSelectionArray0[2] = cVParameterSelection6;
      cVParameterSelectionArray0[3] = cVParameterSelection2;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      Instances instances1 = new Instances(instances0, 498);
      Evaluation evaluation1 = new Evaluation(instances1, (CostMatrix) null);
      double double0 = evaluation0.pctIncorrect();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      regressionByDiscretization0.getCapabilities();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.getCapabilities();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "{eY`\"HF8~PGwmp");
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      evaluation0.getDiscardPredictions();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate("");
      cVParameterSelection0.toString();
      testInstances0.getRelationalClassFormat();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-204));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.561624865836775
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Evaluation.handleCostOption("", 3129);
      ArffLoader arffLoader0 = new ArffLoader();
      BayesNet bayesNet0 = new BayesNet();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection3 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection4 = new CVParameterSelection();
      FileSystemHandling.createFolder(evoSuiteFile0);
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "getTechnicalInformation");
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = multiClassClassifierUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      cVParameterSelection3.toString();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toClassDetailsString("R#xF^A$>w_'ihCKO$");
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 3;
      int[] intArray0 = new int[5];
      intArray0[0] = 1;
      intArray0[1] = (-533);
      intArray0[2] = 11;
      intArray0[3] = 1;
      intArray0[4] = 2;
      SparseInstance sparseInstance0 = new SparseInstance((-2655.3504592606037), doubleArray0, intArray0, (-1));
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      C45Loader c45Loader0 = new C45Loader();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      String string0 = Evaluation.makeOptionString(regressionByDiscretization0, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      evaluation0.areaUnderPRC(100000);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "P?hwYzJ&fhrSjw?+3I";
      stringArray0[1] = "First attribute: ";
      stringArray0[2] = "'LK.0NT>YHTz~5C9";
      stringArray0[3] = "RuucvmjN,-m:p";
      try { 
        Evaluation.evaluateModel((Classifier) serializedClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.misc.SerializedClassifier:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -model <filename>
         // \tThe file containing the serialized model.
         // \t(required)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable1 = new MultiClassClassifierUpdateable();
      AdaBoostM1 adaBoostM1_1 = new AdaBoostM1();
      AdaBoostM1 adaBoostM1_2 = new AdaBoostM1();
      adaBoostM1_2.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.clone();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      cVParameterSelection0.getOptions();
      cVParameterSelection1.globalInfo();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-3241.305);
      doubleArray0[6] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3241.305), doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) multiClassClassifier0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6533947674590759
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTruePositiveRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 105.0;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@relation";
      textDirectoryLoader0.setOptions(stringArray0);
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.496667209271725
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      ArffLoader arffLoader0 = new ArffLoader();
      BayesNet bayesNet0 = new BayesNet();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection3 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection4 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection5 = new CVParameterSelection();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, (String) null);
      CVParameterSelection cVParameterSelection6 = new CVParameterSelection();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Capabilities capabilities0 = multiClassClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.clone();
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[5];
      cVParameterSelectionArray0[0] = cVParameterSelection4;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      cVParameterSelection2.toString();
      cVParameterSelectionArray0[2] = cVParameterSelection6;
      cVParameterSelectionArray0[3] = cVParameterSelection2;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.toClassDetailsString("2i$L");
      cVParameterSelectionArray0[4] = cVParameterSelection5;
      CVParameterSelection[] cVParameterSelectionArray1 = null;
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9270169235219075
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toClassDetailsString("@relation");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation1.weightedTruePositiveRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = 105.0;
      doubleArray0[1] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[8] = (double) 1847;
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Evaluation.handleCostOption("", 0);
      ArffLoader arffLoader0 = new ArffLoader();
      BayesNet bayesNet0 = new BayesNet();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection1 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection2 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection3 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection4 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection5 = new CVParameterSelection();
      CVParameterSelection cVParameterSelection6 = new CVParameterSelection();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      Capabilities capabilities0 = multiClassClassifier0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Instances instances0 = testInstances0.generate("weka/core/Capabilities.props");
      testInstances0.clone();
      CVParameterSelection[] cVParameterSelectionArray0 = new CVParameterSelection[5];
      cVParameterSelectionArray0[0] = cVParameterSelection4;
      cVParameterSelectionArray0[1] = cVParameterSelection0;
      cVParameterSelection2.toString();
      cVParameterSelectionArray0[2] = cVParameterSelection6;
      cVParameterSelectionArray0[3] = cVParameterSelection2;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Logistic logistic0 = new Logistic();
      Capabilities capabilities0 = logistic0.getCapabilities();
      Capabilities capabilities1 = capabilities0.getAttributeCapabilities();
      TestInstances.forCapabilities(capabilities0);
      PoissonEstimator poissonEstimator0 = new PoissonEstimator();
      poissonEstimator0.getCapabilities();
      NormalizedPolyKernel normalizedPolyKernel0 = new NormalizedPolyKernel();
      Capabilities capabilities2 = normalizedPolyKernel0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities2);
      TestInstances.forCapabilities(capabilities1);
      testInstances0.clone();
      String[] stringArray1 = new String[0];
      try { 
        Evaluation.evaluateModel("weka/core/Capabilities.props", stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name weka/core/Capabilities.props.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("@relation");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-59);
      byteArray0[1] = (byte) (-69);
      byteArray0[2] = (byte) (-77);
      byteArray0[3] = (byte)49;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      databaseLoader0.getStructure();
      int int0 = 0;
      try { 
        Evaluation.handleCostOption("@relation", 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\u017B\uFFFD1\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.845424123004716
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString(".bsi");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader1.getStructure();
      int[] intArray0 = new int[1];
      intArray0[0] = 445;
      Instance instance0 = BallNode.calcCentroidPivot(445, 16, intArray0, instances1);
      BallNode ballNode0 = new BallNode(1847, 16, 16, instance0, 16);
      Instance instance1 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      SparseInstance sparseInstance0 = new SparseInstance(instance1);
      Evaluation evaluation1 = new Evaluation(instances1);
      DenseInstance denseInstance0 = new DenseInstance(instance1);
      denseInstance0.toStringMaxDecimalDigits(93);
      evaluation1.weightedTruePositiveRate();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 105.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1847, doubleArray0);
      binarySparseInstance0.replaceMissingValues(doubleArray0);
      double double0 = evaluation1.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.weightedRecall();
      Evaluation evaluation3 = new Evaluation(instances1, (CostMatrix) null);
      double double1 = evaluation3.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Evaluation evaluation4 = new Evaluation(instances1);
      double double2 = evaluation4.fMeasure(10);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6169790877399772
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("Average Cost                       ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.SFMeanSchemeEntropy();
      RandomForest randomForest0 = new RandomForest();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation.makeOptionString(randomForest0, true);
      evaluation0.toClassDetailsString();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = 33;
      intArray0[2] = (-2);
      intArray0[3] = (-2);
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(intArray0, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.2613403257547118
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "setOptions";
      stringArray0[1] = ".bsi";
      Evaluation.main(stringArray0);
      evaluation0.SFMeanPriorEntropy();
      evaluation0.toClassDetailsString();
      RandomTree randomTree0 = new RandomTree();
      evaluation0.equals(randomTree0);
      try { 
        Evaluation.evaluateModel("makeCopies", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name makeCopies.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1429865799476846
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.enumerateInstances();
      Evaluation.main((String[]) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFMeanPriorEntropy();
      RandomTree randomTree0 = new RandomTree();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MockRandom mockRandom0 = new MockRandom((-2393L));
      RandomTree randomTree1 = new RandomTree();
      try { 
        Evaluation.evaluateModel((Classifier) randomTree1, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.RandomTree:
         // 
         // -K <number of attributes>
         // \tNumber of attributes to randomly investigate
         // \t(<0 = int(log_2(#attributes)+1)).
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // -S <num>
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the tree, 0 for unlimited.
         // \t(default 0)
         // -N <num>
         // \tNumber of folds for backfitting (default 0, no backfitting).
         // -U
         // \tAllow unclassified instances.
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      instances0.enumerateInstances();
      MultiClassClassifier multiClassClassifier0 = new MultiClassClassifier();
      MultiClassClassifierUpdateable multiClassClassifierUpdateable0 = new MultiClassClassifierUpdateable();
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      ArrayList<DenseInstance> arrayList0 = new ArrayList<DenseInstance>();
      instances0.addAll((Collection<? extends Instance>) arrayList0);
      Capabilities capabilities0 = adaBoostM1_0.getCapabilities();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("weka/core/Capabilities.props", vector0, protectedProperties2);
      capabilities0.testWithFail(attribute0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.clone();
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.toString();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      ClassificationViaRegression classificationViaRegression1 = new ClassificationViaRegression();
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.coverageOfTestCasesByPredictedRegions();
      double double2 = evaluation0.weightedAreaUnderROC();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("3d1A<RR|3]", arrayList0, 3932);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation.getGlobalInfo(decisionStump0);
      String[] stringArray0 = new String[5];
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XOXx;KxY";
      stringArray0[1] = "XOXx;KxY";
      stringArray0[2] = "XOXx;KxY";
      stringArray0[3] = "XOXx;KxY";
      stringArray0[4] = "XOXx;KxY";
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instance instance0 = BallNode.calcCentroidPivot(105, 1, (int[]) null, instances0);
      BallNode ballNode0 = new BallNode(1, 1, 1, instance0, 1);
      Instance instance1 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      SparseInstance sparseInstance0 = new SparseInstance(instance1);
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 105;
      doubleArray0[3] = (-1.0);
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (double) 1;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }
}
