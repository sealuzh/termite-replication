/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 20:24:47 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.ListIterator;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      jSPredicateForm0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      String string0 = null;
      jSTerm0.add((Object) null);
      int int0 = 418;
      Integer integer0 = new Integer(418);
      jSTerm0.add((Object) integer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      jSPredicateForm0.toStr();
      jSPredicateForm0.equals((JSPredicateForm) null);
      jSPredicateForm0.equals((JSPredicateForm) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "(^ri@ndX}");
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4275322030192301
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(^ri@ndX}");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray0);
      jSPredicateForm0.toStr();
      StringReader stringReader0 = new StringReader("(");
      jSPredicateForm0.removeElement(objectArray0[0]);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7545098180711074
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.makeConstant();
      jSTerm0.print();
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[1] = (Object) stringReader0;
      objectArray0[2] = (Object) " Term expected";
      objectArray0[3] = (Object) jSPredicateForm0;
      objectArray0[4] = (Object) jSTerm1;
      jSPredicateForm0.toArray(objectArray0);
      stringReader0.markSupported();
      System.setCurrentTimeMillis((-1));
      jSTerm0.print();
      jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.clone();
      jSSubstitution1.add(objectArray0[1]);
      jSPredicateForm1.addAll((Collection) jSSubstitution1);
      jSPredicateForm1.toArray();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm1.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.027288507173069
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) " 7erm expected");
      jSSubstitution0.removeElement(predicate0);
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      predicate3.or(predicate5);
      Predicate<Integer> predicate6 = predicate3.negate();
      Predicate.isEqual((Object) predicate3);
      jSTerm1.add((Object) jSTerm0);
      predicate3.test((Integer) null);
      stringReader0.markSupported();
      predicate6.negate();
      jSTerm0.removeIf(predicate1);
      jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm0 = jSTerm1.standarizerPredicateForm();
      jSTerm1.isEmpty();
      jSTerm0.toStr();
      JSTerm jSTerm2 = new JSTerm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm4.clonePF();
      jSPredicateForm5.print();
      assertEquals("[erm, [7.0]]", jSPredicateForm5.toString());
      
      jSPredicateForm3.print();
      assertNotSame(jSPredicateForm0, jSPredicateForm1);
      assertNotSame(jSPredicateForm3, jSPredicateForm0);
      
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.clonePF();
      assertNotSame(jSPredicateForm2, jSPredicateForm6);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7945725536756378
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm2.add((Object) jSTerm1);
      Predicate.isEqual((Object) jSTerm2);
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSTerm0.makeConstant();
      jSTerm2.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer0.wordChars((-1), (-366172151));
      JSTerm jSTerm3 = (JSTerm)jSTerm1.clone();
      jSTerm0.equals((JSPredicateForm) jSTerm2);
      streamTokenizer0.eolIsSignificant(false);
      StringReader stringReader1 = new StringReader(" 7erm expected");
      System.setCurrentTimeMillis((-1));
      jSTerm3.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        stringReader1.read((char[]) null, (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9886592514231263
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate.isEqual((Object) jSTerm1);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.makeConstant();
      jSTerm1.print();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer0.wordChars((-1), (-366172151));
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      jSTerm0.standarizerPredicateForm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm3.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-1246L));
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) streamTokenizer0);
      jSTerm1.makeVariable();
      Object[] objectArray0 = new Object[13];
      streamTokenizer0.sval = "n";
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) " Term expected";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[5] = (Object) stringReader0;
      jSTerm1.toArray(objectArray0);
      stringReader0.markSupported();
      System.setCurrentTimeMillis((-1246L));
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(552);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6967977407434933
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) " Term expected");
      predicate0.and(predicate1);
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Integer> predicate4 = predicate3.negate();
      Predicate.isEqual((Object) predicate3);
      stringReader0.markSupported();
      predicate4.negate();
      jSTerm0.removeIf(predicate1);
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm0.clone();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.equals((JSPredicateForm) jSTerm1);
      jSTerm1.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm1.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) " 7erm expected");
      jSSubstitution0.removeElement(predicate0);
      predicate0.or(predicate1);
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      predicate2.and(predicate1);
      predicate0.or(predicate4);
      Predicate<Integer> predicate5 = Predicate.isEqual((Object) predicate0);
      predicate5.negate();
      Integer integer0 = new Integer((-653));
      Predicate<Integer> predicate6 = predicate5.negate();
      Integer integer1 = new Integer((-653));
      Predicate.isEqual((Object) integer1);
      Predicate<Integer> predicate7 = predicate2.and(predicate3);
      Integer integer2 = new Integer(1);
      Integer integer3 = new Integer((-3787));
      predicate5.negate();
      Integer integer4 = new Integer((-2367));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      predicate1.test(jSTerm2);
      predicate6.test(integer3);
      predicate7.negate();
      Integer integer5 = new Integer((-2558));
      Predicate.isEqual((Object) integer4);
      System.setCurrentTimeMillis((-2367));
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(32);
      streamTokenizer0.wordChars((-1990), 1690);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.ready();
      stringReader0.markSupported();
      jSTerm0.firstElement();
      jSTerm0.add((Object) "Term");
      stringReader0.ready();
      System.setCurrentTimeMillis(32);
      System.setCurrentTimeMillis(32);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.254079413023905
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) " 7erm expected");
      jSSubstitution0.removeElement(predicate0);
      predicate0.or(predicate1);
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate1.negate();
      predicate1.or(predicate4);
      predicate2.negate();
      Predicate<Integer> predicate5 = predicate3.negate();
      Predicate.isEqual((Object) predicate3);
      predicate3.test((Integer) null);
      stringReader0.markSupported();
      predicate5.negate();
      jSTerm0.removeIf(predicate1);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      jSTerm0.toStr();
      JSPredicateForm jSPredicateForm1 = jSTerm1.standarizerPredicateForm();
      jSTerm1.isEmpty();
      jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.clonePF();
      JSPredicateForm jSPredicateForm4 = jSTerm1.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = jSPredicateForm3.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
      
      System.setCurrentTimeMillis((-1L));
      jSPredicateForm2.matches((JSPredicateForm) jSTerm1);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.clonePF();
      boolean boolean0 = jSPredicateForm4.equals(jSPredicateForm5);
      assertTrue(boolean0);
      
      JSSubstitution jSSubstitution2 = jSPredicateForm1.matches(jSPredicateForm3);
      assertNotSame(jSPredicateForm3, jSPredicateForm2);
      assertNotSame(jSPredicateForm2, jSPredicateForm4);
      assertFalse(jSSubstitution2.fail());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" 7erm expected");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Integer integer0 = new Integer((-689));
      System.setCurrentTimeMillis(976L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.removeAllElements();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.pushBack();
      streamTokenizer0.pushBack();
      streamTokenizer1.slashSlashComments(true);
      StringReader stringReader1 = new StringReader("cP=(\"?{t");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      jSTerm1.parallelStream();
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      JSJshopVars.plus = 32;
      jSPredicateForm0.print();
      jSTerm0.addAll((Collection) jSTerm1);
      jSPredicateForm0.toArray();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.451087827049576
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "term");
      JSJshopVars.percent = (-1473771025);
      JSJshopVars.leftBrac = (-1473771025);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      jSPredicateForm0.equals((JSPredicateForm) null);
      jSPredicateForm0.equals((JSPredicateForm) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringBuffer0);
      JSJshopVars.leftPar = (-1473771025);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.rightBrac = (-886);
      JSJshopVars.coma = 2513;
      jSPredicateForm0.equals(jSPredicateForm1);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.standarizerPredicateForm();
      JSJshopVars.coma = 1;
      jSPredicateForm0.toStr();
      jSPredicateForm0.toStr();
      jSPredicateForm1.print();
      jSPredicateForm3.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm3, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.StringBuffer cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-1246L));
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) " Term expected");
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) streamTokenizer0);
      jSTerm1.makeVariable();
      Object[] objectArray0 = new Object[13];
      stringReader0.markSupported();
      streamTokenizer0.sval = "n";
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) " Term expected";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[5] = (Object) stringReader0;
      jSTerm1.toArray(objectArray0);
      stringReader0.markSupported();
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[1] = (Object) jSPredicateForm0;
      objectArray0[2] = (Object) jSPredicateForm0;
      jSPredicateForm0.toArray(objectArray0);
      Integer integer0 = new Integer(3);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Tr3m expeted");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer1.wordChars(42, 32);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      stringReader0.ready();
      stringReader0.markSupported();
      jSTerm0.firstElement();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      stringReader0.ready();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      streamTokenizer0.pushBack();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("cP=(\"?{t");
      jSTerm1.makeVariable();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.wordChars(1249, (-18));
      JSSubstitution jSSubstitution1 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Term expected");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip(32);
      streamTokenizer0.eolIsSignificant(false);
      int int0 = (-1990);
      streamTokenizer0.wordChars((-1990), 1690);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.ttype = (-1990);
      stringReader0.ready();
      stringReader0.markSupported();
      jSTerm0.firstElement();
      streamTokenizer0.slashStarComments(true);
      jSTerm0.add((Object) "Term");
      stringReader0.ready();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.slashStarComments(true);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.minus = 3118;
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      ListIterator listIterator0 = jSTerm0.listIterator();
      jSTerm0.add((Object) listIterator0);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector$ListItr cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpeCrm expe$ted");
      stringReader0.close();
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.semicolon = 2654;
      Object object0 = new Object();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(gKN(uDA?}@'");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpeCrm expe$ted");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("fpeCrm expe$ted");
      stringReader0.markSupported();
      stringReader1.markSupported();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fpeCrm expe$ted");
      stringReader0.close();
      StringReader stringReader1 = new StringReader("fpeCrm expe$ted");
      stringReader1.markSupported();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      int int0 = 1;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" TeCrm expected");
      StringReader stringReader1 = new StringReader(" TeCrm expected");
      stringReader1.markSupported();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
