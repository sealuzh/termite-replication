/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:55:02 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.90919984304055
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("O");
      discretize0.getOptions();
      discretize0.setMakeBinary(true);
      discretize0.getAttributeIndices();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "O";
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      discretize0.listOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.636043334094918
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("weka.experiment.Stats");
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      SystemInUtil.addInputLine("O");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "w~");
      discretize0.getOptions();
      System.setCurrentTimeMillis((-2770L));
      discretize0.listOptions();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("8O", arrayList0, (-1073741822));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1073741822
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double double0 = 1362.1;
      double[] doubleArray0 = new double[5];
      discretize0.getCapabilities();
      doubleArray0[0] = 1362.1;
      doubleArray0[1] = 1362.1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      doubleArray0[2] = 1362.1;
      int[] intArray0 = null;
      discretize0.binsTipText();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Range range0 = new Range();
      discretize0.m_DiscretizeCols = range0;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 195.33537341;
      doubleArray1[1] = 195.33537341;
      doubleArray1[2] = (-2094.599159);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      doubleArray2[0] = 0.0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray2[1] = 195.33537341;
      String[] stringArray0 = new String[5];
      stringArray0[1] = "C'&*GS&~qV";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)68;
      byteArray0[3] = (byte) (-23);
      boolean boolean0 = discretize0.getFindNumBins();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 44;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      allFilter0.toString();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("3V;)B5X]iB", arrayList0, 702);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList1);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      Attribute attribute0 = new Attribute("@data");
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>(linkedList0);
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize("3V;)B5X]iB");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-MR <num>", arrayList0, 133);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[6] = ".arff";
      stringArray0[2] = "3V;)B5X]iB";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "t1r*+  ;q D6e/u";
      stringArray0[5] = ".arff";
      stringArray0[6] = "-MR <num>";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.179379545805061
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setMakeBinary(true);
      discretize0.getAttributeIndices();
      Filter.makeCopy(discretize0);
      discretize0.setOptions(stringArray0);
      Discretize.main(stringArray0);
      discretize0.setUseBinNumbers(false);
      Discretize.main(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2062);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseEqualFrequency());
      
      discretize0.m_UseEqualFrequency = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8O");
      Locale.getISOLanguages();
      System.setCurrentTimeMillis((-1942L));
      String string0 = discretize0.attributeIndicesTipText();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("3V;)B5X]iB");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("-MR <num>", arrayList0, 133);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      stringArray0[2] = "3V;)B5X]iB";
      stringArray0[3] = ".bsi";
      stringArray0[4] = "t1r*+  ;q D6e/u";
      stringArray0[5] = ".arff";
      stringArray0[6] = "-MR <num>";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0671548291624515
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseBinNumbers = true;
      discretize0.m_ClassIndex = 0;
      boolean boolean0 = discretize0.m_UseEqualFrequency;
      discretize0.toString();
      discretize0.getCutPoints(3);
      discretize0.getUseBinNumbers();
      discretize0.setOutputFormat();
      String[] stringArray0 = new String[0];
      discretize0.setOptions(stringArray0);
      discretize0.getBinRangesString(3);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][9];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = (double) 6;
      doubleArray1[3] = (double) 6;
      doubleArray1[4] = (double) 6;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 6;
      doubleArray2[1] = (double) 6;
      doubleArray2[2] = 2817.04752771;
      doubleArray2[3] = (double) 6;
      doubleArray2[4] = 1.0;
      doubleArray2[5] = (double) 6;
      doubleArray2[6] = (double) 6;
      doubleArray2[7] = (double) 6;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = (double) 6;
      doubleArray3[1] = 1.0;
      doubleArray3[2] = 1.0;
      doubleArray0[2] = doubleArray3;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[4];
      intArray0[2] = (-3762);
      discretize0.toString();
      intArray0[3] = 79;
      discretize0.setAttributeIndicesArray(intArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1208;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      intArray0[1] = 200;
      intArray0[2] = 1208;
      intArray0[3] = 79;
      Discretize discretize0 = new Discretize("Y");
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 195.33537341;
      doubleArray1[1] = (-31.249966);
      doubleArray1[2] = 195.33537341;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[4] = 195.33537341;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Header of original and copy equivalent: ";
      stringArray0[1] = "C'&*GS&~qV";
      stringArray0[0] = "4";
      stringArray0[3] = "]";
      stringArray0[4] = "i--";
      doubleArray2[2] = Double.NaN;
      doubleArray2[4] = (-2138.4179030348732);
      doubleArray2[5] = (-31.249966);
      doubleArray2[6] = (-31.249966);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 0.0;
      double[] doubleArray4 = new double[6];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = 0.0;
      doubleArray4[2] = (-3718.0);
      doubleArray4[3] = Double.NaN;
      doubleArray4[4] = 0.0;
      doubleArray4[5] = (-31.249966);
      doubleArray0[3] = doubleArray4;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[3][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 195.33537341;
      doubleArray1[1] = 195.33537341;
      doubleArray1[2] = (-2094.599159);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[10];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 195.33537341;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "C'&*GS&~qV";
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)111;
      byteArray0[3] = (byte) (-23);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      boolean boolean0 = discretize0.getFindNumBins();
      assertFalse(boolean0);
      
      int int0 = discretize0.getBins();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Discretize discretize0 = new Discretize("weka.experiment.Stats");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      discretize0.setDesiredWeightOfInstancesPerInterval(350);
      discretize0.attributeIndicesTipText();
      discretize0.useEqualFrequencyTipText();
      assertEquals(350.0, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 195.33537341;
      doubleArray1[1] = (-31.249966);
      doubleArray1[2] = (-2094.599159);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 195.33537341;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[6];
      Discretize discretize0 = new Discretize("// Generated with Weka ");
      discretize0.setUseEqualFrequency(true);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_DefaultCols = "@O4f'";
      discretize0.m_MakeBinary = true;
      discretize0.getMakeBinary();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = (-1968526675);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1968526675));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.listOptions();
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2118.276756);
      doubleArray0[5] = (-2118.276756);
      doubleArray0[2] = (-2118.276756);
      doubleArray0[3] = (-2118.276756);
      doubleArray0[6] = (-2118.276756);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2118.276756), doubleArray0);
      int[] intArray0 = new int[3];
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2118.276756), doubleArray0, intArray0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j*lOX`x|", arrayList1, 693);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>(arrayList1);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      Attribute attribute0 = new Attribute("MissingClassValuesTest");
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.add(attribute0);
      linkedList0.add(attribute0);
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>(linkedList0);
      Discretize discretize0 = new Discretize("date");
      discretize0.getBinRangesString(3);
      discretize0.getCutPoints(1);
      String string0 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("{1-#X<r", protectedProperties1);
      properties0.put(protectedProperties0, attribute0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Discretize discretize0 = new Discretize();
      discretize0.findNumBinsTipText();
      Attribute attribute1 = new Attribute("SPW2d9=t-y=", arrayList0, protectedProperties2);
      assertFalse(attribute1.isAveragable());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("`}~9P)}GhJbbx", arrayList0, 133);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute("^");
      arrayList1.add(attribute0);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>(arrayList2);
      Discretize discretize0 = new Discretize();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_ClassIndex = 583;
      discretize0.setInvertSelection(true);
      discretize0.m_NumBins = 4;
      double[][] doubleArray0 = new double[4][3];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 195.33537341;
      doubleArray1[1] = (-31.249966);
      doubleArray1[2] = (-2094.599159);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 0.0;
      doubleArray2[1] = 195.33537341;
      doubleArray2[2] = Double.NaN;
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("`}~9P)}GhJbbx", arrayList0, 133);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList0);
      Attribute attribute0 = new Attribute("^");
      arrayList1.add(attribute0);
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      Discretize discretize0 = new Discretize("relational");
      String string0 = discretize0.globalInfo();
      assertEquals(10, discretize0.getBins());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "598gRjG=yUZH0<O";
      stringArray0[1] = "598gRjG=yUZH0<O";
      stringArray0[2] = "598gRjG=yUZH0<O";
      stringArray0[3] = "598gRjG=yUZH0<O";
      stringArray0[4] = "Z])_qtR'7ait;hqQC";
      discretize0.setMakeBinary(true);
      stringArray0[5] = "598gRjG=yUZH0<O";
      stringArray0[6] = "?j^";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: 598gRjG=yUZH0<O 598gRjG=yUZH0<O 598gRjG=yUZH0<O 598gRjG=yUZH0<O Z])_qtR'7ait;hqQC 598gRjG=yUZH0<O ?j^ 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "XgJBCv9;J\"',");
      System.setCurrentTimeMillis(3512L);
      Discretize discretize0 = new Discretize("XgJBCv9;J\"',");
      String string0 = discretize0.invertSelectionTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1362.1;
      doubleArray0[1] = 1362.1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[2] = 1362.1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1362.1, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(6);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SystemInUtil.addInputLine("TQo'kyV9jwrfgl(Gv");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "598gRjG=yUZH0<O");
      System.setCurrentTimeMillis((-1942L));
      Discretize discretize0 = new Discretize("-Y");
      discretize0.getInvertSelection();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList0);
      arrayList1.add((Attribute) null);
      Attribute attribute0 = new Attribute("-R <col1,col2-col4,...>");
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>(linkedList0);
      Attribute.typeToString(attribute0);
      Instances instances0 = new Instances("@NQ9", arrayList0, 767);
      Discretize discretize0 = new Discretize("@attribute");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-195));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-31.249966);
      doubleArray0[2] = (-31.249966);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setBins(133);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>(arrayList0);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(linkedList0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.996199081827508
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3239.3991108920554);
      doubleArray0[1] = (-3239.3991108920554);
      SparseInstance sparseInstance0 = new SparseInstance((-3239.3991108920554), doubleArray0);
      discretize0.setUseBinNumbers(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ")";
      stringArray0[1] = "hp l<]C";
      stringArray0[2] = "first-last";
      stringArray0[3] = "first-last";
      stringArray0[4] = "gz?eP*6`uA,fW`a0 ";
      stringArray0[5] = "6P'O/+";
      stringArray0[6] = "A+ E";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.setUseBinNumbers(true);
      Filter.runFilter(discretize0, stringArray0);
      discretize0.useBinNumbersTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getRevision();
      discretize0.toString();
      int[] intArray0 = new int[7];
      intArray0[0] = 95;
      intArray0[1] = 70;
      intArray0[2] = 1;
      intArray0[3] = (-1073741822);
      intArray0[4] = (-772);
      intArray0[5] = 1041;
      intArray0[6] = 2162;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4401.4874835, intArray0, 2162);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue((-182));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("-MR <num>", arrayList0, 133);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1362.1;
      doubleArray0[1] = 1362.1;
      doubleArray0[2] = 1362.1;
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[10];
      doubleArray0[0] = (-2118.276756);
      doubleArray0[5] = (-2118.276756);
      doubleArray0[2] = (-2118.276756);
      doubleArray0[3] = (-2118.276756);
      doubleArray0[6] = (-2118.276756);
      discretize0.setAttributeIndices("8x79/f(?s");
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2118.276756), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.setValueSparse(6, (-2118.276756));
      SparseInstance sparseInstance0 = new SparseInstance(6);
      binarySparseInstance0.insertAttributeAt(6);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(binarySparseInstance1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getMakeBinary();
      int[] intArray0 = new int[6];
      intArray0[4] = 3105;
      intArray0[1] = (-1);
      intArray0[2] = (-2875);
      int int0 = 60;
      intArray0[4] = 60;
      intArray0[5] = (-2056);
      int int1 = (-3677);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-3677));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.908238329122374
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.numPendingOutput();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>(arrayList0);
      arrayList1.add((Attribute) null);
      Attribute attribute0 = new Attribute("-R <col1,col2-col4,...>");
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      linkedList0.add((Attribute) null);
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>(linkedList0);
      Attribute.typeToString(attribute0);
      Instances instances0 = new Instances("weka.experiment.Stats", arrayList0, 767);
      Discretize discretize0 = new Discretize("@attribute");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("j*lOX`x|", arrayList1, 693);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>(arrayList2);
      arrayList2.add((Attribute) null);
      Attribute attribute0 = new Attribute(".bsi");
      ArrayList<Attribute> arrayList4 = new ArrayList<Attribute>();
      arrayList4.add(attribute0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedList<Attribute> linkedList0 = new LinkedList<Attribute>();
      ArrayList<Attribute> arrayList5 = new ArrayList<Attribute>(arrayList3);
      Attribute.typeToString(attribute0);
      Instances instances1 = new Instances("\tUse bin numbers rather than ranges for discretized attributes.", arrayList1, 2);
      Discretize discretize0 = new Discretize("3V;)B5XiB");
      System.setCurrentTimeMillis(4);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
