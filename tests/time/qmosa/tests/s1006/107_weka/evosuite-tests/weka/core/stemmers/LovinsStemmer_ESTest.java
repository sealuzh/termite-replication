/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:27:39 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.6642684727840056
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("gOPkMBEgx");
      assertEquals("gopkmbegx", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[.OR1+CC";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.stem("\tThe file to process.");
      lovinsStemmer5.getRevision();
      String string2 = lovinsStemmer2.stemString("A report published by a school or other institution, usually numbered within a series.");
      assertEquals("a report publ by a school or other institut, usu number within a ser.", string2);
      
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer4.getTechnicalInformation();
      String string3 = lovinsStemmer2.stemString("VbHdEu}");
      assertEquals("vbhdeu}", string3);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.627433956804532
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("yu");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer3.stemString("7@duiw9:k>luytmit");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      lovinsStemmer1.stemString("b");
      lovinsStemmer3.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer5.stemString("lud");
      assertEquals("lus", string1);
      
      lovinsStemmer2.getRevision();
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer5.stem("pex");
      assertEquals("pic", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6614210206095419
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem(" (");
      String string0 = lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer1.stemString("olv");
      lovinsStemmer2.getTechnicalInformation();
      String string1 = lovinsStemmer3.getRevision();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.6421955273074218
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer0.stemString("$");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("invalid CVS revision - not dots!");
      lovinsStemmer3.stem("W|5XUYyAnGP,ro_(H");
      lovinsStemmer3.getRevision();
      lovinsStemmer3.getRevision();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer3.stemString("invalis cv revis - not dot!");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stem("_p~*6D");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.getTechnicalInformation();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer4.stem("elex");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.605789580378805
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[1] = "gOPkMBEgx";
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("@l #");
      String string1 = lovinsStemmer0.stemString("hi72!:/~ 'R;a&W{3");
      assertEquals("hi72!:/~ 'r;a&w{3", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.stemString("Original array (doubles): ");
      String string3 = "\\u001rud";
      lovinsStemmer0.stemString(string3);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("gOPkMBEgx");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("gOPkMBEgx");
      lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string4 = lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.676825508018093
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LI>E";
      stringArray0[1] = "ential";
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer0.stem("PROCEEDINGS");
      assertEquals("proceed", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer1.stemString("FOzgv`$>");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stem("F");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("pic");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.toString();
      lovinsStemmer4.stem("8034");
      lovinsStemmer0.stem("FOzgv`$>");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
      
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string4 = lovinsStemmer2.stemString("proceed");
      assertEquals("proceed", string4);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.743868059586125
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("picerid");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.stem("picond");
      String[] stringArray1 = new String[3];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "piceris";
      stringArray1[2] = "picons";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.stem("\nUsage: ");
      String string1 = lovinsStemmer2.stemString("picond");
      assertEquals("picons", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.globalInfo();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6860368896582445
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f/^qoFG(d";
      lovinsStemmer0.stemString("f/^qoFG(d");
      stringArray0[1] = "";
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("4{@x");
      stringArray0[2] = "";
      stringArray0[3] = "R&&E+t#&k$";
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("R&&E+t#&k$");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.stemString("The alternating decision tree learning algorithm");
      assertEquals("th altern decis tre learn algorithm", string1);
      
      lovinsStemmer1.stem("urldex");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.stemString("R&&E+t#&k$");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      String string2 = lovinsStemmer0.stemString("The publisher's name.");
      assertEquals("th publishes nam.", string2);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.stem("ward");
      lovinsStemmer4.stemString("4aow_eJe");
      lovinsStemmer2.getRevision();
      lovinsStemmer4.stemString("4aow_eJe");
      String string3 = lovinsStemmer2.stem("{'$#!Q`]!gWcup");
      assertEquals("{'$#!q`]!gwcup", string3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7816989259919156
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f/^qoFG(d";
      lovinsStemmer0.stemString("f/^qoFG(d");
      lovinsStemmer0.stemString("uad");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("f/^qoFG(d");
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer2.getRevision();
      assertEquals("8034", string0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6322142192976945
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "3;I~[aO|0l:z}g'F$";
      stringArray0[1] = "mit";
      stringArray0[2] = "ex";
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[3] = "vad";
      lovinsStemmer0.toString();
      stringArray0[4] = "k4";
      stringArray0[5] = "czYY5b44V?Nh>b";
      stringArray0[6] = "ondlid";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem(" !j");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ondcid");
      lovinsStemmer0.stemString("ine");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("S[");
      lovinsStemmer0.stem("ex");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6945751448898378
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("yu");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer2.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer2.stemString("Normalized again (doubles): ");
      assertEquals("normal again (doubl): ", string2);
      
      lovinsStemmer2.stemString("8034");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer3.stem("ond");
      assertEquals("ons", string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8034";
      stringArray0[1] = "ond";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("@q_;6>MgAW(");
      lovinsStemmer2.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer1.stemString("erid");
      assertEquals("eris", string4);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7357618138816757
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LI>E";
      stringArray0[1] = "ential";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("\"(h(K_)2#n4>#NFR*$");
      String string0 = lovinsStemmer1.stemString("end");
      assertEquals("ens", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer3.getRevision();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer4.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6335202499469217
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LI>E";
      stringArray0[1] = "ential";
      stringArray0[2] = "Q[";
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Q[");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer2.stem("LI>E");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("doublet");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stem("LI>E");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("ication");
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "li>";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "doublet";
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.640333030024045
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("SykQ\"#m/Th{!E)-");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("\tUses lowercase strings.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.654424855491698
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[1] = "gOPkMBEgx";
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("howpublished");
      String string0 = lovinsStemmer0.stemString("hi72!:/~ 'R;a&W{3");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("Original array (doubles): ");
      String string1 = "\\u001rud";
      lovinsStemmer0.stemString(string1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("gOPkMBEgx");
      lovinsStemmer1.stemString("/'y^DeHmj>8BY");
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stemString("(9ZDFff<c_D");
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.toString();
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6578941194824726
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "8034";
      stringArray0[1] = "gOPkMBEgx";
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("@l #");
      String string2 = lovinsStemmer0.stemString("hi72!:/~ 'R;a&W{3");
      assertEquals("hi72!:/~ 'r;a&w{3", string2);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("Original array (doubles): ");
      lovinsStemmer0.stem("/$M7}(rwc,g9");
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[3];
      stringArray1[0] = "hi72!:/~ 'r;a&w{3";
      stringArray1[1] = "hi72!:/~ 'r;a&w{3";
      stringArray1[2] = "gopkmbegx";
      LovinsStemmer.main(stringArray1);
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6812346560587685
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "=s?tL/?chfMMR";
      stringArray0[1] = ":";
      stringArray0[2] = "}2_";
      stringArray0[3] = "enally";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("=s?tL/?chfMMR");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer1.stem("Zu-*{WLy");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("eness");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.56631068430528
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LI>E";
      stringArray0[1] = "LI>E";
      stringArray0[2] = "";
      stringArray0[3] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer2.getRevision();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stem("iev");
      lovinsStemmer2.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6929483221851984
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("yQU(){>t$(#M\"piD");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "yqu(){>t$(#m\"pid";
      stringArray0[1] = "yqu(){>t$(#m\"pid";
      stringArray0[2] = "yqu(){>t$(#m\"pid";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ymHT~0F");
      lovinsStemmer0.stemString("ymHT~0F");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("sv$kYe/-/;Y.?Y");
      LovinsStemmer.main(stringArray0);
      String string0 = "iveness";
      lovinsStemmer0.stemString("urlix");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.682956092995551
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("CONTENTS");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("content");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "6!`h@HR";
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      stringArray0[2] = "81Zucc:+k%t/b*7";
      String string2 = lovinsStemmer0.stemString(",->W:~Nul(");
      assertEquals(",->w:~nl(", string2);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("81Zucc:+k%t/b*7");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("81zucc:+k%t/b*7");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("CONTENTS");
      lovinsStemmer1.stem("content");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer2.stemString("content");
      assertEquals("cont", string3);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string4 = lovinsStemmer3.stemString("pand");
      assertEquals("pans", string4);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6608110958903268
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer1.stemString("8034");
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("urs");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("inbookticend");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string3 = lovinsStemmer1.stemString("Lo$RxD_9oCR9");
      assertEquals("lo$rxd_9ocr9", string3);
      
      lovinsStemmer1.stemString("ur");
      String string4 = lovinsStemmer0.getRevision();
      assertTrue(string4.equals((Object)string1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6805235196628077
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("l/ocigs)v0qi/%ax1mit");
      assertEquals("l/ocig)v0q/%ax1mis", string0);
      
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "l/ocig)v0q/%ax1mis";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      stringArray0[3] = "end";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "^`2(<#srq;#a7";
      stringArray0[6] = "l/ocigs)v0qi/%ax1mit";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7059409749866714
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("eful");
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stem("eful");
      assertEquals("efl", string0);
      
      String string1 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string1);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("rud");
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6277364132327672
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LI>E";
      stringArray0[1] = "ential";
      stringArray0[2] = "";
      String string0 = lovinsStemmer0.stemString("erid");
      assertEquals("eris", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "m9eE";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray1);
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer2.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("");
      lovinsStemmer3.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7917333723556796
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stem("gopkmbegx");
      lovinsStemmer3.getRevision();
      String string0 = "\\u001her";
      LovinsStemmer.main((String[]) null);
      lovinsStemmer3.stemString("vad");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("yz");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("yz");
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString(string0);
      String string2 = lovinsStemmer4.getRevision();
      assertFalse(string2.equals((Object)string1));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.638526805011543
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Correlation: ");
      assertEquals("correl: ", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("OOHoJ_-Q$t[");
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "oohoj_-q$t[";
      stringArray0[1] = "OOHoJ_-Q$t[";
      stringArray0[2] = "Correlation: ";
      stringArray0[3] = "correl: ";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("CONTENTS");
      lovinsStemmer0.stem("1{]MfEJ+G@<#2O");
      lovinsStemmer0.stemString("CONTENTS");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string2 = lovinsStemmer1.stemString("nesses");
      assertEquals("nes", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7083159663064187
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("SykQ\"#m/Th{!E)-");
      assertEquals("sykq\"#m/th{!e)-", string0);
      
      lovinsStemmer0.stemString("noEte");
      String[] stringArray0 = new String[2];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer0.stemString("sykq\"#m/th{!e)-");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stem("lessness");
      assertEquals("les", string2);
      
      lovinsStemmer1.stemString("8034");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.stem("8034");
      lovinsStemmer0.toString();
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer0.stemString("les");
      assertEquals("le", string3);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.781083832478318
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("9/x=C:P>&pU^`q!%Ad");
      String[] stringArray0 = new String[3];
      stringArray0[2] = "9/x=c:p>&pu^`q!%ad";
      stringArray0[1] = "9/x=C:P>&pU^`q!%Ad";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("9/x=C:P>&pU^`q!%Ad");
      stringArray0[2] = "9/x=C:P>&pU^`q!%Ad";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("9/x=C:P>&pU^`q!%Ad");
      String string0 = "umpt";
      lovinsStemmer0.stemString("umpt");
      lovinsStemmer0.getRevision();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7017627840783378
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Min index (doubles): ");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "W";
      stringArray0[1] = "arization";
      stringArray0[2] = "lovinsstemmerlidix";
      stringArray0[3] = "p++sq";
      stringArray0[4] = "i";
      lovinsStemmer0.toString();
      stringArray0[5] = ".lORy~=]I@p!%mf1i";
      stringArray0[6] = "lovinsstemmerlidcid";
      stringArray0[7] = "rpt";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("qdfLG2{'<W~7k-@X.");
      lovinsStemmer0.stemString("_k)[vc*$s0f.Nh");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("ences");
      String string0 = lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.76589512573151
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("inbooktex");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.703516161339133
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("iteness");
      assertEquals("it", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stem("elity");
      lovinsStemmer1.getRevision();
      String string2 = lovinsStemmer0.stemString("lud");
      assertEquals("lus", string2);
      
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer1.stem("el");
      lovinsStemmer0.stemString("el");
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer1.stemString("~A~Uvi(5nR#~nqqQ");
      assertEquals("~a~uv(5nr#~nqqq", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6067135307781855
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034";
      lovinsStemmer0.stem("7@duiw9:k>luyt");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6171306870517772
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      String string1 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6467662329336585
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("gOPkMBEgx");
      assertEquals("gopkmbegx", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("[");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("icide");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("gOPkMBEgx");
      LovinsStemmer.main((String[]) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[";
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string3);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6395743974501555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[2];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer1.stemString("8034");
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("otide");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.832859843633235
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("yQU(){>t$(#M\"piD");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "yqu(){>t$(#m\"pid";
      stringArray0[1] = "yqu(){>t$(#m\"pid";
      stringArray0[2] = "yqu(){>t$(#m\"pid";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("na.\b'<T.$");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "yQU(){>t$(#M\"piD";
      stringArray1[1] = "na.\b'<t.$";
      stringArray1[2] = "na.\b'<t.$";
      stringArray1[3] = "na.\b'<T.$";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("na.\b'<t.$");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer0.stemString("f/^qofg(dbex");
      assertEquals("f/^qofg(dbic", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6796685338611677
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("`\u0001.:HP:");
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("0iuax");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.stemString("nL\"d'g|ox8u3B$I<yyk");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("l");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("ibility");
      lovinsStemmer1.stem("bex");
      lovinsStemmer1.stemString("0>J6EnX,tr@XP{)");
      lovinsStemmer1.stemString("l");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.661774370155384
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "f/^qoFG(d";
      lovinsStemmer0.stemString("f/^qoFG(d");
      lovinsStemmer0.stemString("h/7cuona^&pkyz");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("h/7cuona^&pkyz");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("h/7cuon^&pkys");
      lovinsStemmer1.getTechnicalInformation();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.6792213569526506
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("SykQ\"#m/Th{!E)-");
      lovinsStemmer0.stemString("note");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Problem reading local properties: ");
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.691056524175279
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "=s?tL/?chfMMR";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("=s?tL/?chfMMR");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("ious");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.globalInfo();
      lovinsStemmer1.toString();
      lovinsStemmer2.toString();
      lovinsStemmer3.stemString("acies");
      lovinsStemmer2.getRevision();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.getRevision();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6738155838190816
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("not");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stem("na.\b'<t.$lud");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.stemString("na.\b'<t.$lus");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.stemString("na.\b'<t.$lus");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5456662636580516
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8dK1],";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("proceedings");
      assertEquals("proceed", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.70414563398513
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LI>E";
      stringArray0[1] = "ential";
      stringArray0[2] = "";
      stringArray0[3] = "";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("");
      String string0 = lovinsStemmer0.stemString("LI>E");
      assertEquals("li>e", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("LI>E");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("LI>E");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("publisher");
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.stemString("KqTs! 3Q.Ozy8YfR|");
      assertEquals("kqt! 3q.ozy8yfr|", string2);
      
      lovinsStemmer0.stem("8034");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.stemString(").");
      assertEquals(").", string3);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.554934993526952
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "LI>E";
      String string0 = "ential";
      stringArray0[1] = "ential";
      stringArray0[2] = "Q[";
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer2.stem("LI>E");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stem("LI>E");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("ication");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6368859263700912
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("CONTENTS");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("content");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "6!`h@HR";
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[1] = "vup lxxj";
      stringArray1[2] = "CONTENTS";
      stringArray1[3] = "6!`h@HR";
      stringArray1[4] = "CONTENTS";
      stringArray1[5] = "6!`h@HR";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6620290600726833
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("gOPkMBEgx");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("!U{gM9!/zW&tOUmv.%");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7093548528887201
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("p");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("arity");
      assertEquals("ar", string0);
      
      lovinsStemmer0.stem("8+XZHk|~l(<X~");
      String string1 = lovinsStemmer0.stemString("8+xzhk|~l(<x~");
      assertEquals("8+xzhk|~l(<x~", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("S;Sx");
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7086372555027463
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("SykQ\"#m/Th{!E)-");
      assertEquals("sykq\"#m/th{!e)-", string0);
      
      String string1 = lovinsStemmer0.stemString("note");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer0.stemString("note");
      assertEquals("not", string2);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string3 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer1.stemString("");
      assertFalse(string4.equals((Object)string1));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3755090050496888
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("inbookax");
      assertEquals("inbookac", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4037612459452262
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("lux");
      assertEquals("luc", string1);
  }
}
