/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:15:33 GMT 2019
 */

package weka.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.Optimization;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Optimization_ESTest extends Optimization_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-1589), (-1589));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-1589);
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      double[] doubleArray2 = Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      assertEquals(2, doubleArray2.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 30, (-263));
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1589);
      doubleArray1[1] = (double) (-1589);
      doubleArray1[2] = (double) 30;
      doubleArray1[3] = (double) (-1589);
      doubleArray1[4] = (double) (-263);
      doubleArray1[5] = (double) 30;
      doubleArray1[6] = (double) (-263);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[][] doubleArray0 = new double[8][6];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling6 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling7 = new FileSystemHandling();
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 30, (-263));
      FileSystemHandling fileSystemHandling8 = new FileSystemHandling();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1589);
      doubleArray1[1] = (double) (-1589);
      doubleArray1[2] = (double) 30;
      doubleArray1[3] = (double) (-1589);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)76;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)7;
      byteArray0[5] = (byte) (-127);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-29);
      doubleArray1[4] = (double) (-263);
      doubleArray1[5] = (double) 30;
      doubleArray1[6] = (double) (-263);
      boolean[] booleanArray0 = new boolean[2];
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0000000000000142;
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      double[][] doubleArray1 = new double[7][5];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = 1.0000000000000142;
      doubleArray2[1] = (double) 1267;
      doubleArray2[2] = (double) 1267;
      doubleArray2[3] = (double) 1267;
      doubleArray2[4] = 1.0000000000000142;
      doubleArray2[5] = (double) 1267;
      doubleArray1[6] = doubleArray2;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 675, 1267);
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 1267;
      doubleArray3[1] = (double) 675;
      double[] doubleArray4 = Optimization.solveTriangle(matrix0, doubleArray3, true, booleanArray0);
      assertArrayEquals(new double[] {1266.999999999982, Double.NEGATIVE_INFINITY}, doubleArray4, 0.01);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[6][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 69, 42);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray1, 685, 2845);
      double[] doubleArray2 = Optimization.solveTriangle(matrix1, doubleArray0, true, (boolean[]) null);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray2, 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 6;
      Random.setNextRandom(6);
      double[][] doubleArray0 = new double[2][7];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) (-293);
      doubleArray1[1] = (double) (-2296);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (double) 771;
      doubleArray2[1] = (double) (-2296);
      doubleArray2[2] = 1.000030517578125;
      doubleArray2[3] = (double) 6;
      doubleArray2[4] = (double) 771;
      doubleArray2[5] = (double) 771;
      doubleArray2[6] = (double) (-2296);
      doubleArray2[7] = (double) 6;
      doubleArray0[1] = doubleArray2;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, 2, (-2296));
      matrix0.getRevision();
      int int1 = 1308;
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray0, 1308, 1308);
      boolean[] booleanArray0 = null;
      Optimization.solveTriangle(matrix1, doubleArray1, false, (boolean[]) null);
      // Undeclared exception!
      try { 
        matrix0.minusEquals(matrix1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Matrix dimensions must agree.
         //
         verifyException("weka.core.matrix.Matrix", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, 69, 42);
      weka.core.matrix.Matrix matrix1 = new weka.core.matrix.Matrix(doubleArray1, 2625, 16);
      boolean[] booleanArray0 = new boolean[2];
      Optimization.solveTriangle(matrix1, doubleArray0, false, booleanArray0);
      StringReader stringReader0 = new StringReader("Zero directions for all free variables -- Min. found with current fixed variables (or all variables fixed). Try to release some variables now.");
      StringReader stringReader1 = new StringReader("Zero directions for all free variables -- Min. found with current fixed variables (or all variables fixed). Try to release some variables now.");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader1, 2625);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader1);
      // Undeclared exception!
      try { 
        weka.core.matrix.Matrix.read(bufferedReader1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix((double[][]) null, 2033, 1746);
      double[] doubleArray0 = new double[1];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      double[] doubleArray1 = Optimization.solveTriangle(matrix0, doubleArray0, true, booleanArray0);
      Locale locale0 = Locale.KOREAN;
      DecimalFormatSymbols.getInstance();
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      DecimalFormat decimalFormat0 = new DecimalFormat("", decimalFormatSymbols0);
      boolean boolean0 = false;
      Optimization.solveTriangle(matrix0, doubleArray1, false, booleanArray0);
      StringReader stringReader0 = new StringReader("Objective function value is NaN!");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 353);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      stringReader0.close();
      BufferedReader bufferedReader2 = new BufferedReader(bufferedReader1, 1746);
      try { 
        bufferedReader2.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0389712786066236
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.addElement((-3661));
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      optimization_DynamicIntArray0.removeElementAt(0);
      int int0 = 431;
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(431);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(1);
      optimization_DynamicIntArray0.addElement(1430);
      int int0 = optimization_DynamicIntArray0.size();
      assertEquals(2, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Random.setNextRandom(6);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement(0);
      optimization_DynamicIntArray0.addElement(116);
      optimization_DynamicIntArray0.addElement(1430);
      Random.setNextRandom((-3262));
      Random.setNextRandom(40);
      Random.setNextRandom(7);
      Random.setNextRandom((-293));
      optimization_DynamicIntArray0.addElement(228);
      assertEquals(4, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(771);
      optimization_DynamicIntArray0.removeAllElements();
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement((-293));
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.addElement((-293));
      optimization_DynamicIntArray0.elementAt(17);
      assertEquals(2, optimization_DynamicIntArray0.size());
      
      optimization_DynamicIntArray0.removeAllElements();
      assertEquals(0, optimization_DynamicIntArray0.size());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.getRevision();
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.removeAllElements();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.elementAt(701);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 701
         //
         verifyException("weka.core.Optimization$DynamicIntArray", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-293), 200);
      boolean[] booleanArray0 = null;
      Optimization.solveTriangle(matrix0, doubleArray3, false, (boolean[]) null);
      StringReader stringReader0 = new StringReader("Zero directions for all free variables -- Min. found with current fixed variables (or all variables fixed). Try to release some variables now.");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0, 2208);
      BufferedReader bufferedReader1 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader2 = null;
      try {
        bufferedReader2 = new BufferedReader(bufferedReader1, (-293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Buffer size <= 0
         //
         verifyException("java.io.BufferedReader", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[][] doubleArray1 = new double[8][6];
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      int int0 = (-2296);
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray1, (-2177), 1268);
      matrix0.getRevision();
      boolean[] booleanArray0 = new boolean[0];
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.Optimization", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix((double[][]) null, 2033, 1735);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-293);
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      // Undeclared exception!
      try { 
        Optimization.solveTriangle(matrix0, doubleArray0, false, booleanArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = (-293);
      double[][] doubleArray0 = new double[3][1];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[0];
      doubleArray0[2] = doubleArray3;
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-293), 165);
      boolean[] booleanArray0 = null;
      Optimization.solveTriangle(matrix0, doubleArray3, false, (boolean[]) null);
      StringReader stringReader0 = new StringReader("Zero directions for all free variables -- Min. found with current fixed variables (or all variables fixed). Try to release some variables now.");
      BufferedReader bufferedReader0 = null;
      try {
        bufferedReader0 = new BufferedReader((Reader) null, (-293));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3032310122718718
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.addElement((-37));
      optimization_DynamicIntArray0.addElement(1430);
      assertEquals(2, optimization_DynamicIntArray0.size());
      
      double[][] doubleArray0 = new double[0][4];
      weka.core.matrix.Matrix matrix0 = new weka.core.matrix.Matrix(doubleArray0, (-2296), (-37));
      matrix0.getRevision();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 0;
      double[][] doubleArray2 = new double[1][4];
      doubleArray2[0] = doubleArray1;
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[1] = true;
      Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      StringReader stringReader0 = new StringReader("5953");
      BufferedReader bufferedReader0 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader1 = new BufferedReader(bufferedReader0, 744);
      BufferedReader bufferedReader2 = new BufferedReader(stringReader0);
      BufferedReader bufferedReader3 = new BufferedReader(bufferedReader2);
      bufferedReader0.read();
      weka.core.matrix.Matrix.read(bufferedReader1);
      double[] doubleArray3 = Optimization.solveTriangle(matrix0, doubleArray1, true, booleanArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray3, 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = (-293);
      Random.setNextRandom(6);
      Optimization optimization0 = mock(Optimization.class, CALLS_REAL_METHODS);
      Optimization.DynamicIntArray optimization_DynamicIntArray0 = optimization0.new DynamicIntArray(0);
      optimization_DynamicIntArray0.copy();
      optimization_DynamicIntArray0.addElement(116);
      optimization_DynamicIntArray0.getRevision();
      // Undeclared exception!
      try { 
        optimization_DynamicIntArray0.removeElementAt(618);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }
}
