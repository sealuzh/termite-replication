/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:29:25 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedReader;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.REPTree;
import weka.clusterers.Cobweb;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.CoverTree;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6425710459660214
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".json");
      evaluation0.weightedFMeasure();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numTrueNegatives(117);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      evaluation0.weightedFMeasure();
      char[] charArray0 = new char[6];
      charArray0[0] = '';
      charArray0[1] = '@';
      charArray0[2] = '*';
      charArray0[3] = 'h';
      charArray0[4] = 'U';
      charArray0[5] = 'a';
      evaluation0.num2ShortID(1407, charArray0, 21);
      evaluation0.toClassDetailsString("(zE*mJ8UH*");
      evaluation0.kappa();
      try { 
        evaluation0.updateStatsForPredictor(0.0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (-2.0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.equals((Object) null);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1), false, false);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.setOptions(testInstances0.DEFAULT_WORDS);
      // Undeclared exception!
      try { 
        simpleLogistic0.getMeasure(">d&[tJ$b%M+Xxw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // >d&[tJ$b%M+Xxw not supported (SimpleLogistic)
         //
         verifyException("weka.classifiers.functions.SimpleLogistic", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[1];
      Random.setNextRandom(8);
      evaluation0.truePositiveRate(19);
      evaluation0.areaUnderROC(19);
      Classifier classifier0 = null;
      DenseInstance denseInstance0 = new DenseInstance(8);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-3452));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5986533447811473
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation1.weightedFMeasure();
      evaluation1.toClassDetailsString("@data");
      evaluation0.kappa();
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution((-2296.8141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2296
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5165470788245923
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 59.68476;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (double) (-1);
      doubleArray0[5] = 59.68476;
      doubleArray0[6] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance(59.68476, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      evaluation0.weightedMatthewsCorrelation();
      int int0 = (-1725832528);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1725832528));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.576541015599165
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.weightedFMeasure();
      evaluation0.toClassDetailsString("7Q");
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, denseInstance1, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5875571054530724
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.toClassDetailsString("7Q");
      evaluation0.kappa();
      String[] stringArray0 = new String[9];
      stringArray0[0] = " ";
      stringArray0[1] = "(&N90Wagh|9-g";
      stringArray0[2] = "7Q";
      stringArray0[3] = "D7qi";
      stringArray0[4] = " ";
      stringArray0[5] = "@relation";
      stringArray0[6] = ".bsi";
      stringArray0[7] = ".bsi";
      stringArray0[8] = "TP{ ";
      testInstances0.setOptions(stringArray0);
      evaluation0.pctCorrect();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-2030));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3350282688481507
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[2] = (double) (-2);
      evaluation0.weightedTruePositiveRate();
      evaluation0.SFEntropyGain();
      evaluation0.weightedRecall();
      ZeroR zeroR0 = new ZeroR();
      zeroR0.getCapabilities();
      TestInstances testInstances1 = new TestInstances();
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      evaluation0.SFMeanSchemeEntropy();
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 395.2530874480266;
      doubleArray1[1] = (-2.0);
      doubleArray1[2] = (double) (-2);
      doubleArray1[3] = (double) (-1);
      DenseInstance denseInstance1 = new DenseInstance(395.2530874480266, doubleArray1);
      // Undeclared exception!
      try { 
        denseInstance1.setClassValue((-1646.3871488959));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.778098004139904
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      Integer integer0 = new Integer((-2));
      evaluation0.pctUnclassified();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setOutputFilename(false);
      Evaluation evaluation1 = new Evaluation(instances0);
      textDirectoryLoader0.setOptions(testInstances0.DEFAULT_WORDS);
      try { 
        evaluation0.toCumulativeMarginDistributionString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Class must be nominal for margin distributions
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.678636456709463
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.weightedFMeasure();
      evaluation0.toClassDetailsString("7Q");
      evaluation0.kappa();
      double[] doubleArray1 = evaluation0.makeDistribution(0.3);
      try { 
        evaluation0.evaluateModelOnce(doubleArray1, (Instance) denseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.843329017801548
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.weightedFMeasure();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numTrueNegatives((-2));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.errorRate();
      evaluation1.unclassified();
      Random.setNextRandom((-1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.248329864628005
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2647.7077157194);
      DenseInstance denseInstance0 = new DenseInstance((-2647.7077157194), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-2647.7077157194));
      evaluation0.toSummaryString(false);
      PipedReader pipedReader0 = new PipedReader(6);
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1510595367043153
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2647.7077157194);
      DenseInstance denseInstance0 = new DenseInstance((-2647.7077157194), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-3539.25));
      evaluation0.toSummaryString(true);
      PipedReader pipedReader0 = new PipedReader(48);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-193.7723216251894));
      evaluation1.weightedFMeasure();
      evaluation1.toClassDetailsString("=== Summary ===\n\nTotal Number of Instances                0     \n");
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0134399594822057
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      textDirectoryLoader0.setOutputFilename(true);
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[0];
      textDirectoryLoader0.setOptions(stringArray0);
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.toCumulativeMarginDistributionString();
      String[] stringArray1 = new String[0];
      try { 
        Evaluation.evaluateModel(" -1       0    \n", stringArray1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name  -1       0    
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4031416180176828
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OneR oneR0 = new OneR();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "newNominalRule";
      AbstractClassifier.runClassifier(oneR0, stringArray0);
      Evaluation.getGlobalInfo(oneR0);
      CostMatrix costMatrix0 = new CostMatrix(825);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.786604611732581
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_ATTRIBUTES;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.weightedFMeasure();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numTrueNegatives(117);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation2 = new Evaluation(instances0);
      M5Rules m5Rules0 = new M5Rules();
      MockRandom mockRandom0 = new MockRandom(2170L);
      try { 
        evaluation2.crossValidateModel((Classifier) m5Rules0, instances0, (-1590), (java.util.Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation.handleCostOption((String) null, 1673);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.SFMeanEntropyGain();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      DenseInstance denseInstance0 = new DenseInstance(1);
      String[] stringArray0 = new String[2];
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7885074314823854
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      double double0 = evaluation0.weightedFMeasure();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.numTrueNegatives((-2));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      double double2 = evaluation0.trueNegativeRate(6);
      assertEquals(0.0, double2, 0.01);
      
      evaluation1.setPriors(instances0);
      assertTrue(evaluation1.equals((Object)evaluation0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      DenseInstance denseInstance0 = new DenseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".cost";
      stringArray0[1] = ".cost";
      stringArray0[2] = ".cost";
      stringArray0[3] = ".cost";
      stringArray0[4] = ".cost";
      stringArray0[5] = ".cost";
      try { 
        Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.CostSensitiveClassifier:
         // 
         // -M
         // \tMinimize expected misclassification cost. Default is to
         // \treweight training instances according to costs per class
         // -C <cost file name>
         // \tFile name of a cost matrix to use. If this is not supplied,
         // \ta cost matrix will be loaded on demand. The name of the
         // \ton-demand file is the relation name of the training data
         // \tplus \".cost\", and the path to the on-demand file is
         // \tspecified with the -N option.
         // -N <directory>
         // \tName of a directory to search for cost files when loading
         // \tcosts on demand (default current directory).
         // -cost-matrix <matrix>
         // \tThe cost matrix in Matlab single line format.
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -W
         // \tFull name of base classifier.
         // \t(default: weka.classifiers.rules.ZeroR)
         // 
         // Options specific to classifier weka.classifiers.rules.ZeroR:
         // 
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.8952983793363023
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 6;
      doubleArray1[2] = (double) (-2);
      evaluation0.updateNumericScores(doubleArray1, doubleArray1, (-2.0));
      evaluation0.weightedFMeasure();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedAreaUnderROC();
      evaluation0.numTrueNegatives(6);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      REPTree rEPTree0 = new REPTree();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) rEPTree0, (Instance) denseInstance1, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.787882040613092
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation0.sizeOfPredictedRegions();
      evaluation0.numTrueNegatives(117);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.trueNegativeRate((-651));
      assertTrue(evaluation0.equals((Object)evaluation1));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3149063636538285
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      Cobweb cobweb0 = new Cobweb();
      Capabilities capabilities0 = cobweb0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      evaluation0.weightedAreaUnderPRC();
      testInstances0.generate(".");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.pctUnclassified();
      evaluation1.KBMeanInformation();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1105300498329425
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.m_SumKBInfo;
      assertNotEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.equals(instances1);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(0, true, false);
      ZeroR zeroR0 = new ZeroR();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      zeroR0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        simpleLogistic0.getMeasure("OwN|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // OwN| not supported (SimpleLogistic)
         //
         verifyException("weka.classifiers.functions.SimpleLogistic", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8913741235084864
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      CostMatrix costMatrix0 = null;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.useNoPriors();
      evaluation0.KBRelativeInformation();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, doubleArray0, 830.9894591845);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      evaluation0.areaUnderROC(1308);
      DenseInstance denseInstance2 = new DenseInstance(124);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) null, (Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "http://guppy.mpe.nus.edu.sg/~mpessk/svm/smo_mod_nc.ps.gz";
      Evaluation.main(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.080058785805296
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OneR oneR0 = new OneR();
      int int0 = 1908;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(1908, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = new Instances(instances0);
      Evaluation evaluation0 = new Evaluation(instances1);
      evaluation0.KBRelativeInformation();
      int int1 = 25;
      CostMatrix costMatrix0 = new CostMatrix(25);
      TestInstances testInstances0 = new TestInstances();
      Instances instances2 = testInstances0.generate(".bsi");
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances2, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8430901887641116
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.weightedFMeasure();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedAreaUnderROC();
      double double0 = evaluation0.numTrueNegatives(117);
      assertEquals(0.0, double0, 0.01);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      assertTrue(evaluation1.equals((Object)evaluation0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.180791059930019
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      testInstances0.setNumRelationalNumeric(2769);
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.NO_CLASS;
      findWithCapabilities0.disableNot(capabilities_Capability0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.weightedFMeasure();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.weightedAreaUnderROC();
      evaluation0.matthewsCorrelationCoefficient(1553);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 672.2;
      doubleArray1[1] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(672.2, doubleArray1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance0);
      Attribute attribute0 = new Attribute("f;_tCLYOh[zm", " ");
      binarySparseInstance0.isMissing(attribute0);
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) classificationViaRegression0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1456287556), false, false);
      simpleLogistic0.setNumBoostingIterations((-1456287556));
      double double0 = (-2112.71918678);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2112.71918678);
      doubleArray0[1] = (-2112.71918678);
      doubleArray0[2] = (-655.0);
      doubleArray0[3] = (-655.0);
      doubleArray0[4] = (-655.0);
      doubleArray0[5] = (-655.0);
      doubleArray0[6] = (-2112.71918678);
      doubleArray0[7] = (-2112.71918678);
      doubleArray0[8] = (-2112.71918678);
      DenseInstance denseInstance0 = new DenseInstance((-655.0), doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getRevision();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) simpleLogistic0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      Classifier classifier0 = null;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) null, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.576541015599165
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances0 = testInstances0.generate("D7qi");
      Evaluation evaluation0 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-2.0);
      doubleArray0[2] = (double) (-2);
      DenseInstance denseInstance0 = new DenseInstance((-2.0), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance(denseInstance1);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMatches();
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation0.weightedFMeasure();
      evaluation0.sizeOfPredictedRegions();
      evaluation0.toClassDetailsString("7Q");
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      int int0 = (-1456287562);
      SimpleLogistic simpleLogistic0 = new SimpleLogistic((-1456287562), false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.errorRate();
      evaluation0.weightedMatthewsCorrelation();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-1456287562));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      Random.setNextRandom(8);
      double double1 = evaluation0.weightedTruePositiveRate();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.getClassPriors();
      assertEquals(Double.NaN, evaluation0.weightedTruePositiveRate(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        Evaluation.handleCostOption("j ", 19);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, (CostMatrix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("@relation", arrayList0, 106);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      CoverTree coverTree0 = new CoverTree();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 106;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2222.5885232682836));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 23;
      Instances instances0 = new Instances("attributes", arrayList0, 23);
      CostMatrix costMatrix0 = new CostMatrix(23);
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("XxD");
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ClassIsNominal = false;
      evaluation0.useNoPriors();
      try { 
        evaluation0.KBRelativeInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
