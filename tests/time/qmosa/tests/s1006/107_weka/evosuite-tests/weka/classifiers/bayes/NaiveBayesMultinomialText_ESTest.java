/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:20:10 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.File;
import java.util.ArrayList;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.xml.sax.SAXParseException;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.bayes.net.BIFReader;
import weka.classifiers.functions.SGDText;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.OptionHandlerJavadoc;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Stopwords;
import weka.core.TestInstances;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.Tokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.unsupervised.attribute.ReplaceMissingValues;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 833);
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      String string0 = "-F <num>";
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1312.767702322373;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 833;
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(833, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 4.052268493756443;
      double[] doubleArray0 = new double[6];
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      doubleArray0[0] = 4.052268493756443;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[1] = 931.48;
      naiveBayesMultinomialText0.m_periodicP = 3;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[2] = 0.0;
      doubleArray0[0] = 0.0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "`d3[23iKVDf}G4~u");
      doubleArray0[4] = 0.2;
      doubleArray0[4] = 2258.7213399962;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.822061379926953
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 4.052268493756443;
      double[] doubleArray0 = new double[6];
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      doubleArray0[0] = 4.052268493756443;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[1] = 931.48;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[2] = 0.0;
      doubleArray0[0] = 0.0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "\tNormalize document length (use in conjunction with -norm and -lnorm)");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "`d3[23iKVDf}G4~u");
      doubleArray0[4] = 0.2;
      doubleArray0[4] = 2258.7213399962;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      double[] doubleArray1 = new double[0];
      DenseInstance denseInstance0 = new DenseInstance((-1930.106171468345), doubleArray1);
      naiveBayesMultinomialText0.getOptions();
      Random.setNextRandom(3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.9005822944550714
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_t = (-700.0562);
      naiveBayesMultinomialText0.m_leplace = 498.0;
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      naiveBayesMultinomialText0.m_wordsPerClass = null;
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.getMinWordFrequency();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      try { 
        AbstractClassifier.forName("If true then document length is normalized according to the settings for norm and lnorm", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: If true then document length is normalized according to the settings for norm and lnorm
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0523132038287963
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.tokenizerTipText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getLowercaseTokens();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.globalInfo();
      naiveBayesMultinomialText0.getMinWordFrequency();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.minWordFrequencyTipText();
      naiveBayesMultinomialText1.getRevision();
      naiveBayesMultinomialText0.normTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      
      String string0 = naiveBayesMultinomialText1.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.574464215715726
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.m_normalize = false;
      Stopwords stopwords0 = new Stopwords();
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.m_wordFrequencies = false;
      SGDText sGDText0 = new SGDText();
      Tokenizer tokenizer0 = sGDText0.getTokenizer();
      naiveBayesMultinomialText0.m_tokenizer = tokenizer0;
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.globalInfo();
      System.setCurrentTimeMillis(1471L);
      stopwords0.is("-tokenizer <spec>");
      stopwords0.elements();
      naiveBayesMultinomialText0.tokenizerTipText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.normTipText();
      File file1 = MockFile.createTempFile("anything", "", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      naiveBayesMultinomialText0.getStopwords();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1775502595413943
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      snowballStemmer0.getStemmer();
      snowballStemmer0.setStemmer("Whether to convert all tokens to lowercase");
      naiveBayesMultinomialText0.getCapabilities();
      snowballStemmer0.stemmerTipText();
      snowballStemmer0.stem("Can't cross validate an attribute transformer.");
      snowballStemmer0.stemmerTipText();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.setNorm((-2295.2));
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.stopwordsTipText();
      File file0 = naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.listOptions();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2295.2);
      doubleArray0[3] = 62.3331336;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-2295.2);
      doubleArray0[6] = (-2295.2);
      doubleArray0[7] = 1.0E-10;
      doubleArray0[8] = (-2295.2);
      DenseInstance denseInstance0 = new DenseInstance((-1.0), doubleArray0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)19;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Stopwords stopwords0 = new Stopwords();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.m_stopwords = stopwords0;
      MockFile mockFile0 = new MockFile("M:0C|)U]");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0);
      stopwords0.write(bufferedWriter0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.listOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getLNorm();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.52449073552999
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      naiveBayesMultinomialText0.m_stemmer = null;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      naiveBayesMultinomialText0.setMinWordFrequency(865);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.setMinWordFrequency(4.8);
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.getUseStopList();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("9122");
      testInstances0.getData();
      // Undeclared exception!
      try { 
        instances0.swap(3808, 3808);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3808, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      MockFile.createTempFile("buQ*pn`J<qb<IMN)y", "buQ*pn`J<qb<IMN)y");
      naiveBayesMultinomialText0.setStopwords((File) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer((String) null);
      SnowballStemmer snowballStemmer1 = new SnowballStemmer("^'l}");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^'l}";
      stringArray0[1] = "";
      stringArray0[2] = "^'l}";
      stringArray0[3] = "org.tartarus.snowball.ext";
      stringArray0[4] = "buQ*pn`J<qb<IMN)y";
      stringArray0[5] = "org.tartarus.snowball.ext";
      stringArray0[6] = "org.tartarus.snowball";
      stringArray0[7] = "";
      stringArray0[8] = "org.tartarus.snowball.ext";
      snowballStemmer0.setOptions(stringArray0);
      snowballStemmer0.stem("");
      naiveBayesMultinomialText0.setPeriodicPruning((-3643));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-3643);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance(binarySparseInstance1, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      String string0 = naiveBayesMultinomialText0.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
      
      String string1 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("The stemming algorithm to use on the words.", string1);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.generate();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc1;
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc2;
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[3] = optionHandlerJavadoc3;
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc6 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc7 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc8 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc9 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc10 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc11 = new OptionHandlerJavadoc();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 297.952393662;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 865;
      DenseInstance denseInstance0 = new DenseInstance((-3339.3303737), doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = (-1607);
      naiveBayesMultinomialText0.setPeriodicPruning((-1607));
      boolean boolean0 = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getUseStopList();
      double[] doubleArray0 = new double[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      doubleArray0[0] = 2492.1883831306477;
      doubleArray0[1] = (-2824.7);
      doubleArray0[2] = 2492.1883831306477;
      doubleArray0[3] = (-2824.7);
      doubleArray0[4] = 2492.1883831306477;
      doubleArray0[5] = (double) (-1607);
      doubleArray0[6] = 2492.1883831306477;
      DenseInstance denseInstance0 = new DenseInstance((-2824.7), doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.updateClassifier(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "7$F%k>dqo0D,=p");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "n/<num>";
      stringArray0[1] = "gr)4";
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)30, doubleArray0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      DenseInstance denseInstance0 = new DenseInstance(1488);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4156732692787166
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 4.052268493756443;
      double[] doubleArray0 = new double[6];
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      doubleArray0[0] = (-2781.6204751981);
      doubleArray0[1] = 931.48;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      MockFile mockFile0 = new MockFile("/+RBJ");
      MockFile mockFile1 = new MockFile("/+RBJ", "/+RBJ");
      mockFile1.setReadable(true);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/+RBJ";
      stringArray0[1] = "/+RBJ";
      stringArray0[2] = "/+RBJ";
      stringArray0[3] = "EJ";
      stringArray0[4] = "/+RBJ";
      stringArray0[5] = "/+RBJ";
      stringArray0[6] = "/+RBJ";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc1;
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc2;
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[3] = optionHandlerJavadoc3;
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc6 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc7 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc8 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc[] optionHandlerJavadocArray1 = new OptionHandlerJavadoc[6];
      optionHandlerJavadocArray1[0] = optionHandlerJavadoc2;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      optionHandlerJavadocArray1[1] = optionHandlerJavadoc2;
      optionHandlerJavadocArray1[2] = optionHandlerJavadoc3;
      optionHandlerJavadocArray1[3] = optionHandlerJavadoc5;
      optionHandlerJavadocArray1[4] = optionHandlerJavadoc1;
      optionHandlerJavadocArray1[5] = optionHandlerJavadoc7;
      instances0.toArray(optionHandlerJavadocArray1);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 0;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      int int1 = 865;
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.generate();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc1;
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc2;
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[3] = optionHandlerJavadoc3;
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc6 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc7 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc8 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc9 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc10 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc11 = new OptionHandlerJavadoc();
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7342139074178449
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("buQ*pn`J<qb<IMN)y", "buQ*pn`J<qb<IMN)y");
      naiveBayesMultinomialText0.setStopwords(file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer((String) null);
      SnowballStemmer snowballStemmer1 = new SnowballStemmer("^'l}");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^'l}";
      stringArray0[1] = "";
      stringArray0[2] = "^'l}";
      stringArray0[3] = "org.tartarus.snowball.ext";
      stringArray0[4] = "buQ*pn`J<qb<IMN)y";
      stringArray0[5] = "org.tartarus.snowball.ext";
      stringArray0[6] = "org.tartarus.snowball";
      stringArray0[7] = "Alb8wV1}.=Bk9@a";
      stringArray0[8] = "org.tartarus.snowball.ext";
      snowballStemmer0.stem("");
      int[] intArray0 = new int[2];
      intArray0[0] = (-3643);
      intArray0[1] = (-3643);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1746.59830621363, intArray0, 0);
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "<!-- options-end -->";
      stringArray0[1] = "<!-- options-end -->";
      stringArray0[2] = null;
      stringArray0[3] = "OK";
      stringArray0[4] = "-F <num>";
      stringArray0[5] = null;
      stringArray0[6] = "gr)U4";
      stringArray0[7] = "<!-- options-end -->";
      stringArray0[8] = "-F <num>";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.411969412814163
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 4.052268493756443;
      double[] doubleArray0 = new double[6];
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      doubleArray0[0] = (-2781.6204751981);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setMinWordFrequency((-2781.6204751981));
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      Instances instances0 = naiveBayesMultinomialText0.m_data;
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.739424802905942
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadoc0.generate();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc1;
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc2;
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc4 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc5 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc6 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc7 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc8 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc9 = new OptionHandlerJavadoc();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "<!-- options-start -->";
      stringArray0[1] = "<!-- options-start -->";
      stringArray0[2] = "@data";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      instances0.toArray(optionHandlerJavadocArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+7F79y~m=\tv}6";
      stringArray0[1] = "";
      NaiveBayesMultinomialText.main(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning((-1606));
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setLNorm((-1606));
      naiveBayesMultinomialText0.m_minWordP = (-783.91751779835);
      naiveBayesMultinomialText0.setNorm(649.032404226);
      assertEquals((-1606), naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      MockFile mockFile0 = new MockFile("P", "P");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 608.55;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("P/P");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)97;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      intArray0[1] = 0;
      intArray0[2] = (-1181);
      intArray0[3] = (-3067);
      intArray0[4] = 0;
      intArray0[5] = 15;
      intArray0[6] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(608.55, doubleArray0, intArray0, 0);
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)32;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte) (-60);
      byteArray1[3] = (byte)63;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getModelFile();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.globalInfo();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.minWordFrequencyTipText();
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.LNormTipText();
      System.setCurrentTimeMillis(1460L);
      naiveBayesMultinomialText0.tokenizerTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.247769996162361
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string0);
      
      Random.setNextRandom((-3142));
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[1] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[2] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray0[3] = ";xbVVRx";
      stringArray0[4] = "If true then document length is normalized according to the settings for norm and lnorm";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      assertEquals(12, stringArray1.length);
      
      String[] stringArray2 = new String[3];
      stringArray2[0] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray2[1] = "If true then document length is normalized according to the settings for norm and lnorm";
      stringArray2[2] = "If true then document length is normalized according to the settings for norm and lnorm";
      naiveBayesMultinomialText0.setOptions(stringArray2);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(0);
      Instances instances0 = new Instances("", arrayList0, 865);
      OptionHandlerJavadoc[] optionHandlerJavadocArray0 = new OptionHandlerJavadoc[6];
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[0] = optionHandlerJavadoc0;
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[1] = optionHandlerJavadoc1;
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      optionHandlerJavadocArray0[2] = optionHandlerJavadoc2;
      int[] intArray0 = new int[5];
      intArray0[0] = (-2162);
      intArray0[1] = 1907;
      intArray0[2] = 0;
      intArray0[3] = 1910;
      intArray0[4] = 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, 1910);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.613084923556366
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      File file0 = MockFile.createTempFile("buQ*pn`J<qb<IMN)y", "buQ*pn`J<qb<IMN)y");
      naiveBayesMultinomialText0.setStopwords(file0);
      MockFile mockFile0 = new MockFile("/", "/");
      mockFile0.setReadable(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "/";
      stringArray0[1] = "7KW. ReY~-;9`#u)";
      stringArray0[2] = "iqU LF%1";
      stringArray0[3] = "/";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("G@7syKbB0zLDmJ=K-");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      naiveBayesMultinomialText0.setStemmer(lovinsStemmer0);
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      OptionHandlerJavadoc optionHandlerJavadoc0 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc1 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc2 = new OptionHandlerJavadoc();
      OptionHandlerJavadoc optionHandlerJavadoc3 = new OptionHandlerJavadoc();
      ReplaceMissingValues replaceMissingValues0 = new ReplaceMissingValues();
      // Undeclared exception!
      try { 
        replaceMissingValues0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      File file0 = MockFile.createTempFile("buQ*pn`J<qb<IMN)y", "buQ*pn`J<qb<IMN)y");
      naiveBayesMultinomialText0.setStopwords(file0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("");
      SnowballStemmer snowballStemmer1 = new SnowballStemmer("YA7bzcbRFx3");
      SnowballStemmer snowballStemmer2 = new SnowballStemmer();
      snowballStemmer2.stem("");
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-929);
      intArray0[2] = 0;
      intArray0[3] = (-3643);
      intArray0[4] = (-3643);
      intArray0[5] = (-3643);
      intArray0[6] = (-3643);
      intArray0[7] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, intArray0, (-896));
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText1.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.9032127804587504
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, (String[]) null);
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      naiveBayesMultinomialText0.reset();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-979.96461);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      SGDText sGDText0 = new SGDText();
      AbstractClassifier.makeCopy(naiveBayesMultinomialText0);
      Stemmer stemmer0 = sGDText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      doubleArray0[1] = 1229.1145601386;
      naiveBayesMultinomialText0.m_minWordP = (-979.96461);
      naiveBayesMultinomialText0.m_useStopList = true;
      SGDText sGDText1 = new SGDText();
      SGDText.main((String[]) null);
      Stemmer stemmer1 = sGDText1.getStemmer();
      NullStemmer.main((String[]) null);
      naiveBayesMultinomialText0.setStemmer(stemmer1);
      doubleArray0[2] = 0.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.setOptions((String[]) null);
      naiveBayesMultinomialText0.periodicPruningTipText();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals((-979.96461), double0, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2288.811791021411;
      doubleArray0[3] = (-1096.28715495);
      doubleArray0[4] = 2288.811791021411;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      doubleArray0[7] = 0.1;
      doubleArray0[8] = 0.1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1682.0373530701), doubleArray0);
      naiveBayesMultinomialText0.getTokenizer();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("5.7 <= 5.70001 ? ", "5.7 <= 5.70001 ? ", protectedProperties0);
      binarySparseInstance0.toString(attribute0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A.write(Writer)\n";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "\t";
      AbstractClassifier.runClassifier(naiveBayesMultinomialText0, stringArray0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setMinWordFrequency(2.0);
      Stopwords stopwords0 = naiveBayesMultinomialText0.m_stopwords;
      naiveBayesMultinomialText0.m_stopwords = null;
      naiveBayesMultinomialText0.listOptions();
      BIFReader bIFReader0 = new BIFReader();
      try { 
        bIFReader0.processString("Iu^t\"P>5Rd");
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.9803943038548706
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      File file0 = MockFile.createTempFile("buQ*pn`J<qb<IMN)y", "buQ*pn`J<qb<IMN)y");
      naiveBayesMultinomialText0.setStopwords(file0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer((String) null);
      SnowballStemmer snowballStemmer1 = new SnowballStemmer("^'l}");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^'l}";
      stringArray0[1] = "";
      stringArray0[2] = "^'l}";
      stringArray0[3] = "org.tartarus.snowball.ext";
      stringArray0[4] = "buQ*pn`J<qb<IMN)y";
      stringArray0[5] = "org.tartarus.snowball.ext";
      stringArray0[6] = "org.tartarus.snowball";
      stringArray0[7] = "";
      stringArray0[8] = "org.tartarus.snowball.ext";
      snowballStemmer0.setOptions(stringArray0);
      snowballStemmer0.stem("");
      naiveBayesMultinomialText0.setPeriodicPruning((-3643));
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.847765499922813
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText0.tokenizerTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.m_t = (double) (-1);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "buQ*pn`J<qb<IMN)y";
      stringArray0[1] = "";
      stringArray0[2] = "-M";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -M option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      naiveBayesMultinomialText0.setNorm(1.0);
      doubleArray0[1] = (-1515.57041765);
      doubleArray0[2] = 3.0;
      doubleArray0[3] = 1848.0320253777425;
      doubleArray0[4] = 6.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.listOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = naiveBayesMultinomialText0.globalInfo();
      assertEquals("Multinomial naive bayes for text data. Operates directly (and only) on String attributes. Other types of input attributes are accepted but ignored during training and classification", string0);
      
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, double0, 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4512834591327533
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 4.052268493756443;
      double[] doubleArray0 = new double[6];
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      doubleArray0[0] = 4.052268493756443;
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[1] = 931.48;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      
      naiveBayesMultinomialText0.getMinWordFrequency();
      String string1 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string1);
      
      String string2 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals("Whether to convert all tokens to lowercase", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.989785056247074
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(1260);
      naiveBayesMultinomialText0.getLowercaseTokens();
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.setNorm(0.0);
      naiveBayesMultinomialText0.setLNorm((-1.0));
      naiveBayesMultinomialText0.getUseStopList();
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = (double) 1260;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.7976931348623157E308);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1045.407, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.439508264151583
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.listIterator();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText0.m_tokenizer;
      naiveBayesMultinomialText0.m_tokenizer = (Tokenizer) wordTokenizer0;
      String string1 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string1);
      
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(12, stringArray0.length);
      
      double double0 = naiveBayesMultinomialText0.m_norm;
      assertEquals(1.0, double0, 0.01);
      
      String string2 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string2);
      
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 4.052268493756443;
      double[] doubleArray0 = new double[6];
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      doubleArray0[1] = 931.48;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.m_normalize = false;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "M-i>ipC");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "`d3[23iKVDf}G4~u");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      assertNotNull(stemmer0);
      
      naiveBayesMultinomialText0.getNormalizeDocLength();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(3.0, double0, 0.01);
      
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      String string1 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string1);
      
      String string2 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string2);
      
      String string3 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string3);
      
      String string4 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals("The LNorm to use for document length normalization.", string4);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }
}
