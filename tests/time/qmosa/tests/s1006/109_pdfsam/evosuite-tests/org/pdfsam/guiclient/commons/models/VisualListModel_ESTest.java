/*
 * This file was automatically generated by EvoSuite
 * Tue Dec 03 18:37:49 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTEventMulticaster;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.event.KeyListener;
import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.renderable.ParameterBlock;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.media.jai.operator.FPXDescriptor;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JSplitPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.StyledEditorKit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.getElements();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      int[] intArray0 = new int[1];
      intArray0[0] = (-1657);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1657
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      int int0 = (-1210);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-1210);
      try { 
        visualListModel0.removeElements(intArray0, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1210
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3554595688722784
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndex(847);
      visualListModel0.moveUpIndex(1348);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1772));
      linkedHashSet0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      int int0 = 2072;
      stack0.removeElement(linkedHashSet0);
      visualListModel0.prependAllElements(linkedList0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(35, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 35
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.880959590136394
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndex(847);
      visualListModel0.moveUpIndex((-360));
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      visualListModel0.removeElements(intArray0, true);
      assertEquals(0, visualListModel0.getSize());
      
      visualListModel0.clearData();
      visualListModel0.addElementAt((VisualPageListItem) null, 847);
      visualListModel0.updateElementAt(847, (VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      visualListModel1.moveUpIndexes(intArray0);
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualListModel1.setData(visualPageListItemArray0);
      visualListModel0.getValidElements();
      visualListModel1.removeElements(2971, (-309), true);
      visualListModel1.moveDownIndexes(intArray0);
      assertEquals(8, visualListModel1.getSize());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.8444969874604245
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndex(847);
      visualListModel0.moveUpIndex((-360));
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements(847, (-360), true);
      visualListModel0.clearData();
      visualListModel0.addElementAt((VisualPageListItem) null, 847);
      visualListModel0.updateElementAt(847, (VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      visualListModel1.moveUpIndexes(intArray0);
      visualPageListItemArray0[1] = null;
      visualPageListItemArray0[2] = null;
      visualPageListItemArray0[3] = null;
      visualPageListItemArray0[4] = null;
      visualListModel1.getListDataListeners();
      visualPageListItemArray0[5] = null;
      visualPageListItemArray0[6] = null;
      visualPageListItemArray0[7] = null;
      visualListModel1.setData(visualPageListItemArray0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      // Undeclared exception!
      try { 
        visualListModel1.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7275737911350801
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate3);
      predicate4.and(predicate2);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.removeIf(predicate2);
      linkedHashSet0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(linkedHashSet0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      vector1.add((VisualPageListItem) null);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap2 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      BiFunction<RenderingHints.Key, RenderingHints.Key, PdfGraphics2D.HyperLinkKey> biFunction0 = (BiFunction<RenderingHints.Key, RenderingHints.Key, PdfGraphics2D.HyperLinkKey>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(sunHints_Key1, sunHints_Key0, biFunction0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      // Undeclared exception!
      try { 
        visualListModel1.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6317933262194715
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[1];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndex(847);
      int int0 = (-360);
      visualListModel0.moveUpIndex((-360));
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 847);
      linkedHashSet0.add((VisualPageListItem) null);
      int int1 = (-2769);
      stack0.add((VisualPageListItem) null);
      visualListModel0.updateElementAt((-2769), (VisualPageListItem) null);
      visualListModel0.prependAllElements(stack0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.042632211710285
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate0.or(predicate2);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate3.and(predicate2);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.removeIf(predicate2);
      linkedHashSet0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(linkedHashSet0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      vector1.add((VisualPageListItem) null);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap2 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      BiFunction<RenderingHints.Key, RenderingHints.Key, PdfGraphics2D.HyperLinkKey> biFunction0 = (BiFunction<RenderingHints.Key, RenderingHints.Key, PdfGraphics2D.HyperLinkKey>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge((RenderingHints.Key) null, sunHints_Key0, biFunction0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      visualListModel1.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.removeElementAt(23, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 23
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.getElements();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7402338531746744
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[1];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndex(847);
      visualListModel0.moveUpIndex(1348);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      linkedList0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1772));
      linkedHashSet0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      int int0 = 2072;
      visualListModel0.updateElementAt(2072, (VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedList0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7229732264381465
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndex(847);
      visualListModel0.moveUpIndex(1348);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.addElementAt((VisualPageListItem) null, (-1772));
      stack0.add((VisualPageListItem) null);
      visualListModel0.updateElementAt(2072, (VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedList0);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.getElementAt(400);
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-2769));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndex(839);
      visualListModel0.moveUpIndex((-360));
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashSet0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate0);
      predicate2.and(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      linkedHashSet0.removeIf(predicate3);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      JSplitPane jSplitPane0 = new JSplitPane();
      visualListModel0.setData(vector0);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      vector0.listIterator();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      vector1.stream();
      visualListModel0.setData(vector1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.clearData();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      visualListModel0.removeElements((-1659), 0, false);
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.getElements();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      visualListModel0.setData(visualPageListItemArray0);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0524375018747634
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[1];
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      int int0 = 839;
      visualListModel0.moveDownIndex(839);
      int int1 = (-360);
      visualListModel0.moveUpIndex((-360));
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedHashSet0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.and(predicate0);
      predicate1.and(predicate2);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      linkedHashSet0.removeIf(predicate3);
      VisualPageListItem visualPageListItem0 = null;
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      vector0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedList0);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.584838202797333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveUpIndex(16);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      visualListModel0.removeElements(intArray0, true);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      VisualPageListItem visualPageListItem1 = null;
      visualListModel1.addElementAt((VisualPageListItem) null, 16);
      visualListModel0.updateElementAt((-2294), (VisualPageListItem) null);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel0.moveUpIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[7];
      visualPageListItemArray0[0] = null;
      VisualPageListItem visualPageListItem2 = null;
      try {
        visualPageListItem2 = new VisualPageListItem();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = (-2101);
      intArray0[1] = (-2817);
      visualListModel0.rotateClockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>(vector0);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      jComboBox0.addKeyListener((KeyListener) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jComboBox0, (-1), (-3185), (-23), (-2437), (-2437), (-2615), (-23), (-2437), false, (-1), 1639, 718, 1639);
      VisualListModel visualListModel1 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel1.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3597473990481395
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      visualListModel0.moveDownIndex(847);
      visualListModel0.moveUpIndex((-360));
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(linkedHashSet0);
      visualListModel0.clearData();
      visualListModel0.addElementAt((VisualPageListItem) null, 847);
      visualListModel0.updateElementAt(847, (VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      visualPageListItemArray0[0] = null;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      assertFalse(jComboBox0.getIgnoreRepaint());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-976));
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveUpIndex((-1));
      VisualListModel visualListModel2 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[2];
      int int0 = 0;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((BufferedImage) null, 0, false, "K!J]Mn", "K!J]Mn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9413967116162292
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      VisualPageListItem[] visualPageListItemArray1 = new VisualPageListItem[20];
      visualListModel0.setData(visualPageListItemArray1);
      ArrayList<VisualPageListItem> arrayList0 = new ArrayList<VisualPageListItem>();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      List<VisualPageListItem> list0 = visualListModel0.getValidElements();
      assertNull(list0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      VisualListModel visualListModel1 = new VisualListModel();
      Integer integer3 = JLayeredPane.PALETTE_LAYER;
      Integer integer4 = JLayeredPane.POPUP_LAYER;
      Integer integer5 = new Integer(400);
      Integer.getInteger("LUPtopND", integer4);
      int[] intArray0 = new int[8];
      intArray0[0] = (int) integerArray0[0];
      intArray0[1] = (int) integerArray0[0];
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate3);
      predicate2.negate();
      predicate4.and(predicate2);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.removeIf(predicate2);
      linkedHashSet0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      Vector<VisualPageListItem> vector2 = new Vector<VisualPageListItem>();
      vector2.add((VisualPageListItem) null);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap2 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      BiFunction<Object, Object, PdfGraphics2D.HyperLinkKey> biFunction0 = (BiFunction<Object, Object, PdfGraphics2D.HyperLinkKey>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(sunHints_Key1, sunHints_Key0, biFunction0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, DefaultTableModel> hashMap0 = new HashMap<RenderingHints.Key, DefaultTableModel>();
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      hashMap1.put(sunHints_Key1, sunHints_Key2);
      BiFunction<RenderingHints.Key, RenderingHints.Key, RenderingHints.Key> biFunction0 = (BiFunction<RenderingHints.Key, RenderingHints.Key, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any(java.awt.RenderingHints.Key.class) , any(java.awt.RenderingHints.Key.class));
      hashMap1.merge(sunHints_Key0, sunHints_Key0, biFunction0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateClockwiseElements(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>();
      jComboBox0.setVisible(false);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      ChronoField[] chronoFieldArray0 = new ChronoField[5];
      ChronoField chronoField0 = ChronoField.MINUTE_OF_DAY;
      chronoFieldArray0[0] = chronoField0;
      ChronoField chronoField1 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      chronoFieldArray0[1] = chronoField1;
      ChronoField chronoField2 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[2] = chronoField2;
      ChronoField chronoField3 = ChronoField.MILLI_OF_SECOND;
      chronoFieldArray0[3] = chronoField3;
      ChronoField chronoField4 = ChronoField.MILLI_OF_DAY;
      chronoFieldArray0[4] = chronoField4;
      DefaultComboBoxModel<ChronoField> defaultComboBoxModel0 = new DefaultComboBoxModel<ChronoField>(chronoFieldArray0);
      JComboBox<ChronoField> jComboBox1 = new JComboBox<ChronoField>(defaultComboBoxModel0);
      jComboBox1.addKeyListener((KeyListener) null);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jComboBox0, (-1852), 5, (-466), 5, 5, 1, 5, 91, false, 91, 1, (-466), (-1.0));
      visualListModel0.moveUpIndexes(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      stack0.stream();
      visualListModel0.setData(vector0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.clearData();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      visualListModel0.elementChanged((VisualPageListItem) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.addElement((VisualPageListItem) null);
      visualListModel0.moveDownIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.521121651040067
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.moveDownIndex(0);
      visualListModel0.moveUpIndex((-845));
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.add((VisualPageListItem) null);
      visualListModel0.prependAllElements(stack0);
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      Boolean boolean0 = new Boolean(true);
      linkedHashSet0.add((VisualPageListItem) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      hashMap0.put(sunHints_Key0, sunHints_Key0);
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.rotateClockwiseElements(intArray0);
      visualListModel2.removeElements(1531, 0, false);
      visualListModel1.moveDownIndexes(intArray0);
      assertEquals(2, intArray0.length);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6608395270586205
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      vector0.stream();
      vector0.listIterator();
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>();
      visualListModel0.addElementAt((VisualPageListItem) null, 633);
      visualListModel0.subList(7, 1639);
      visualListModel0.updateElementAt(35, (VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      intArray0[0] = 7;
      int[] intArray1 = new int[3];
      intArray1[0] = 13;
      intArray1[1] = 35;
      intArray1[2] = 1639;
      visualListModel0.undeleteElements(intArray1);
      visualListModel1.rotateClockwiseElements(intArray0);
      visualListModel0.getElementAt(13);
      visualListModel0.getValidElements();
      visualListModel1.removeElements(7, 1639, false);
      visualListModel1.removeElements(0, (-2895), false);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.147576009616535
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int int0 = 1588;
      visualListModel0.subList(1588, 1588, false);
      visualListModel0.addAllElements(1588, (Collection<VisualPageListItem>) stack0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      int int1 = (-1232);
      int int2 = 719;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.addElementAt((VisualPageListItem) null, (-1232));
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.updateElementAt(719, (VisualPageListItem) null);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(719, "OkpW2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      hashMap0.put((RenderingHints.Key) null, sunHints_Key3);
      BiFunction<Object, Object, RenderingHints.Key> biFunction0 = (BiFunction<Object, Object, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(sunHints_Key2, sunHints_Key2, biFunction0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList((-1349), (-1349), true);
      assertNull(collection0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2801024911433996
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.moveDownIndex(0);
      boolean boolean0 = false;
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, false);
      visualListModel0.addAllElements(0, collection0);
      visualListModel0.addAllElements(collection0);
      visualListModel0.subList(0, 0);
      visualListModel0.getListDataListeners();
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      String string0 = "";
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0477604168384906
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      vector0.listIterator();
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      jComboBox0.removeMouseWheelListener((MouseWheelListener) null);
      TreeSet<VisualPageListItem> treeSet0 = new TreeSet<VisualPageListItem>();
      visualListModel0.addAllElements(1222, (Collection<VisualPageListItem>) treeSet0);
      MouseWheelEvent mouseWheelEvent0 = new MouseWheelEvent(jComboBox0, 13, 13, 1639, 31, (-466), 31, 31, (-466), false, 8, 5, 13, (-7.333369493862686));
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.addAllElements((-399), (Collection<VisualPageListItem>) treeSet0);
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector1);
      visualListModel0.moveDownIndexes(intArray0);
      assertEquals(0, intArray0.length);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel0.moveDownIndex(1713);
      intArray0[0] = (-1899);
      intArray0[1] = 5150;
      int int0 = 0;
      visualListModel0.subList((-1899), 0);
      Kernel kernel0 = null;
      ConvolveOp convolveOp0 = new ConvolveOp((Kernel) null);
      // Undeclared exception!
      try { 
        ColorSpace.getInstance(1713);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown color space
         //
         verifyException("java.awt.color.ColorSpace", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7653327875937663
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex(10);
      visualListModel0.removeElements(1, (-1), false);
      int int0 = 5;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(5, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 5
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[1];
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray1 = new int[0];
      visualListModel1.moveUpIndexes(intArray1);
      visualListModel0.moveDownIndexes(intArray0);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      visualListModel1.getValidElements();
      visualListModel0.appendAllElements(linkedHashSet0);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel1.moveUpIndex(3);
      LinkedList<VisualPageListItem> linkedList0 = new LinkedList<VisualPageListItem>();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.prependAllElements(linkedList0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      BiFunction<RenderingHints.Key, Object, RenderingHints.Key> biFunction0 = (BiFunction<RenderingHints.Key, Object, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge(sunHints_Key1, sunHints_Key0, biFunction0);
      Hashtable<RenderingHints.Key, RenderingHints.Key> hashtable0 = new Hashtable<RenderingHints.Key, RenderingHints.Key>();
      Hashtable<RenderingHints.Key, StyledEditorKit.FontSizeAction> hashtable1 = new Hashtable<RenderingHints.Key, StyledEditorKit.FontSizeAction>();
      RenderingHints renderingHints0 = new RenderingHints(hashtable1);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      assertArrayEquals(new int[] {}, intArray1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = 0;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      Integer.getInteger("", (Integer) 0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      hashMap0.put(sunHints_Key0, sunHints_Key0);
      hashMap0.put(sunHints_Key0, sunHints_Key0);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = visualListModel0.getElementAt(0);
      assertNull(object0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      hashMap0.put((RenderingHints.Key) null, sunHints_Key3);
      BiFunction<Object, Object, RenderingHints.Key> biFunction0 = (BiFunction<Object, Object, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(sunHints_Key2, sunHints_Key2, biFunction0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      Vector<VisualPageListItem> vector0 = visualListModel1.data;
      visualListModel0.prependAllElements(vector0);
      int int0 = visualListModel0.getSize();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.9772464136241743
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap2 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) hashMap2);
      Object object0 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.and(predicate2);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      predicate4.and(predicate1);
      StyledEditorKit.FontSizeAction styledEditorKit_FontSizeAction0 = new StyledEditorKit.FontSizeAction("3@k6I7`E[", (-58));
      Predicate<Object> predicate5 = Predicate.isEqual((Object) styledEditorKit_FontSizeAction0);
      predicate4.and(predicate5);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      linkedHashSet0.removeIf(predicate0);
      linkedHashSet0.add((VisualPageListItem) null);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.prependAllElements(linkedHashSet0);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      Vector<VisualPageListItem> vector1 = new Vector<VisualPageListItem>();
      vector1.add((VisualPageListItem) null);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap3 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      BiFunction<Object, Object, RenderingHints.Key> biFunction0 = (BiFunction<Object, Object, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap3.merge(sunHints_Key0, sunHints_Key0, biFunction0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel1.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      OperationRegistry operationRegistry0 = OperationRegistry.getThreadSafeOperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      Hashtable<RenderingHints.Key, Object> hashtable0 = new Hashtable<RenderingHints.Key, Object>(40000);
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, " k*]rLN$", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \" k*]rLN$\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      vector0.listIterator();
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>(vector0);
      int int0 = 13;
      int int1 = 1639;
      int int2 = (-466);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      visualListModel0.moveUpIndex(1639);
      jComboBox0.addKeyListener((KeyListener) null);
      Map<RenderingHints.Key, StyledEditorKit.FontSizeAction> map0 = null;
      // Undeclared exception!
      try { 
        visualListModel0.subList(13, (-1980), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(13) > toIndex(-1980)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.137773400673192
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, DefaultTableModel> hashMap0 = new HashMap<RenderingHints.Key, DefaultTableModel>();
      HashMap<RenderingHints.Key, DefaultTableModel> hashMap1 = new HashMap<RenderingHints.Key, DefaultTableModel>();
      visualListModel0.removeElements(intArray0, true);
      // Undeclared exception!
      try { 
        visualListModel0.subList(586, (-2837), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(586) > toIndex(-2837)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.7653327875937666
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      visualListModel0.subList(0, 0, false);
      Stack<String> stack0 = new Stack<String>();
      Stack<VisualPageListItem> stack1 = new Stack<VisualPageListItem>();
      visualListModel0.data = (Vector<VisualPageListItem>) stack1;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-3931), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7962284387340903
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.removeElements(4917, 67, true);
      int[] intArray0 = new int[2];
      intArray0[0] = 4917;
      intArray0[1] = 3000;
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, DefaultTableModel> hashMap0 = new HashMap<RenderingHints.Key, DefaultTableModel>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_FRACTIONALMETRICS;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel();
      BiFunction<DefaultTableModel, DefaultTableModel, DefaultTableModel> biFunction0 = (BiFunction<DefaultTableModel, DefaultTableModel, DefaultTableModel>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(sunHints_Key0, defaultTableModel0, biFunction0);
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      // Undeclared exception!
      try { 
        renderingHints0.put(visualListModel0, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.pdfsam.guiclient.commons.models.VisualListModel cannot be cast to java.awt.RenderingHints$Key
         //
         verifyException("java.awt.RenderingHints", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key1 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      SunHints.Key sunHints_Key2 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      SunHints.Key sunHints_Key3 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      hashMap0.put((RenderingHints.Key) null, sunHints_Key3);
      BiFunction<Object, Object, RenderingHints.Key> biFunction0 = (BiFunction<Object, Object, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(sunHints_Key2, sunHints_Key2, biFunction0);
      Hashtable<RenderingHints.Key, Integer> hashtable0 = new Hashtable<RenderingHints.Key, Integer>();
      RenderingHints renderingHints0 = new RenderingHints(hashMap0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel1.addAllElements((-2247), (Collection<VisualPageListItem>) priorityQueue0);
      assertNotSame(visualListModel1, visualListModel0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.moveDownIndexes(intArray0);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      visualListModel0.reverseElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      visualListModel0.elementsChanged();
      BiFunction<RenderingHints.Key, RenderingHints.Key, RenderingHints.Key> biFunction0 = (BiFunction<RenderingHints.Key, RenderingHints.Key, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      RenderingHints renderingHints0 = new RenderingHints(hashMap1);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.422324514222255
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(0, 0, true);
      visualListModel0.addAllElements(0, collection0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      visualListModel0.addElementAt((VisualPageListItem) null, 709);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.updateElementAt((-1232), (VisualPageListItem) null);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.moveUpIndex(2590);
      visualListModel2.subList((-529), 2657);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      visualListModel1.updateElementAt(3163, (VisualPageListItem) null);
      assertNotSame(visualListModel1, visualListModel2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.subList(1476, (-1760));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1476) > toIndex(-1760)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      vector0.listIterator();
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>();
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      jComboBox0.addKeyListener((KeyListener) null);
      Collection<VisualPageListItem> collection0 = visualListModel0.subList(1639, 13);
      assertNull(collection0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      vector0.listIterator();
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>(vector0);
      jComboBox0.setVisible(false);
      AWTEventMulticaster.add((KeyListener) null, (KeyListener) null);
      jComboBox0.addKeyListener((KeyListener) null);
      visualListModel0.getValidElements();
      visualListModel0.addAllElements(7, (Collection<VisualPageListItem>) null);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      vector0.listIterator();
      JComboBox<ChronoField> jComboBox0 = new JComboBox<ChronoField>();
      MouseWheelListener mouseWheelListener0 = mock(MouseWheelListener.class, new ViolatedAssumptionAnswer());
      MouseWheelListener mouseWheelListener1 = AWTEventMulticaster.add(mouseWheelListener0, mouseWheelListener0);
      AWTEventMulticaster.remove(mouseWheelListener1, mouseWheelListener1);
      jComboBox0.removeMouseWheelListener((MouseWheelListener) null);
      visualListModel0.removeElements((-1508), (-1508), false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Integer[] integerArray0 = new Integer[6];
      int int0 = 0;
      Integer integer0 = Integer.getInteger("org.pdfsam.guiclient.commons.models.VisualListModel", 0);
      integerArray0[0] = integer0;
      Integer integer1 = Integer.valueOf(int0);
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.DRAG_LAYER;
      integerArray0[3] = integer3;
      integerArray0[4] = integer3;
      Integer.max(int0, int0);
      Integer integer4 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[5] = integer4;
      JComboBox<Integer> jComboBox0 = new JComboBox<Integer>(integerArray0);
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.getSize();
      visualListModel0.clearData();
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.clearData();
      visualListModel0.getValidElements();
      visualListModel0.getValidElements();
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7962284387340903
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(481);
      visualListModel0.moveUpIndex(1);
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(1, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.reverseElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap2 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      BiFunction<Object, Object, RenderingHints.Key> biFunction0 = (BiFunction<Object, Object, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap2.merge(sunHints_Key0, sunHints_Key0, biFunction0);
      RenderingHints renderingHints0 = new RenderingHints(hashMap1);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      int[] intArray1 = new int[7];
      intArray1[0] = 92;
      intArray1[1] = 32;
      intArray1[2] = 1252;
      intArray1[3] = (-1);
      intArray1[4] = 0;
      intArray1[5] = (-3119);
      intArray1[6] = (-43);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      assertNotSame(intArray1, intArray0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7962284387340903
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      visualListModel0.undeleteElements(intArray0);
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap0 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_COLOR_RENDERING;
      BiFunction<Object, RenderingHints.Key, RenderingHints.Key> biFunction0 = (BiFunction<Object, RenderingHints.Key, RenderingHints.Key>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      HashMap<RenderingHints.Key, RenderingHints.Key> hashMap1 = new HashMap<RenderingHints.Key, RenderingHints.Key>();
      hashMap1.merge(sunHints_Key0, sunHints_Key0, biFunction0);
      RenderingHints renderingHints0 = new RenderingHints(hashMap1);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }
}
