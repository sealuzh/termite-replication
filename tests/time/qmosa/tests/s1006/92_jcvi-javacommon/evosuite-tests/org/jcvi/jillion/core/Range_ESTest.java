/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 29 19:44:18 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.5597922303860674
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.ofLength(228L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Range range1 = Range.of(0L, 4230L);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(228L, 4230L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.contractBegin(0L);
      Range.Builder range_Builder3 = new Range.Builder((-2147483648L), 228L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder3.expandEnd(228L);
      Range.Builder range_Builder5 = new Range.Builder((-1228L), 1423L);
      Range.Builder range_Builder6 = new Range.Builder((-4301L), 834L);
      range_Builder6.build();
      range_Builder3.build();
      range_Builder6.build();
      Range.Builder range_Builder7 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder8 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder9 = null;
      try {
        range_Builder9 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9761388013384353
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3663L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6314865835289742
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range range1 = Range.of(4294967295L);
      List<Range> list0 = range0.complement(range1);
      range0.equals("(d+)s*..s*(d+)");
      range_CoordinateSystem0.toString();
      Range range2 = Range.of(range_CoordinateSystem0, (-2602L), 2508L);
      range1.complementFrom(list0);
      assertTrue(list0.contains(range0));
      
      Range.of(4696L);
      Range range3 = range0.intersection(range1);
      range2.asRange();
      boolean boolean0 = range3.isEmpty();
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.4329779847108775
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range range0 = Range.of(424L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 424L, 424L);
      range0.complement(range1);
      range0.equals(range1);
      range0.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-634L), (-603L));
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-603L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1297754579116375
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1859L, 1859L);
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-2954L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.4786384371263104
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range range1 = Range.of(2147483647L);
      Object object0 = new Object();
      range0.equals(range1);
      Range.of(range_CoordinateSystem0, 1391L, 2090L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.of(range_CoordinateSystem0, (-2397L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3891671320422585
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1096L, 3100L);
      Range.of((-32768L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 255L, 1678L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.059489109242114
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), 1236L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.5026579806520175
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      boolean boolean0 = range0.equals(range_CoordinateSystem0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 765L, 2407L);
      Range range1 = Range.of(range_CoordinateSystem1, (-143L), (-1L));
      Range.Builder range_Builder0 = new Range.Builder(3083L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem2, 256L, 2464L);
      Range.of(range_CoordinateSystem2, 1L, 1507L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.365078893979419
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 32767L;
      Range.of(range_CoordinateSystem0, (-390L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-25L);
      Range range0 = Range.of(range_CoordinateSystem1, (-25L), (-25L));
      range0.split(9223372036854774994L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range0.equals(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2178L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.429404755914598
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range1.getEnd();
      range1.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      range1.equals(object0);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.equals(range1);
      range0.getEnd();
      long long1 = (-3467L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.901908669403156
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-303L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -303 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9678674685340356
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      long long1 = (-2820L);
      Range range0 = Range.of(range_CoordinateSystem0, (-2820L), (-2820L));
      // Undeclared exception!
      try { 
        range0.split((-2820L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.484583036400051
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range1.getEnd();
      range1.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      range1.equals(object0);
      Range.ofLength(0L);
      Range range2 = Range.of(0L, 1302L);
      Long long0 = new Long(8L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem1, 0L, 2177L);
      range_Builder1.copy();
      range1.isSubRangeOf(range2);
      Range.Builder range_Builder2 = new Range.Builder(2177L);
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1791608057993814
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(4294967295L);
      range0.equals("r");
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(766L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.42737616893303
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      Range range1 = Range.of(33L);
      Range range2 = Range.of(33L);
      List<Range> list0 = range2.complement(range1);
      range0.iterator();
      range2.equals(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem1);
      range0.spliterator();
      range1.split(9997L);
      range_CoordinateSystem1.toString();
      // Undeclared exception!
      try { 
        range2.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4319130390333084
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(4294967295L);
      long long0 = 0L;
      List<Range> list0 = range0.split(4294967295L);
      range0.complementFrom(list0);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.CoordinateSystem.values();
      range_Builder4.build();
      Range.Builder range_Builder6 = null;
      try {
        range_Builder6 = new Range.Builder(0L, (-769L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3490702789476865
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.ofLength(228L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      range0.getBegin(range_CoordinateSystem1);
      range0.spliterator();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 65535L);
      assertFalse(range1.isEmpty());
      
      range0.complementFrom(linkedList1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, 0L, 0L);
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(65535L, 65535L);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1859694567377
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 31L;
      List<Range> list0 = range0.split(long1);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      // Undeclared exception!
      range0.complementFrom(list0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.385013668471282
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1100L, 1100L);
      Range range1 = Range.of(9223372036854775807L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(4294967295L);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder((-866L), 27L);
      Range.of(65535L, 9223372036854775807L);
      range0.intersection(range1);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.438172327600384
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range1.getEnd();
      range1.getEnd(range_CoordinateSystem0);
      Object object0 = new Object();
      range1.equals((Object) null);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.4734141007120543
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.of(4242L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 225L, 1648L);
      Range range1 = Range.of(range_CoordinateSystem0, 93L, 1648L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range2 = range_Builder0.build();
      Range.of(range_CoordinateSystem0, 4242L, 4242L);
      Range.Builder range_Builder1 = new Range.Builder(1648L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 93L, 1086L);
      range2.getLength();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.002697432380181
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long0 = 2147483647L;
      range_Builder0.expandEnd(2147483647L);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.485194621096292
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.of(0L);
      Range range1 = Range.of(0L);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      Range.of((-963L));
      long long1 = 4294967295L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.4226968954175097
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(4242L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals(4242L, long0);
      
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 4242L, 4242L);
      Range range1 = range_Builder1.build();
      range0.getEnd();
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 666L, 2002L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem2, 892L, 2147483647L);
      boolean boolean0 = range1.endsBefore(range2);
      Range.CoordinateSystem.values();
      boolean boolean1 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6737321356256936
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      boolean boolean0 = range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-2639L), (-2639L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString();
      Range.parseRange("[ 0 .. 2226 ]/0B", range_CoordinateSystem0);
      boolean boolean1 = range0.isSubRangeOf(range3);
      assertFalse(boolean1 == boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      range1.getEnd();
      range0.endsBefore(range2);
      String string0 = range0.toString();
      assertEquals("[ 0 .. 2226 ]/0B", string0);
      
      Range range4 = range1.intersection(range3);
      assertFalse(range4.isEmpty());
      assertSame(range3, range4);
      
      Range.Builder range_Builder0 = new Range.Builder(4462L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(2090L);
      range_Builder1.copy();
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.expandEnd(2090L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, 4462L, 9223372036854775807L);
      long long0 = range5.getLength();
      assertEquals(9223372036854771346L, long0);
      
      String string1 = range1.toString();
      assertEquals("[ -2639 .. 2090 ]/0B", string1);
      
      boolean boolean2 = range1.isEmpty();
      assertFalse(boolean2 == boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.2797555608916915
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.ofLength(0L);
      Range range1 = Range.of(0L);
      range0.getEnd();
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-5L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1163249828002093
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(4398L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4398L, (-1002L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.246802689847489
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      boolean boolean1 = range1.endsBefore(range2);
      assertFalse(boolean1);
      
      Range.CoordinateSystem.values();
      boolean boolean2 = range2.isSubRangeOf(range0);
      assertFalse(boolean2 == boolean0);
      assertSame(range2, range1);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.5723829101883258
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147483647L);
      Range.of(1399L, 1399L);
      range0.getBegin();
      Range range1 = Range.ofLength(9223372036854710273L);
      Range.of(1399L, 9223372036854710273L);
      Long long0 = new Long(2147483647L);
      range_Builder0.copy();
      range0.isSubRangeOf(range1);
      Range.Builder range_Builder2 = new Range.Builder(9223372036854710273L);
      assertFalse(range_Builder2.equals((Object)range_Builder1));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.024695553858248
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3663L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd((-505L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3807911020021515
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      List<Range> list0 = range0.complement(range0);
      range0.complementFrom(list0);
      long long0 = (-1391L);
      Range.Builder range_Builder0 = new Range.Builder(0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem.values();
      long long1 = (-362L);
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-332L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.113242788007547
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      long long0 = 2090L;
      Range.of(2147483647L);
      Object object0 = new Object();
      long long1 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem.values();
      long long2 = (-362L);
      long long3 = 2858L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2858L, (-362L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2251239151026967
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 0L;
      Range range0 = Range.of(0L, 4294967295L);
      range0.getBegin();
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-2842L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2842 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5022154112049435
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      long long0 = 2227L;
      Range range0 = Range.ofLength(2227L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range.of((-2148L), (-288L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2090L, (-1828L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.507075761656096
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range range2 = range_Builder0.build();
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 0L, 65535L);
      range2.intersects(range3);
      Object object0 = new Object();
      range1.equals(range0);
      long long0 = (-812L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-1L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, (-1L), (-812L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3291272259690046
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      boolean boolean1 = range1.endsBefore(range2);
      Range.CoordinateSystem.values();
      boolean boolean2 = range2.isSubRangeOf(range0);
      assertTrue(boolean2 == boolean1);
      assertSame(range0, range1);
      assertFalse(range0.isEmpty());
      assertFalse(boolean2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3647768933000752
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(4242L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(4890L);
      range_Builder1.contractEnd(4890L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 707L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4243L, 707L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.280685526067927
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2820L), (-2820L));
      Range.Builder range_Builder0 = new Range.Builder((-452L), 4243L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(range_CoordinateSystem0, 127L, 1678L);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 65535L, 4243L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.267852597587863
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      boolean boolean1 = range1.intersects(range0);
      Range.CoordinateSystem.values();
      boolean boolean2 = range2.isSubRangeOf(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.252053506674928
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2820L), (-2820L));
      long long0 = 4243L;
      Range.Builder range_Builder0 = new Range.Builder((-452L), 4243L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(range_CoordinateSystem0, 127L, 1678L);
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      range1.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.spliterator();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 9223372036854775807L, (-2820L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2820 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2345607650087613
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.223530831983023
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(3100L);
      Range range0 = Range.of(1L, 1296L);
      range0.getLength();
      range_Builder1.copy();
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.0679446281342657
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(228L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = new Long(891);
      linkedList0.add(range0);
      Range range1 = Range.of(228L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.spliterator();
      range1.getBegin(range_CoordinateSystem1);
      range1.spliterator();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, (long) 891, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.629352249284675
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range range2 = range_Builder0.build();
      long long0 = range2.getEnd();
      assertEquals((-1L), long0);
      
      range2.getEnd(range_CoordinateSystem0);
      range_Builder0.expandBegin(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, (-1L), 0L);
      range0.intersects(range2);
      Object object0 = new Object();
      Range range4 = Range.of(36910L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range5 = range4.intersection(range3);
      assertSame(range5, range2);
      assertFalse(range4.isEmpty());
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.2087510476251255
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.split(65535L);
      Long long0 = new Long(65535L);
      range0.equals(long0);
      long long1 = 120L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 153L, 120L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0099893251213605
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.of(2147483647L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(2147483647L);
      range_Builder0.build();
      long long0 = 27L;
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(27L, (-852L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.5980154670834077
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.ofLength(2223L);
      Range range1 = Range.of((-2639L), 2090L);
      range1.iterator();
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of((-2639L), (-2639L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.intersects(range1);
      range3.forEach(consumer0);
      range2.equals(range3);
      long long0 = 2147483647L;
      Range.of(2090L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7088107840613076
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.of(65535L);
      Range range2 = Range.of(1243L);
      range2.startsBefore(range1);
      range2.endsBefore(range1);
      long long0 = (-2639L);
      Range.of(range_CoordinateSystem0, (-2639L), 1243L);
      Object object0 = new Object();
      range2.equals(range_Builder0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("jS*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.jS*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.7706059220061032
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1648L, 1648L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1481L), 9223372036854773718L);
      range0.complement(range1);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      Range.of(range_CoordinateSystem0, 93L, 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(1L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-2444L), 65535L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.1500031304926344
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(1L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.ofLength(1L);
      long long0 = 0L;
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.206929430018758
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3663L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.ofLength(0L);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Range.CoordinateSystem.values();
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 0L, (-166L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(")#!5TGRE,;Uv%^,XH$", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse )#!5TGRE,;Uv%^,XH$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.223530831983023
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(3100L);
      Range range0 = Range.of(1L, 1296L);
      long long0 = range0.getLength();
      assertEquals(1296L, long0);
      
      range_Builder1.copy();
      boolean boolean0 = range0.isSubRangeOf(range0);
      boolean boolean1 = range0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.711861497343015
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      range0.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = range_Builder0.build();
      range1.getEnd();
      range0.getBegin();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1L), 65535L);
      range2.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range2.getBegin(range_CoordinateSystem1);
      range2.spliterator();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-65536L), (-1L));
      range0.complementFrom(linkedList0);
      Range.of(65535L);
      range1.intersection(range0);
      Range range3 = Range.of(range_CoordinateSystem2, 1201L, 1968L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.269274168528681
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range0 = Range.of((-795L));
      range0.intersection(range0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-795L), 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(2147483647L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 127L, 2007L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5724263695536775
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(0L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 1107L, 1107L);
      Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      range1.complement(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(0L, 4294967295L);
      range_Builder1.expandEnd(2176L);
      Range range2 = range_Builder0.build();
      List<Range> list0 = range0.complement(range2);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.1917119917198735
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 2464L;
      long long1 = 2147483647L;
      Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range.of((-795L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, (-795L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.1527067166833547
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.1527067166833547
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.ofLength(228L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.spliterator();
      range1.getBegin(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2212L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 2212L, (-812L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.60901852350601
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of(2464L);
      long long0 = range0.getBegin();
      assertEquals(2464L, long0);
      
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2464L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.spliterator();
      long long1 = range1.getBegin(range_CoordinateSystem1);
      assertEquals(0L, long1);
      
      range0.spliterator();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range range2 = Range.ofLength(0L);
      List<Range> list0 = range1.complementFrom(linkedList0);
      assertTrue(list0.isEmpty());
      
      Range.of(819L);
      Range range3 = Range.of(4294967295L);
      Range range4 = range3.intersection(range0);
      assertSame(range4, range2);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.2153092085189257
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(3100L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 3100L, 8589934576L);
      Range.of(4294967280L);
      // Undeclared exception!
      try { 
        Range.of(3100L, 277L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.7792468278703737
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range range1 = Range.of(424L);
      List<Range> list0 = range0.complement(range1);
      range0.equals("(d+)s*..s*(d+)");
      range0.toString(range_CoordinateSystem0);
      range_CoordinateSystem0.toString();
      Range range2 = Range.of(range_CoordinateSystem0, (-2602L), 2508L);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(2, list1.size());
      
      Range range3 = Range.of(4696L);
      Range range4 = range0.intersection(range1);
      assertFalse(range4.equals((Object)range3));
      assertSame(range4, range1);
      
      range2.asRange();
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.202850919381675
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1L);
      range0.equals("r");
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin(766L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.45630052572757
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 424L;
      Range.of(424L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 255L, 424L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder4);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem2, (-128L), 255L);
      range1.equals(range_CoordinateSystem0);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 65533L, 899L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.6536734788492695
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range range1 = Range.of(424L);
      range0.complement(range1);
      range0.equals("(d+)s*..s*(d+)");
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 3287L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2147483647L;
      long long2 = (-32768L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 2147483647L, (-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.0052974028533725
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1L);
      Range.of(range_CoordinateSystem0, (-1L), 4294967295L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775545L, 32766L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.4001489161702425
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandEnd(2147483647L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.CoordinateSystem.values();
      range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder(127L, 127L);
      // Undeclared exception!
      try { 
        Range.of(1307L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.403838900134269
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-25L), 0L);
      long long0 = 9223372036854774994L;
      range0.split(9223372036854774994L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long1 = (-1L);
      Range range1 = Range.of((-1L));
      range1.equals("");
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.contractBegin((-1L));
      range_Builder2.expandBegin((-2147483649L));
      Range.Builder range_Builder3 = new Range.Builder((-2147483648L), (-1228L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      Range.Builder range_Builder5 = null;
      try {
        range_Builder5 = new Range.Builder(0L, (-134L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.574227460307607
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(3100L);
      Range range0 = Range.of(1L, 1296L);
      range0.getLength();
      range_Builder1.copy();
      range0.isSubRangeOf(range0);
      Range range1 = Range.ofLength(1296L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      range1.complement(range0);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("number of entries must be <= Integer.MAX_VALUE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.number of entries must be <= Integer.MAX_VALUE
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.248491018360707
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 0L;
      long long1 = (-2820L);
      Range.of((-2820L), (-2820L));
      Range.Builder range_Builder0 = new Range.Builder(0L, 4243L);
      range_Builder0.expandEnd(4243L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 675L, (-2820L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3280794197512575
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.intersects(range0);
      Range range2 = Range.of(0L);
      boolean boolean1 = range2.startsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      range0.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      range_Builder0.expandEnd(0L);
      boolean boolean2 = range2.endsBefore(range3);
      assertFalse(boolean2);
      assertSame(range3, range2);
      
      Range range4 = Range.ofLength(0L);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.1686218118634186
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = range_Builder1.expandEnd(3104L);
      Range range0 = Range.of(1L, 1296L);
      Long long0 = new Long(1L);
      range_Builder1.copy();
      range0.intersects(range0);
      Range.Builder range_Builder3 = new Range.Builder(1L);
      assertFalse(range_Builder3.equals((Object)range_Builder2));
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.353578151509889
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-795L));
      Range range1 = Range.of((-659L), 2147483647L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range1.intersects(range0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.2088639712932867
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-2147483648L), 65534L);
      long long0 = (-2820L);
      Range.of(range_CoordinateSystem0, (-2820L), (-2820L));
      long long1 = 9223372036854775806L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775806L, (-786L));
      long long2 = (-4902L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd((-2820L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.1732890029841396
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-3262L), 2147483647L);
      Range.of((-795L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(997L, (-3262L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.522369277302713
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 32767L;
      Range.of(range_CoordinateSystem0, (-2147483648L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-25L), (-25L));
      Range.of(32767L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.spliterator();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2178L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.4184220327926735
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(228L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.getBegin();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.spliterator();
      range1.getBegin(range_CoordinateSystem2);
      range1.spliterator();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.of(range_CoordinateSystem0, 814L, 65535L);
      range0.complementFrom(linkedList1);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, (-1269L), (-788L));
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1227L, 1227L);
      range_Builder0.copy();
      range_Builder0.copy();
      range_Builder0.expandEnd((-2051L));
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.9669434861893547
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      range_Builder0.shift(65534L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandBegin(255L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.426713544197771
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.expandEnd(3104L);
      Range.of(1L, 1296L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-1L), 1296L);
      Range.Builder range_Builder2 = new Range.Builder(4731L);
      Range.of(range_CoordinateSystem0, (-826L), 1146L);
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        Range.parseRange("4ZnDuII7D]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 4ZnDuII7D] into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0594891092421146
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1677L), 0L);
      Range.of((-1677L), 0L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2874L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3025850929940455
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(4294967295L, 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.expandEnd(0L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-1075L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.265070250112381
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 32767L;
      Range.of(range_CoordinateSystem0, (-390L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-25L), (-25L));
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2178L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.076418361127119
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1227L, 1227L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder0.expandEnd(1227L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range0 = Range.of(9223372036854775200L, 9223372036854775200L);
      List<Range> list0 = range0.split(1561L);
      assertTrue(list0.contains(range0));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        range0.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.3114234446919735
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.expandEnd((-2523L));
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.0228511401600344
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 2460L);
      Range range0 = Range.of(4294967296L);
      assertFalse(range0.isEmpty());
      
      Range range1 = range_Builder0.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.973485631159138
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2464L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long0 = (-795L);
      range0.getEnd(range_CoordinateSystem0);
      range0.equals(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 40L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.249005655821443
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2464L);
      Range range1 = Range.of(2464L);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.5057188940535595
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      List<Range> list0 = range0.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range0));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Object object0 = new Object();
      Range range2 = Range.of(range_CoordinateSystem1, (-812L), (-310L));
      Range range3 = range2.intersection(range0);
      assertTrue(range3.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.5909947422074526
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, 263L, 1344L);
      List<Range> list0 = range1.complement(range3);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range4 = range_Builder0.build();
      assertSame(range4, range2);
      
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem2, 1344L, 1344L);
      Range.Builder range_Builder1 = new Range.Builder(626L);
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem5 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem5, (-996L), 0L);
      Range range6 = Range.of(range_CoordinateSystem4, 0L, 1562L);
      Range range7 = range5.intersection(range6);
      assertSame(range5, range7);
      
      Range range8 = Range.of(range_CoordinateSystem3, 0L, 1344L);
      boolean boolean0 = range0.endsBefore(range8);
      assertFalse(boolean0);
      
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.453575999325707
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of(range_CoordinateSystem0, (-1L), 3100L);
      List<Range> list0 = range0.complement(range1);
      assertEquals(0, list0.size());
      
      Range.Builder range_Builder1 = new Range.Builder();
      Range.Builder range_Builder2 = new Range.Builder(0L, 3100L);
      range_Builder0.expandEnd((-1L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-1476L), (-1476L));
      Range.Builder range_Builder3 = new Range.Builder(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem2, (-1L), 3100L);
      Range range4 = range2.intersection(range3);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.5747838805954104
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.of(4242L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-390L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1525L, 1525L);
      List<Range> list0 = range1.complement(range2);
      assertEquals(2, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range range3 = range_Builder0.build();
      assertTrue(range3.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-390L), (-390L));
      Range.Builder range_Builder1 = new Range.Builder(65534L);
      Range.of(range_CoordinateSystem0, 65534L, 4294967295L);
      Range range4 = range0.intersection(range1);
      assertSame(range4, range0);
      assertNotSame(range4, range2);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.2391737324834824
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 32767L;
      Range range0 = Range.of(range_CoordinateSystem0, (-390L), 32767L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-3517L), 0L);
      Range range1 = Range.of(32767L);
      range1.startsBefore(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-1894L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 4294967295L, (-1894L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.169394313542979
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, (-1L));
      boolean boolean1 = range1.endsBefore(range2);
      Range.CoordinateSystem.values();
      boolean boolean2 = range2.isSubRangeOf(range0);
      assertFalse(boolean2 == boolean1);
      assertSame(range2, range1);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.3108223600053153
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-2147483640L));
      Range range1 = Range.of(255L, 255L);
      range1.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2414531079893774
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of((-795L));
      Range range2 = range1.intersection(range1);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.4741632229736443
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2464L, 2147483647L);
      Range range1 = Range.of((-795L));
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.1990901759676316
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 3663L);
      Range.of((-128L), 145L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.2818590477739353
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-4500L), (-96L));
      Range range0 = Range.of(814L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(4294967295L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.249006789420284
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      long long0 = (-866L);
      Range.of((-866L));
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.build();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(39L, (-852L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }
}
